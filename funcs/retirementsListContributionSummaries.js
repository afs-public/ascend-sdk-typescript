/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import { APIPromise } from "../types/async.js";
import { createPageIterator, haltIterator, } from "../types/operations.js";
/**
 * List Contribution Summaries
 *
 * @remarks
 * Lists the aggregated retirement contribution summaries by tax year
 */
export function retirementsListContributionSummaries(client, accountId, pageSize, pageToken, options) {
    return new APIPromise($do(client, accountId, pageSize, pageToken, options));
}
async function $do(client, accountId, pageSize, pageToken, options) {
    const input = {
        accountId: accountId,
        pageSize: pageSize,
        pageToken: pageToken,
    };
    const parsed = safeParse(input, (value) => operations
        .RetirementConstraintsListContributionSummariesRequest$outboundSchema
        .parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [haltIterator(parsed), { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        account_id: encodeSimple("account_id", payload.account_id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path = pathToFunc("/transfers/v1/accounts/{account_id}/contributionSummaries")(pathParams);
    const query = encodeFormQuery({
        "page_size": payload.page_size,
        "page_token": payload.page_token,
    });
    const headers = new Headers(compactMap({
        Accept: "application/json",
    }));
    const securityInput = await extractSecurity(client._options.security);
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        options: client._options,
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "RetirementConstraints_ListContributionSummaries",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 500,
                    maxInterval: 5000,
                    exponent: 1.5,
                    maxElapsedTime: 15000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["4XX", "5XX"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        userAgent: client._options.userAgent,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [haltIterator(requestRes), { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "403", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [haltIterator(doResult), { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result, raw] = await M.match(M.json(200, operations
        .RetirementConstraintsListContributionSummariesResponse$inboundSchema, { key: "ListContributionSummariesResponse" }), M.jsonErr([400, 403], errors.Status$inboundSchema), M.fail("4XX"), M.fail("5XX"), M.json("default", operations
        .RetirementConstraintsListContributionSummariesResponse$inboundSchema, { key: "Status" }))(response, req, { extraFields: responseFields });
    if (!result.ok) {
        return [haltIterator(result), {
                status: "complete",
                request: req,
                response,
            }];
    }
    const nextFunc = (responseData) => {
        const nextCursor = dlv(responseData, "next_page_token");
        if (typeof nextCursor !== "string") {
            return { next: () => null };
        }
        if (nextCursor.trim() === "") {
            return { next: () => null };
        }
        const nextVal = () => retirementsListContributionSummaries(client, accountId, pageSize, nextCursor, options);
        return { next: nextVal, "~next": { cursor: nextCursor } };
    };
    const page = { ...result, ...nextFunc(raw) };
    return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
            status: "complete",
            request: req,
            response,
        }];
}
//# sourceMappingURL=retirementsListContributionSummaries.js.map