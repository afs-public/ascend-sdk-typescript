/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { encodeFormQuery, encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import { APIPromise } from "../types/async.js";
/**
 * Update Legal Entity
 *
 * @remarks
 * Updates a Legal Entity.
 */
export function personManagementUpdateLegalEntity(client, legalEntityUpdate, legalEntityId, updateMask, options) {
    return new APIPromise($do(client, legalEntityUpdate, legalEntityId, updateMask, options));
}
async function $do(client, legalEntityUpdate, legalEntityId, updateMask, options) {
    const input = {
        legalEntityUpdate: legalEntityUpdate,
        legalEntityId: legalEntityId,
        updateMask: updateMask,
    };
    const parsed = safeParse(input, (value) => operations.AccountsUpdateLegalEntityRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = encodeJSON("body", payload.LegalEntityUpdate, { explode: true });
    const pathParams = {
        legalEntity_id: encodeSimple("legalEntity_id", payload.legalEntity_id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path = pathToFunc("/accounts/v1/legalEntities/{legalEntity_id}")(pathParams);
    const query = encodeFormQuery({
        "update_mask": payload.update_mask,
    });
    const headers = new Headers(compactMap({
        "Content-Type": "application/json",
        Accept: "application/json",
    }));
    const securityInput = await extractSecurity(client._options.security);
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        options: client._options,
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "Accounts_UpdateLegalEntity",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 500,
                    maxInterval: 5000,
                    exponent: 1.5,
                    maxElapsedTime: 15000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["4XX", "5XX"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        userAgent: client._options.userAgent,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "403", "404", "4XX", "500", "503", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json(200, operations.AccountsUpdateLegalEntityResponse$inboundSchema, {
        key: "LegalEntity",
    }), M.jsonErr([400, 403, 404], errors.Status$inboundSchema), M.jsonErr([500, 503], errors.Status$inboundSchema), M.fail("4XX"), M.fail("5XX"), M.json("default", operations.AccountsUpdateLegalEntityResponse$inboundSchema, { key: "Status" }))(response, req, { extraFields: responseFields });
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=personManagementUpdateLegalEntity.js.map