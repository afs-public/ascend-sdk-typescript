/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ApexascendCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { ApexascendError } from "../models/errors/apexascenderror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Rebook Trade Allocation
 *
 * @remarks
 * Rebook a trade allocation by the original trade_allocation_id. The allocation is rebooked by canceling the original allocation and creating a new one with the provided details.
 *
 *  Upon successful submission, returns both the original and new allocation, as separate resources.
 */
export function tradeAllocationRebookTradeAllocation(
  client: ApexascendCore,
  rebookTradeAllocationRequestCreate:
    components.RebookTradeAllocationRequestCreate,
  accountId: string,
  tradeAllocationId: string,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.BookingRebookTradeAllocationResponse,
    | errors.Status
    | ApexascendError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    rebookTradeAllocationRequestCreate,
    accountId,
    tradeAllocationId,
    options,
  ));
}

async function $do(
  client: ApexascendCore,
  rebookTradeAllocationRequestCreate:
    components.RebookTradeAllocationRequestCreate,
  accountId: string,
  tradeAllocationId: string,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.BookingRebookTradeAllocationResponse,
      | errors.Status
      | ApexascendError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const input: operations.BookingRebookTradeAllocationRequest = {
    rebookTradeAllocationRequestCreate: rebookTradeAllocationRequestCreate,
    accountId: accountId,
    tradeAllocationId: tradeAllocationId,
  };

  const parsed = safeParse(
    input,
    (value) =>
      operations.BookingRebookTradeAllocationRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RebookTradeAllocationRequestCreate, {
    explode: true,
  });

  const pathParams = {
    account_id: encodeSimple("account_id", payload.account_id, {
      explode: false,
      charEncoding: "percent",
    }),
    tradeAllocation_id: encodeSimple(
      "tradeAllocation_id",
      payload.tradeAllocation_id,
      { explode: false, charEncoding: "percent" },
    ),
  };

  const path = pathToFunc(
    "/booking/v1/accounts/{account_id}/tradeAllocations/{tradeAllocation_id}:rebook",
  )(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "Booking_RebookTradeAllocation",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "403", "404", "4XX", "500", "503", "504", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.BookingRebookTradeAllocationResponse,
    | errors.Status
    | ApexascendError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.BookingRebookTradeAllocationResponse$inboundSchema, {
      key: "RebookTradeAllocationResponse",
    }),
    M.jsonErr([400, 403, 404], errors.Status$inboundSchema),
    M.jsonErr([500, 503, 504], errors.Status$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
    M.json(
      "default",
      operations.BookingRebookTradeAllocationResponse$inboundSchema,
      { key: "Status" },
    ),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
