/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ApexascendCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { ApexascendError } from "../models/errors/apexascenderror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../types/operations.js";

/**
 * List ACH Withdrawal Schedules
 *
 * @remarks
 * Return a list of ACH withdrawal schedules for the specified account and filter params
 */
export function scheduleTransfersListAchWithdrawalSchedules(
  client: ApexascendCore,
  accountId: string,
  filter?: string | undefined,
  pageSize?: number | undefined,
  pageToken?: string | undefined,
  options?: RequestOptions,
): APIPromise<
  PageIterator<
    Result<
      operations.AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse,
      | errors.Status
      | ApexascendError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    { cursor: string }
  >
> {
  return new APIPromise($do(
    client,
    accountId,
    filter,
    pageSize,
    pageToken,
    options,
  ));
}

async function $do(
  client: ApexascendCore,
  accountId: string,
  filter?: string | undefined,
  pageSize?: number | undefined,
  pageToken?: string | undefined,
  options?: RequestOptions,
): Promise<
  [
    PageIterator<
      Result<
        operations.AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse,
        | errors.Status
        | ApexascendError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >,
      { cursor: string }
    >,
    APICall,
  ]
> {
  const input:
    operations.AchWithdrawalSchedulesListAchWithdrawalSchedulesRequest = {
      accountId: accountId,
      filter: filter,
      pageSize: pageSize,
      pageToken: pageToken,
    };

  const parsed = safeParse(
    input,
    (value) =>
      operations
        .AchWithdrawalSchedulesListAchWithdrawalSchedulesRequest$outboundSchema
        .parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [haltIterator(parsed), { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    account_id: encodeSimple("account_id", payload.account_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/transfers/v1/accounts/{account_id}/achWithdrawalSchedules",
  )(pathParams);

  const query = encodeFormQuery({
    "filter": payload.filter,
    "page_size": payload.page_size,
    "page_token": payload.page_token,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "AchWithdrawalSchedules_ListAchWithdrawalSchedules",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 5000,
          exponent: 1.5,
          maxElapsedTime: 15000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["4XX", "5XX"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [haltIterator(requestRes), { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "403", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [haltIterator(doResult), { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result, raw] = await M.match<
    operations.AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse,
    | errors.Status
    | ApexascendError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(
      200,
      operations
        .AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse$inboundSchema,
      { key: "ListAchWithdrawalSchedulesResponse" },
    ),
    M.jsonErr([400, 403], errors.Status$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
    M.json(
      "default",
      operations
        .AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse$inboundSchema,
      { key: "Status" },
    ),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [haltIterator(result), {
      status: "complete",
      request: req,
      response,
    }];
  }

  const nextFunc = (
    responseData: unknown,
  ): {
    next: Paginator<
      Result<
        operations.AchWithdrawalSchedulesListAchWithdrawalSchedulesResponse,
        | errors.Status
        | ApexascendError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >
    >;
    "~next"?: { cursor: string };
  } => {
    const nextCursor = dlv(responseData, "next_page_token");
    if (typeof nextCursor !== "string") {
      return { next: () => null };
    }
    if (nextCursor.trim() === "") {
      return { next: () => null };
    }

    const nextVal = () =>
      scheduleTransfersListAchWithdrawalSchedules(
        client,
        accountId,
        filter,
        pageSize,
        nextCursor,
        options,
      );

    return { next: nextVal, "~next": { cursor: nextCursor } };
  };

  const page = { ...result, ...nextFunc(raw) };
  return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
    status: "complete",
    request: req,
    response,
  }];
}
