/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../models/components/index.js";
import { HTTPClient } from "./http.js";
import { Logger } from "./logger.js";
import { RetryConfig } from "./retries.js";
import { Params, pathToFunc } from "./url.js";

/**
 * our uat environment
 */
export const ServerUat = "uat";
/**
 * our production environment
 */
export const ServerProd = "prod";
/**
 * our sandbox environment
 */
export const ServerSbx = "sbx";
/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = {
  [ServerUat]: "https://uat.apexapis.com",
  [ServerProd]: "https://api.apexapis.com",
  [ServerSbx]: "https://sbx.apexapis.com",
} as const;

export type SDKOptions = {
  /**
   * The security details required to authenticate the SDK
   */
  security?:
    | components.Security
    | (() => Promise<components.Security>)
    | undefined;

  httpClient?: HTTPClient;
  /**
   * Allows overriding the default server used by the SDK
   */
  server?: keyof typeof ServerList | undefined;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string | undefined;
  /**
   * Allows overriding the default user agent used by the SDK
   */
  userAgent?: string | undefined;
  /**
   * Allows overriding the default retry config used by the SDK
   */
  retryConfig?: RetryConfig;
  timeoutMs?: number;
  debugLogger?: Logger;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
  let serverURL = options.serverURL;

  const params: Params = {};

  if (!serverURL) {
    const server = options.server ?? ServerUat;
    serverURL = ServerList[server] || "";
  }

  const u = pathToFunc(serverURL)(params);
  return new URL(u);
}

export const SDK_METADATA = {
  language: "typescript",
  openapiDocVersion: "v1:20250916:uat:415b21f7a6e1",
  sdkVersion: "1.7.0",
  genVersion: "2.691.6",
  userAgent:
    "speakeasy-sdk/typescript 1.7.0 2.691.6 v1:20250916:uat:415b21f7a6e1 @apexfintechsolutions/ascend-sdk",
} as const;
