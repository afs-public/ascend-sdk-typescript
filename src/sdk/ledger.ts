/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ledgerGetActivity } from "../funcs/ledgerGetActivity.js";
import { ledgerGetEntry } from "../funcs/ledgerGetEntry.js";
import { ledgerListActivities } from "../funcs/ledgerListActivities.js";
import { ledgerListEntries } from "../funcs/ledgerListEntries.js";
import { ledgerListPositions } from "../funcs/ledgerListPositions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Ledger extends ClientSDK {
  /**
   * List Entries
   *
   * @remarks
   * List all Entries based on a filter
   */
  async listEntries(
    accountId: string,
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.LedgerListEntriesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ledgerListEntries(
      this,
      accountId,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * List Activities
   *
   * @remarks
   * List all Completed Activities based on a filter
   */
  async listActivities(
    accountId: string,
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.LedgerListActivitiesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ledgerListActivities(
      this,
      accountId,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * List Positions
   *
   * @remarks
   * List positions based on a filter
   */
  async listPositions(
    accountId: string,
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.LedgerListPositionsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ledgerListPositions(
      this,
      accountId,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * Get Activity
   *
   * @remarks
   * Get an activity
   */
  async getActivity(
    accountId: string,
    activityId: string,
    options?: RequestOptions,
  ): Promise<operations.LedgerGetActivityResponse> {
    return unwrapAsync(ledgerGetActivity(
      this,
      accountId,
      activityId,
      options,
    ));
  }

  /**
   * Get Entry
   *
   * @remarks
   * Get an entry
   */
  async getEntry(
    accountId: string,
    entryId: string,
    options?: RequestOptions,
  ): Promise<operations.LedgerGetEntryResponse> {
    return unwrapAsync(ledgerGetEntry(
      this,
      accountId,
      entryId,
      options,
    ));
  }
}
