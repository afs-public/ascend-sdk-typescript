/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetExtraReportingDataRequestCreate = {
  cancelConfirmedTime: Date | null;
  /**
   * Format: accounts/{account_id}/orders/{order_id}
   */
  name: string;
};

/** @internal */
export const SetExtraReportingDataRequestCreate$inboundSchema: z.ZodType<
  SetExtraReportingDataRequestCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  cancel_confirmed_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "cancel_confirmed_time": "cancelConfirmedTime",
  });
});

/** @internal */
export type SetExtraReportingDataRequestCreate$Outbound = {
  cancel_confirmed_time: string | null;
  name: string;
};

/** @internal */
export const SetExtraReportingDataRequestCreate$outboundSchema: z.ZodType<
  SetExtraReportingDataRequestCreate$Outbound,
  z.ZodTypeDef,
  SetExtraReportingDataRequestCreate
> = z.object({
  cancelConfirmedTime: z.nullable(z.date().transform(v => v.toISOString())),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    cancelConfirmedTime: "cancel_confirmed_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetExtraReportingDataRequestCreate$ {
  /** @deprecated use `SetExtraReportingDataRequestCreate$inboundSchema` instead. */
  export const inboundSchema = SetExtraReportingDataRequestCreate$inboundSchema;
  /** @deprecated use `SetExtraReportingDataRequestCreate$outboundSchema` instead. */
  export const outboundSchema =
    SetExtraReportingDataRequestCreate$outboundSchema;
  /** @deprecated use `SetExtraReportingDataRequestCreate$Outbound` instead. */
  export type Outbound = SetExtraReportingDataRequestCreate$Outbound;
}

export function setExtraReportingDataRequestCreateToJSON(
  setExtraReportingDataRequestCreate: SetExtraReportingDataRequestCreate,
): string {
  return JSON.stringify(
    SetExtraReportingDataRequestCreate$outboundSchema.parse(
      setExtraReportingDataRequestCreate,
    ),
  );
}

export function setExtraReportingDataRequestCreateFromJSON(
  jsonString: string,
): SafeParseResult<SetExtraReportingDataRequestCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SetExtraReportingDataRequestCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetExtraReportingDataRequestCreate' from JSON`,
  );
}
