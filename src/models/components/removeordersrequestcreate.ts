/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The message to remove a list of basket orders by client order ID.
 */
export type RemoveOrdersRequestCreate = {
  /**
   * The client order IDs of the basket orders to remove. A maximum of 500 orders can be removed from a basket at a time.
   */
  clientOrderIds: Array<string>;
  /**
   * Format: correspondents/{correspondent}/baskets/{basket}
   */
  name: string;
};

/** @internal */
export const RemoveOrdersRequestCreate$inboundSchema: z.ZodType<
  RemoveOrdersRequestCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_order_ids: z.array(z.string()),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "client_order_ids": "clientOrderIds",
  });
});

/** @internal */
export type RemoveOrdersRequestCreate$Outbound = {
  client_order_ids: Array<string>;
  name: string;
};

/** @internal */
export const RemoveOrdersRequestCreate$outboundSchema: z.ZodType<
  RemoveOrdersRequestCreate$Outbound,
  z.ZodTypeDef,
  RemoveOrdersRequestCreate
> = z.object({
  clientOrderIds: z.array(z.string()),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    clientOrderIds: "client_order_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveOrdersRequestCreate$ {
  /** @deprecated use `RemoveOrdersRequestCreate$inboundSchema` instead. */
  export const inboundSchema = RemoveOrdersRequestCreate$inboundSchema;
  /** @deprecated use `RemoveOrdersRequestCreate$outboundSchema` instead. */
  export const outboundSchema = RemoveOrdersRequestCreate$outboundSchema;
  /** @deprecated use `RemoveOrdersRequestCreate$Outbound` instead. */
  export type Outbound = RemoveOrdersRequestCreate$Outbound;
}

export function removeOrdersRequestCreateToJSON(
  removeOrdersRequestCreate: RemoveOrdersRequestCreate,
): string {
  return JSON.stringify(
    RemoveOrdersRequestCreate$outboundSchema.parse(removeOrdersRequestCreate),
  );
}

export function removeOrdersRequestCreateFromJSON(
  jsonString: string,
): SafeParseResult<RemoveOrdersRequestCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveOrdersRequestCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveOrdersRequestCreate' from JSON`,
  );
}
