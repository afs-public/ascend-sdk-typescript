/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The message to submit a basket for execution in the market
 */
export type SubmitBasketRequestCreate = {
  /**
   * Time the basket submission request was sent by the client. This is a required field for clients that we report on behalf of, and it will be validated accordingly.
   */
  clientBasketSubmitTime?: Date | null | undefined;
  /**
   * Format: correspondents/{correspondent}/baskets/{basket}
   */
  name: string;
};

/** @internal */
export const SubmitBasketRequestCreate$inboundSchema: z.ZodType<
  SubmitBasketRequestCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_basket_submit_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "client_basket_submit_time": "clientBasketSubmitTime",
  });
});

/** @internal */
export type SubmitBasketRequestCreate$Outbound = {
  client_basket_submit_time?: string | null | undefined;
  name: string;
};

/** @internal */
export const SubmitBasketRequestCreate$outboundSchema: z.ZodType<
  SubmitBasketRequestCreate$Outbound,
  z.ZodTypeDef,
  SubmitBasketRequestCreate
> = z.object({
  clientBasketSubmitTime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    clientBasketSubmitTime: "client_basket_submit_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitBasketRequestCreate$ {
  /** @deprecated use `SubmitBasketRequestCreate$inboundSchema` instead. */
  export const inboundSchema = SubmitBasketRequestCreate$inboundSchema;
  /** @deprecated use `SubmitBasketRequestCreate$outboundSchema` instead. */
  export const outboundSchema = SubmitBasketRequestCreate$outboundSchema;
  /** @deprecated use `SubmitBasketRequestCreate$Outbound` instead. */
  export type Outbound = SubmitBasketRequestCreate$Outbound;
}

export function submitBasketRequestCreateToJSON(
  submitBasketRequestCreate: SubmitBasketRequestCreate,
): string {
  return JSON.stringify(
    SubmitBasketRequestCreate$outboundSchema.parse(submitBasketRequestCreate),
  );
}

export function submitBasketRequestCreateFromJSON(
  jsonString: string,
): SafeParseResult<SubmitBasketRequestCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitBasketRequestCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitBasketRequestCreate' from JSON`,
  );
}
