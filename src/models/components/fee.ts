/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

/**
 * Monetary amount associated with the fee
 */
export type Amount = {
  /**
   * The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of fee being assessed
 */
export enum FeeType {
  FeeTypeUnspecified = "FEE_TYPE_UNSPECIFIED",
  ClientClearing = "CLIENT_CLEARING",
  Liquidity = "LIQUIDITY",
  GeneralPurpose = "GENERAL_PURPOSE",
  Commission = "COMMISSION",
  Orf = "ORF",
  Taf = "TAF",
  Sec = "SEC",
  AccountClosing = "ACCOUNT_CLOSING",
  AccountIra = "ACCOUNT_IRA",
  AchReturn = "ACH_RETURN",
  Advisory = "ADVISORY",
  CheckFee = "CHECK_FEE",
  Exchange = "EXCHANGE",
  Management = "MANAGEMENT",
  Overnight = "OVERNIGHT",
  Platform = "PLATFORM",
  Statement = "STATEMENT",
  StopPayment = "STOP_PAYMENT",
  WireFee = "WIRE_FEE",
  Inactivity = "INACTIVITY",
  AmaService = "AMA_SERVICE",
  NoticeOfChange = "NOTICE_OF_CHANGE",
  AccountTransfer = "ACCOUNT_TRANSFER",
  AgencyProcessing = "AGENCY_PROCESSING",
  RtpFee = "RTP_FEE",
  DomesticWireDepositFee = "DOMESTIC_WIRE_DEPOSIT_FEE",
  DomesticWireWithdrawalFee = "DOMESTIC_WIRE_WITHDRAWAL_FEE",
  InternationalWireDepositFee = "INTERNATIONAL_WIRE_DEPOSIT_FEE",
  InternationalWireWithdrawalFee = "INTERNATIONAL_WIRE_WITHDRAWAL_FEE",
  BrokerFee = "BROKER_FEE",
}
/**
 * The type of fee being assessed
 */
export type FeeTypeOpen = OpenEnum<typeof FeeType>;

export type Fee = {
  /**
   * Monetary amount associated with the fee
   */
  amount?: Amount | null | undefined;
  /**
   * The type of fee being assessed
   */
  type?: FeeTypeOpen | undefined;
};

/** @internal */
export const Amount$inboundSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z
  .object({
    value: z.string().optional(),
  });

/** @internal */
export type Amount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const Amount$outboundSchema: z.ZodType<
  Amount$Outbound,
  z.ZodTypeDef,
  Amount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount$ {
  /** @deprecated use `Amount$inboundSchema` instead. */
  export const inboundSchema = Amount$inboundSchema;
  /** @deprecated use `Amount$outboundSchema` instead. */
  export const outboundSchema = Amount$outboundSchema;
  /** @deprecated use `Amount$Outbound` instead. */
  export type Outbound = Amount$Outbound;
}

/** @internal */
export const FeeType$inboundSchema: z.ZodType<
  FeeTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FeeType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FeeType$outboundSchema: z.ZodType<
  FeeTypeOpen,
  z.ZodTypeDef,
  FeeTypeOpen
> = z.union([
  z.nativeEnum(FeeType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeeType$ {
  /** @deprecated use `FeeType$inboundSchema` instead. */
  export const inboundSchema = FeeType$inboundSchema;
  /** @deprecated use `FeeType$outboundSchema` instead. */
  export const outboundSchema = FeeType$outboundSchema;
}

/** @internal */
export const Fee$inboundSchema: z.ZodType<Fee, z.ZodTypeDef, unknown> = z
  .object({
    amount: z.nullable(z.lazy(() => Amount$inboundSchema)).optional(),
    type: FeeType$inboundSchema.optional(),
  });

/** @internal */
export type Fee$Outbound = {
  amount?: Amount$Outbound | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const Fee$outboundSchema: z.ZodType<Fee$Outbound, z.ZodTypeDef, Fee> = z
  .object({
    amount: z.nullable(z.lazy(() => Amount$outboundSchema)).optional(),
    type: FeeType$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fee$ {
  /** @deprecated use `Fee$inboundSchema` instead. */
  export const inboundSchema = Fee$inboundSchema;
  /** @deprecated use `Fee$outboundSchema` instead. */
  export const outboundSchema = Fee$outboundSchema;
  /** @deprecated use `Fee$Outbound` instead. */
  export type Outbound = Fee$Outbound;
}
