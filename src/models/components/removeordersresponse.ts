/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasketOrder,
  BasketOrder$inboundSchema,
  BasketOrder$Outbound,
  BasketOrder$outboundSchema,
} from "./basketorder.js";

/**
 * The response message for removing a list of basket orders by client order ID.
 */
export type RemoveOrdersResponse = {
  /**
   * The removed basket orders.
   */
  basketOrders?: Array<BasketOrder> | undefined;
  /**
   * Format: correspondents/{correspondent}/baskets/{basket}
   */
  name?: string | undefined;
};

/** @internal */
export const RemoveOrdersResponse$inboundSchema: z.ZodType<
  RemoveOrdersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  basket_orders: z.array(BasketOrder$inboundSchema).optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "basket_orders": "basketOrders",
  });
});

/** @internal */
export type RemoveOrdersResponse$Outbound = {
  basket_orders?: Array<BasketOrder$Outbound> | undefined;
  name?: string | undefined;
};

/** @internal */
export const RemoveOrdersResponse$outboundSchema: z.ZodType<
  RemoveOrdersResponse$Outbound,
  z.ZodTypeDef,
  RemoveOrdersResponse
> = z.object({
  basketOrders: z.array(BasketOrder$outboundSchema).optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    basketOrders: "basket_orders",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveOrdersResponse$ {
  /** @deprecated use `RemoveOrdersResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveOrdersResponse$inboundSchema;
  /** @deprecated use `RemoveOrdersResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveOrdersResponse$outboundSchema;
  /** @deprecated use `RemoveOrdersResponse$Outbound` instead. */
  export type Outbound = RemoveOrdersResponse$Outbound;
}

export function removeOrdersResponseToJSON(
  removeOrdersResponse: RemoveOrdersResponse,
): string {
  return JSON.stringify(
    RemoveOrdersResponse$outboundSchema.parse(removeOrdersResponse),
  );
}

export function removeOrdersResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveOrdersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveOrdersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveOrdersResponse' from JSON`,
  );
}
