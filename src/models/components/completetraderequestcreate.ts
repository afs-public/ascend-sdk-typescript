/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BookingFeeCreate,
  BookingFeeCreate$inboundSchema,
  BookingFeeCreate$Outbound,
  BookingFeeCreate$outboundSchema,
} from "./bookingfeecreate.js";

/**
 * A request for completing a trade.
 */
export type CompleteTradeRequestCreate = {
  /**
   * Client calculated fees to use while completing an existing trade.
   */
  fees?: Array<BookingFeeCreate> | undefined;
  /**
   * The name of the trade to complete.
   */
  name: string;
};

/** @internal */
export const CompleteTradeRequestCreate$inboundSchema: z.ZodType<
  CompleteTradeRequestCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  fees: z.array(BookingFeeCreate$inboundSchema).optional(),
  name: z.string(),
});

/** @internal */
export type CompleteTradeRequestCreate$Outbound = {
  fees?: Array<BookingFeeCreate$Outbound> | undefined;
  name: string;
};

/** @internal */
export const CompleteTradeRequestCreate$outboundSchema: z.ZodType<
  CompleteTradeRequestCreate$Outbound,
  z.ZodTypeDef,
  CompleteTradeRequestCreate
> = z.object({
  fees: z.array(BookingFeeCreate$outboundSchema).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeRequestCreate$ {
  /** @deprecated use `CompleteTradeRequestCreate$inboundSchema` instead. */
  export const inboundSchema = CompleteTradeRequestCreate$inboundSchema;
  /** @deprecated use `CompleteTradeRequestCreate$outboundSchema` instead. */
  export const outboundSchema = CompleteTradeRequestCreate$outboundSchema;
  /** @deprecated use `CompleteTradeRequestCreate$Outbound` instead. */
  export type Outbound = CompleteTradeRequestCreate$Outbound;
}

export function completeTradeRequestCreateToJSON(
  completeTradeRequestCreate: CompleteTradeRequestCreate,
): string {
  return JSON.stringify(
    CompleteTradeRequestCreate$outboundSchema.parse(completeTradeRequestCreate),
  );
}

export function completeTradeRequestCreateFromJSON(
  jsonString: string,
): SafeParseResult<CompleteTradeRequestCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteTradeRequestCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteTradeRequestCreate' from JSON`,
  );
}
