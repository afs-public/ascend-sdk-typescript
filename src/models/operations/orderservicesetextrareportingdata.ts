/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderServiceSetExtraReportingDataRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The order id.
   */
  orderId: string;
  setExtraReportingDataRequestCreate:
    components.SetExtraReportingDataRequestCreate;
};

export type OrderServiceSetExtraReportingDataResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  order?: components.Order | undefined;
  /**
   * INVALID_ARGUMENT: There was an issue with one or more fields in the request.  The message field will contain details about which field failed validation and why.
   *
   * @remarks
   * FAILED_PRECONDITION: The order is not in a state that allows extra reporting data to be set.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const OrderServiceSetExtraReportingDataRequest$inboundSchema: z.ZodType<
  OrderServiceSetExtraReportingDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  order_id: z.string(),
  SetExtraReportingDataRequestCreate:
    components.SetExtraReportingDataRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "order_id": "orderId",
    "SetExtraReportingDataRequestCreate": "setExtraReportingDataRequestCreate",
  });
});

/** @internal */
export type OrderServiceSetExtraReportingDataRequest$Outbound = {
  account_id: string;
  order_id: string;
  SetExtraReportingDataRequestCreate:
    components.SetExtraReportingDataRequestCreate$Outbound;
};

/** @internal */
export const OrderServiceSetExtraReportingDataRequest$outboundSchema: z.ZodType<
  OrderServiceSetExtraReportingDataRequest$Outbound,
  z.ZodTypeDef,
  OrderServiceSetExtraReportingDataRequest
> = z.object({
  accountId: z.string(),
  orderId: z.string(),
  setExtraReportingDataRequestCreate:
    components.SetExtraReportingDataRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    orderId: "order_id",
    setExtraReportingDataRequestCreate: "SetExtraReportingDataRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderServiceSetExtraReportingDataRequest$ {
  /** @deprecated use `OrderServiceSetExtraReportingDataRequest$inboundSchema` instead. */
  export const inboundSchema =
    OrderServiceSetExtraReportingDataRequest$inboundSchema;
  /** @deprecated use `OrderServiceSetExtraReportingDataRequest$outboundSchema` instead. */
  export const outboundSchema =
    OrderServiceSetExtraReportingDataRequest$outboundSchema;
  /** @deprecated use `OrderServiceSetExtraReportingDataRequest$Outbound` instead. */
  export type Outbound = OrderServiceSetExtraReportingDataRequest$Outbound;
}

export function orderServiceSetExtraReportingDataRequestToJSON(
  orderServiceSetExtraReportingDataRequest:
    OrderServiceSetExtraReportingDataRequest,
): string {
  return JSON.stringify(
    OrderServiceSetExtraReportingDataRequest$outboundSchema.parse(
      orderServiceSetExtraReportingDataRequest,
    ),
  );
}

export function orderServiceSetExtraReportingDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  OrderServiceSetExtraReportingDataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrderServiceSetExtraReportingDataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrderServiceSetExtraReportingDataRequest' from JSON`,
  );
}

/** @internal */
export const OrderServiceSetExtraReportingDataResponse$inboundSchema: z.ZodType<
  OrderServiceSetExtraReportingDataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Order: components.Order$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Order": "order",
    "Status": "status",
  });
});

/** @internal */
export type OrderServiceSetExtraReportingDataResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Order?: components.Order$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const OrderServiceSetExtraReportingDataResponse$outboundSchema:
  z.ZodType<
    OrderServiceSetExtraReportingDataResponse$Outbound,
    z.ZodTypeDef,
    OrderServiceSetExtraReportingDataResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    order: components.Order$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      order: "Order",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderServiceSetExtraReportingDataResponse$ {
  /** @deprecated use `OrderServiceSetExtraReportingDataResponse$inboundSchema` instead. */
  export const inboundSchema =
    OrderServiceSetExtraReportingDataResponse$inboundSchema;
  /** @deprecated use `OrderServiceSetExtraReportingDataResponse$outboundSchema` instead. */
  export const outboundSchema =
    OrderServiceSetExtraReportingDataResponse$outboundSchema;
  /** @deprecated use `OrderServiceSetExtraReportingDataResponse$Outbound` instead. */
  export type Outbound = OrderServiceSetExtraReportingDataResponse$Outbound;
}

export function orderServiceSetExtraReportingDataResponseToJSON(
  orderServiceSetExtraReportingDataResponse:
    OrderServiceSetExtraReportingDataResponse,
): string {
  return JSON.stringify(
    OrderServiceSetExtraReportingDataResponse$outboundSchema.parse(
      orderServiceSetExtraReportingDataResponse,
    ),
  );
}

export function orderServiceSetExtraReportingDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  OrderServiceSetExtraReportingDataResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrderServiceSetExtraReportingDataResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrderServiceSetExtraReportingDataResponse' from JSON`,
  );
}
