/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsDeactivateEnrollmentRequest = {
  /**
   * The account id.
   */
  accountId: string;
  deactivateEnrollmentRequestCreate:
    components.DeactivateEnrollmentRequestCreate;
};

export type AccountsDeactivateEnrollmentResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  enrollment?: components.Enrollment | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsDeactivateEnrollmentRequest$inboundSchema: z.ZodType<
  AccountsDeactivateEnrollmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  DeactivateEnrollmentRequestCreate:
    components.DeactivateEnrollmentRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "DeactivateEnrollmentRequestCreate": "deactivateEnrollmentRequestCreate",
  });
});

/** @internal */
export type AccountsDeactivateEnrollmentRequest$Outbound = {
  account_id: string;
  DeactivateEnrollmentRequestCreate:
    components.DeactivateEnrollmentRequestCreate$Outbound;
};

/** @internal */
export const AccountsDeactivateEnrollmentRequest$outboundSchema: z.ZodType<
  AccountsDeactivateEnrollmentRequest$Outbound,
  z.ZodTypeDef,
  AccountsDeactivateEnrollmentRequest
> = z.object({
  accountId: z.string(),
  deactivateEnrollmentRequestCreate:
    components.DeactivateEnrollmentRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    deactivateEnrollmentRequestCreate: "DeactivateEnrollmentRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsDeactivateEnrollmentRequest$ {
  /** @deprecated use `AccountsDeactivateEnrollmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountsDeactivateEnrollmentRequest$inboundSchema;
  /** @deprecated use `AccountsDeactivateEnrollmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountsDeactivateEnrollmentRequest$outboundSchema;
  /** @deprecated use `AccountsDeactivateEnrollmentRequest$Outbound` instead. */
  export type Outbound = AccountsDeactivateEnrollmentRequest$Outbound;
}

export function accountsDeactivateEnrollmentRequestToJSON(
  accountsDeactivateEnrollmentRequest: AccountsDeactivateEnrollmentRequest,
): string {
  return JSON.stringify(
    AccountsDeactivateEnrollmentRequest$outboundSchema.parse(
      accountsDeactivateEnrollmentRequest,
    ),
  );
}

export function accountsDeactivateEnrollmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountsDeactivateEnrollmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountsDeactivateEnrollmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsDeactivateEnrollmentRequest' from JSON`,
  );
}

/** @internal */
export const AccountsDeactivateEnrollmentResponse$inboundSchema: z.ZodType<
  AccountsDeactivateEnrollmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Enrollment: components.Enrollment$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Enrollment": "enrollment",
    "Status": "status",
  });
});

/** @internal */
export type AccountsDeactivateEnrollmentResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Enrollment?: components.Enrollment$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsDeactivateEnrollmentResponse$outboundSchema: z.ZodType<
  AccountsDeactivateEnrollmentResponse$Outbound,
  z.ZodTypeDef,
  AccountsDeactivateEnrollmentResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  enrollment: components.Enrollment$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    enrollment: "Enrollment",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsDeactivateEnrollmentResponse$ {
  /** @deprecated use `AccountsDeactivateEnrollmentResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountsDeactivateEnrollmentResponse$inboundSchema;
  /** @deprecated use `AccountsDeactivateEnrollmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountsDeactivateEnrollmentResponse$outboundSchema;
  /** @deprecated use `AccountsDeactivateEnrollmentResponse$Outbound` instead. */
  export type Outbound = AccountsDeactivateEnrollmentResponse$Outbound;
}

export function accountsDeactivateEnrollmentResponseToJSON(
  accountsDeactivateEnrollmentResponse: AccountsDeactivateEnrollmentResponse,
): string {
  return JSON.stringify(
    AccountsDeactivateEnrollmentResponse$outboundSchema.parse(
      accountsDeactivateEnrollmentResponse,
    ),
  );
}

export function accountsDeactivateEnrollmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountsDeactivateEnrollmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountsDeactivateEnrollmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsDeactivateEnrollmentResponse' from JSON`,
  );
}
