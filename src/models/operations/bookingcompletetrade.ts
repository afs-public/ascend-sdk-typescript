/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BookingCompleteTradeRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The trade id.
   */
  tradeId: string;
  completeTradeRequestCreate: components.CompleteTradeRequestCreate;
};

export type BookingCompleteTradeResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  completeTradeResponse?: components.CompleteTradeResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid.
   *
   * @remarks
   * FAILED_PRECONDITION: The operation was rejected because the system is not in a state required for the operation's processing.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const BookingCompleteTradeRequest$inboundSchema: z.ZodType<
  BookingCompleteTradeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  trade_id: z.string(),
  CompleteTradeRequestCreate:
    components.CompleteTradeRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "trade_id": "tradeId",
    "CompleteTradeRequestCreate": "completeTradeRequestCreate",
  });
});

/** @internal */
export type BookingCompleteTradeRequest$Outbound = {
  account_id: string;
  trade_id: string;
  CompleteTradeRequestCreate: components.CompleteTradeRequestCreate$Outbound;
};

/** @internal */
export const BookingCompleteTradeRequest$outboundSchema: z.ZodType<
  BookingCompleteTradeRequest$Outbound,
  z.ZodTypeDef,
  BookingCompleteTradeRequest
> = z.object({
  accountId: z.string(),
  tradeId: z.string(),
  completeTradeRequestCreate:
    components.CompleteTradeRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    tradeId: "trade_id",
    completeTradeRequestCreate: "CompleteTradeRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookingCompleteTradeRequest$ {
  /** @deprecated use `BookingCompleteTradeRequest$inboundSchema` instead. */
  export const inboundSchema = BookingCompleteTradeRequest$inboundSchema;
  /** @deprecated use `BookingCompleteTradeRequest$outboundSchema` instead. */
  export const outboundSchema = BookingCompleteTradeRequest$outboundSchema;
  /** @deprecated use `BookingCompleteTradeRequest$Outbound` instead. */
  export type Outbound = BookingCompleteTradeRequest$Outbound;
}

export function bookingCompleteTradeRequestToJSON(
  bookingCompleteTradeRequest: BookingCompleteTradeRequest,
): string {
  return JSON.stringify(
    BookingCompleteTradeRequest$outboundSchema.parse(
      bookingCompleteTradeRequest,
    ),
  );
}

export function bookingCompleteTradeRequestFromJSON(
  jsonString: string,
): SafeParseResult<BookingCompleteTradeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookingCompleteTradeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookingCompleteTradeRequest' from JSON`,
  );
}

/** @internal */
export const BookingCompleteTradeResponse$inboundSchema: z.ZodType<
  BookingCompleteTradeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CompleteTradeResponse: components.CompleteTradeResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CompleteTradeResponse": "completeTradeResponse",
    "Status": "status",
  });
});

/** @internal */
export type BookingCompleteTradeResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CompleteTradeResponse?: components.CompleteTradeResponse$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const BookingCompleteTradeResponse$outboundSchema: z.ZodType<
  BookingCompleteTradeResponse$Outbound,
  z.ZodTypeDef,
  BookingCompleteTradeResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  completeTradeResponse: components.CompleteTradeResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    completeTradeResponse: "CompleteTradeResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookingCompleteTradeResponse$ {
  /** @deprecated use `BookingCompleteTradeResponse$inboundSchema` instead. */
  export const inboundSchema = BookingCompleteTradeResponse$inboundSchema;
  /** @deprecated use `BookingCompleteTradeResponse$outboundSchema` instead. */
  export const outboundSchema = BookingCompleteTradeResponse$outboundSchema;
  /** @deprecated use `BookingCompleteTradeResponse$Outbound` instead. */
  export type Outbound = BookingCompleteTradeResponse$Outbound;
}

export function bookingCompleteTradeResponseToJSON(
  bookingCompleteTradeResponse: BookingCompleteTradeResponse,
): string {
  return JSON.stringify(
    BookingCompleteTradeResponse$outboundSchema.parse(
      bookingCompleteTradeResponse,
    ),
  );
}

export function bookingCompleteTradeResponseFromJSON(
  jsonString: string,
): SafeParseResult<BookingCompleteTradeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookingCompleteTradeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookingCompleteTradeResponse' from JSON`,
  );
}
