/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountTransfersAcceptTransferRequest = {
  /**
   * The correspondent id.
   */
  correspondentId: string;
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The transfer id.
   */
  transferId: string;
  acceptTransferRequestCreate: components.AcceptTransferRequestCreate;
};

export type AccountTransfersAcceptTransferResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  acceptTransferResponse?: components.AcceptTransferResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request has an invalid argument.
   *
   * @remarks
   * FAILED_PRECONDITION: The transfer resource is not in the correct state for this operation.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountTransfersAcceptTransferRequest$inboundSchema: z.ZodType<
  AccountTransfersAcceptTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  correspondent_id: z.string(),
  account_id: z.string(),
  transfer_id: z.string(),
  AcceptTransferRequestCreate:
    components.AcceptTransferRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "correspondent_id": "correspondentId",
    "account_id": "accountId",
    "transfer_id": "transferId",
    "AcceptTransferRequestCreate": "acceptTransferRequestCreate",
  });
});

/** @internal */
export type AccountTransfersAcceptTransferRequest$Outbound = {
  correspondent_id: string;
  account_id: string;
  transfer_id: string;
  AcceptTransferRequestCreate: components.AcceptTransferRequestCreate$Outbound;
};

/** @internal */
export const AccountTransfersAcceptTransferRequest$outboundSchema: z.ZodType<
  AccountTransfersAcceptTransferRequest$Outbound,
  z.ZodTypeDef,
  AccountTransfersAcceptTransferRequest
> = z.object({
  correspondentId: z.string(),
  accountId: z.string(),
  transferId: z.string(),
  acceptTransferRequestCreate:
    components.AcceptTransferRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    correspondentId: "correspondent_id",
    accountId: "account_id",
    transferId: "transfer_id",
    acceptTransferRequestCreate: "AcceptTransferRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountTransfersAcceptTransferRequest$ {
  /** @deprecated use `AccountTransfersAcceptTransferRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountTransfersAcceptTransferRequest$inboundSchema;
  /** @deprecated use `AccountTransfersAcceptTransferRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountTransfersAcceptTransferRequest$outboundSchema;
  /** @deprecated use `AccountTransfersAcceptTransferRequest$Outbound` instead. */
  export type Outbound = AccountTransfersAcceptTransferRequest$Outbound;
}

export function accountTransfersAcceptTransferRequestToJSON(
  accountTransfersAcceptTransferRequest: AccountTransfersAcceptTransferRequest,
): string {
  return JSON.stringify(
    AccountTransfersAcceptTransferRequest$outboundSchema.parse(
      accountTransfersAcceptTransferRequest,
    ),
  );
}

export function accountTransfersAcceptTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountTransfersAcceptTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountTransfersAcceptTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountTransfersAcceptTransferRequest' from JSON`,
  );
}

/** @internal */
export const AccountTransfersAcceptTransferResponse$inboundSchema: z.ZodType<
  AccountTransfersAcceptTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  AcceptTransferResponse: components.AcceptTransferResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "AcceptTransferResponse": "acceptTransferResponse",
    "Status": "status",
  });
});

/** @internal */
export type AccountTransfersAcceptTransferResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  AcceptTransferResponse?:
    | components.AcceptTransferResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountTransfersAcceptTransferResponse$outboundSchema: z.ZodType<
  AccountTransfersAcceptTransferResponse$Outbound,
  z.ZodTypeDef,
  AccountTransfersAcceptTransferResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  acceptTransferResponse: components.AcceptTransferResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    acceptTransferResponse: "AcceptTransferResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountTransfersAcceptTransferResponse$ {
  /** @deprecated use `AccountTransfersAcceptTransferResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountTransfersAcceptTransferResponse$inboundSchema;
  /** @deprecated use `AccountTransfersAcceptTransferResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountTransfersAcceptTransferResponse$outboundSchema;
  /** @deprecated use `AccountTransfersAcceptTransferResponse$Outbound` instead. */
  export type Outbound = AccountTransfersAcceptTransferResponse$Outbound;
}

export function accountTransfersAcceptTransferResponseToJSON(
  accountTransfersAcceptTransferResponse:
    AccountTransfersAcceptTransferResponse,
): string {
  return JSON.stringify(
    AccountTransfersAcceptTransferResponse$outboundSchema.parse(
      accountTransfersAcceptTransferResponse,
    ),
  );
}

export function accountTransfersAcceptTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountTransfersAcceptTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountTransfersAcceptTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountTransfersAcceptTransferResponse' from JSON`,
  );
}
