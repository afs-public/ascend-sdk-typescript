/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BasketOrdersServiceRemoveOrdersRequest = {
  /**
   * The correspondent id.
   */
  correspondentId: string;
  /**
   * The basket id.
   */
  basketId: string;
  removeOrdersRequestCreate: components.RemoveOrdersRequestCreate;
};

export type BasketOrdersServiceRemoveOrdersResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  removeOrdersResponse?: components.RemoveOrdersResponse | undefined;
  /**
   * INVALID_ARGUMENT: There was an issue with one or more fields in the request.  The message field will contain details about which field failed validation and why.
   *
   * @remarks
   * FAILED_PRECONDITION: The requested basket has already been submitted.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const BasketOrdersServiceRemoveOrdersRequest$inboundSchema: z.ZodType<
  BasketOrdersServiceRemoveOrdersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  correspondent_id: z.string(),
  basket_id: z.string(),
  RemoveOrdersRequestCreate: components.RemoveOrdersRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "correspondent_id": "correspondentId",
    "basket_id": "basketId",
    "RemoveOrdersRequestCreate": "removeOrdersRequestCreate",
  });
});

/** @internal */
export type BasketOrdersServiceRemoveOrdersRequest$Outbound = {
  correspondent_id: string;
  basket_id: string;
  RemoveOrdersRequestCreate: components.RemoveOrdersRequestCreate$Outbound;
};

/** @internal */
export const BasketOrdersServiceRemoveOrdersRequest$outboundSchema: z.ZodType<
  BasketOrdersServiceRemoveOrdersRequest$Outbound,
  z.ZodTypeDef,
  BasketOrdersServiceRemoveOrdersRequest
> = z.object({
  correspondentId: z.string(),
  basketId: z.string(),
  removeOrdersRequestCreate:
    components.RemoveOrdersRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    correspondentId: "correspondent_id",
    basketId: "basket_id",
    removeOrdersRequestCreate: "RemoveOrdersRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasketOrdersServiceRemoveOrdersRequest$ {
  /** @deprecated use `BasketOrdersServiceRemoveOrdersRequest$inboundSchema` instead. */
  export const inboundSchema =
    BasketOrdersServiceRemoveOrdersRequest$inboundSchema;
  /** @deprecated use `BasketOrdersServiceRemoveOrdersRequest$outboundSchema` instead. */
  export const outboundSchema =
    BasketOrdersServiceRemoveOrdersRequest$outboundSchema;
  /** @deprecated use `BasketOrdersServiceRemoveOrdersRequest$Outbound` instead. */
  export type Outbound = BasketOrdersServiceRemoveOrdersRequest$Outbound;
}

export function basketOrdersServiceRemoveOrdersRequestToJSON(
  basketOrdersServiceRemoveOrdersRequest:
    BasketOrdersServiceRemoveOrdersRequest,
): string {
  return JSON.stringify(
    BasketOrdersServiceRemoveOrdersRequest$outboundSchema.parse(
      basketOrdersServiceRemoveOrdersRequest,
    ),
  );
}

export function basketOrdersServiceRemoveOrdersRequestFromJSON(
  jsonString: string,
): SafeParseResult<BasketOrdersServiceRemoveOrdersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BasketOrdersServiceRemoveOrdersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasketOrdersServiceRemoveOrdersRequest' from JSON`,
  );
}

/** @internal */
export const BasketOrdersServiceRemoveOrdersResponse$inboundSchema: z.ZodType<
  BasketOrdersServiceRemoveOrdersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  RemoveOrdersResponse: components.RemoveOrdersResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "RemoveOrdersResponse": "removeOrdersResponse",
    "Status": "status",
  });
});

/** @internal */
export type BasketOrdersServiceRemoveOrdersResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  RemoveOrdersResponse?: components.RemoveOrdersResponse$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const BasketOrdersServiceRemoveOrdersResponse$outboundSchema: z.ZodType<
  BasketOrdersServiceRemoveOrdersResponse$Outbound,
  z.ZodTypeDef,
  BasketOrdersServiceRemoveOrdersResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  removeOrdersResponse: components.RemoveOrdersResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    removeOrdersResponse: "RemoveOrdersResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasketOrdersServiceRemoveOrdersResponse$ {
  /** @deprecated use `BasketOrdersServiceRemoveOrdersResponse$inboundSchema` instead. */
  export const inboundSchema =
    BasketOrdersServiceRemoveOrdersResponse$inboundSchema;
  /** @deprecated use `BasketOrdersServiceRemoveOrdersResponse$outboundSchema` instead. */
  export const outboundSchema =
    BasketOrdersServiceRemoveOrdersResponse$outboundSchema;
  /** @deprecated use `BasketOrdersServiceRemoveOrdersResponse$Outbound` instead. */
  export type Outbound = BasketOrdersServiceRemoveOrdersResponse$Outbound;
}

export function basketOrdersServiceRemoveOrdersResponseToJSON(
  basketOrdersServiceRemoveOrdersResponse:
    BasketOrdersServiceRemoveOrdersResponse,
): string {
  return JSON.stringify(
    BasketOrdersServiceRemoveOrdersResponse$outboundSchema.parse(
      basketOrdersServiceRemoveOrdersResponse,
    ),
  );
}

export function basketOrdersServiceRemoveOrdersResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BasketOrdersServiceRemoveOrdersResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BasketOrdersServiceRemoveOrdersResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BasketOrdersServiceRemoveOrdersResponse' from JSON`,
  );
}
