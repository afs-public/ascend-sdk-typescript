/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsListAgreementsRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The maximum number of agreements to return.
   */
  pageSize?: number | undefined;
  /**
   * A page token, received from a previous `ListAgreements` call. Provide this to retrieve the subsequent page.
   *
   * @remarks
   *
   *  When paginating, all other parameters provided to `ListAgreements` must match the call that provided the page token.
   */
  pageToken?: string | undefined;
};

export type AccountsListAgreementsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listAgreementsResponse?: components.ListAgreementsResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsListAgreementsRequest$inboundSchema: z.ZodType<
  AccountsListAgreementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  page_size: z.number().int().optional(),
  page_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type AccountsListAgreementsRequest$Outbound = {
  account_id: string;
  page_size?: number | undefined;
  page_token?: string | undefined;
};

/** @internal */
export const AccountsListAgreementsRequest$outboundSchema: z.ZodType<
  AccountsListAgreementsRequest$Outbound,
  z.ZodTypeDef,
  AccountsListAgreementsRequest
> = z.object({
  accountId: z.string(),
  pageSize: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAgreementsRequest$ {
  /** @deprecated use `AccountsListAgreementsRequest$inboundSchema` instead. */
  export const inboundSchema = AccountsListAgreementsRequest$inboundSchema;
  /** @deprecated use `AccountsListAgreementsRequest$outboundSchema` instead. */
  export const outboundSchema = AccountsListAgreementsRequest$outboundSchema;
  /** @deprecated use `AccountsListAgreementsRequest$Outbound` instead. */
  export type Outbound = AccountsListAgreementsRequest$Outbound;
}

export function accountsListAgreementsRequestToJSON(
  accountsListAgreementsRequest: AccountsListAgreementsRequest,
): string {
  return JSON.stringify(
    AccountsListAgreementsRequest$outboundSchema.parse(
      accountsListAgreementsRequest,
    ),
  );
}

export function accountsListAgreementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountsListAgreementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsListAgreementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsListAgreementsRequest' from JSON`,
  );
}

/** @internal */
export const AccountsListAgreementsResponse$inboundSchema: z.ZodType<
  AccountsListAgreementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListAgreementsResponse: components.ListAgreementsResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListAgreementsResponse": "listAgreementsResponse",
    "Status": "status",
  });
});

/** @internal */
export type AccountsListAgreementsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListAgreementsResponse?:
    | components.ListAgreementsResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsListAgreementsResponse$outboundSchema: z.ZodType<
  AccountsListAgreementsResponse$Outbound,
  z.ZodTypeDef,
  AccountsListAgreementsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  listAgreementsResponse: components.ListAgreementsResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    listAgreementsResponse: "ListAgreementsResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAgreementsResponse$ {
  /** @deprecated use `AccountsListAgreementsResponse$inboundSchema` instead. */
  export const inboundSchema = AccountsListAgreementsResponse$inboundSchema;
  /** @deprecated use `AccountsListAgreementsResponse$outboundSchema` instead. */
  export const outboundSchema = AccountsListAgreementsResponse$outboundSchema;
  /** @deprecated use `AccountsListAgreementsResponse$Outbound` instead. */
  export type Outbound = AccountsListAgreementsResponse$Outbound;
}

export function accountsListAgreementsResponseToJSON(
  accountsListAgreementsResponse: AccountsListAgreementsResponse,
): string {
  return JSON.stringify(
    AccountsListAgreementsResponse$outboundSchema.parse(
      accountsListAgreementsResponse,
    ),
  );
}

export function accountsListAgreementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountsListAgreementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsListAgreementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsListAgreementsResponse' from JSON`,
  );
}
