/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckDepositsSimulateCreateCheckDepositRequest = {
  /**
   * The account id.
   */
  accountId: string;
  simulateCreateCheckDepositRequestCreate:
    components.SimulateCreateCheckDepositRequestCreate;
};

export type CheckDepositsSimulateCreateCheckDepositResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  checkDeposit?: components.CheckDeposit | undefined;
  /**
   * INVALID_ARGUMENT: The request has an invalid argument.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const CheckDepositsSimulateCreateCheckDepositRequest$inboundSchema:
  z.ZodType<
    CheckDepositsSimulateCreateCheckDepositRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account_id: z.string(),
    SimulateCreateCheckDepositRequestCreate:
      components.SimulateCreateCheckDepositRequestCreate$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
      "SimulateCreateCheckDepositRequestCreate":
        "simulateCreateCheckDepositRequestCreate",
    });
  });

/** @internal */
export type CheckDepositsSimulateCreateCheckDepositRequest$Outbound = {
  account_id: string;
  SimulateCreateCheckDepositRequestCreate:
    components.SimulateCreateCheckDepositRequestCreate$Outbound;
};

/** @internal */
export const CheckDepositsSimulateCreateCheckDepositRequest$outboundSchema:
  z.ZodType<
    CheckDepositsSimulateCreateCheckDepositRequest$Outbound,
    z.ZodTypeDef,
    CheckDepositsSimulateCreateCheckDepositRequest
  > = z.object({
    accountId: z.string(),
    simulateCreateCheckDepositRequestCreate:
      components.SimulateCreateCheckDepositRequestCreate$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
      simulateCreateCheckDepositRequestCreate:
        "SimulateCreateCheckDepositRequestCreate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckDepositsSimulateCreateCheckDepositRequest$ {
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositRequest$inboundSchema` instead. */
  export const inboundSchema =
    CheckDepositsSimulateCreateCheckDepositRequest$inboundSchema;
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositRequest$outboundSchema` instead. */
  export const outboundSchema =
    CheckDepositsSimulateCreateCheckDepositRequest$outboundSchema;
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositRequest$Outbound` instead. */
  export type Outbound =
    CheckDepositsSimulateCreateCheckDepositRequest$Outbound;
}

export function checkDepositsSimulateCreateCheckDepositRequestToJSON(
  checkDepositsSimulateCreateCheckDepositRequest:
    CheckDepositsSimulateCreateCheckDepositRequest,
): string {
  return JSON.stringify(
    CheckDepositsSimulateCreateCheckDepositRequest$outboundSchema.parse(
      checkDepositsSimulateCreateCheckDepositRequest,
    ),
  );
}

export function checkDepositsSimulateCreateCheckDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CheckDepositsSimulateCreateCheckDepositRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CheckDepositsSimulateCreateCheckDepositRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CheckDepositsSimulateCreateCheckDepositRequest' from JSON`,
  );
}

/** @internal */
export const CheckDepositsSimulateCreateCheckDepositResponse$inboundSchema:
  z.ZodType<
    CheckDepositsSimulateCreateCheckDepositResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CheckDeposit: components.CheckDeposit$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "CheckDeposit": "checkDeposit",
      "Status": "status",
    });
  });

/** @internal */
export type CheckDepositsSimulateCreateCheckDepositResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CheckDeposit?: components.CheckDeposit$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const CheckDepositsSimulateCreateCheckDepositResponse$outboundSchema:
  z.ZodType<
    CheckDepositsSimulateCreateCheckDepositResponse$Outbound,
    z.ZodTypeDef,
    CheckDepositsSimulateCreateCheckDepositResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    checkDeposit: components.CheckDeposit$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      checkDeposit: "CheckDeposit",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckDepositsSimulateCreateCheckDepositResponse$ {
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositResponse$inboundSchema` instead. */
  export const inboundSchema =
    CheckDepositsSimulateCreateCheckDepositResponse$inboundSchema;
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositResponse$outboundSchema` instead. */
  export const outboundSchema =
    CheckDepositsSimulateCreateCheckDepositResponse$outboundSchema;
  /** @deprecated use `CheckDepositsSimulateCreateCheckDepositResponse$Outbound` instead. */
  export type Outbound =
    CheckDepositsSimulateCreateCheckDepositResponse$Outbound;
}

export function checkDepositsSimulateCreateCheckDepositResponseToJSON(
  checkDepositsSimulateCreateCheckDepositResponse:
    CheckDepositsSimulateCreateCheckDepositResponse,
): string {
  return JSON.stringify(
    CheckDepositsSimulateCreateCheckDepositResponse$outboundSchema.parse(
      checkDepositsSimulateCreateCheckDepositResponse,
    ),
  );
}

export function checkDepositsSimulateCreateCheckDepositResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CheckDepositsSimulateCreateCheckDepositResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CheckDepositsSimulateCreateCheckDepositResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CheckDepositsSimulateCreateCheckDepositResponse' from JSON`,
  );
}
