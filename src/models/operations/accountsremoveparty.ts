/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsRemovePartyRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The party id.
   */
  partyId: string;
  removePartyRequestCreate: components.RemovePartyRequestCreate;
};

export type AccountsRemovePartyResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsRemovePartyRequest$inboundSchema: z.ZodType<
  AccountsRemovePartyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  party_id: z.string(),
  RemovePartyRequestCreate: components.RemovePartyRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "party_id": "partyId",
    "RemovePartyRequestCreate": "removePartyRequestCreate",
  });
});

/** @internal */
export type AccountsRemovePartyRequest$Outbound = {
  account_id: string;
  party_id: string;
  RemovePartyRequestCreate: components.RemovePartyRequestCreate$Outbound;
};

/** @internal */
export const AccountsRemovePartyRequest$outboundSchema: z.ZodType<
  AccountsRemovePartyRequest$Outbound,
  z.ZodTypeDef,
  AccountsRemovePartyRequest
> = z.object({
  accountId: z.string(),
  partyId: z.string(),
  removePartyRequestCreate: components.RemovePartyRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    partyId: "party_id",
    removePartyRequestCreate: "RemovePartyRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsRemovePartyRequest$ {
  /** @deprecated use `AccountsRemovePartyRequest$inboundSchema` instead. */
  export const inboundSchema = AccountsRemovePartyRequest$inboundSchema;
  /** @deprecated use `AccountsRemovePartyRequest$outboundSchema` instead. */
  export const outboundSchema = AccountsRemovePartyRequest$outboundSchema;
  /** @deprecated use `AccountsRemovePartyRequest$Outbound` instead. */
  export type Outbound = AccountsRemovePartyRequest$Outbound;
}

export function accountsRemovePartyRequestToJSON(
  accountsRemovePartyRequest: AccountsRemovePartyRequest,
): string {
  return JSON.stringify(
    AccountsRemovePartyRequest$outboundSchema.parse(accountsRemovePartyRequest),
  );
}

export function accountsRemovePartyRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountsRemovePartyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsRemovePartyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsRemovePartyRequest' from JSON`,
  );
}

/** @internal */
export const AccountsRemovePartyResponse$inboundSchema: z.ZodType<
  AccountsRemovePartyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Status": "status",
  });
});

/** @internal */
export type AccountsRemovePartyResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsRemovePartyResponse$outboundSchema: z.ZodType<
  AccountsRemovePartyResponse$Outbound,
  z.ZodTypeDef,
  AccountsRemovePartyResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsRemovePartyResponse$ {
  /** @deprecated use `AccountsRemovePartyResponse$inboundSchema` instead. */
  export const inboundSchema = AccountsRemovePartyResponse$inboundSchema;
  /** @deprecated use `AccountsRemovePartyResponse$outboundSchema` instead. */
  export const outboundSchema = AccountsRemovePartyResponse$outboundSchema;
  /** @deprecated use `AccountsRemovePartyResponse$Outbound` instead. */
  export type Outbound = AccountsRemovePartyResponse$Outbound;
}

export function accountsRemovePartyResponseToJSON(
  accountsRemovePartyResponse: AccountsRemovePartyResponse,
): string {
  return JSON.stringify(
    AccountsRemovePartyResponse$outboundSchema.parse(
      accountsRemovePartyResponse,
    ),
  );
}

export function accountsRemovePartyResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountsRemovePartyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsRemovePartyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsRemovePartyResponse' from JSON`,
  );
}
