/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsListAvailableRestrictionsRequest = {
  /**
   * The account id.
   */
  accountId: string;
};

export type AccountsListAvailableRestrictionsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listAvailableRestrictionsResponse?:
    | components.ListAvailableRestrictionsResponse
    | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsListAvailableRestrictionsRequest$inboundSchema: z.ZodType<
  AccountsListAvailableRestrictionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type AccountsListAvailableRestrictionsRequest$Outbound = {
  account_id: string;
};

/** @internal */
export const AccountsListAvailableRestrictionsRequest$outboundSchema: z.ZodType<
  AccountsListAvailableRestrictionsRequest$Outbound,
  z.ZodTypeDef,
  AccountsListAvailableRestrictionsRequest
> = z.object({
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAvailableRestrictionsRequest$ {
  /** @deprecated use `AccountsListAvailableRestrictionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountsListAvailableRestrictionsRequest$inboundSchema;
  /** @deprecated use `AccountsListAvailableRestrictionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountsListAvailableRestrictionsRequest$outboundSchema;
  /** @deprecated use `AccountsListAvailableRestrictionsRequest$Outbound` instead. */
  export type Outbound = AccountsListAvailableRestrictionsRequest$Outbound;
}

export function accountsListAvailableRestrictionsRequestToJSON(
  accountsListAvailableRestrictionsRequest:
    AccountsListAvailableRestrictionsRequest,
): string {
  return JSON.stringify(
    AccountsListAvailableRestrictionsRequest$outboundSchema.parse(
      accountsListAvailableRestrictionsRequest,
    ),
  );
}

export function accountsListAvailableRestrictionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountsListAvailableRestrictionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountsListAvailableRestrictionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountsListAvailableRestrictionsRequest' from JSON`,
  );
}

/** @internal */
export const AccountsListAvailableRestrictionsResponse$inboundSchema: z.ZodType<
  AccountsListAvailableRestrictionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListAvailableRestrictionsResponse: components
    .ListAvailableRestrictionsResponse$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListAvailableRestrictionsResponse": "listAvailableRestrictionsResponse",
    "Status": "status",
  });
});

/** @internal */
export type AccountsListAvailableRestrictionsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListAvailableRestrictionsResponse?:
    | components.ListAvailableRestrictionsResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsListAvailableRestrictionsResponse$outboundSchema:
  z.ZodType<
    AccountsListAvailableRestrictionsResponse$Outbound,
    z.ZodTypeDef,
    AccountsListAvailableRestrictionsResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listAvailableRestrictionsResponse: components
      .ListAvailableRestrictionsResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      listAvailableRestrictionsResponse: "ListAvailableRestrictionsResponse",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAvailableRestrictionsResponse$ {
  /** @deprecated use `AccountsListAvailableRestrictionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountsListAvailableRestrictionsResponse$inboundSchema;
  /** @deprecated use `AccountsListAvailableRestrictionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountsListAvailableRestrictionsResponse$outboundSchema;
  /** @deprecated use `AccountsListAvailableRestrictionsResponse$Outbound` instead. */
  export type Outbound = AccountsListAvailableRestrictionsResponse$Outbound;
}

export function accountsListAvailableRestrictionsResponseToJSON(
  accountsListAvailableRestrictionsResponse:
    AccountsListAvailableRestrictionsResponse,
): string {
  return JSON.stringify(
    AccountsListAvailableRestrictionsResponse$outboundSchema.parse(
      accountsListAvailableRestrictionsResponse,
    ),
  );
}

export function accountsListAvailableRestrictionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountsListAvailableRestrictionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountsListAvailableRestrictionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountsListAvailableRestrictionsResponse' from JSON`,
  );
}
