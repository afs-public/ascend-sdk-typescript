/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsCloseAccountRequest = {
  /**
   * The account id.
   */
  accountId: string;
  closeAccountRequestCreate: components.CloseAccountRequestCreate;
};

export type AccountsCloseAccountResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  account?: components.Account | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsCloseAccountRequest$inboundSchema: z.ZodType<
  AccountsCloseAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  CloseAccountRequestCreate: components.CloseAccountRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "CloseAccountRequestCreate": "closeAccountRequestCreate",
  });
});

/** @internal */
export type AccountsCloseAccountRequest$Outbound = {
  account_id: string;
  CloseAccountRequestCreate: components.CloseAccountRequestCreate$Outbound;
};

/** @internal */
export const AccountsCloseAccountRequest$outboundSchema: z.ZodType<
  AccountsCloseAccountRequest$Outbound,
  z.ZodTypeDef,
  AccountsCloseAccountRequest
> = z.object({
  accountId: z.string(),
  closeAccountRequestCreate:
    components.CloseAccountRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    closeAccountRequestCreate: "CloseAccountRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsCloseAccountRequest$ {
  /** @deprecated use `AccountsCloseAccountRequest$inboundSchema` instead. */
  export const inboundSchema = AccountsCloseAccountRequest$inboundSchema;
  /** @deprecated use `AccountsCloseAccountRequest$outboundSchema` instead. */
  export const outboundSchema = AccountsCloseAccountRequest$outboundSchema;
  /** @deprecated use `AccountsCloseAccountRequest$Outbound` instead. */
  export type Outbound = AccountsCloseAccountRequest$Outbound;
}

export function accountsCloseAccountRequestToJSON(
  accountsCloseAccountRequest: AccountsCloseAccountRequest,
): string {
  return JSON.stringify(
    AccountsCloseAccountRequest$outboundSchema.parse(
      accountsCloseAccountRequest,
    ),
  );
}

export function accountsCloseAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountsCloseAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsCloseAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsCloseAccountRequest' from JSON`,
  );
}

/** @internal */
export const AccountsCloseAccountResponse$inboundSchema: z.ZodType<
  AccountsCloseAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Account: components.Account$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Account": "account",
    "Status": "status",
  });
});

/** @internal */
export type AccountsCloseAccountResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Account?: components.Account$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsCloseAccountResponse$outboundSchema: z.ZodType<
  AccountsCloseAccountResponse$Outbound,
  z.ZodTypeDef,
  AccountsCloseAccountResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  account: components.Account$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    account: "Account",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsCloseAccountResponse$ {
  /** @deprecated use `AccountsCloseAccountResponse$inboundSchema` instead. */
  export const inboundSchema = AccountsCloseAccountResponse$inboundSchema;
  /** @deprecated use `AccountsCloseAccountResponse$outboundSchema` instead. */
  export const outboundSchema = AccountsCloseAccountResponse$outboundSchema;
  /** @deprecated use `AccountsCloseAccountResponse$Outbound` instead. */
  export type Outbound = AccountsCloseAccountResponse$Outbound;
}

export function accountsCloseAccountResponseToJSON(
  accountsCloseAccountResponse: AccountsCloseAccountResponse,
): string {
  return JSON.stringify(
    AccountsCloseAccountResponse$outboundSchema.parse(
      accountsCloseAccountResponse,
    ),
  );
}

export function accountsCloseAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountsCloseAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsCloseAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsCloseAccountResponse' from JSON`,
  );
}
