/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckDepositsGetCheckDepositRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The checkDeposit id.
   */
  checkDepositId: string;
};

export type CheckDepositsGetCheckDepositResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  checkDeposit?: components.CheckDeposit | undefined;
  /**
   * INVALID_ARGUMENT: The request has an invalid argument.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const CheckDepositsGetCheckDepositRequest$inboundSchema: z.ZodType<
  CheckDepositsGetCheckDepositRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  checkDeposit_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "checkDeposit_id": "checkDepositId",
  });
});

/** @internal */
export type CheckDepositsGetCheckDepositRequest$Outbound = {
  account_id: string;
  checkDeposit_id: string;
};

/** @internal */
export const CheckDepositsGetCheckDepositRequest$outboundSchema: z.ZodType<
  CheckDepositsGetCheckDepositRequest$Outbound,
  z.ZodTypeDef,
  CheckDepositsGetCheckDepositRequest
> = z.object({
  accountId: z.string(),
  checkDepositId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    checkDepositId: "checkDeposit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckDepositsGetCheckDepositRequest$ {
  /** @deprecated use `CheckDepositsGetCheckDepositRequest$inboundSchema` instead. */
  export const inboundSchema =
    CheckDepositsGetCheckDepositRequest$inboundSchema;
  /** @deprecated use `CheckDepositsGetCheckDepositRequest$outboundSchema` instead. */
  export const outboundSchema =
    CheckDepositsGetCheckDepositRequest$outboundSchema;
  /** @deprecated use `CheckDepositsGetCheckDepositRequest$Outbound` instead. */
  export type Outbound = CheckDepositsGetCheckDepositRequest$Outbound;
}

export function checkDepositsGetCheckDepositRequestToJSON(
  checkDepositsGetCheckDepositRequest: CheckDepositsGetCheckDepositRequest,
): string {
  return JSON.stringify(
    CheckDepositsGetCheckDepositRequest$outboundSchema.parse(
      checkDepositsGetCheckDepositRequest,
    ),
  );
}

export function checkDepositsGetCheckDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<CheckDepositsGetCheckDepositRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckDepositsGetCheckDepositRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckDepositsGetCheckDepositRequest' from JSON`,
  );
}

/** @internal */
export const CheckDepositsGetCheckDepositResponse$inboundSchema: z.ZodType<
  CheckDepositsGetCheckDepositResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CheckDeposit: components.CheckDeposit$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CheckDeposit": "checkDeposit",
    "Status": "status",
  });
});

/** @internal */
export type CheckDepositsGetCheckDepositResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CheckDeposit?: components.CheckDeposit$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const CheckDepositsGetCheckDepositResponse$outboundSchema: z.ZodType<
  CheckDepositsGetCheckDepositResponse$Outbound,
  z.ZodTypeDef,
  CheckDepositsGetCheckDepositResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  checkDeposit: components.CheckDeposit$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    checkDeposit: "CheckDeposit",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckDepositsGetCheckDepositResponse$ {
  /** @deprecated use `CheckDepositsGetCheckDepositResponse$inboundSchema` instead. */
  export const inboundSchema =
    CheckDepositsGetCheckDepositResponse$inboundSchema;
  /** @deprecated use `CheckDepositsGetCheckDepositResponse$outboundSchema` instead. */
  export const outboundSchema =
    CheckDepositsGetCheckDepositResponse$outboundSchema;
  /** @deprecated use `CheckDepositsGetCheckDepositResponse$Outbound` instead. */
  export type Outbound = CheckDepositsGetCheckDepositResponse$Outbound;
}

export function checkDepositsGetCheckDepositResponseToJSON(
  checkDepositsGetCheckDepositResponse: CheckDepositsGetCheckDepositResponse,
): string {
  return JSON.stringify(
    CheckDepositsGetCheckDepositResponse$outboundSchema.parse(
      checkDepositsGetCheckDepositResponse,
    ),
  );
}

export function checkDepositsGetCheckDepositResponseFromJSON(
  jsonString: string,
): SafeParseResult<CheckDepositsGetCheckDepositResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckDepositsGetCheckDepositResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckDepositsGetCheckDepositResponse' from JSON`,
  );
}
