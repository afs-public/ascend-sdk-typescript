/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { investigationsGetCustomerIdentification } from "../funcs/investigationsGetCustomerIdentification.js";
import { investigationsGetInvestigation } from "../funcs/investigationsGetInvestigation.js";
import { investigationsGetWatchlistItem } from "../funcs/investigationsGetWatchlistItem.js";
import { investigationsLinkDocuments } from "../funcs/investigationsLinkDocuments.js";
import { investigationsListInvestigations } from "../funcs/investigationsListInvestigations.js";
import { investigationsUpdateInvestigation } from "../funcs/investigationsUpdateInvestigation.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Investigations extends ClientSDK {
    /**
     * Get Investigations
     *
     * @remarks
     * Use this endpoint to get the current state of an investigation by request reference UUID.
     */
    async getInvestigation(investigationId, options) {
        return unwrapAsync(investigationsGetInvestigation(this, investigationId, options));
    }
    /**
     * Update Investigation
     *
     * @remarks
     * Use this endpoint to update the details of an investigation by request reference UUID.
     */
    async updateInvestigation(investigationUpdate, investigationId, updateMask, options) {
        return unwrapAsync(investigationsUpdateInvestigation(this, investigationUpdate, investigationId, updateMask, options));
    }
    /**
     * List Investigations
     *
     * @remarks
     * Use this endpoint to retrieve a list of investigation summaries based on optional search parameters
     */
    async listInvestigations(pageSize, pageToken, filter, orderBy, options) {
        return unwrapResultIterator(investigationsListInvestigations(this, pageSize, pageToken, filter, orderBy, options));
    }
    /**
     * Link Documents
     *
     * @remarks
     * Use this endpoint to update identity verification document IDs.
     */
    async linkDocuments(linkDocumentsRequestCreate, investigationId, options) {
        return unwrapAsync(investigationsLinkDocuments(this, linkDocumentsRequestCreate, investigationId, options));
    }
    /**
     * Get Watchlist Item
     *
     * @remarks
     * Gets the details of an investigation by watchlist type and valid watchlist id
     */
    async getWatchlistItem(watchlistId, itemId, options) {
        return unwrapAsync(investigationsGetWatchlistItem(this, watchlistId, itemId, options));
    }
    /**
     * Get Identity Verification
     *
     * @remarks
     * Gets a CustomerIdentification by CustomerIdentification ID.
     */
    async getCustomerIdentification(correspondentId, customerIdentificationId, view, options) {
        return unwrapAsync(investigationsGetCustomerIdentification(this, correspondentId, customerIdentificationId, view, options));
    }
}
//# sourceMappingURL=investigations.js.map