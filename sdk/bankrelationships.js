/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { bankRelationshipsCancelBankRelationship } from "../funcs/bankRelationshipsCancelBankRelationship.js";
import { bankRelationshipsCreateBankRelationship } from "../funcs/bankRelationshipsCreateBankRelationship.js";
import { bankRelationshipsGetBankRelationship } from "../funcs/bankRelationshipsGetBankRelationship.js";
import { bankRelationshipsListBankRelationships } from "../funcs/bankRelationshipsListBankRelationships.js";
import { bankRelationshipsReissueMicroDeposits } from "../funcs/bankRelationshipsReissueMicroDeposits.js";
import { bankRelationshipsReuseBankRelationship } from "../funcs/bankRelationshipsReuseBankRelationship.js";
import { bankRelationshipsUpdateBankRelationship } from "../funcs/bankRelationshipsUpdateBankRelationship.js";
import { bankRelationshipsVerifyMicroDeposits } from "../funcs/bankRelationshipsVerifyMicroDeposits.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class BankRelationships extends ClientSDK {
    /**
     * Create Bank Relationship
     *
     * @remarks
     * Creates a bank relationship.
     */
    async createBankRelationship(bankRelationshipCreate, accountId, options) {
        return unwrapAsync(bankRelationshipsCreateBankRelationship(this, bankRelationshipCreate, accountId, options));
    }
    /**
     * List Bank Relationships
     *
     * @remarks
     * Lists bank relationships for an account.
     */
    async listBankRelationships(accountId, pageSize, pageToken, state, options) {
        return unwrapResultIterator(bankRelationshipsListBankRelationships(this, accountId, pageSize, pageToken, state, options));
    }
    /**
     * Get Bank Relationship
     *
     * @remarks
     * Gets an existing bank relationship.
     */
    async getBankRelationship(accountId, bankRelationshipId, options) {
        return unwrapAsync(bankRelationshipsGetBankRelationship(this, accountId, bankRelationshipId, options));
    }
    /**
     * Update Bank Relationship
     *
     * @remarks
     * Updates an existing bank relationship.
     */
    async updateBankRelationship(bankRelationshipUpdate, accountId, bankRelationshipId, updateMask, options) {
        return unwrapAsync(bankRelationshipsUpdateBankRelationship(this, bankRelationshipUpdate, accountId, bankRelationshipId, updateMask, options));
    }
    /**
     * Cancel Bank Relationship
     *
     * @remarks
     * Cancels an existing bank relationship.
     */
    async cancelBankRelationship(cancelBankRelationshipRequestCreate, accountId, bankRelationshipId, options) {
        return unwrapAsync(bankRelationshipsCancelBankRelationship(this, cancelBankRelationshipRequestCreate, accountId, bankRelationshipId, options));
    }
    /**
     * Verify Micro Deposits
     *
     * @remarks
     * Verifies a pending bank relationship with the `MICRO_DEPOSIT` verification method. Successful verification of the micro deposit amounts will result in the relationship moving to the `APPROVED` state. The micro deposits will be taken back from the bank account.
     */
    async verifyMicroDeposits(verifyMicroDepositsRequestCreate, accountId, bankRelationshipId, options) {
        return unwrapAsync(bankRelationshipsVerifyMicroDeposits(this, verifyMicroDepositsRequestCreate, accountId, bankRelationshipId, options));
    }
    /**
     * Reissue Micro Deposits
     *
     * @remarks
     * Reissues micro deposits after micro deposit verification has failed. The user should have received a message that new micro deposits should be reissued.
     */
    async reissueMicroDeposits(reissueMicroDepositsRequestCreate, accountId, bankRelationshipId, options) {
        return unwrapAsync(bankRelationshipsReissueMicroDeposits(this, reissueMicroDepositsRequestCreate, accountId, bankRelationshipId, options));
    }
    /**
     * Reuse Bank Relationship
     *
     * @remarks
     * Reuses an existing bank relationship for a new account. The source bank relationship must be approved. The new account must be related to the parent account of the `source_bank_relationship`. The new relationship will be created with the `USE_EXISTING` verification method in place of the source bank relationship's verification method.
     */
    async reuseBankRelationship(reuseBankRelationshipRequestCreate, accountId, options) {
        return unwrapAsync(bankRelationshipsReuseBankRelationship(this, reuseBankRelationshipRequestCreate, accountId, options));
    }
}
//# sourceMappingURL=bankrelationships.js.map