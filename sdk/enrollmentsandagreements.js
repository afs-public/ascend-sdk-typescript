/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { enrollmentsAndAgreementsAccountsListAvailableEnrollmentsByAccountGroup } from "../funcs/enrollmentsAndAgreementsAccountsListAvailableEnrollmentsByAccountGroup.js";
import { enrollmentsAndAgreementsAffirmAgreements } from "../funcs/enrollmentsAndAgreementsAffirmAgreements.js";
import { enrollmentsAndAgreementsDeactivateEnrollment } from "../funcs/enrollmentsAndAgreementsDeactivateEnrollment.js";
import { enrollmentsAndAgreementsEnrollAccount } from "../funcs/enrollmentsAndAgreementsEnrollAccount.js";
import { enrollmentsAndAgreementsListAgreements } from "../funcs/enrollmentsAndAgreementsListAgreements.js";
import { enrollmentsAndAgreementsListAvailableEnrollments } from "../funcs/enrollmentsAndAgreementsListAvailableEnrollments.js";
import { enrollmentsAndAgreementsListEnrollments } from "../funcs/enrollmentsAndAgreementsListEnrollments.js";
import { enrollmentsAndAgreementsListEntitlements } from "../funcs/enrollmentsAndAgreementsListEntitlements.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class EnrollmentsAndAgreements extends ClientSDK {
    /**
     * Enroll Account
     *
     * @remarks
     * Adds an Enrollment to an Account.
     */
    async enrollAccount(enrollAccountRequestCreate, accountId, options) {
        return unwrapAsync(enrollmentsAndAgreementsEnrollAccount(this, enrollAccountRequestCreate, accountId, options));
    }
    /**
     * List Available Enrollments
     *
     * @remarks
     * Get a list of Enrollments available for an Account.
     */
    async listAvailableEnrollments(accountId, pageSize, pageToken, filter, options) {
        return unwrapAsync(enrollmentsAndAgreementsListAvailableEnrollments(this, accountId, pageSize, pageToken, filter, options));
    }
    /**
     * List Available Enrollments (by Account Group)
     *
     * @remarks
     * Get a list of Enrollments available for an Account.
     */
    async accountsListAvailableEnrollmentsByAccountGroup(accountGroupId, pageSize, pageToken, filter, options) {
        return unwrapAsync(enrollmentsAndAgreementsAccountsListAvailableEnrollmentsByAccountGroup(this, accountGroupId, pageSize, pageToken, filter, options));
    }
    /**
     * Deactivate Enrollment
     *
     * @remarks
     * Deactivates an Account Enrollment.
     */
    async deactivateEnrollment(deactivateEnrollmentRequestCreate, accountId, options) {
        return unwrapAsync(enrollmentsAndAgreementsDeactivateEnrollment(this, deactivateEnrollmentRequestCreate, accountId, options));
    }
    /**
     * List Account Enrollments
     *
     * @remarks
     * Gets a list of Enrollments for an Account.
     */
    async listEnrollments(accountId, pageSize, pageToken, options) {
        return unwrapResultIterator(enrollmentsAndAgreementsListEnrollments(this, accountId, pageSize, pageToken, options));
    }
    /**
     * Affirm Agreements
     *
     * @remarks
     * Affirm Agreements for an Account.
     */
    async affirmAgreements(affirmAgreementsRequestCreate, accountId, options) {
        return unwrapAsync(enrollmentsAndAgreementsAffirmAgreements(this, affirmAgreementsRequestCreate, accountId, options));
    }
    /**
     * List Account Agreements
     *
     * @remarks
     * Gets a list of Agreements on an Account.
     */
    async listAgreements(accountId, pageSize, pageToken, options) {
        return unwrapResultIterator(enrollmentsAndAgreementsListAgreements(this, accountId, pageSize, pageToken, options));
    }
    /**
     * List Account Entitlements
     *
     * @remarks
     * Gets a list of Entitlements for an Account.
     */
    async listEntitlements(accountId, pageSize, pageToken, options) {
        return unwrapResultIterator(enrollmentsAndAgreementsListEntitlements(this, accountId, pageSize, pageToken, options));
    }
}
//# sourceMappingURL=enrollmentsandagreements.js.map