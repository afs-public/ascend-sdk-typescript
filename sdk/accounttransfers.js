"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountTransfers = void 0;
const accountTransfersAcceptTransfer_js_1 = require("../funcs/accountTransfersAcceptTransfer.js");
const accountTransfersCreateTransfer_js_1 = require("../funcs/accountTransfersCreateTransfer.js");
const accountTransfersGetTransfer_js_1 = require("../funcs/accountTransfersGetTransfer.js");
const accountTransfersListTransfers_js_1 = require("../funcs/accountTransfersListTransfers.js");
const accountTransfersRejectTransfer_js_1 = require("../funcs/accountTransfersRejectTransfer.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class AccountTransfers extends sdks_js_1.ClientSDK {
    /**
     * Create Transfer
     *
     * @remarks
     * Creates a transfer
     */
    async createTransfer(transferCreate, correspondentId, accountId, requestId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountTransfersCreateTransfer_js_1.accountTransfersCreateTransfer)(this, transferCreate, correspondentId, accountId, requestId, options));
    }
    /**
     * List Transfers
     *
     * @remarks
     * Lists existing transfers using a CEL filter.
     */
    async listTransfers(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, accountTransfersListTransfers_js_1.accountTransfersListTransfers)(this, request, options));
    }
    /**
     * Accept Transfer
     *
     * @remarks
     * Accept one side (incoming/outgoing) of an internal Ascend transfer. When both the incoming side and outgoing side of the transfer have been accepted then bookkeeping is done immediately. If neither, or only one side of a transfer is accepted, then both sides of the internal perform bookkeeping one full settlement day after they went into the bookkeeping queue.
     */
    async acceptTransfer(acceptTransferRequestCreate, correspondentId, accountId, transferId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountTransfersAcceptTransfer_js_1.accountTransfersAcceptTransfer)(this, acceptTransferRequestCreate, correspondentId, accountId, transferId, options));
    }
    /**
     * Reject Transfer
     *
     * @remarks
     * Reject one side (incoming/outgoing) of an internal Ascend transfer. Rejecting one side automatically moves the contra side of the transfer to be rejected as well.
     */
    async rejectTransfer(rejectTransferRequestCreate, correspondentId, accountId, transferId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountTransfersRejectTransfer_js_1.accountTransfersRejectTransfer)(this, rejectTransferRequestCreate, correspondentId, accountId, transferId, options));
    }
    /**
     * Get Transfer
     *
     * @remarks
     * Gets an existing transfer
     */
    async getTransfer(correspondentId, accountId, transferId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountTransfersGetTransfer_js_1.accountTransfersGetTransfer)(this, correspondentId, accountId, transferId, options));
    }
}
exports.AccountTransfers = AccountTransfers;
//# sourceMappingURL=accounttransfers.js.map