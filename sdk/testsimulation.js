/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { testSimulationForceApproveAchDeposit } from "../funcs/testSimulationForceApproveAchDeposit.js";
import { testSimulationForceApproveAchWithdrawal } from "../funcs/testSimulationForceApproveAchWithdrawal.js";
import { testSimulationForceApproveCashJournal } from "../funcs/testSimulationForceApproveCashJournal.js";
import { testSimulationForceApproveIctDeposit } from "../funcs/testSimulationForceApproveIctDeposit.js";
import { testSimulationForceApproveIctWithdrawal } from "../funcs/testSimulationForceApproveIctWithdrawal.js";
import { testSimulationForceApproveWireWithdrawal } from "../funcs/testSimulationForceApproveWireWithdrawal.js";
import { testSimulationForceNocAchDeposit } from "../funcs/testSimulationForceNocAchDeposit.js";
import { testSimulationForceNocAchWithdrawal } from "../funcs/testSimulationForceNocAchWithdrawal.js";
import { testSimulationForceRejectAchDeposit } from "../funcs/testSimulationForceRejectAchDeposit.js";
import { testSimulationForceRejectAchWithdrawal } from "../funcs/testSimulationForceRejectAchWithdrawal.js";
import { testSimulationForceRejectCashJournal } from "../funcs/testSimulationForceRejectCashJournal.js";
import { testSimulationForceRejectIctDeposit } from "../funcs/testSimulationForceRejectIctDeposit.js";
import { testSimulationForceRejectIctWithdrawal } from "../funcs/testSimulationForceRejectIctWithdrawal.js";
import { testSimulationForceRejectWireWithdrawal } from "../funcs/testSimulationForceRejectWireWithdrawal.js";
import { testSimulationForceReturnAchDeposit } from "../funcs/testSimulationForceReturnAchDeposit.js";
import { testSimulationForceReturnAchWithdrawal } from "../funcs/testSimulationForceReturnAchWithdrawal.js";
import { testSimulationGetMicroDepositAmounts } from "../funcs/testSimulationGetMicroDepositAmounts.js";
import { testSimulationSimulateCreateCheckDeposit } from "../funcs/testSimulationSimulateCreateCheckDeposit.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class TestSimulation extends ClientSDK {
    /**
     * Simulate Check Deposit Creation
     *
     * @remarks
     * Creates a check deposit for a specific account FOR TESTING ONLY!
     */
    async simulateCreateCheckDeposit(simulateCreateCheckDepositRequestCreate, accountId, options) {
        return unwrapAsync(testSimulationSimulateCreateCheckDeposit(this, simulateCreateCheckDepositRequestCreate, accountId, options));
    }
    /**
     * ACH Deposit Approval
     *
     * @remarks
     * Forces approval of an existing ACH deposit that is pending review. FOR TESTING ONLY!
     */
    async forceApproveAchDeposit(forceApproveAchDepositRequestCreate, accountId, achDepositId, options) {
        return unwrapAsync(testSimulationForceApproveAchDeposit(this, forceApproveAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * NOC for a Deposit
     *
     * @remarks
     * Forces a Nacha notice of change (NOC) on a completed ACH deposit. FOR TESTING ONLY!
     */
    async forceNocAchDeposit(forceNocAchDepositRequestCreate, accountId, achDepositId, options) {
        return unwrapAsync(testSimulationForceNocAchDeposit(this, forceNocAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Deposit Rejection
     *
     * @remarks
     * Forces rejection of an existing ACH deposit that is pending review. FOR TESTING ONLY!
     */
    async forceRejectAchDeposit(forceRejectAchDepositRequestCreate, accountId, achDepositId, options) {
        return unwrapAsync(testSimulationForceRejectAchDeposit(this, forceRejectAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Deposit Return
     *
     * @remarks
     * Forces a Nacha return on a completed ACH deposit. FOR TESTING ONLY!
     */
    async forceReturnAchDeposit(forceReturnAchDepositRequestCreate, accountId, achDepositId, options) {
        return unwrapAsync(testSimulationForceReturnAchDeposit(this, forceReturnAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Withdrawal Approval
     *
     * @remarks
     * Forces approval of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
     */
    async forceApproveAchWithdrawal(forceApproveAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return unwrapAsync(testSimulationForceApproveAchWithdrawal(this, forceApproveAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal NOC
     *
     * @remarks
     * Forces a Nacha notice of change (NOC) on a completed ACH withdrawal. FOR TESTING ONLY!
     */
    async forceNocAchWithdrawal(forceNocAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return unwrapAsync(testSimulationForceNocAchWithdrawal(this, forceNocAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal Rejection
     *
     * @remarks
     * Forces rejection of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
     */
    async forceRejectAchWithdrawal(forceRejectAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return unwrapAsync(testSimulationForceRejectAchWithdrawal(this, forceRejectAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal Return
     *
     * @remarks
     * Forces a Nacha return on a completed ACH withdrawal. FOR TESTING ONLY!
     */
    async forceReturnAchWithdrawal(forceReturnAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return unwrapAsync(testSimulationForceReturnAchWithdrawal(this, forceReturnAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * Get Relationship Micro Deposit Verification
     *
     * @remarks
     * Gets micro deposit amounts for bank relationships with the `MICRO_DEPOSIT` verification method. FOR TESTING ONLY!
     */
    async getMicroDepositAmounts(accountId, bankRelationshipId, options) {
        return unwrapAsync(testSimulationGetMicroDepositAmounts(this, accountId, bankRelationshipId, options));
    }
    /**
     * Force Approve ICT Deposit
     *
     * @remarks
     * Forces an approval on an existing ICT deposit pending review - FOR TESTING
     */
    async forceApproveIctDeposit(forceApproveIctDepositRequestCreate, accountId, ictDepositId, options) {
        return unwrapAsync(testSimulationForceApproveIctDeposit(this, forceApproveIctDepositRequestCreate, accountId, ictDepositId, options));
    }
    /**
     * Force Reject ICT Deposit
     *
     * @remarks
     * Forces a rejection on an existing ICT deposit pending review - FOR TESTING
     */
    async forceRejectIctDeposit(forceRejectIctDepositRequestCreate, accountId, ictDepositId, options) {
        return unwrapAsync(testSimulationForceRejectIctDeposit(this, forceRejectIctDepositRequestCreate, accountId, ictDepositId, options));
    }
    /**
     * Force Approve ICT Withdrawal
     *
     * @remarks
     * Forces an approval on an existing ICT withdrawal pending review - FOR TESTING
     */
    async forceApproveIctWithdrawal(forceApproveIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options) {
        return unwrapAsync(testSimulationForceApproveIctWithdrawal(this, forceApproveIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options));
    }
    /**
     * Force Reject ICT Withdrawal
     *
     * @remarks
     * Forces a rejection on an existing ICT withdrawal pending review - FOR TESTING
     */
    async forceRejectIctWithdrawal(forceRejectIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options) {
        return unwrapAsync(testSimulationForceRejectIctWithdrawal(this, forceRejectIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options));
    }
    /**
     * Force Approve Wire Withdrawal
     *
     * @remarks
     * Forces an approval on an existing wire withdrawal pending review - FOR TESTING
     */
    async forceApproveWireWithdrawal(forceApproveWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options) {
        return unwrapAsync(testSimulationForceApproveWireWithdrawal(this, forceApproveWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options));
    }
    /**
     * Force Reject Wire Withdrawal
     *
     * @remarks
     * Forces a rejection on an existing wire withdrawal pending review - FOR TESTING
     */
    async forceRejectWireWithdrawal(forceRejectWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options) {
        return unwrapAsync(testSimulationForceRejectWireWithdrawal(this, forceRejectWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options));
    }
    /**
     * Force Approve Cash Journal
     *
     * @remarks
     * Forces approval of an existing cash journal that is pending review FOR TESTING ONLY!
     */
    async forceApproveCashJournal(forceApproveCashJournalRequestCreate, cashJournalId, options) {
        return unwrapAsync(testSimulationForceApproveCashJournal(this, forceApproveCashJournalRequestCreate, cashJournalId, options));
    }
    /**
     * Force Reject Cash Journal
     *
     * @remarks
     * Forces rejection of an existing cash journal that is pending review FOR TESTING ONLY!
     */
    async forceRejectCashJournal(forceRejectCashJournalRequestCreate, cashJournalId, options) {
        return unwrapAsync(testSimulationForceRejectCashJournal(this, forceRejectCashJournalRequestCreate, cashJournalId, options));
    }
}
//# sourceMappingURL=testsimulation.js.map