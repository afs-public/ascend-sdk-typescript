/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { personManagementAssignLargeTrader } from "../funcs/personManagementAssignLargeTrader.js";
import { personManagementAssignLargeTraderLegalEntity } from "../funcs/personManagementAssignLargeTraderLegalEntity.js";
import { personManagementCreateLegalEntity } from "../funcs/personManagementCreateLegalEntity.js";
import { personManagementCreateLegalNaturalPerson } from "../funcs/personManagementCreateLegalNaturalPerson.js";
import { personManagementEndLargeTrader } from "../funcs/personManagementEndLargeTrader.js";
import { personManagementEndLargeTraderLegalNaturalPerson } from "../funcs/personManagementEndLargeTraderLegalNaturalPerson.js";
import { personManagementGetLegalEntity } from "../funcs/personManagementGetLegalEntity.js";
import { personManagementGetLegalNaturalPerson } from "../funcs/personManagementGetLegalNaturalPerson.js";
import { personManagementListLegalEntities } from "../funcs/personManagementListLegalEntities.js";
import { personManagementListLegalNaturalPersons } from "../funcs/personManagementListLegalNaturalPersons.js";
import { personManagementUpdateLegalEntity } from "../funcs/personManagementUpdateLegalEntity.js";
import { personManagementUpdateLegalNaturalPerson } from "../funcs/personManagementUpdateLegalNaturalPerson.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class PersonManagement extends ClientSDK {
    /**
     * Create Legal Natural Person
     *
     * @remarks
     * Creates a Legal Natural Person.
     */
    async createLegalNaturalPerson(request, options) {
        return unwrapAsync(personManagementCreateLegalNaturalPerson(this, request, options));
    }
    /**
     * List Legal Natural Persons
     *
     * @remarks
     * Gets a list of Legal Natural Person records based on search criteria.
     */
    async listLegalNaturalPersons(pageSize, pageToken, orderBy, filter, options) {
        return unwrapResultIterator(personManagementListLegalNaturalPersons(this, pageSize, pageToken, orderBy, filter, options));
    }
    /**
     * Get Legal Natural Persons
     *
     * @remarks
     * Get Legal Natural Person
     */
    async getLegalNaturalPerson(legalNaturalPersonId, options) {
        return unwrapAsync(personManagementGetLegalNaturalPerson(this, legalNaturalPersonId, options));
    }
    /**
     * Update Legal Natural Person
     *
     * @remarks
     * Updates a Legal Natural Person.
     */
    async updateLegalNaturalPerson(legalNaturalPersonUpdate, legalNaturalPersonId, updateMask, options) {
        return unwrapAsync(personManagementUpdateLegalNaturalPerson(this, legalNaturalPersonUpdate, legalNaturalPersonId, updateMask, options));
    }
    /**
     * Assign Large Trader
     *
     * @remarks
     * Assigns a person's Large Trader ID.
     */
    async assignLargeTrader(assignLargeTraderRequestCreate, legalNaturalPersonId, options) {
        return unwrapAsync(personManagementAssignLargeTrader(this, assignLargeTraderRequestCreate, legalNaturalPersonId, options));
    }
    /**
     * End Large Trader
     *
     * @remarks
     * Removes a person's Large Trader ID.
     */
    async endLargeTraderLegalNaturalPerson(endLargeTraderRequestCreate, legalNaturalPersonId, options) {
        return unwrapAsync(personManagementEndLargeTraderLegalNaturalPerson(this, endLargeTraderRequestCreate, legalNaturalPersonId, options));
    }
    /**
     * Create Legal Entity
     *
     * @remarks
     * Creates a Legal Entity.
     */
    async createLegalEntity(request, options) {
        return unwrapAsync(personManagementCreateLegalEntity(this, request, options));
    }
    /**
     * List Legal Entity
     *
     * @remarks
     * Gets a list of Legal Entity records based on search criteria.
     */
    async listLegalEntities(pageSize, pageToken, orderBy, filter, options) {
        return unwrapResultIterator(personManagementListLegalEntities(this, pageSize, pageToken, orderBy, filter, options));
    }
    /**
     * Get Legal Entity
     *
     * @remarks
     * Get Legal Entity
     */
    async getLegalEntity(legalEntityId, options) {
        return unwrapAsync(personManagementGetLegalEntity(this, legalEntityId, options));
    }
    /**
     * Update Legal Entity
     *
     * @remarks
     * Updates a Legal Entity.
     */
    async updateLegalEntity(legalEntityUpdate, legalEntityId, updateMask, options) {
        return unwrapAsync(personManagementUpdateLegalEntity(this, legalEntityUpdate, legalEntityId, updateMask, options));
    }
    /**
     * Assign Entity Large Trader
     *
     * @remarks
     * Assigns a person's Large Trader ID.
     */
    async assignLargeTraderLegalEntity(assignLargeTraderRequestCreate, legalEntityId, options) {
        return unwrapAsync(personManagementAssignLargeTraderLegalEntity(this, assignLargeTraderRequestCreate, legalEntityId, options));
    }
    /**
     * End Entity Large Trader
     *
     * @remarks
     * Removes a person's Large Trader ID.
     */
    async endLargeTrader(endLargeTraderRequestCreate, legalEntityId, options) {
        return unwrapAsync(personManagementEndLargeTrader(this, endLargeTraderRequestCreate, legalEntityId, options));
    }
}
//# sourceMappingURL=personmanagement.js.map