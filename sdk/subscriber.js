/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { subscriberCreatePushSubscription } from "../funcs/subscriberCreatePushSubscription.js";
import { subscriberDeletePushSubscription } from "../funcs/subscriberDeletePushSubscription.js";
import { subscriberGetPushSubscription } from "../funcs/subscriberGetPushSubscription.js";
import { subscriberGetPushSubscriptionDelivery } from "../funcs/subscriberGetPushSubscriptionDelivery.js";
import { subscriberListPushSubscriptionDeliveries } from "../funcs/subscriberListPushSubscriptionDeliveries.js";
import { subscriberListPushSubscriptions } from "../funcs/subscriberListPushSubscriptions.js";
import { subscriberUpdatePushSubscription } from "../funcs/subscriberUpdatePushSubscription.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Subscriber extends ClientSDK {
    /**
     * Create Push Subscription
     *
     * @remarks
     * Creates a new push subscription for event notifications.
     */
    async createPushSubscription(request, options) {
        return unwrapAsync(subscriberCreatePushSubscription(this, request, options));
    }
    /**
     * List Push Subscriptions
     *
     * @remarks
     * Gets a list of push subscriptions.
     */
    async listPushSubscriptions(filter, pageSize, pageToken, options) {
        return unwrapResultIterator(subscriberListPushSubscriptions(this, filter, pageSize, pageToken, options));
    }
    /**
     * Get Push Subscription
     *
     * @remarks
     * Gets the details of a specific push subscription.
     */
    async getPushSubscription(subscriptionId, options) {
        return unwrapAsync(subscriberGetPushSubscription(this, subscriptionId, options));
    }
    /**
     * Update Subscription
     *
     * @remarks
     * Updates the details of a push subscription.
     */
    async updatePushSubscription(pushSubscriptionUpdate, subscriptionId, updateMask, options) {
        return unwrapAsync(subscriberUpdatePushSubscription(this, pushSubscriptionUpdate, subscriptionId, updateMask, options));
    }
    /**
     * Delete Subscription
     *
     * @remarks
     * Stops receiving events from a push subscription, and then deletes it.
     */
    async deletePushSubscription(subscriptionId, options) {
        return unwrapAsync(subscriberDeletePushSubscription(this, subscriptionId, options));
    }
    /**
     * Get Subscription Event Delivery
     *
     * @remarks
     * Gets the details of a specific push subscription delivery.
     */
    async getPushSubscriptionDelivery(subscriptionId, deliveryId, options) {
        return unwrapAsync(subscriberGetPushSubscriptionDelivery(this, subscriptionId, deliveryId, options));
    }
    /**
     * List Push Subscription Event Deliveries
     *
     * @remarks
     * Gets a list of a push subscription's event deliveries.
     */
    async listPushSubscriptionDeliveries(subscriptionId, filter, pageSize, pageToken, options) {
        return unwrapResultIterator(subscriberListPushSubscriptionDeliveries(this, subscriptionId, filter, pageSize, pageToken, options));
    }
}
//# sourceMappingURL=subscriber.js.map