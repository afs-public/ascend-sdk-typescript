/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Describes the contents of a document and how it is used; Required for all identity documents
 */
export var IDDocumentUploadRequestCreateDocumentType;
(function (IDDocumentUploadRequestCreateDocumentType) {
    IDDocumentUploadRequestCreateDocumentType["IdDocumentTypeUnspecified"] = "ID_DOCUMENT_TYPE_UNSPECIFIED";
    IDDocumentUploadRequestCreateDocumentType["BirthCertificate"] = "BIRTH_CERTIFICATE";
    IDDocumentUploadRequestCreateDocumentType["CustomerIdentificationProcess"] = "CUSTOMER_IDENTIFICATION_PROCESS";
    IDDocumentUploadRequestCreateDocumentType["DeathCertificate"] = "DEATH_CERTIFICATE";
    IDDocumentUploadRequestCreateDocumentType["DrivingLicense"] = "DRIVING_LICENSE";
    IDDocumentUploadRequestCreateDocumentType["EmployerConsentForm407Letter"] = "EMPLOYER_CONSENT_FORM_407_LETTER";
    IDDocumentUploadRequestCreateDocumentType["MarriageCertificate"] = "MARRIAGE_CERTIFICATE";
    IDDocumentUploadRequestCreateDocumentType["Passport"] = "PASSPORT";
    IDDocumentUploadRequestCreateDocumentType["ProofOfTaxId"] = "PROOF_OF_TAX_ID";
    IDDocumentUploadRequestCreateDocumentType["SocialSecurityDocument"] = "SOCIAL_SECURITY_DOCUMENT";
    IDDocumentUploadRequestCreateDocumentType["ThirdPartyCipResults"] = "THIRD_PARTY_CIP_RESULTS";
    IDDocumentUploadRequestCreateDocumentType["StateIdCard"] = "STATE_ID_CARD";
    IDDocumentUploadRequestCreateDocumentType["NationalIdCard"] = "NATIONAL_ID_CARD";
    IDDocumentUploadRequestCreateDocumentType["PermanentResidentVisa"] = "PERMANENT_RESIDENT_VISA";
    IDDocumentUploadRequestCreateDocumentType["IrisItinLetter"] = "IRIS_ITIN_LETTER";
    IDDocumentUploadRequestCreateDocumentType["UtilityBill"] = "UTILITY_BILL";
    IDDocumentUploadRequestCreateDocumentType["MilitaryIdCard"] = "MILITARY_ID_CARD";
    IDDocumentUploadRequestCreateDocumentType["MortgageStatement"] = "MORTGAGE_STATEMENT";
    IDDocumentUploadRequestCreateDocumentType["LeaseAgreement"] = "LEASE_AGREEMENT";
    IDDocumentUploadRequestCreateDocumentType["ExecutorCertification"] = "EXECUTOR_CERTIFICATION";
    IDDocumentUploadRequestCreateDocumentType["TrusteeCertification"] = "TRUSTEE_CERTIFICATION";
    IDDocumentUploadRequestCreateDocumentType["Selfie"] = "SELFIE";
    IDDocumentUploadRequestCreateDocumentType["CertOfSoleOfficer"] = "CERT_OF_SOLE_OFFICER";
    IDDocumentUploadRequestCreateDocumentType["CertificationCorrespondentAccounts"] = "CERTIFICATION_CORRESPONDENT_ACCOUNTS";
    IDDocumentUploadRequestCreateDocumentType["CertificationForeignBanks"] = "CERTIFICATION_FOREIGN_BANKS";
    IDDocumentUploadRequestCreateDocumentType["CharterArticlesOfIncorporation"] = "CHARTER_ARTICLES_OF_INCORPORATION";
    IDDocumentUploadRequestCreateDocumentType["DivorceDecree"] = "DIVORCE_DECREE";
    IDDocumentUploadRequestCreateDocumentType["ProofOfResidence"] = "PROOF_OF_RESIDENCE";
    IDDocumentUploadRequestCreateDocumentType["BoReportingExemptionProof"] = "BO_REPORTING_EXEMPTION_PROOF";
    IDDocumentUploadRequestCreateDocumentType["OperatingAgreement"] = "OPERATING_AGREEMENT";
    IDDocumentUploadRequestCreateDocumentType["RegisterOfMembers"] = "REGISTER_OF_MEMBERS";
    IDDocumentUploadRequestCreateDocumentType["BoardResolution"] = "BOARD_RESOLUTION";
    IDDocumentUploadRequestCreateDocumentType["TrustDeedsAgreement"] = "TRUST_DEEDS_AGREEMENT";
    IDDocumentUploadRequestCreateDocumentType["CorporateBylaws"] = "CORPORATE_BYLAWS";
    IDDocumentUploadRequestCreateDocumentType["ShareholderAgreement"] = "SHAREHOLDER_AGREEMENT";
    IDDocumentUploadRequestCreateDocumentType["CorporateRecords"] = "CORPORATE_RECORDS";
    IDDocumentUploadRequestCreateDocumentType["ArticlesOfOrganization"] = "ARTICLES_OF_ORGANIZATION";
})(IDDocumentUploadRequestCreateDocumentType || (IDDocumentUploadRequestCreateDocumentType = {}));
/** @internal */
export const IDDocumentUploadRequestCreateDocumentType$inboundSchema = z
    .union([
    z.nativeEnum(IDDocumentUploadRequestCreateDocumentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IDDocumentUploadRequestCreateDocumentType$outboundSchema = z.union([
    z.nativeEnum(IDDocumentUploadRequestCreateDocumentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IDDocumentUploadRequestCreateDocumentType$;
(function (IDDocumentUploadRequestCreateDocumentType$) {
    /** @deprecated use `IDDocumentUploadRequestCreateDocumentType$inboundSchema` instead. */
    IDDocumentUploadRequestCreateDocumentType$.inboundSchema = IDDocumentUploadRequestCreateDocumentType$inboundSchema;
    /** @deprecated use `IDDocumentUploadRequestCreateDocumentType$outboundSchema` instead. */
    IDDocumentUploadRequestCreateDocumentType$.outboundSchema = IDDocumentUploadRequestCreateDocumentType$outboundSchema;
})(IDDocumentUploadRequestCreateDocumentType$ || (IDDocumentUploadRequestCreateDocumentType$ = {}));
/** @internal */
export const IDDocumentUploadRequestCreate$inboundSchema = z.object({
    correspondent_id: z.string(),
    document_type: IDDocumentUploadRequestCreateDocumentType$inboundSchema,
    legal_natural_person_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "document_type": "documentType",
        "legal_natural_person_id": "legalNaturalPersonId",
    });
});
/** @internal */
export const IDDocumentUploadRequestCreate$outboundSchema = z.object({
    correspondentId: z.string(),
    documentType: IDDocumentUploadRequestCreateDocumentType$outboundSchema,
    legalNaturalPersonId: z.string(),
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        documentType: "document_type",
        legalNaturalPersonId: "legal_natural_person_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IDDocumentUploadRequestCreate$;
(function (IDDocumentUploadRequestCreate$) {
    /** @deprecated use `IDDocumentUploadRequestCreate$inboundSchema` instead. */
    IDDocumentUploadRequestCreate$.inboundSchema = IDDocumentUploadRequestCreate$inboundSchema;
    /** @deprecated use `IDDocumentUploadRequestCreate$outboundSchema` instead. */
    IDDocumentUploadRequestCreate$.outboundSchema = IDDocumentUploadRequestCreate$outboundSchema;
})(IDDocumentUploadRequestCreate$ || (IDDocumentUploadRequestCreate$ = {}));
export function idDocumentUploadRequestCreateToJSON(idDocumentUploadRequestCreate) {
    return JSON.stringify(IDDocumentUploadRequestCreate$outboundSchema.parse(idDocumentUploadRequestCreate));
}
export function idDocumentUploadRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IDDocumentUploadRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IDDocumentUploadRequestCreate' from JSON`);
}
//# sourceMappingURL=iddocumentuploadrequestcreate.js.map