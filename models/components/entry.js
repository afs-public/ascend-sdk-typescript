/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { Lot$inboundSchema, Lot$outboundSchema, } from "./lot.js";
import { YieldRecord$inboundSchema, YieldRecord$outboundSchema, } from "./yieldrecord.js";
/**
 * Indicates the memo location impacted by an entry
 */
export var AccountMemo;
(function (AccountMemo) {
    AccountMemo["MemoTypeUnspecified"] = "MEMO_TYPE_UNSPECIFIED";
    AccountMemo["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    AccountMemo["Free"] = "FREE";
    AccountMemo["PendingOutgoingAcat"] = "PENDING_OUTGOING_ACAT";
    AccountMemo["PendingDrip"] = "PENDING_DRIP";
    AccountMemo["PendingWithdrawal"] = "PENDING_WITHDRAWAL";
})(AccountMemo || (AccountMemo = {}));
/**
 * The type of asset movement being performed within the lifecycle of an account transfer process
 */
export var AccountTransferType;
(function (AccountTransferType) {
    AccountTransferType["AccountTransferTypeUnspecified"] = "ACCOUNT_TRANSFER_TYPE_UNSPECIFIED";
    AccountTransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    AccountTransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    AccountTransferType["FullAccountTransfer"] = "FULL_ACCOUNT_TRANSFER";
    AccountTransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
    AccountTransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    AccountTransferType["FailReversal"] = "FAIL_REVERSAL";
    AccountTransferType["Reclaim"] = "RECLAIM";
    AccountTransferType["PositionTransferFund"] = "POSITION_TRANSFER_FUND";
    AccountTransferType["SponsoredTransfer"] = "SPONSORED_TRANSFER";
})(AccountTransferType || (AccountTransferType = {}));
/**
 * Indicates whether the account transfer is incoming or outgoing
 */
export var Action;
(function (Action) {
    Action["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    Action["Incoming"] = "INCOMING";
    Action["Outgoing"] = "OUTGOING";
    Action["CashInLieu"] = "CASH_IN_LIEU";
})(Action || (Action = {}));
/**
 * the method used for the account transfer
 */
export var Method;
(function (Method) {
    Method["AccountTransferMethodUnspecified"] = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED";
    Method["Acats"] = "ACATS";
    Method["Internal"] = "INTERNAL";
    Method["Manual"] = "MANUAL";
})(Method || (Method = {}));
/**
 * The execution route Apex used for this trade
 */
export var EntryBrokerCapacity;
(function (EntryBrokerCapacity) {
    EntryBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    EntryBrokerCapacity["Agency"] = "AGENCY";
    EntryBrokerCapacity["Principal"] = "PRINCIPAL";
    EntryBrokerCapacity["Mixed"] = "MIXED";
})(EntryBrokerCapacity || (EntryBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export var EntryPriceAdjustmentType;
(function (EntryPriceAdjustmentType) {
    EntryPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    EntryPriceAdjustmentType["Markup"] = "MARKUP";
    EntryPriceAdjustmentType["Markdown"] = "MARKDOWN";
    EntryPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(EntryPriceAdjustmentType || (EntryPriceAdjustmentType = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
export var Subtype;
(function (Subtype) {
    Subtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    Subtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    Subtype["ApproximateRate"] = "APPROXIMATE_RATE";
    Subtype["DividendArrears"] = "DIVIDEND_ARREARS";
    Subtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    Subtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    Subtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    Subtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    Subtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    Subtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    Subtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    Subtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    Subtype["GrossRate"] = "GROSS_RATE";
    Subtype["InitialDividend"] = "INITIAL_DIVIDEND";
    Subtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    Subtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    Subtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    Subtype["Liquidation"] = "LIQUIDATION";
    Subtype["NetRate"] = "NET_RATE";
    Subtype["Other"] = "OTHER";
    Subtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    Subtype["RegularDividend"] = "REGULAR_DIVIDEND";
    Subtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    Subtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    Subtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    Subtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    Subtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    Subtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    Subtype["Partial"] = "PARTIAL";
    Subtype["Full"] = "FULL";
    Subtype["Maturity"] = "MATURITY";
    Subtype["Termination"] = "TERMINATION";
    Subtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    Subtype["InterimPayment"] = "INTERIM_PAYMENT";
    Subtype["FinalPayment"] = "FINAL_PAYMENT";
})(Subtype || (Subtype = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
export var EntryConversionType;
(function (EntryConversionType) {
    EntryConversionType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryConversionType["Cash"] = "CASH";
    EntryConversionType["Stock"] = "STOCK";
    EntryConversionType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryConversionType || (EntryConversionType = {}));
/**
 * Provides more details on the type of credit
 */
export var CreditType;
(function (CreditType) {
    CreditType["CreditTypeUnspecified"] = "CREDIT_TYPE_UNSPECIFIED";
    CreditType["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    CreditType["WriteOff"] = "WRITE_OFF";
    CreditType["Reimbursement"] = "REIMBURSEMENT";
    CreditType["Promotional"] = "PROMOTIONAL";
    CreditType["FdicInsuredDepositProgram"] = "FDIC_INSURED_DEPOSIT_PROGRAM";
    CreditType["AccountTransferAdjustment"] = "ACCOUNT_TRANSFER_ADJUSTMENT";
})(CreditType || (CreditType = {}));
/**
 * Provides detail on the contribution reason if the deposit is made to a retirement account
 */
export var ContributionType;
(function (ContributionType) {
    ContributionType["ContributionTypeUnspecified"] = "CONTRIBUTION_TYPE_UNSPECIFIED";
    ContributionType["Regular"] = "REGULAR";
    ContributionType["Employee"] = "EMPLOYEE";
    ContributionType["Employer"] = "EMPLOYER";
    ContributionType["Recharacterization"] = "RECHARACTERIZATION";
    ContributionType["Rollover60Day"] = "ROLLOVER_60_DAY";
    ContributionType["RolloverDirect"] = "ROLLOVER_DIRECT";
    ContributionType["Transfer"] = "TRANSFER";
    ContributionType["TrusteeFee"] = "TRUSTEE_FEE";
    ContributionType["Conversion"] = "CONVERSION";
    ContributionType["Repayment"] = "REPAYMENT";
    ContributionType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(ContributionType || (ContributionType = {}));
/**
 * The mechanism by which funds were deposited
 */
export var EntryDepositType;
(function (EntryDepositType) {
    EntryDepositType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    EntryDepositType["Ach"] = "ACH";
    EntryDepositType["Check"] = "CHECK";
    EntryDepositType["Wire"] = "WIRE";
    EntryDepositType["Paypal"] = "PAYPAL";
    EntryDepositType["Rtp"] = "RTP";
    EntryDepositType["Ict"] = "ICT";
    EntryDepositType["Journal"] = "JOURNAL";
    EntryDepositType["ExternalAch"] = "EXTERNAL_ACH";
})(EntryDepositType || (EntryDepositType = {}));
/**
 * Indicates whether the drip memo activity is reserving cash (DRIP_PENDING) or removing the reservation after a successful reinvestment trade
 */
export var EntryAction;
(function (EntryAction) {
    EntryAction["DripActionUnspecified"] = "DRIP_ACTION_UNSPECIFIED";
    EntryAction["DripPending"] = "DRIP_PENDING";
    EntryAction["DripComplete"] = "DRIP_COMPLETE";
})(EntryAction || (EntryAction = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
export var EntryExchangeType;
(function (EntryExchangeType) {
    EntryExchangeType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryExchangeType["Cash"] = "CASH";
    EntryExchangeType["Stock"] = "STOCK";
    EntryExchangeType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryExchangeType || (EntryExchangeType = {}));
/**
 * Enum providing additional information about the type of fee being charged
 */
export var EntryFeeType;
(function (EntryFeeType) {
    EntryFeeType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    EntryFeeType["ClientClearing"] = "CLIENT_CLEARING";
    EntryFeeType["Liquidity"] = "LIQUIDITY";
    EntryFeeType["GeneralPurpose"] = "GENERAL_PURPOSE";
    EntryFeeType["Commission"] = "COMMISSION";
    EntryFeeType["Taf"] = "TAF";
    EntryFeeType["Sec"] = "SEC";
    EntryFeeType["AccountClosing"] = "ACCOUNT_CLOSING";
    EntryFeeType["AccountIra"] = "ACCOUNT_IRA";
    EntryFeeType["AchReturn"] = "ACH_RETURN";
    EntryFeeType["Advisory"] = "ADVISORY";
    EntryFeeType["CheckFee"] = "CHECK_FEE";
    EntryFeeType["Exchange"] = "EXCHANGE";
    EntryFeeType["Management"] = "MANAGEMENT";
    EntryFeeType["Overnight"] = "OVERNIGHT";
    EntryFeeType["Platform"] = "PLATFORM";
    EntryFeeType["Statement"] = "STATEMENT";
    EntryFeeType["StopPayment"] = "STOP_PAYMENT";
    EntryFeeType["WireFee"] = "WIRE_FEE";
    EntryFeeType["Inactivity"] = "INACTIVITY";
    EntryFeeType["AmaService"] = "AMA_SERVICE";
    EntryFeeType["NoticeOfChange"] = "NOTICE_OF_CHANGE";
    EntryFeeType["AccountTransfer"] = "ACCOUNT_TRANSFER";
    EntryFeeType["AgencyProcessing"] = "AGENCY_PROCESSING";
    EntryFeeType["RtpFee"] = "RTP_FEE";
    EntryFeeType["DomesticWireDepositFee"] = "DOMESTIC_WIRE_DEPOSIT_FEE";
    EntryFeeType["DomesticWireWithdrawalFee"] = "DOMESTIC_WIRE_WITHDRAWAL_FEE";
    EntryFeeType["InternationalWireDepositFee"] = "INTERNATIONAL_WIRE_DEPOSIT_FEE";
    EntryFeeType["InternationalWireWithdrawalFee"] = "INTERNATIONAL_WIRE_WITHDRAWAL_FEE";
    EntryFeeType["BrokerFee"] = "BROKER_FEE";
    EntryFeeType["OccFee"] = "OCC_FEE";
    EntryFeeType["ContractFee"] = "CONTRACT_FEE";
    EntryFeeType["OptionsRegulatory"] = "OPTIONS_REGULATORY";
    EntryFeeType["FinancialTransactionTax"] = "FINANCIAL_TRANSACTION_TAX";
    EntryFeeType["RegularCheckDelivery"] = "REGULAR_CHECK_DELIVERY";
    EntryFeeType["OvernightCheckDelivery"] = "OVERNIGHT_CHECK_DELIVERY";
    EntryFeeType["SaturdayCheckDelivery"] = "SATURDAY_CHECK_DELIVERY";
    EntryFeeType["OvernightCheckToBroker"] = "OVERNIGHT_CHECK_TO_BROKER";
    EntryFeeType["InternationalCheckOvernightDelivery"] = "INTERNATIONAL_CHECK_OVERNIGHT_DELIVERY";
    EntryFeeType["InternationalCheckRegularDelivery"] = "INTERNATIONAL_CHECK_REGULAR_DELIVERY";
    EntryFeeType["PrintCheckAtFirm"] = "PRINT_CHECK_AT_FIRM";
    EntryFeeType["VoidedCheck"] = "VOIDED_CHECK";
    EntryFeeType["StopPaymentAfter180Days"] = "STOP_PAYMENT_AFTER_180_DAYS";
})(EntryFeeType || (EntryFeeType = {}));
/**
 * Used to calculate broadridge blotter code
 */
export var EntryFlipBrokerCapacity;
(function (EntryFlipBrokerCapacity) {
    EntryFlipBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    EntryFlipBrokerCapacity["Agency"] = "AGENCY";
    EntryFlipBrokerCapacity["Principal"] = "PRINCIPAL";
    EntryFlipBrokerCapacity["Mixed"] = "MIXED";
})(EntryFlipBrokerCapacity || (EntryFlipBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export var EntryFlipPriceAdjustmentType;
(function (EntryFlipPriceAdjustmentType) {
    EntryFlipPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    EntryFlipPriceAdjustmentType["Markup"] = "MARKUP";
    EntryFlipPriceAdjustmentType["Markdown"] = "MARKDOWN";
    EntryFlipPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(EntryFlipPriceAdjustmentType || (EntryFlipPriceAdjustmentType = {}));
/**
 * Indicates whether shares are being allocated or deallocated
 */
export var EntryFpslAction;
(function (EntryFpslAction) {
    EntryFpslAction["FpslActionUnspecified"] = "FPSL_ACTION_UNSPECIFIED";
    EntryFpslAction["Allocate"] = "ALLOCATE";
    EntryFpslAction["Deallocate"] = "DEALLOCATE";
})(EntryFpslAction || (EntryFpslAction = {}));
export var InterestType;
(function (InterestType) {
    InterestType["InterestTypeUnspecified"] = "INTEREST_TYPE_UNSPECIFIED";
    InterestType["Credit"] = "CREDIT";
    InterestType["Debit"] = "DEBIT";
})(InterestType || (InterestType = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
export var EntryLiquidationAction;
(function (EntryLiquidationAction) {
    EntryLiquidationAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryLiquidationAction["Incoming"] = "INCOMING";
    EntryLiquidationAction["Outgoing"] = "OUTGOING";
    EntryLiquidationAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryLiquidationAction || (EntryLiquidationAction = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
export var EntrySubtype;
(function (EntrySubtype) {
    EntrySubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    EntrySubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    EntrySubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    EntrySubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    EntrySubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    EntrySubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    EntrySubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    EntrySubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    EntrySubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    EntrySubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    EntrySubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    EntrySubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    EntrySubtype["GrossRate"] = "GROSS_RATE";
    EntrySubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    EntrySubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    EntrySubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    EntrySubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    EntrySubtype["Liquidation"] = "LIQUIDATION";
    EntrySubtype["NetRate"] = "NET_RATE";
    EntrySubtype["Other"] = "OTHER";
    EntrySubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    EntrySubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    EntrySubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    EntrySubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    EntrySubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    EntrySubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    EntrySubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    EntrySubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    EntrySubtype["Partial"] = "PARTIAL";
    EntrySubtype["Full"] = "FULL";
    EntrySubtype["Maturity"] = "MATURITY";
    EntrySubtype["Termination"] = "TERMINATION";
    EntrySubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    EntrySubtype["InterimPayment"] = "INTERIM_PAYMENT";
    EntrySubtype["FinalPayment"] = "FINAL_PAYMENT";
})(EntrySubtype || (EntrySubtype = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
export var EntryMergerAction;
(function (EntryMergerAction) {
    EntryMergerAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryMergerAction["Incoming"] = "INCOMING";
    EntryMergerAction["Outgoing"] = "OUTGOING";
    EntryMergerAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryMergerAction || (EntryMergerAction = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
export var EntryMergerType;
(function (EntryMergerType) {
    EntryMergerType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryMergerType["Cash"] = "CASH";
    EntryMergerType["Stock"] = "STOCK";
    EntryMergerType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryMergerType || (EntryMergerType = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
export var EntryNameChangeAction;
(function (EntryNameChangeAction) {
    EntryNameChangeAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryNameChangeAction["Incoming"] = "INCOMING";
    EntryNameChangeAction["Outgoing"] = "OUTGOING";
    EntryNameChangeAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryNameChangeAction || (EntryNameChangeAction = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
export var EntryRedemptionFullAction;
(function (EntryRedemptionFullAction) {
    EntryRedemptionFullAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryRedemptionFullAction["Incoming"] = "INCOMING";
    EntryRedemptionFullAction["Outgoing"] = "OUTGOING";
    EntryRedemptionFullAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryRedemptionFullAction || (EntryRedemptionFullAction = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
export var EntryRedemptionFullSubtype;
(function (EntryRedemptionFullSubtype) {
    EntryRedemptionFullSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    EntryRedemptionFullSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    EntryRedemptionFullSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    EntryRedemptionFullSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    EntryRedemptionFullSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    EntryRedemptionFullSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    EntryRedemptionFullSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    EntryRedemptionFullSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    EntryRedemptionFullSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    EntryRedemptionFullSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    EntryRedemptionFullSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    EntryRedemptionFullSubtype["GrossRate"] = "GROSS_RATE";
    EntryRedemptionFullSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    EntryRedemptionFullSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    EntryRedemptionFullSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    EntryRedemptionFullSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    EntryRedemptionFullSubtype["Liquidation"] = "LIQUIDATION";
    EntryRedemptionFullSubtype["NetRate"] = "NET_RATE";
    EntryRedemptionFullSubtype["Other"] = "OTHER";
    EntryRedemptionFullSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    EntryRedemptionFullSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    EntryRedemptionFullSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    EntryRedemptionFullSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    EntryRedemptionFullSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    EntryRedemptionFullSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    EntryRedemptionFullSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["Partial"] = "PARTIAL";
    EntryRedemptionFullSubtype["Full"] = "FULL";
    EntryRedemptionFullSubtype["Maturity"] = "MATURITY";
    EntryRedemptionFullSubtype["Termination"] = "TERMINATION";
    EntryRedemptionFullSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    EntryRedemptionFullSubtype["InterimPayment"] = "INTERIM_PAYMENT";
    EntryRedemptionFullSubtype["FinalPayment"] = "FINAL_PAYMENT";
})(EntryRedemptionFullSubtype || (EntryRedemptionFullSubtype = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export var EntryRedemptionPartialAction;
(function (EntryRedemptionPartialAction) {
    EntryRedemptionPartialAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryRedemptionPartialAction["Incoming"] = "INCOMING";
    EntryRedemptionPartialAction["Outgoing"] = "OUTGOING";
    EntryRedemptionPartialAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryRedemptionPartialAction || (EntryRedemptionPartialAction = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export var EntryReverseStockSplitAction;
(function (EntryReverseStockSplitAction) {
    EntryReverseStockSplitAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryReverseStockSplitAction["Incoming"] = "INCOMING";
    EntryReverseStockSplitAction["Outgoing"] = "OUTGOING";
    EntryReverseStockSplitAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryReverseStockSplitAction || (EntryReverseStockSplitAction = {}));
/**
 * Denotes whether the trade is a buy or sell
 */
export var EntrySide;
(function (EntrySide) {
    EntrySide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    EntrySide["Buy"] = "BUY";
    EntrySide["Sell"] = "SELL";
})(EntrySide || (EntrySide = {}));
/**
 * Indicates whether the trade is opening a new position or closing an existing position Should be populated if possible for trades; the side modifier for the trade
 */
export var EntrySideModifier;
(function (EntrySideModifier) {
    EntrySideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    EntrySideModifier["Short"] = "SHORT";
    EntrySideModifier["ShortExempt"] = "SHORT_EXEMPT";
    EntrySideModifier["ShortCover"] = "SHORT_COVER";
    EntrySideModifier["Open"] = "OPEN";
    EntrySideModifier["Close"] = "CLOSE";
})(EntrySideModifier || (EntrySideModifier = {}));
/**
 * Set to be NEW for BookEntries, other statuses will be assigned via ModifyActivities; the state of the entry
 */
export var EntryState;
(function (EntryState) {
    EntryState["EntryStateUnspecified"] = "ENTRY_STATE_UNSPECIFIED";
    EntryState["New"] = "NEW";
    EntryState["Reversal"] = "REVERSAL";
    EntryState["Correction"] = "CORRECTION";
})(EntryState || (EntryState = {}));
/**
 * Indicates purchase or redemption of the sweep asset
 */
export var EntrySweepAction;
(function (EntrySweepAction) {
    EntrySweepAction["SweepActionUnspecified"] = "SWEEP_ACTION_UNSPECIFIED";
    EntrySweepAction["Purchase"] = "PURCHASE";
    EntrySweepAction["Redemption"] = "REDEMPTION";
})(EntrySweepAction || (EntrySweepAction = {}));
/**
 * Sweep program that cash is being swept to/ from
 */
export var EntrySweepType;
(function (EntrySweepType) {
    EntrySweepType["SweepTypeUnspecified"] = "SWEEP_TYPE_UNSPECIFIED";
    EntrySweepType["Fdic"] = "FDIC";
    EntrySweepType["MoneyMarket"] = "MONEY_MARKET";
})(EntrySweepType || (EntrySweepType = {}));
/**
 * the type of tender offer
 */
export var TenderOfferType;
(function (TenderOfferType) {
    TenderOfferType["TenderOfferTypeUnspecified"] = "TENDER_OFFER_TYPE_UNSPECIFIED";
    TenderOfferType["OddLotTender"] = "ODD_LOT_TENDER";
    TenderOfferType["DutchAuction"] = "DUTCH_AUCTION";
})(TenderOfferType || (TenderOfferType = {}));
/**
 * Used to calculate broadridge blotter code
 */
export var EntryTradeBrokerCapacity;
(function (EntryTradeBrokerCapacity) {
    EntryTradeBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    EntryTradeBrokerCapacity["Agency"] = "AGENCY";
    EntryTradeBrokerCapacity["Principal"] = "PRINCIPAL";
    EntryTradeBrokerCapacity["Mixed"] = "MIXED";
})(EntryTradeBrokerCapacity || (EntryTradeBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export var EntryTradePriceAdjustmentType;
(function (EntryTradePriceAdjustmentType) {
    EntryTradePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    EntryTradePriceAdjustmentType["Markup"] = "MARKUP";
    EntryTradePriceAdjustmentType["Markdown"] = "MARKDOWN";
    EntryTradePriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(EntryTradePriceAdjustmentType || (EntryTradePriceAdjustmentType = {}));
/**
 * Provides more detail on the type of transfer
 */
export var EntryTransferType;
(function (EntryTransferType) {
    EntryTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    EntryTransferType["TransferConversion"] = "TRANSFER_CONVERSION";
    EntryTransferType["Deconversion"] = "DECONVERSION";
    EntryTransferType["Migration"] = "MIGRATION";
    EntryTransferType["ManualAdjustment"] = "MANUAL_ADJUSTMENT";
    EntryTransferType["InternalConversion"] = "INTERNAL_CONVERSION";
})(EntryTransferType || (EntryTransferType = {}));
/**
 * The Type of the entry; determines the set of mandatory fields as well as informing downstream processes how to handle this record
 */
export var EntryType;
(function (EntryType) {
    EntryType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    EntryType["Trade"] = "TRADE";
    EntryType["Movement"] = "MOVEMENT";
    EntryType["Memo"] = "MEMO";
    EntryType["CorporateAction"] = "CORPORATE_ACTION";
})(EntryType || (EntryType = {}));
/**
 * Provides information on the reason for the distribution from a retirement account
 */
export var DistributionType;
(function (DistributionType) {
    DistributionType["DistributionTypeUnspecified"] = "DISTRIBUTION_TYPE_UNSPECIFIED";
    DistributionType["Premature"] = "PREMATURE";
    DistributionType["Disability"] = "DISABILITY";
    DistributionType["Death"] = "DEATH";
    DistributionType["Normal"] = "NORMAL";
    DistributionType["Sosepp"] = "SOSEPP";
    DistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    DistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    DistributionType["DistTransfer"] = "DIST_TRANSFER";
    DistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    DistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    DistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    DistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    DistributionType["DistConversion"] = "DIST_CONVERSION";
    DistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    DistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    DistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    DistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    DistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    DistributionType["Revocation"] = "REVOCATION";
    DistributionType["NonReportable"] = "NON_REPORTABLE";
})(DistributionType || (DistributionType = {}));
/**
 * Used for descriptive purposes only. Indicates the type of retirement account
 */
export var RetirementType;
(function (RetirementType) {
    RetirementType["RetirementTypeUnspecified"] = "RETIREMENT_TYPE_UNSPECIFIED";
    RetirementType["Ira"] = "IRA";
    RetirementType["Sep"] = "SEP";
    RetirementType["Simple"] = "SIMPLE";
    RetirementType["Keogh"] = "KEOGH";
    RetirementType["Roth"] = "ROTH";
    RetirementType["Qp"] = "QP";
    RetirementType["RolloverIra"] = "ROLLOVER_IRA";
})(RetirementType || (RetirementType = {}));
/**
 * Provides information on the method through which a deposit/ withdrawal was initiated
 */
export var EntryWithdrawalType;
(function (EntryWithdrawalType) {
    EntryWithdrawalType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    EntryWithdrawalType["Ach"] = "ACH";
    EntryWithdrawalType["Check"] = "CHECK";
    EntryWithdrawalType["Wire"] = "WIRE";
    EntryWithdrawalType["Paypal"] = "PAYPAL";
    EntryWithdrawalType["Rtp"] = "RTP";
    EntryWithdrawalType["Ict"] = "ICT";
    EntryWithdrawalType["Journal"] = "JOURNAL";
    EntryWithdrawalType["ExternalAch"] = "EXTERNAL_ACH";
})(EntryWithdrawalType || (EntryWithdrawalType = {}));
/**
 * Indicates the state of the withdrawal review
 */
export var Review;
(function (Review) {
    Review["ReviewStateUnspecified"] = "REVIEW_STATE_UNSPECIFIED";
    Review["ReviewStatePending"] = "REVIEW_STATE_PENDING";
    Review["ReviewStateComplete"] = "REVIEW_STATE_COMPLETE";
})(Review || (Review = {}));
export var EntryWithholdingState;
(function (EntryWithholdingState) {
    EntryWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    EntryWithholdingState["Ca"] = "CA";
    EntryWithholdingState["Me"] = "ME";
    EntryWithholdingState["Vt"] = "VT";
    EntryWithholdingState["Al"] = "AL";
    EntryWithholdingState["Ak"] = "AK";
    EntryWithholdingState["Az"] = "AZ";
    EntryWithholdingState["Ar"] = "AR";
    EntryWithholdingState["Co"] = "CO";
    EntryWithholdingState["Ct"] = "CT";
    EntryWithholdingState["De"] = "DE";
    EntryWithholdingState["Fl"] = "FL";
    EntryWithholdingState["Ga"] = "GA";
    EntryWithholdingState["Hi"] = "HI";
    EntryWithholdingState["Id"] = "ID";
    EntryWithholdingState["Il"] = "IL";
    EntryWithholdingState["In"] = "IN";
    EntryWithholdingState["Ia"] = "IA";
    EntryWithholdingState["Ks"] = "KS";
    EntryWithholdingState["Ky"] = "KY";
    EntryWithholdingState["La"] = "LA";
    EntryWithholdingState["Md"] = "MD";
    EntryWithholdingState["Ma"] = "MA";
    EntryWithholdingState["Mi"] = "MI";
    EntryWithholdingState["Mn"] = "MN";
    EntryWithholdingState["Ms"] = "MS";
    EntryWithholdingState["Mo"] = "MO";
    EntryWithholdingState["Mt"] = "MT";
    EntryWithholdingState["Ne"] = "NE";
    EntryWithholdingState["Nv"] = "NV";
    EntryWithholdingState["Nh"] = "NH";
    EntryWithholdingState["Nj"] = "NJ";
    EntryWithholdingState["Nm"] = "NM";
    EntryWithholdingState["Ny"] = "NY";
    EntryWithholdingState["Nc"] = "NC";
    EntryWithholdingState["Nd"] = "ND";
    EntryWithholdingState["Oh"] = "OH";
    EntryWithholdingState["Ok"] = "OK";
    EntryWithholdingState["Or"] = "OR";
    EntryWithholdingState["Pa"] = "PA";
    EntryWithholdingState["Ri"] = "RI";
    EntryWithholdingState["Sc"] = "SC";
    EntryWithholdingState["Sd"] = "SD";
    EntryWithholdingState["Tn"] = "TN";
    EntryWithholdingState["Tx"] = "TX";
    EntryWithholdingState["Ut"] = "UT";
    EntryWithholdingState["Va"] = "VA";
    EntryWithholdingState["Wa"] = "WA";
    EntryWithholdingState["Wv"] = "WV";
    EntryWithholdingState["Wi"] = "WI";
    EntryWithholdingState["Wy"] = "WY";
    EntryWithholdingState["Dc"] = "DC";
})(EntryWithholdingState || (EntryWithholdingState = {}));
/**
 * The type of withholding
 */
export var EntryWithholdingType;
(function (EntryWithholdingType) {
    EntryWithholdingType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    EntryWithholdingType["Federal"] = "FEDERAL";
    EntryWithholdingType["State"] = "STATE";
    EntryWithholdingType["ForeignSecurity"] = "FOREIGN_SECURITY";
    EntryWithholdingType["FederalIra"] = "FEDERAL_IRA";
    EntryWithholdingType["StateIra"] = "STATE_IRA";
    EntryWithholdingType["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(EntryWithholdingType || (EntryWithholdingType = {}));
/** @internal */
export const AcatsPendingOut$inboundSchema = z.object({
    acats_control_number: z.string().optional(),
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
export const AcatsPendingOut$outboundSchema = z.object({
    acatsControlNumber: z.string().optional(),
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsPendingOut$;
(function (AcatsPendingOut$) {
    /** @deprecated use `AcatsPendingOut$inboundSchema` instead. */
    AcatsPendingOut$.inboundSchema = AcatsPendingOut$inboundSchema;
    /** @deprecated use `AcatsPendingOut$outboundSchema` instead. */
    AcatsPendingOut$.outboundSchema = AcatsPendingOut$outboundSchema;
})(AcatsPendingOut$ || (AcatsPendingOut$ = {}));
export function acatsPendingOutToJSON(acatsPendingOut) {
    return JSON.stringify(AcatsPendingOut$outboundSchema.parse(acatsPendingOut));
}
export function acatsPendingOutFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsPendingOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsPendingOut' from JSON`);
}
/** @internal */
export const AccountMemo$inboundSchema = z
    .union([
    z.nativeEnum(AccountMemo),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountMemo$outboundSchema = z.union([
    z.nativeEnum(AccountMemo),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountMemo$;
(function (AccountMemo$) {
    /** @deprecated use `AccountMemo$inboundSchema` instead. */
    AccountMemo$.inboundSchema = AccountMemo$inboundSchema;
    /** @deprecated use `AccountMemo$outboundSchema` instead. */
    AccountMemo$.outboundSchema = AccountMemo$outboundSchema;
})(AccountMemo$ || (AccountMemo$ = {}));
/** @internal */
export const AccountTransferType$inboundSchema = z
    .union([
    z.nativeEnum(AccountTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountTransferType$outboundSchema = z.union([
    z.nativeEnum(AccountTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransferType$;
(function (AccountTransferType$) {
    /** @deprecated use `AccountTransferType$inboundSchema` instead. */
    AccountTransferType$.inboundSchema = AccountTransferType$inboundSchema;
    /** @deprecated use `AccountTransferType$outboundSchema` instead. */
    AccountTransferType$.outboundSchema = AccountTransferType$outboundSchema;
})(AccountTransferType$ || (AccountTransferType$ = {}));
/** @internal */
export const Action$inboundSchema = z
    .union([
    z.nativeEnum(Action),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Action$outboundSchema = z.union([
    z.nativeEnum(Action),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Action$;
(function (Action$) {
    /** @deprecated use `Action$inboundSchema` instead. */
    Action$.inboundSchema = Action$inboundSchema;
    /** @deprecated use `Action$outboundSchema` instead. */
    Action$.outboundSchema = Action$outboundSchema;
})(Action$ || (Action$ = {}));
/** @internal */
export const FairMarketValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const FairMarketValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FairMarketValue$;
(function (FairMarketValue$) {
    /** @deprecated use `FairMarketValue$inboundSchema` instead. */
    FairMarketValue$.inboundSchema = FairMarketValue$inboundSchema;
    /** @deprecated use `FairMarketValue$outboundSchema` instead. */
    FairMarketValue$.outboundSchema = FairMarketValue$outboundSchema;
})(FairMarketValue$ || (FairMarketValue$ = {}));
export function fairMarketValueToJSON(fairMarketValue) {
    return JSON.stringify(FairMarketValue$outboundSchema.parse(fairMarketValue));
}
export function fairMarketValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FairMarketValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FairMarketValue' from JSON`);
}
/** @internal */
export const FairMarketValueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const FairMarketValueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FairMarketValueDate$;
(function (FairMarketValueDate$) {
    /** @deprecated use `FairMarketValueDate$inboundSchema` instead. */
    FairMarketValueDate$.inboundSchema = FairMarketValueDate$inboundSchema;
    /** @deprecated use `FairMarketValueDate$outboundSchema` instead. */
    FairMarketValueDate$.outboundSchema = FairMarketValueDate$outboundSchema;
})(FairMarketValueDate$ || (FairMarketValueDate$ = {}));
export function fairMarketValueDateToJSON(fairMarketValueDate) {
    return JSON.stringify(FairMarketValueDate$outboundSchema.parse(fairMarketValueDate));
}
export function fairMarketValueDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FairMarketValueDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FairMarketValueDate' from JSON`);
}
/** @internal */
export const Method$inboundSchema = z
    .union([
    z.nativeEnum(Method),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Method$outboundSchema = z.union([
    z.nativeEnum(Method),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Method$;
(function (Method$) {
    /** @deprecated use `Method$inboundSchema` instead. */
    Method$.inboundSchema = Method$inboundSchema;
    /** @deprecated use `Method$outboundSchema` instead. */
    Method$.outboundSchema = Method$outboundSchema;
})(Method$ || (Method$ = {}));
/** @internal */
export const AccountTransfer$inboundSchema = z.object({
    acats_asset_sequence_number: z.string().optional(),
    acats_control_number: z.string().optional(),
    account_transfer_type: AccountTransferType$inboundSchema.optional(),
    action: Action$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    contra_party_account_number: z.string().optional(),
    contra_party_id: z.string().optional(),
    fair_market_value: z.nullable(z.lazy(() => FairMarketValue$inboundSchema))
        .optional(),
    fair_market_value_date: z.nullable(z.lazy(() => FairMarketValueDate$inboundSchema)).optional(),
    institution: z.string().optional(),
    method: Method$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_asset_sequence_number": "acatsAssetSequenceNumber",
        "acats_control_number": "acatsControlNumber",
        "account_transfer_type": "accountTransferType",
        "additional_instructions": "additionalInstructions",
        "contra_party_account_number": "contraPartyAccountNumber",
        "contra_party_id": "contraPartyId",
        "fair_market_value": "fairMarketValue",
        "fair_market_value_date": "fairMarketValueDate",
    });
});
/** @internal */
export const AccountTransfer$outboundSchema = z.object({
    acatsAssetSequenceNumber: z.string().optional(),
    acatsControlNumber: z.string().optional(),
    accountTransferType: AccountTransferType$outboundSchema.optional(),
    action: Action$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    contraPartyAccountNumber: z.string().optional(),
    contraPartyId: z.string().optional(),
    fairMarketValue: z.nullable(z.lazy(() => FairMarketValue$outboundSchema))
        .optional(),
    fairMarketValueDate: z.nullable(z.lazy(() => FairMarketValueDate$outboundSchema)).optional(),
    institution: z.string().optional(),
    method: Method$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        acatsAssetSequenceNumber: "acats_asset_sequence_number",
        acatsControlNumber: "acats_control_number",
        accountTransferType: "account_transfer_type",
        additionalInstructions: "additional_instructions",
        contraPartyAccountNumber: "contra_party_account_number",
        contraPartyId: "contra_party_id",
        fairMarketValue: "fair_market_value",
        fairMarketValueDate: "fair_market_value_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransfer$;
(function (AccountTransfer$) {
    /** @deprecated use `AccountTransfer$inboundSchema` instead. */
    AccountTransfer$.inboundSchema = AccountTransfer$inboundSchema;
    /** @deprecated use `AccountTransfer$outboundSchema` instead. */
    AccountTransfer$.outboundSchema = AccountTransfer$outboundSchema;
})(AccountTransfer$ || (AccountTransfer$ = {}));
export function accountTransferToJSON(accountTransfer) {
    return JSON.stringify(AccountTransfer$outboundSchema.parse(accountTransfer));
}
export function accountTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTransfer' from JSON`);
}
/** @internal */
export const EntryAccruedInterest$inboundSchema = z.object({});
/** @internal */
export const EntryAccruedInterest$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryAccruedInterest$;
(function (EntryAccruedInterest$) {
    /** @deprecated use `EntryAccruedInterest$inboundSchema` instead. */
    EntryAccruedInterest$.inboundSchema = EntryAccruedInterest$inboundSchema;
    /** @deprecated use `EntryAccruedInterest$outboundSchema` instead. */
    EntryAccruedInterest$.outboundSchema = EntryAccruedInterest$outboundSchema;
})(EntryAccruedInterest$ || (EntryAccruedInterest$ = {}));
export function entryAccruedInterestToJSON(entryAccruedInterest) {
    return JSON.stringify(EntryAccruedInterest$outboundSchema.parse(entryAccruedInterest));
}
export function entryAccruedInterestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryAccruedInterest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryAccruedInterest' from JSON`);
}
/** @internal */
export const CorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const CorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CorporateActionGeneralInformation$;
(function (CorporateActionGeneralInformation$) {
    /** @deprecated use `CorporateActionGeneralInformation$inboundSchema` instead. */
    CorporateActionGeneralInformation$.inboundSchema = CorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `CorporateActionGeneralInformation$outboundSchema` instead. */
    CorporateActionGeneralInformation$.outboundSchema = CorporateActionGeneralInformation$outboundSchema;
})(CorporateActionGeneralInformation$ || (CorporateActionGeneralInformation$ = {}));
export function corporateActionGeneralInformationToJSON(corporateActionGeneralInformation) {
    return JSON.stringify(CorporateActionGeneralInformation$outboundSchema.parse(corporateActionGeneralInformation));
}
export function corporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const Acquisition$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => CorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const Acquisition$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => CorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Acquisition$;
(function (Acquisition$) {
    /** @deprecated use `Acquisition$inboundSchema` instead. */
    Acquisition$.inboundSchema = Acquisition$inboundSchema;
    /** @deprecated use `Acquisition$outboundSchema` instead. */
    Acquisition$.outboundSchema = Acquisition$outboundSchema;
})(Acquisition$ || (Acquisition$ = {}));
export function acquisitionToJSON(acquisition) {
    return JSON.stringify(Acquisition$outboundSchema.parse(acquisition));
}
export function acquisitionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Acquisition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Acquisition' from JSON`);
}
/** @internal */
export const ActivityDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDate$;
(function (ActivityDate$) {
    /** @deprecated use `ActivityDate$inboundSchema` instead. */
    ActivityDate$.inboundSchema = ActivityDate$inboundSchema;
    /** @deprecated use `ActivityDate$outboundSchema` instead. */
    ActivityDate$.outboundSchema = ActivityDate$outboundSchema;
})(ActivityDate$ || (ActivityDate$ = {}));
export function activityDateToJSON(activityDate) {
    return JSON.stringify(ActivityDate$outboundSchema.parse(activityDate));
}
export function activityDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityDate' from JSON`);
}
/** @internal */
export const EntryBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(EntryBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(EntryBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryBrokerCapacity$;
(function (EntryBrokerCapacity$) {
    /** @deprecated use `EntryBrokerCapacity$inboundSchema` instead. */
    EntryBrokerCapacity$.inboundSchema = EntryBrokerCapacity$inboundSchema;
    /** @deprecated use `EntryBrokerCapacity$outboundSchema` instead. */
    EntryBrokerCapacity$.outboundSchema = EntryBrokerCapacity$outboundSchema;
})(EntryBrokerCapacity$ || (EntryBrokerCapacity$ = {}));
/** @internal */
export const EntryPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPrevailingMarketPrice$;
(function (EntryPrevailingMarketPrice$) {
    /** @deprecated use `EntryPrevailingMarketPrice$inboundSchema` instead. */
    EntryPrevailingMarketPrice$.inboundSchema = EntryPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `EntryPrevailingMarketPrice$outboundSchema` instead. */
    EntryPrevailingMarketPrice$.outboundSchema = EntryPrevailingMarketPrice$outboundSchema;
})(EntryPrevailingMarketPrice$ || (EntryPrevailingMarketPrice$ = {}));
export function entryPrevailingMarketPriceToJSON(entryPrevailingMarketPrice) {
    return JSON.stringify(EntryPrevailingMarketPrice$outboundSchema.parse(entryPrevailingMarketPrice));
}
export function entryPrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPrevailingMarketPrice' from JSON`);
}
/** @internal */
export const EntryPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPriceAdjustmentAmount$;
(function (EntryPriceAdjustmentAmount$) {
    /** @deprecated use `EntryPriceAdjustmentAmount$inboundSchema` instead. */
    EntryPriceAdjustmentAmount$.inboundSchema = EntryPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentAmount$outboundSchema` instead. */
    EntryPriceAdjustmentAmount$.outboundSchema = EntryPriceAdjustmentAmount$outboundSchema;
})(EntryPriceAdjustmentAmount$ || (EntryPriceAdjustmentAmount$ = {}));
export function entryPriceAdjustmentAmountToJSON(entryPriceAdjustmentAmount) {
    return JSON.stringify(EntryPriceAdjustmentAmount$outboundSchema.parse(entryPriceAdjustmentAmount));
}
export function entryPriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const PriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PriceAdjustmentPercent$;
(function (PriceAdjustmentPercent$) {
    /** @deprecated use `PriceAdjustmentPercent$inboundSchema` instead. */
    PriceAdjustmentPercent$.inboundSchema = PriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `PriceAdjustmentPercent$outboundSchema` instead. */
    PriceAdjustmentPercent$.outboundSchema = PriceAdjustmentPercent$outboundSchema;
})(PriceAdjustmentPercent$ || (PriceAdjustmentPercent$ = {}));
export function priceAdjustmentPercentToJSON(priceAdjustmentPercent) {
    return JSON.stringify(PriceAdjustmentPercent$outboundSchema.parse(priceAdjustmentPercent));
}
export function priceAdjustmentPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PriceAdjustmentPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PriceAdjustmentPercent' from JSON`);
}
/** @internal */
export const EntryPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(EntryPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(EntryPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPriceAdjustmentType$;
(function (EntryPriceAdjustmentType$) {
    /** @deprecated use `EntryPriceAdjustmentType$inboundSchema` instead. */
    EntryPriceAdjustmentType$.inboundSchema = EntryPriceAdjustmentType$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentType$outboundSchema` instead. */
    EntryPriceAdjustmentType$.outboundSchema = EntryPriceAdjustmentType$outboundSchema;
})(EntryPriceAdjustmentType$ || (EntryPriceAdjustmentType$ = {}));
/** @internal */
export const PriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => EntryPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => PriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: EntryPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const PriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => EntryPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => PriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: EntryPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PriceAdjustmentRecord$;
(function (PriceAdjustmentRecord$) {
    /** @deprecated use `PriceAdjustmentRecord$inboundSchema` instead. */
    PriceAdjustmentRecord$.inboundSchema = PriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `PriceAdjustmentRecord$outboundSchema` instead. */
    PriceAdjustmentRecord$.outboundSchema = PriceAdjustmentRecord$outboundSchema;
})(PriceAdjustmentRecord$ || (PriceAdjustmentRecord$ = {}));
export function priceAdjustmentRecordToJSON(priceAdjustmentRecord) {
    return JSON.stringify(PriceAdjustmentRecord$outboundSchema.parse(priceAdjustmentRecord));
}
export function priceAdjustmentRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PriceAdjustmentRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PriceAdjustmentRecord' from JSON`);
}
/** @internal */
export const Allocation$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    broker_capacity: EntryBrokerCapacity$inboundSchema.optional(),
    client_memo: z.string().optional(),
    client_order_id: z.string().optional(),
    external_id: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    lots: z.array(Lot$inboundSchema).optional(),
    prevailing_market_price: z.nullable(z.lazy(() => EntryPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => PriceAdjustmentRecord$inboundSchema)).optional(),
    special_instructions: z.array(z.string()).optional(),
    yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "broker_capacity": "brokerCapacity",
        "client_memo": "clientMemo",
        "client_order_id": "clientOrderId",
        "external_id": "externalId",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
export const Allocation$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    brokerCapacity: EntryBrokerCapacity$outboundSchema.optional(),
    clientMemo: z.string().optional(),
    clientOrderId: z.string().optional(),
    externalId: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    lots: z.array(Lot$outboundSchema).optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => EntryPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => PriceAdjustmentRecord$outboundSchema)).optional(),
    specialInstructions: z.array(z.string()).optional(),
    yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        brokerCapacity: "broker_capacity",
        clientMemo: "client_memo",
        clientOrderId: "client_order_id",
        externalId: "external_id",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Allocation$;
(function (Allocation$) {
    /** @deprecated use `Allocation$inboundSchema` instead. */
    Allocation$.inboundSchema = Allocation$inboundSchema;
    /** @deprecated use `Allocation$outboundSchema` instead. */
    Allocation$.outboundSchema = Allocation$outboundSchema;
})(Allocation$ || (Allocation$ = {}));
export function allocationToJSON(allocation) {
    return JSON.stringify(Allocation$outboundSchema.parse(allocation));
}
export function allocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Allocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Allocation' from JSON`);
}
/** @internal */
export const CashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashRate$;
(function (CashRate$) {
    /** @deprecated use `CashRate$inboundSchema` instead. */
    CashRate$.inboundSchema = CashRate$inboundSchema;
    /** @deprecated use `CashRate$outboundSchema` instead. */
    CashRate$.outboundSchema = CashRate$outboundSchema;
})(CashRate$ || (CashRate$ = {}));
export function cashRateToJSON(cashRate) {
    return JSON.stringify(CashRate$outboundSchema.parse(cashRate));
}
export function cashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashRate' from JSON`);
}
/** @internal */
export const EntryCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCorporateActionGeneralInformation$;
(function (EntryCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCorporateActionGeneralInformation$.inboundSchema = EntryCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCorporateActionGeneralInformation$.outboundSchema = EntryCorporateActionGeneralInformation$outboundSchema;
})(EntryCorporateActionGeneralInformation$ || (EntryCorporateActionGeneralInformation$ = {}));
export function entryCorporateActionGeneralInformationToJSON(entryCorporateActionGeneralInformation) {
    return JSON.stringify(EntryCorporateActionGeneralInformation$outboundSchema.parse(entryCorporateActionGeneralInformation));
}
export function entryCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const PaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentDate$;
(function (PaymentDate$) {
    /** @deprecated use `PaymentDate$inboundSchema` instead. */
    PaymentDate$.inboundSchema = PaymentDate$inboundSchema;
    /** @deprecated use `PaymentDate$outboundSchema` instead. */
    PaymentDate$.outboundSchema = PaymentDate$outboundSchema;
})(PaymentDate$ || (PaymentDate$ = {}));
export function paymentDateToJSON(paymentDate) {
    return JSON.stringify(PaymentDate$outboundSchema.parse(paymentDate));
}
export function paymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentDate' from JSON`);
}
/** @internal */
export const EntryBondDefaultQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryBondDefaultQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryBondDefaultQuantity$;
(function (EntryBondDefaultQuantity$) {
    /** @deprecated use `EntryBondDefaultQuantity$inboundSchema` instead. */
    EntryBondDefaultQuantity$.inboundSchema = EntryBondDefaultQuantity$inboundSchema;
    /** @deprecated use `EntryBondDefaultQuantity$outboundSchema` instead. */
    EntryBondDefaultQuantity$.outboundSchema = EntryBondDefaultQuantity$outboundSchema;
})(EntryBondDefaultQuantity$ || (EntryBondDefaultQuantity$ = {}));
export function entryBondDefaultQuantityToJSON(entryBondDefaultQuantity) {
    return JSON.stringify(EntryBondDefaultQuantity$outboundSchema.parse(entryBondDefaultQuantity));
}
export function entryBondDefaultQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryBondDefaultQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryBondDefaultQuantity' from JSON`);
}
/** @internal */
export const BondDefault$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => CashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => PaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryBondDefaultQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const BondDefault$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => CashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => PaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryBondDefaultQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BondDefault$;
(function (BondDefault$) {
    /** @deprecated use `BondDefault$inboundSchema` instead. */
    BondDefault$.inboundSchema = BondDefault$inboundSchema;
    /** @deprecated use `BondDefault$outboundSchema` instead. */
    BondDefault$.outboundSchema = BondDefault$outboundSchema;
})(BondDefault$ || (BondDefault$ = {}));
export function bondDefaultToJSON(bondDefault) {
    return JSON.stringify(BondDefault$outboundSchema.parse(bondDefault));
}
export function bondDefaultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BondDefault$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BondDefault' from JSON`);
}
/** @internal */
export const EntryCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashRate$;
(function (EntryCashRate$) {
    /** @deprecated use `EntryCashRate$inboundSchema` instead. */
    EntryCashRate$.inboundSchema = EntryCashRate$inboundSchema;
    /** @deprecated use `EntryCashRate$outboundSchema` instead. */
    EntryCashRate$.outboundSchema = EntryCashRate$outboundSchema;
})(EntryCashRate$ || (EntryCashRate$ = {}));
export function entryCashRateToJSON(entryCashRate) {
    return JSON.stringify(EntryCashRate$outboundSchema.parse(entryCashRate));
}
export function entryCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashRate' from JSON`);
}
/** @internal */
export const EntryCapitalGainsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryCapitalGainsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCapitalGainsCorporateActionGeneralInformation$;
(function (EntryCapitalGainsCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCapitalGainsCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCapitalGainsCorporateActionGeneralInformation$.inboundSchema = EntryCapitalGainsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCapitalGainsCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCapitalGainsCorporateActionGeneralInformation$.outboundSchema = EntryCapitalGainsCorporateActionGeneralInformation$outboundSchema;
})(EntryCapitalGainsCorporateActionGeneralInformation$ || (EntryCapitalGainsCorporateActionGeneralInformation$ = {}));
export function entryCapitalGainsCorporateActionGeneralInformationToJSON(entryCapitalGainsCorporateActionGeneralInformation) {
    return JSON.stringify(EntryCapitalGainsCorporateActionGeneralInformation$outboundSchema.parse(entryCapitalGainsCorporateActionGeneralInformation));
}
export function entryCapitalGainsCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCapitalGainsCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCapitalGainsCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentDate$;
(function (EntryPaymentDate$) {
    /** @deprecated use `EntryPaymentDate$inboundSchema` instead. */
    EntryPaymentDate$.inboundSchema = EntryPaymentDate$inboundSchema;
    /** @deprecated use `EntryPaymentDate$outboundSchema` instead. */
    EntryPaymentDate$.outboundSchema = EntryPaymentDate$outboundSchema;
})(EntryPaymentDate$ || (EntryPaymentDate$ = {}));
export function entryPaymentDateToJSON(entryPaymentDate) {
    return JSON.stringify(EntryPaymentDate$outboundSchema.parse(entryPaymentDate));
}
export function entryPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentDate' from JSON`);
}
/** @internal */
export const EntryCapitalGainsQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryCapitalGainsQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCapitalGainsQuantity$;
(function (EntryCapitalGainsQuantity$) {
    /** @deprecated use `EntryCapitalGainsQuantity$inboundSchema` instead. */
    EntryCapitalGainsQuantity$.inboundSchema = EntryCapitalGainsQuantity$inboundSchema;
    /** @deprecated use `EntryCapitalGainsQuantity$outboundSchema` instead. */
    EntryCapitalGainsQuantity$.outboundSchema = EntryCapitalGainsQuantity$outboundSchema;
})(EntryCapitalGainsQuantity$ || (EntryCapitalGainsQuantity$ = {}));
export function entryCapitalGainsQuantityToJSON(entryCapitalGainsQuantity) {
    return JSON.stringify(EntryCapitalGainsQuantity$outboundSchema.parse(entryCapitalGainsQuantity));
}
export function entryCapitalGainsQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCapitalGainsQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCapitalGainsQuantity' from JSON`);
}
/** @internal */
export const RecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RecordDate$;
(function (RecordDate$) {
    /** @deprecated use `RecordDate$inboundSchema` instead. */
    RecordDate$.inboundSchema = RecordDate$inboundSchema;
    /** @deprecated use `RecordDate$outboundSchema` instead. */
    RecordDate$.outboundSchema = RecordDate$outboundSchema;
})(RecordDate$ || (RecordDate$ = {}));
export function recordDateToJSON(recordDate) {
    return JSON.stringify(RecordDate$outboundSchema.parse(recordDate));
}
export function recordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RecordDate' from JSON`);
}
/** @internal */
export const CapitalGains$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryCapitalGainsCorporateActionGeneralInformation$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => EntryPaymentDate$inboundSchema))
        .optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => EntryCapitalGainsQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => RecordDate$inboundSchema)).optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const CapitalGains$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryCapitalGainsCorporateActionGeneralInformation$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => EntryPaymentDate$outboundSchema))
        .optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => EntryCapitalGainsQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => RecordDate$outboundSchema)).optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CapitalGains$;
(function (CapitalGains$) {
    /** @deprecated use `CapitalGains$inboundSchema` instead. */
    CapitalGains$.inboundSchema = CapitalGains$inboundSchema;
    /** @deprecated use `CapitalGains$outboundSchema` instead. */
    CapitalGains$.outboundSchema = CapitalGains$outboundSchema;
})(CapitalGains$ || (CapitalGains$ = {}));
export function capitalGainsToJSON(capitalGains) {
    return JSON.stringify(CapitalGains$outboundSchema.parse(capitalGains));
}
export function capitalGainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CapitalGains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CapitalGains' from JSON`);
}
/** @internal */
export const EntryCashDividendCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryCashDividendCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashDividendCashRate$;
(function (EntryCashDividendCashRate$) {
    /** @deprecated use `EntryCashDividendCashRate$inboundSchema` instead. */
    EntryCashDividendCashRate$.inboundSchema = EntryCashDividendCashRate$inboundSchema;
    /** @deprecated use `EntryCashDividendCashRate$outboundSchema` instead. */
    EntryCashDividendCashRate$.outboundSchema = EntryCashDividendCashRate$outboundSchema;
})(EntryCashDividendCashRate$ || (EntryCashDividendCashRate$ = {}));
export function entryCashDividendCashRateToJSON(entryCashDividendCashRate) {
    return JSON.stringify(EntryCashDividendCashRate$outboundSchema.parse(entryCashDividendCashRate));
}
export function entryCashDividendCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashDividendCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashDividendCashRate' from JSON`);
}
/** @internal */
export const EntryCashDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryCashDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashDividendCorporateActionGeneralInformation$;
(function (EntryCashDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCashDividendCorporateActionGeneralInformation$.inboundSchema = EntryCashDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCashDividendCorporateActionGeneralInformation$.outboundSchema = EntryCashDividendCorporateActionGeneralInformation$outboundSchema;
})(EntryCashDividendCorporateActionGeneralInformation$ || (EntryCashDividendCorporateActionGeneralInformation$ = {}));
export function entryCashDividendCorporateActionGeneralInformationToJSON(entryCashDividendCorporateActionGeneralInformation) {
    return JSON.stringify(EntryCashDividendCorporateActionGeneralInformation$outboundSchema.parse(entryCashDividendCorporateActionGeneralInformation));
}
export function entryCashDividendCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashDividendCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashDividendCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryFpsl$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFpsl$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFpsl$;
(function (EntryFpsl$) {
    /** @deprecated use `EntryFpsl$inboundSchema` instead. */
    EntryFpsl$.inboundSchema = EntryFpsl$inboundSchema;
    /** @deprecated use `EntryFpsl$outboundSchema` instead. */
    EntryFpsl$.outboundSchema = EntryFpsl$outboundSchema;
})(EntryFpsl$ || (EntryFpsl$ = {}));
export function entryFpslToJSON(entryFpsl) {
    return JSON.stringify(EntryFpsl$outboundSchema.parse(entryFpsl));
}
export function entryFpslFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFpsl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFpsl' from JSON`);
}
/** @internal */
export const EntryFree$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFree$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFree$;
(function (EntryFree$) {
    /** @deprecated use `EntryFree$inboundSchema` instead. */
    EntryFree$.inboundSchema = EntryFree$inboundSchema;
    /** @deprecated use `EntryFree$outboundSchema` instead. */
    EntryFree$.outboundSchema = EntryFree$outboundSchema;
})(EntryFree$ || (EntryFree$ = {}));
export function entryFreeToJSON(entryFree) {
    return JSON.stringify(EntryFree$outboundSchema.parse(entryFree));
}
export function entryFreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFree' from JSON`);
}
/** @internal */
export const EntryCashDividendPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryCashDividendPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashDividendPaymentDate$;
(function (EntryCashDividendPaymentDate$) {
    /** @deprecated use `EntryCashDividendPaymentDate$inboundSchema` instead. */
    EntryCashDividendPaymentDate$.inboundSchema = EntryCashDividendPaymentDate$inboundSchema;
    /** @deprecated use `EntryCashDividendPaymentDate$outboundSchema` instead. */
    EntryCashDividendPaymentDate$.outboundSchema = EntryCashDividendPaymentDate$outboundSchema;
})(EntryCashDividendPaymentDate$ || (EntryCashDividendPaymentDate$ = {}));
export function entryCashDividendPaymentDateToJSON(entryCashDividendPaymentDate) {
    return JSON.stringify(EntryCashDividendPaymentDate$outboundSchema.parse(entryCashDividendPaymentDate));
}
export function entryCashDividendPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashDividendPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashDividendPaymentDate' from JSON`);
}
/** @internal */
export const EntryCashDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryCashDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashDividendQuantity$;
(function (EntryCashDividendQuantity$) {
    /** @deprecated use `EntryCashDividendQuantity$inboundSchema` instead. */
    EntryCashDividendQuantity$.inboundSchema = EntryCashDividendQuantity$inboundSchema;
    /** @deprecated use `EntryCashDividendQuantity$outboundSchema` instead. */
    EntryCashDividendQuantity$.outboundSchema = EntryCashDividendQuantity$outboundSchema;
})(EntryCashDividendQuantity$ || (EntryCashDividendQuantity$ = {}));
export function entryCashDividendQuantityToJSON(entryCashDividendQuantity) {
    return JSON.stringify(EntryCashDividendQuantity$outboundSchema.parse(entryCashDividendQuantity));
}
export function entryCashDividendQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashDividendQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashDividendQuantity' from JSON`);
}
/** @internal */
export const EntryRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRecordDate$;
(function (EntryRecordDate$) {
    /** @deprecated use `EntryRecordDate$inboundSchema` instead. */
    EntryRecordDate$.inboundSchema = EntryRecordDate$inboundSchema;
    /** @deprecated use `EntryRecordDate$outboundSchema` instead. */
    EntryRecordDate$.outboundSchema = EntryRecordDate$outboundSchema;
})(EntryRecordDate$ || (EntryRecordDate$ = {}));
export function entryRecordDateToJSON(entryRecordDate) {
    return JSON.stringify(EntryRecordDate$outboundSchema.parse(entryRecordDate));
}
export function entryRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRecordDate' from JSON`);
}
/** @internal */
export const EntryCashDividendSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryCashDividendSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashDividendSettled$;
(function (EntryCashDividendSettled$) {
    /** @deprecated use `EntryCashDividendSettled$inboundSchema` instead. */
    EntryCashDividendSettled$.inboundSchema = EntryCashDividendSettled$inboundSchema;
    /** @deprecated use `EntryCashDividendSettled$outboundSchema` instead. */
    EntryCashDividendSettled$.outboundSchema = EntryCashDividendSettled$outboundSchema;
})(EntryCashDividendSettled$ || (EntryCashDividendSettled$ = {}));
export function entryCashDividendSettledToJSON(entryCashDividendSettled) {
    return JSON.stringify(EntryCashDividendSettled$outboundSchema.parse(entryCashDividendSettled));
}
export function entryCashDividendSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashDividendSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashDividendSettled' from JSON`);
}
/** @internal */
export const Subtype$inboundSchema = z
    .union([
    z.nativeEnum(Subtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Subtype$outboundSchema = z.union([
    z.nativeEnum(Subtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Subtype$;
(function (Subtype$) {
    /** @deprecated use `Subtype$inboundSchema` instead. */
    Subtype$.inboundSchema = Subtype$inboundSchema;
    /** @deprecated use `Subtype$outboundSchema` instead. */
    Subtype$.outboundSchema = Subtype$outboundSchema;
})(Subtype$ || (Subtype$ = {}));
/** @internal */
export const CashDividend$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryCashDividendCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryCashDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => EntryFpsl$inboundSchema)).optional(),
    free: z.nullable(z.lazy(() => EntryFree$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => EntryCashDividendPaymentDate$inboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => EntryCashDividendQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => EntryRecordDate$inboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => EntryCashDividendSettled$inboundSchema))
        .optional(),
    substitute_payment: z.boolean().optional(),
    subtype: Subtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "substitute_payment": "substitutePayment",
    });
});
/** @internal */
export const CashDividend$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryCashDividendCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryCashDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => EntryFpsl$outboundSchema)).optional(),
    free: z.nullable(z.lazy(() => EntryFree$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => EntryCashDividendPaymentDate$outboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => EntryCashDividendQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => EntryRecordDate$outboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => EntryCashDividendSettled$outboundSchema))
        .optional(),
    substitutePayment: z.boolean().optional(),
    subtype: Subtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
        substitutePayment: "substitute_payment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashDividend$;
(function (CashDividend$) {
    /** @deprecated use `CashDividend$inboundSchema` instead. */
    CashDividend$.inboundSchema = CashDividend$inboundSchema;
    /** @deprecated use `CashDividend$outboundSchema` instead. */
    CashDividend$.outboundSchema = CashDividend$outboundSchema;
})(CashDividend$ || (CashDividend$ = {}));
export function cashDividendToJSON(cashDividend) {
    return JSON.stringify(CashDividend$outboundSchema.parse(cashDividend));
}
export function cashDividendFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashDividend$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashDividend' from JSON`);
}
/** @internal */
export const EntryCashInLieuCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryCashInLieuCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCashInLieuCorporateActionGeneralInformation$;
(function (EntryCashInLieuCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCashInLieuCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCashInLieuCorporateActionGeneralInformation$.inboundSchema = EntryCashInLieuCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCashInLieuCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCashInLieuCorporateActionGeneralInformation$.outboundSchema = EntryCashInLieuCorporateActionGeneralInformation$outboundSchema;
})(EntryCashInLieuCorporateActionGeneralInformation$ || (EntryCashInLieuCorporateActionGeneralInformation$ = {}));
export function entryCashInLieuCorporateActionGeneralInformationToJSON(entryCashInLieuCorporateActionGeneralInformation) {
    return JSON.stringify(EntryCashInLieuCorporateActionGeneralInformation$outboundSchema.parse(entryCashInLieuCorporateActionGeneralInformation));
}
export function entryCashInLieuCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCashInLieuCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCashInLieuCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const CashInLieu$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryCashInLieuCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const CashInLieu$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryCashInLieuCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashInLieu$;
(function (CashInLieu$) {
    /** @deprecated use `CashInLieu$inboundSchema` instead. */
    CashInLieu$.inboundSchema = CashInLieu$inboundSchema;
    /** @deprecated use `CashInLieu$outboundSchema` instead. */
    CashInLieu$.outboundSchema = CashInLieu$outboundSchema;
})(CashInLieu$ || (CashInLieu$ = {}));
export function cashInLieuToJSON(cashInLieu) {
    return JSON.stringify(CashInLieu$outboundSchema.parse(cashInLieu));
}
export function cashInLieuFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashInLieu$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashInLieu' from JSON`);
}
/** @internal */
export const EntryCommission$inboundSchema = z.object({});
/** @internal */
export const EntryCommission$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryCommission$;
(function (EntryCommission$) {
    /** @deprecated use `EntryCommission$inboundSchema` instead. */
    EntryCommission$.inboundSchema = EntryCommission$inboundSchema;
    /** @deprecated use `EntryCommission$outboundSchema` instead. */
    EntryCommission$.outboundSchema = EntryCommission$outboundSchema;
})(EntryCommission$ || (EntryCommission$ = {}));
export function entryCommissionToJSON(entryCommission) {
    return JSON.stringify(EntryCommission$outboundSchema.parse(entryCommission));
}
export function entryCommissionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryCommission$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryCommission' from JSON`);
}
/** @internal */
export const EntryConversionCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryConversionCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryConversionCashRate$;
(function (EntryConversionCashRate$) {
    /** @deprecated use `EntryConversionCashRate$inboundSchema` instead. */
    EntryConversionCashRate$.inboundSchema = EntryConversionCashRate$inboundSchema;
    /** @deprecated use `EntryConversionCashRate$outboundSchema` instead. */
    EntryConversionCashRate$.outboundSchema = EntryConversionCashRate$outboundSchema;
})(EntryConversionCashRate$ || (EntryConversionCashRate$ = {}));
export function entryConversionCashRateToJSON(entryConversionCashRate) {
    return JSON.stringify(EntryConversionCashRate$outboundSchema.parse(entryConversionCashRate));
}
export function entryConversionCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryConversionCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryConversionCashRate' from JSON`);
}
/** @internal */
export const EntryConversionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryConversionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryConversionCorporateActionGeneralInformation$;
(function (EntryConversionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryConversionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryConversionCorporateActionGeneralInformation$.inboundSchema = EntryConversionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryConversionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryConversionCorporateActionGeneralInformation$.outboundSchema = EntryConversionCorporateActionGeneralInformation$outboundSchema;
})(EntryConversionCorporateActionGeneralInformation$ || (EntryConversionCorporateActionGeneralInformation$ = {}));
export function entryConversionCorporateActionGeneralInformationToJSON(entryConversionCorporateActionGeneralInformation) {
    return JSON.stringify(EntryConversionCorporateActionGeneralInformation$outboundSchema.parse(entryConversionCorporateActionGeneralInformation));
}
export function entryConversionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryConversionCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryConversionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const StockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const StockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StockRate$;
(function (StockRate$) {
    /** @deprecated use `StockRate$inboundSchema` instead. */
    StockRate$.inboundSchema = StockRate$inboundSchema;
    /** @deprecated use `StockRate$outboundSchema` instead. */
    StockRate$.outboundSchema = StockRate$outboundSchema;
})(StockRate$ || (StockRate$ = {}));
export function stockRateToJSON(stockRate) {
    return JSON.stringify(StockRate$outboundSchema.parse(stockRate));
}
export function stockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StockRate' from JSON`);
}
/** @internal */
export const EntryConversionType$inboundSchema = z
    .union([
    z.nativeEnum(EntryConversionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryConversionType$outboundSchema = z.union([
    z.nativeEnum(EntryConversionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryConversionType$;
(function (EntryConversionType$) {
    /** @deprecated use `EntryConversionType$inboundSchema` instead. */
    EntryConversionType$.inboundSchema = EntryConversionType$inboundSchema;
    /** @deprecated use `EntryConversionType$outboundSchema` instead. */
    EntryConversionType$.outboundSchema = EntryConversionType$outboundSchema;
})(EntryConversionType$ || (EntryConversionType$ = {}));
/** @internal */
export const Conversion$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryConversionCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryConversionCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => StockRate$inboundSchema)).optional(),
    type: EntryConversionType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const Conversion$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryConversionCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryConversionCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => StockRate$outboundSchema)).optional(),
    type: EntryConversionType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Conversion$;
(function (Conversion$) {
    /** @deprecated use `Conversion$inboundSchema` instead. */
    Conversion$.inboundSchema = Conversion$inboundSchema;
    /** @deprecated use `Conversion$outboundSchema` instead. */
    Conversion$.outboundSchema = Conversion$outboundSchema;
})(Conversion$ || (Conversion$ = {}));
export function conversionToJSON(conversion) {
    return JSON.stringify(Conversion$outboundSchema.parse(conversion));
}
export function conversionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Conversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Conversion' from JSON`);
}
/** @internal */
export const CorporateActionMemoAdjustment$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    corporate_action_type: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "corporate_action_type": "corporateActionType",
    });
});
/** @internal */
export const CorporateActionMemoAdjustment$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    corporateActionType: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        corporateActionType: "corporate_action_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CorporateActionMemoAdjustment$;
(function (CorporateActionMemoAdjustment$) {
    /** @deprecated use `CorporateActionMemoAdjustment$inboundSchema` instead. */
    CorporateActionMemoAdjustment$.inboundSchema = CorporateActionMemoAdjustment$inboundSchema;
    /** @deprecated use `CorporateActionMemoAdjustment$outboundSchema` instead. */
    CorporateActionMemoAdjustment$.outboundSchema = CorporateActionMemoAdjustment$outboundSchema;
})(CorporateActionMemoAdjustment$ || (CorporateActionMemoAdjustment$ = {}));
export function corporateActionMemoAdjustmentToJSON(corporateActionMemoAdjustment) {
    return JSON.stringify(CorporateActionMemoAdjustment$outboundSchema.parse(corporateActionMemoAdjustment));
}
export function corporateActionMemoAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CorporateActionMemoAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CorporateActionMemoAdjustment' from JSON`);
}
/** @internal */
export const CreditType$inboundSchema = z
    .union([
    z.nativeEnum(CreditType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CreditType$outboundSchema = z.union([
    z.nativeEnum(CreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreditType$;
(function (CreditType$) {
    /** @deprecated use `CreditType$inboundSchema` instead. */
    CreditType$.inboundSchema = CreditType$inboundSchema;
    /** @deprecated use `CreditType$outboundSchema` instead. */
    CreditType$.outboundSchema = CreditType$outboundSchema;
})(CreditType$ || (CreditType$ = {}));
/** @internal */
export const Credit$inboundSchema = z
    .object({
    additional_instructions: z.string().optional(),
    credit_type: CreditType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "credit_type": "creditType",
    });
});
/** @internal */
export const Credit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    creditType: CreditType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        creditType: "credit_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Credit$;
(function (Credit$) {
    /** @deprecated use `Credit$inboundSchema` instead. */
    Credit$.inboundSchema = Credit$inboundSchema;
    /** @deprecated use `Credit$outboundSchema` instead. */
    Credit$.outboundSchema = Credit$outboundSchema;
})(Credit$ || (Credit$ = {}));
export function creditToJSON(credit) {
    return JSON.stringify(Credit$outboundSchema.parse(credit));
}
export function creditFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Credit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Credit' from JSON`);
}
/** @internal */
export const EntryDeliveryCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryDeliveryCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryDeliveryCorporateActionGeneralInformation$;
(function (EntryDeliveryCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryDeliveryCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryDeliveryCorporateActionGeneralInformation$.inboundSchema = EntryDeliveryCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryDeliveryCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryDeliveryCorporateActionGeneralInformation$.outboundSchema = EntryDeliveryCorporateActionGeneralInformation$outboundSchema;
})(EntryDeliveryCorporateActionGeneralInformation$ || (EntryDeliveryCorporateActionGeneralInformation$ = {}));
export function entryDeliveryCorporateActionGeneralInformationToJSON(entryDeliveryCorporateActionGeneralInformation) {
    return JSON.stringify(EntryDeliveryCorporateActionGeneralInformation$outboundSchema.parse(entryDeliveryCorporateActionGeneralInformation));
}
export function entryDeliveryCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryDeliveryCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryDeliveryCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const Delivery$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryDeliveryCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const Delivery$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryDeliveryCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Delivery$;
(function (Delivery$) {
    /** @deprecated use `Delivery$inboundSchema` instead. */
    Delivery$.inboundSchema = Delivery$inboundSchema;
    /** @deprecated use `Delivery$outboundSchema` instead. */
    Delivery$.outboundSchema = Delivery$outboundSchema;
})(Delivery$ || (Delivery$ = {}));
export function deliveryToJSON(delivery) {
    return JSON.stringify(Delivery$outboundSchema.parse(delivery));
}
export function deliveryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Delivery$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Delivery' from JSON`);
}
/** @internal */
export const ContributionType$inboundSchema = z
    .union([
    z.nativeEnum(ContributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ContributionType$outboundSchema = z.union([
    z.nativeEnum(ContributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionType$;
(function (ContributionType$) {
    /** @deprecated use `ContributionType$inboundSchema` instead. */
    ContributionType$.inboundSchema = ContributionType$inboundSchema;
    /** @deprecated use `ContributionType$outboundSchema` instead. */
    ContributionType$.outboundSchema = ContributionType$outboundSchema;
})(ContributionType$ || (ContributionType$ = {}));
/** @internal */
export const EntryDepositType$inboundSchema = z
    .union([
    z.nativeEnum(EntryDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryDepositType$outboundSchema = z.union([
    z.nativeEnum(EntryDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryDepositType$;
(function (EntryDepositType$) {
    /** @deprecated use `EntryDepositType$inboundSchema` instead. */
    EntryDepositType$.inboundSchema = EntryDepositType$inboundSchema;
    /** @deprecated use `EntryDepositType$outboundSchema` instead. */
    EntryDepositType$.outboundSchema = EntryDepositType$outboundSchema;
})(EntryDepositType$ || (EntryDepositType$ = {}));
/** @internal */
export const Deposit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    contribution_type: ContributionType$inboundSchema.optional(),
    contribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_account_number: z.string().optional(),
    type: EntryDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "contribution_type": "contributionType",
        "contribution_year": "contributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_account_number": "originatingAccountNumber",
    });
});
/** @internal */
export const Deposit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    contributionType: ContributionType$outboundSchema.optional(),
    contributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingAccountNumber: z.string().optional(),
    type: EntryDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        contributionType: "contribution_type",
        contributionYear: "contribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingAccountNumber: "originating_account_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Deposit$;
(function (Deposit$) {
    /** @deprecated use `Deposit$inboundSchema` instead. */
    Deposit$.inboundSchema = Deposit$inboundSchema;
    /** @deprecated use `Deposit$outboundSchema` instead. */
    Deposit$.outboundSchema = Deposit$outboundSchema;
})(Deposit$ || (Deposit$ = {}));
export function depositToJSON(deposit) {
    return JSON.stringify(Deposit$outboundSchema.parse(deposit));
}
export function depositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Deposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Deposit' from JSON`);
}
/** @internal */
export const EntryAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryAction$outboundSchema = z.union([
    z.nativeEnum(EntryAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryAction$;
(function (EntryAction$) {
    /** @deprecated use `EntryAction$inboundSchema` instead. */
    EntryAction$.inboundSchema = EntryAction$inboundSchema;
    /** @deprecated use `EntryAction$outboundSchema` instead. */
    EntryAction$.outboundSchema = EntryAction$outboundSchema;
})(EntryAction$ || (EntryAction$ = {}));
/** @internal */
export const Drip$inboundSchema = z
    .object({
    action: EntryAction$inboundSchema.optional(),
});
/** @internal */
export const Drip$outboundSchema = z.object({
    action: EntryAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Drip$;
(function (Drip$) {
    /** @deprecated use `Drip$inboundSchema` instead. */
    Drip$.inboundSchema = Drip$inboundSchema;
    /** @deprecated use `Drip$outboundSchema` instead. */
    Drip$.outboundSchema = Drip$outboundSchema;
})(Drip$ || (Drip$ = {}));
export function dripToJSON(drip) {
    return JSON.stringify(Drip$outboundSchema.parse(drip));
}
export function dripFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Drip$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Drip' from JSON`);
}
/** @internal */
export const EntryExchangeCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryExchangeCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryExchangeCashRate$;
(function (EntryExchangeCashRate$) {
    /** @deprecated use `EntryExchangeCashRate$inboundSchema` instead. */
    EntryExchangeCashRate$.inboundSchema = EntryExchangeCashRate$inboundSchema;
    /** @deprecated use `EntryExchangeCashRate$outboundSchema` instead. */
    EntryExchangeCashRate$.outboundSchema = EntryExchangeCashRate$outboundSchema;
})(EntryExchangeCashRate$ || (EntryExchangeCashRate$ = {}));
export function entryExchangeCashRateToJSON(entryExchangeCashRate) {
    return JSON.stringify(EntryExchangeCashRate$outboundSchema.parse(entryExchangeCashRate));
}
export function entryExchangeCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryExchangeCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryExchangeCashRate' from JSON`);
}
/** @internal */
export const EntryExchangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryExchangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryExchangeCorporateActionGeneralInformation$;
(function (EntryExchangeCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryExchangeCorporateActionGeneralInformation$.inboundSchema = EntryExchangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryExchangeCorporateActionGeneralInformation$.outboundSchema = EntryExchangeCorporateActionGeneralInformation$outboundSchema;
})(EntryExchangeCorporateActionGeneralInformation$ || (EntryExchangeCorporateActionGeneralInformation$ = {}));
export function entryExchangeCorporateActionGeneralInformationToJSON(entryExchangeCorporateActionGeneralInformation) {
    return JSON.stringify(EntryExchangeCorporateActionGeneralInformation$outboundSchema.parse(entryExchangeCorporateActionGeneralInformation));
}
export function entryExchangeCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryExchangeCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryExchangeCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockRate$;
(function (EntryStockRate$) {
    /** @deprecated use `EntryStockRate$inboundSchema` instead. */
    EntryStockRate$.inboundSchema = EntryStockRate$inboundSchema;
    /** @deprecated use `EntryStockRate$outboundSchema` instead. */
    EntryStockRate$.outboundSchema = EntryStockRate$outboundSchema;
})(EntryStockRate$ || (EntryStockRate$ = {}));
export function entryStockRateToJSON(entryStockRate) {
    return JSON.stringify(EntryStockRate$outboundSchema.parse(entryStockRate));
}
export function entryStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockRate' from JSON`);
}
/** @internal */
export const EntryExchangeType$inboundSchema = z
    .union([
    z.nativeEnum(EntryExchangeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryExchangeType$outboundSchema = z.union([
    z.nativeEnum(EntryExchangeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryExchangeType$;
(function (EntryExchangeType$) {
    /** @deprecated use `EntryExchangeType$inboundSchema` instead. */
    EntryExchangeType$.inboundSchema = EntryExchangeType$inboundSchema;
    /** @deprecated use `EntryExchangeType$outboundSchema` instead. */
    EntryExchangeType$.outboundSchema = EntryExchangeType$outboundSchema;
})(EntryExchangeType$ || (EntryExchangeType$ = {}));
/** @internal */
export const Exchange$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryExchangeCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryExchangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => EntryStockRate$inboundSchema)).optional(),
    type: EntryExchangeType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const Exchange$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryExchangeCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryExchangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => EntryStockRate$outboundSchema)).optional(),
    type: EntryExchangeType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Exchange$;
(function (Exchange$) {
    /** @deprecated use `Exchange$inboundSchema` instead. */
    Exchange$.inboundSchema = Exchange$inboundSchema;
    /** @deprecated use `Exchange$outboundSchema` instead. */
    Exchange$.outboundSchema = Exchange$outboundSchema;
})(Exchange$ || (Exchange$ = {}));
export function exchangeToJSON(exchange) {
    return JSON.stringify(Exchange$outboundSchema.parse(exchange));
}
export function exchangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Exchange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Exchange' from JSON`);
}
/** @internal */
export const EntryFeeType$inboundSchema = z
    .union([
    z.nativeEnum(EntryFeeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryFeeType$outboundSchema = z.union([
    z.nativeEnum(EntryFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFeeType$;
(function (EntryFeeType$) {
    /** @deprecated use `EntryFeeType$inboundSchema` instead. */
    EntryFeeType$.inboundSchema = EntryFeeType$inboundSchema;
    /** @deprecated use `EntryFeeType$outboundSchema` instead. */
    EntryFeeType$.outboundSchema = EntryFeeType$outboundSchema;
})(EntryFeeType$ || (EntryFeeType$ = {}));
/** @internal */
export const EntryFee$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    type: EntryFeeType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
export const EntryFee$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    type: EntryFeeType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFee$;
(function (EntryFee$) {
    /** @deprecated use `EntryFee$inboundSchema` instead. */
    EntryFee$.inboundSchema = EntryFee$inboundSchema;
    /** @deprecated use `EntryFee$outboundSchema` instead. */
    EntryFee$.outboundSchema = EntryFee$outboundSchema;
})(EntryFee$ || (EntryFee$ = {}));
export function entryFeeToJSON(entryFee) {
    return JSON.stringify(EntryFee$outboundSchema.parse(entryFee));
}
export function entryFeeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFee' from JSON`);
}
/** @internal */
export const EntryFlipBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(EntryFlipBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryFlipBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(EntryFlipBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipBrokerCapacity$;
(function (EntryFlipBrokerCapacity$) {
    /** @deprecated use `EntryFlipBrokerCapacity$inboundSchema` instead. */
    EntryFlipBrokerCapacity$.inboundSchema = EntryFlipBrokerCapacity$inboundSchema;
    /** @deprecated use `EntryFlipBrokerCapacity$outboundSchema` instead. */
    EntryFlipBrokerCapacity$.outboundSchema = EntryFlipBrokerCapacity$outboundSchema;
})(EntryFlipBrokerCapacity$ || (EntryFlipBrokerCapacity$ = {}));
/** @internal */
export const EntryFlipPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFlipPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipPrevailingMarketPrice$;
(function (EntryFlipPrevailingMarketPrice$) {
    /** @deprecated use `EntryFlipPrevailingMarketPrice$inboundSchema` instead. */
    EntryFlipPrevailingMarketPrice$.inboundSchema = EntryFlipPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `EntryFlipPrevailingMarketPrice$outboundSchema` instead. */
    EntryFlipPrevailingMarketPrice$.outboundSchema = EntryFlipPrevailingMarketPrice$outboundSchema;
})(EntryFlipPrevailingMarketPrice$ || (EntryFlipPrevailingMarketPrice$ = {}));
export function entryFlipPrevailingMarketPriceToJSON(entryFlipPrevailingMarketPrice) {
    return JSON.stringify(EntryFlipPrevailingMarketPrice$outboundSchema.parse(entryFlipPrevailingMarketPrice));
}
export function entryFlipPrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFlipPrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFlipPrevailingMarketPrice' from JSON`);
}
/** @internal */
export const EntryFlipPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFlipPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipPriceAdjustmentAmount$;
(function (EntryFlipPriceAdjustmentAmount$) {
    /** @deprecated use `EntryFlipPriceAdjustmentAmount$inboundSchema` instead. */
    EntryFlipPriceAdjustmentAmount$.inboundSchema = EntryFlipPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentAmount$outboundSchema` instead. */
    EntryFlipPriceAdjustmentAmount$.outboundSchema = EntryFlipPriceAdjustmentAmount$outboundSchema;
})(EntryFlipPriceAdjustmentAmount$ || (EntryFlipPriceAdjustmentAmount$ = {}));
export function entryFlipPriceAdjustmentAmountToJSON(entryFlipPriceAdjustmentAmount) {
    return JSON.stringify(EntryFlipPriceAdjustmentAmount$outboundSchema.parse(entryFlipPriceAdjustmentAmount));
}
export function entryFlipPriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFlipPriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFlipPriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const EntryFlipPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFlipPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipPriceAdjustmentPercent$;
(function (EntryFlipPriceAdjustmentPercent$) {
    /** @deprecated use `EntryFlipPriceAdjustmentPercent$inboundSchema` instead. */
    EntryFlipPriceAdjustmentPercent$.inboundSchema = EntryFlipPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentPercent$outboundSchema` instead. */
    EntryFlipPriceAdjustmentPercent$.outboundSchema = EntryFlipPriceAdjustmentPercent$outboundSchema;
})(EntryFlipPriceAdjustmentPercent$ || (EntryFlipPriceAdjustmentPercent$ = {}));
export function entryFlipPriceAdjustmentPercentToJSON(entryFlipPriceAdjustmentPercent) {
    return JSON.stringify(EntryFlipPriceAdjustmentPercent$outboundSchema.parse(entryFlipPriceAdjustmentPercent));
}
export function entryFlipPriceAdjustmentPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFlipPriceAdjustmentPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFlipPriceAdjustmentPercent' from JSON`);
}
/** @internal */
export const EntryFlipPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(EntryFlipPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryFlipPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(EntryFlipPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipPriceAdjustmentType$;
(function (EntryFlipPriceAdjustmentType$) {
    /** @deprecated use `EntryFlipPriceAdjustmentType$inboundSchema` instead. */
    EntryFlipPriceAdjustmentType$.inboundSchema = EntryFlipPriceAdjustmentType$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentType$outboundSchema` instead. */
    EntryFlipPriceAdjustmentType$.outboundSchema = EntryFlipPriceAdjustmentType$outboundSchema;
})(EntryFlipPriceAdjustmentType$ || (EntryFlipPriceAdjustmentType$ = {}));
/** @internal */
export const EntryFlipPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: EntryFlipPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const EntryFlipPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: EntryFlipPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFlipPriceAdjustmentRecord$;
(function (EntryFlipPriceAdjustmentRecord$) {
    /** @deprecated use `EntryFlipPriceAdjustmentRecord$inboundSchema` instead. */
    EntryFlipPriceAdjustmentRecord$.inboundSchema = EntryFlipPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentRecord$outboundSchema` instead. */
    EntryFlipPriceAdjustmentRecord$.outboundSchema = EntryFlipPriceAdjustmentRecord$outboundSchema;
})(EntryFlipPriceAdjustmentRecord$ || (EntryFlipPriceAdjustmentRecord$ = {}));
export function entryFlipPriceAdjustmentRecordToJSON(entryFlipPriceAdjustmentRecord) {
    return JSON.stringify(EntryFlipPriceAdjustmentRecord$outboundSchema.parse(entryFlipPriceAdjustmentRecord));
}
export function entryFlipPriceAdjustmentRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFlipPriceAdjustmentRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFlipPriceAdjustmentRecord' from JSON`);
}
/** @internal */
export const Detail$inboundSchema = z
    .object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_booking_execution_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: EntryFlipBrokerCapacity$inboundSchema.optional(),
    client_memo: z.string().optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(Lot$inboundSchema).optional(),
    market: z.string().optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => EntryFlipPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_booking_execution_id": "bookingApiBookingExecutionId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memo": "clientMemo",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
export const Detail$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiBookingExecutionId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: EntryFlipBrokerCapacity$outboundSchema.optional(),
    clientMemo: z.string().optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(Lot$outboundSchema).optional(),
    market: z.string().optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => EntryFlipPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => EntryFlipPriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiBookingExecutionId: "booking_api_booking_execution_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemo: "client_memo",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Detail$;
(function (Detail$) {
    /** @deprecated use `Detail$inboundSchema` instead. */
    Detail$.inboundSchema = Detail$inboundSchema;
    /** @deprecated use `Detail$outboundSchema` instead. */
    Detail$.outboundSchema = Detail$outboundSchema;
})(Detail$ || (Detail$ = {}));
export function detailToJSON(detail) {
    return JSON.stringify(Detail$outboundSchema.parse(detail));
}
export function detailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Detail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Detail' from JSON`);
}
/** @internal */
export const Flip$inboundSchema = z
    .object({
    detail: z.nullable(z.lazy(() => Detail$inboundSchema)).optional(),
});
/** @internal */
export const Flip$outboundSchema = z.object({
    detail: z.nullable(z.lazy(() => Detail$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Flip$;
(function (Flip$) {
    /** @deprecated use `Flip$inboundSchema` instead. */
    Flip$.inboundSchema = Flip$inboundSchema;
    /** @deprecated use `Flip$outboundSchema` instead. */
    Flip$.outboundSchema = Flip$outboundSchema;
})(Flip$ || (Flip$ = {}));
export function flipToJSON(flip) {
    return JSON.stringify(Flip$outboundSchema.parse(flip));
}
export function flipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Flip$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Flip' from JSON`);
}
/** @internal */
export const EntryFpslAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryFpslAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryFpslAction$outboundSchema = z.union([
    z.nativeEnum(EntryFpslAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFpslAction$;
(function (EntryFpslAction$) {
    /** @deprecated use `EntryFpslAction$inboundSchema` instead. */
    EntryFpslAction$.inboundSchema = EntryFpslAction$inboundSchema;
    /** @deprecated use `EntryFpslAction$outboundSchema` instead. */
    EntryFpslAction$.outboundSchema = EntryFpslAction$outboundSchema;
})(EntryFpslAction$ || (EntryFpslAction$ = {}));
/** @internal */
export const Fpsl$inboundSchema = z
    .object({
    action: EntryFpslAction$inboundSchema.optional(),
});
/** @internal */
export const Fpsl$outboundSchema = z.object({
    action: EntryFpslAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fpsl$;
(function (Fpsl$) {
    /** @deprecated use `Fpsl$inboundSchema` instead. */
    Fpsl$.inboundSchema = Fpsl$inboundSchema;
    /** @deprecated use `Fpsl$outboundSchema` instead. */
    Fpsl$.outboundSchema = Fpsl$outboundSchema;
})(Fpsl$ || (Fpsl$ = {}));
export function fpslToJSON(fpsl) {
    return JSON.stringify(Fpsl$outboundSchema.parse(fpsl));
}
export function fpslFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fpsl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fpsl' from JSON`);
}
/** @internal */
export const EntryGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryGrossAmount$;
(function (EntryGrossAmount$) {
    /** @deprecated use `EntryGrossAmount$inboundSchema` instead. */
    EntryGrossAmount$.inboundSchema = EntryGrossAmount$inboundSchema;
    /** @deprecated use `EntryGrossAmount$outboundSchema` instead. */
    EntryGrossAmount$.outboundSchema = EntryGrossAmount$outboundSchema;
})(EntryGrossAmount$ || (EntryGrossAmount$ = {}));
export function entryGrossAmountToJSON(entryGrossAmount) {
    return JSON.stringify(EntryGrossAmount$outboundSchema.parse(entryGrossAmount));
}
export function entryGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryGrossAmount' from JSON`);
}
/** @internal */
export const InterestAccrualEndDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InterestAccrualEndDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestAccrualEndDate$;
(function (InterestAccrualEndDate$) {
    /** @deprecated use `InterestAccrualEndDate$inboundSchema` instead. */
    InterestAccrualEndDate$.inboundSchema = InterestAccrualEndDate$inboundSchema;
    /** @deprecated use `InterestAccrualEndDate$outboundSchema` instead. */
    InterestAccrualEndDate$.outboundSchema = InterestAccrualEndDate$outboundSchema;
})(InterestAccrualEndDate$ || (InterestAccrualEndDate$ = {}));
export function interestAccrualEndDateToJSON(interestAccrualEndDate) {
    return JSON.stringify(InterestAccrualEndDate$outboundSchema.parse(interestAccrualEndDate));
}
export function interestAccrualEndDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestAccrualEndDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestAccrualEndDate' from JSON`);
}
/** @internal */
export const InterestAccrualStartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InterestAccrualStartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestAccrualStartDate$;
(function (InterestAccrualStartDate$) {
    /** @deprecated use `InterestAccrualStartDate$inboundSchema` instead. */
    InterestAccrualStartDate$.inboundSchema = InterestAccrualStartDate$inboundSchema;
    /** @deprecated use `InterestAccrualStartDate$outboundSchema` instead. */
    InterestAccrualStartDate$.outboundSchema = InterestAccrualStartDate$outboundSchema;
})(InterestAccrualStartDate$ || (InterestAccrualStartDate$ = {}));
export function interestAccrualStartDateToJSON(interestAccrualStartDate) {
    return JSON.stringify(InterestAccrualStartDate$outboundSchema.parse(interestAccrualStartDate));
}
export function interestAccrualStartDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestAccrualStartDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestAccrualStartDate' from JSON`);
}
/** @internal */
export const InterestType$inboundSchema = z
    .union([
    z.nativeEnum(InterestType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InterestType$outboundSchema = z.union([
    z.nativeEnum(InterestType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestType$;
(function (InterestType$) {
    /** @deprecated use `InterestType$inboundSchema` instead. */
    InterestType$.inboundSchema = InterestType$inboundSchema;
    /** @deprecated use `InterestType$outboundSchema` instead. */
    InterestType$.outboundSchema = InterestType$outboundSchema;
})(InterestType$ || (InterestType$ = {}));
/** @internal */
export const Interest$inboundSchema = z.object({
    interest_accrual_end_date: z.nullable(z.lazy(() => InterestAccrualEndDate$inboundSchema)).optional(),
    interest_accrual_start_date: z.nullable(z.lazy(() => InterestAccrualStartDate$inboundSchema)).optional(),
    interest_type: InterestType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "interest_accrual_end_date": "interestAccrualEndDate",
        "interest_accrual_start_date": "interestAccrualStartDate",
        "interest_type": "interestType",
    });
});
/** @internal */
export const Interest$outboundSchema = z.object({
    interestAccrualEndDate: z.nullable(z.lazy(() => InterestAccrualEndDate$outboundSchema)).optional(),
    interestAccrualStartDate: z.nullable(z.lazy(() => InterestAccrualStartDate$outboundSchema)).optional(),
    interestType: InterestType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        interestAccrualEndDate: "interest_accrual_end_date",
        interestAccrualStartDate: "interest_accrual_start_date",
        interestType: "interest_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Interest$;
(function (Interest$) {
    /** @deprecated use `Interest$inboundSchema` instead. */
    Interest$.inboundSchema = Interest$inboundSchema;
    /** @deprecated use `Interest$outboundSchema` instead. */
    Interest$.outboundSchema = Interest$outboundSchema;
})(Interest$ || (Interest$ = {}));
export function interestToJSON(interest) {
    return JSON.stringify(Interest$outboundSchema.parse(interest));
}
export function interestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Interest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Interest' from JSON`);
}
/** @internal */
export const EntryInterestPaymentCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryInterestPaymentCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryInterestPaymentCashRate$;
(function (EntryInterestPaymentCashRate$) {
    /** @deprecated use `EntryInterestPaymentCashRate$inboundSchema` instead. */
    EntryInterestPaymentCashRate$.inboundSchema = EntryInterestPaymentCashRate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentCashRate$outboundSchema` instead. */
    EntryInterestPaymentCashRate$.outboundSchema = EntryInterestPaymentCashRate$outboundSchema;
})(EntryInterestPaymentCashRate$ || (EntryInterestPaymentCashRate$ = {}));
export function entryInterestPaymentCashRateToJSON(entryInterestPaymentCashRate) {
    return JSON.stringify(EntryInterestPaymentCashRate$outboundSchema.parse(entryInterestPaymentCashRate));
}
export function entryInterestPaymentCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryInterestPaymentCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryInterestPaymentCashRate' from JSON`);
}
/** @internal */
export const EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryInterestPaymentCorporateActionGeneralInformation$;
(function (EntryInterestPaymentCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryInterestPaymentCorporateActionGeneralInformation$.inboundSchema = EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryInterestPaymentCorporateActionGeneralInformation$.outboundSchema = EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema;
})(EntryInterestPaymentCorporateActionGeneralInformation$ || (EntryInterestPaymentCorporateActionGeneralInformation$ = {}));
export function entryInterestPaymentCorporateActionGeneralInformationToJSON(entryInterestPaymentCorporateActionGeneralInformation) {
    return JSON.stringify(EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema.parse(entryInterestPaymentCorporateActionGeneralInformation));
}
export function entryInterestPaymentCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryInterestPaymentCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryInterestPaymentPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryInterestPaymentPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryInterestPaymentPaymentDate$;
(function (EntryInterestPaymentPaymentDate$) {
    /** @deprecated use `EntryInterestPaymentPaymentDate$inboundSchema` instead. */
    EntryInterestPaymentPaymentDate$.inboundSchema = EntryInterestPaymentPaymentDate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentPaymentDate$outboundSchema` instead. */
    EntryInterestPaymentPaymentDate$.outboundSchema = EntryInterestPaymentPaymentDate$outboundSchema;
})(EntryInterestPaymentPaymentDate$ || (EntryInterestPaymentPaymentDate$ = {}));
export function entryInterestPaymentPaymentDateToJSON(entryInterestPaymentPaymentDate) {
    return JSON.stringify(EntryInterestPaymentPaymentDate$outboundSchema.parse(entryInterestPaymentPaymentDate));
}
export function entryInterestPaymentPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryInterestPaymentPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryInterestPaymentPaymentDate' from JSON`);
}
/** @internal */
export const EntryInterestPaymentRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryInterestPaymentRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryInterestPaymentRecordDate$;
(function (EntryInterestPaymentRecordDate$) {
    /** @deprecated use `EntryInterestPaymentRecordDate$inboundSchema` instead. */
    EntryInterestPaymentRecordDate$.inboundSchema = EntryInterestPaymentRecordDate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentRecordDate$outboundSchema` instead. */
    EntryInterestPaymentRecordDate$.outboundSchema = EntryInterestPaymentRecordDate$outboundSchema;
})(EntryInterestPaymentRecordDate$ || (EntryInterestPaymentRecordDate$ = {}));
export function entryInterestPaymentRecordDateToJSON(entryInterestPaymentRecordDate) {
    return JSON.stringify(EntryInterestPaymentRecordDate$outboundSchema.parse(entryInterestPaymentRecordDate));
}
export function entryInterestPaymentRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryInterestPaymentRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryInterestPaymentRecordDate' from JSON`);
}
/** @internal */
export const EntrySettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntrySettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySettled$;
(function (EntrySettled$) {
    /** @deprecated use `EntrySettled$inboundSchema` instead. */
    EntrySettled$.inboundSchema = EntrySettled$inboundSchema;
    /** @deprecated use `EntrySettled$outboundSchema` instead. */
    EntrySettled$.outboundSchema = EntrySettled$outboundSchema;
})(EntrySettled$ || (EntrySettled$ = {}));
export function entrySettledToJSON(entrySettled) {
    return JSON.stringify(EntrySettled$outboundSchema.parse(entrySettled));
}
export function entrySettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySettled' from JSON`);
}
/** @internal */
export const InterestPayment$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryInterestPaymentCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryInterestPaymentPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntryInterestPaymentRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntrySettled$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const InterestPayment$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryInterestPaymentCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryInterestPaymentPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntryInterestPaymentRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntrySettled$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestPayment$;
(function (InterestPayment$) {
    /** @deprecated use `InterestPayment$inboundSchema` instead. */
    InterestPayment$.inboundSchema = InterestPayment$inboundSchema;
    /** @deprecated use `InterestPayment$outboundSchema` instead. */
    InterestPayment$.outboundSchema = InterestPayment$outboundSchema;
})(InterestPayment$ || (InterestPayment$ = {}));
export function interestPaymentToJSON(interestPayment) {
    return JSON.stringify(InterestPayment$outboundSchema.parse(interestPayment));
}
export function interestPaymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestPayment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestPayment' from JSON`);
}
/** @internal */
export const EntryLiquidationAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryLiquidationAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryLiquidationAction$outboundSchema = z.union([
    z.nativeEnum(EntryLiquidationAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationAction$;
(function (EntryLiquidationAction$) {
    /** @deprecated use `EntryLiquidationAction$inboundSchema` instead. */
    EntryLiquidationAction$.inboundSchema = EntryLiquidationAction$inboundSchema;
    /** @deprecated use `EntryLiquidationAction$outboundSchema` instead. */
    EntryLiquidationAction$.outboundSchema = EntryLiquidationAction$outboundSchema;
})(EntryLiquidationAction$ || (EntryLiquidationAction$ = {}));
/** @internal */
export const EntryLiquidationCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryLiquidationCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationCashRate$;
(function (EntryLiquidationCashRate$) {
    /** @deprecated use `EntryLiquidationCashRate$inboundSchema` instead. */
    EntryLiquidationCashRate$.inboundSchema = EntryLiquidationCashRate$inboundSchema;
    /** @deprecated use `EntryLiquidationCashRate$outboundSchema` instead. */
    EntryLiquidationCashRate$.outboundSchema = EntryLiquidationCashRate$outboundSchema;
})(EntryLiquidationCashRate$ || (EntryLiquidationCashRate$ = {}));
export function entryLiquidationCashRateToJSON(entryLiquidationCashRate) {
    return JSON.stringify(EntryLiquidationCashRate$outboundSchema.parse(entryLiquidationCashRate));
}
export function entryLiquidationCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationCashRate' from JSON`);
}
/** @internal */
export const EntryLiquidationCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryLiquidationCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationCorporateActionGeneralInformation$;
(function (EntryLiquidationCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryLiquidationCorporateActionGeneralInformation$.inboundSchema = EntryLiquidationCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryLiquidationCorporateActionGeneralInformation$.outboundSchema = EntryLiquidationCorporateActionGeneralInformation$outboundSchema;
})(EntryLiquidationCorporateActionGeneralInformation$ || (EntryLiquidationCorporateActionGeneralInformation$ = {}));
export function entryLiquidationCorporateActionGeneralInformationToJSON(entryLiquidationCorporateActionGeneralInformation) {
    return JSON.stringify(EntryLiquidationCorporateActionGeneralInformation$outboundSchema.parse(entryLiquidationCorporateActionGeneralInformation));
}
export function entryLiquidationCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryEffectiveDate$;
(function (EntryEffectiveDate$) {
    /** @deprecated use `EntryEffectiveDate$inboundSchema` instead. */
    EntryEffectiveDate$.inboundSchema = EntryEffectiveDate$inboundSchema;
    /** @deprecated use `EntryEffectiveDate$outboundSchema` instead. */
    EntryEffectiveDate$.outboundSchema = EntryEffectiveDate$outboundSchema;
})(EntryEffectiveDate$ || (EntryEffectiveDate$ = {}));
export function entryEffectiveDateToJSON(entryEffectiveDate) {
    return JSON.stringify(EntryEffectiveDate$outboundSchema.parse(entryEffectiveDate));
}
export function entryEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryEffectiveDate' from JSON`);
}
/** @internal */
export const EntryLiquidationPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryLiquidationPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationPaymentDate$;
(function (EntryLiquidationPaymentDate$) {
    /** @deprecated use `EntryLiquidationPaymentDate$inboundSchema` instead. */
    EntryLiquidationPaymentDate$.inboundSchema = EntryLiquidationPaymentDate$inboundSchema;
    /** @deprecated use `EntryLiquidationPaymentDate$outboundSchema` instead. */
    EntryLiquidationPaymentDate$.outboundSchema = EntryLiquidationPaymentDate$outboundSchema;
})(EntryLiquidationPaymentDate$ || (EntryLiquidationPaymentDate$ = {}));
export function entryLiquidationPaymentDateToJSON(entryLiquidationPaymentDate) {
    return JSON.stringify(EntryLiquidationPaymentDate$outboundSchema.parse(entryLiquidationPaymentDate));
}
export function entryLiquidationPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationPaymentDate' from JSON`);
}
/** @internal */
export const EntryLiquidationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryLiquidationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationQuantity$;
(function (EntryLiquidationQuantity$) {
    /** @deprecated use `EntryLiquidationQuantity$inboundSchema` instead. */
    EntryLiquidationQuantity$.inboundSchema = EntryLiquidationQuantity$inboundSchema;
    /** @deprecated use `EntryLiquidationQuantity$outboundSchema` instead. */
    EntryLiquidationQuantity$.outboundSchema = EntryLiquidationQuantity$outboundSchema;
})(EntryLiquidationQuantity$ || (EntryLiquidationQuantity$ = {}));
export function entryLiquidationQuantityToJSON(entryLiquidationQuantity) {
    return JSON.stringify(EntryLiquidationQuantity$outboundSchema.parse(entryLiquidationQuantity));
}
export function entryLiquidationQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationQuantity' from JSON`);
}
/** @internal */
export const EntryLiquidationRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryLiquidationRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationRecordDate$;
(function (EntryLiquidationRecordDate$) {
    /** @deprecated use `EntryLiquidationRecordDate$inboundSchema` instead. */
    EntryLiquidationRecordDate$.inboundSchema = EntryLiquidationRecordDate$inboundSchema;
    /** @deprecated use `EntryLiquidationRecordDate$outboundSchema` instead. */
    EntryLiquidationRecordDate$.outboundSchema = EntryLiquidationRecordDate$outboundSchema;
})(EntryLiquidationRecordDate$ || (EntryLiquidationRecordDate$ = {}));
export function entryLiquidationRecordDateToJSON(entryLiquidationRecordDate) {
    return JSON.stringify(EntryLiquidationRecordDate$outboundSchema.parse(entryLiquidationRecordDate));
}
export function entryLiquidationRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationRecordDate' from JSON`);
}
/** @internal */
export const EntryLiquidationSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryLiquidationSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryLiquidationSettled$;
(function (EntryLiquidationSettled$) {
    /** @deprecated use `EntryLiquidationSettled$inboundSchema` instead. */
    EntryLiquidationSettled$.inboundSchema = EntryLiquidationSettled$inboundSchema;
    /** @deprecated use `EntryLiquidationSettled$outboundSchema` instead. */
    EntryLiquidationSettled$.outboundSchema = EntryLiquidationSettled$outboundSchema;
})(EntryLiquidationSettled$ || (EntryLiquidationSettled$ = {}));
export function entryLiquidationSettledToJSON(entryLiquidationSettled) {
    return JSON.stringify(EntryLiquidationSettled$outboundSchema.parse(entryLiquidationSettled));
}
export function entryLiquidationSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryLiquidationSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryLiquidationSettled' from JSON`);
}
/** @internal */
export const EntrySubtype$inboundSchema = z
    .union([
    z.nativeEnum(EntrySubtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntrySubtype$outboundSchema = z.union([
    z.nativeEnum(EntrySubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySubtype$;
(function (EntrySubtype$) {
    /** @deprecated use `EntrySubtype$inboundSchema` instead. */
    EntrySubtype$.inboundSchema = EntrySubtype$inboundSchema;
    /** @deprecated use `EntrySubtype$outboundSchema` instead. */
    EntrySubtype$.outboundSchema = EntrySubtype$outboundSchema;
})(EntrySubtype$ || (EntrySubtype$ = {}));
/** @internal */
export const Liquidation$inboundSchema = z.object({
    action: EntryLiquidationAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => EntryLiquidationCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryLiquidationCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => EntryEffectiveDate$inboundSchema))
        .optional(),
    payment_date: z.nullable(z.lazy(() => EntryLiquidationPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryLiquidationQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => EntryLiquidationRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryLiquidationSettled$inboundSchema))
        .optional(),
    subtype: EntrySubtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const Liquidation$outboundSchema = z.object({
    action: EntryLiquidationAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => EntryLiquidationCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryLiquidationCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => EntryEffectiveDate$outboundSchema))
        .optional(),
    paymentDate: z.nullable(z.lazy(() => EntryLiquidationPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryLiquidationQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => EntryLiquidationRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryLiquidationSettled$outboundSchema))
        .optional(),
    subtype: EntrySubtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Liquidation$;
(function (Liquidation$) {
    /** @deprecated use `Liquidation$inboundSchema` instead. */
    Liquidation$.inboundSchema = Liquidation$inboundSchema;
    /** @deprecated use `Liquidation$outboundSchema` instead. */
    Liquidation$.outboundSchema = Liquidation$outboundSchema;
})(Liquidation$ || (Liquidation$ = {}));
export function liquidationToJSON(liquidation) {
    return JSON.stringify(Liquidation$outboundSchema.parse(liquidation));
}
export function liquidationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Liquidation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Liquidation' from JSON`);
}
/** @internal */
export const EntryMaturityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryMaturityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMaturityCashRate$;
(function (EntryMaturityCashRate$) {
    /** @deprecated use `EntryMaturityCashRate$inboundSchema` instead. */
    EntryMaturityCashRate$.inboundSchema = EntryMaturityCashRate$inboundSchema;
    /** @deprecated use `EntryMaturityCashRate$outboundSchema` instead. */
    EntryMaturityCashRate$.outboundSchema = EntryMaturityCashRate$outboundSchema;
})(EntryMaturityCashRate$ || (EntryMaturityCashRate$ = {}));
export function entryMaturityCashRateToJSON(entryMaturityCashRate) {
    return JSON.stringify(EntryMaturityCashRate$outboundSchema.parse(entryMaturityCashRate));
}
export function entryMaturityCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMaturityCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMaturityCashRate' from JSON`);
}
/** @internal */
export const EntryMaturityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryMaturityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMaturityCorporateActionGeneralInformation$;
(function (EntryMaturityCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryMaturityCorporateActionGeneralInformation$.inboundSchema = EntryMaturityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryMaturityCorporateActionGeneralInformation$.outboundSchema = EntryMaturityCorporateActionGeneralInformation$outboundSchema;
})(EntryMaturityCorporateActionGeneralInformation$ || (EntryMaturityCorporateActionGeneralInformation$ = {}));
export function entryMaturityCorporateActionGeneralInformationToJSON(entryMaturityCorporateActionGeneralInformation) {
    return JSON.stringify(EntryMaturityCorporateActionGeneralInformation$outboundSchema.parse(entryMaturityCorporateActionGeneralInformation));
}
export function entryMaturityCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMaturityCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMaturityCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryMaturityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryMaturityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMaturityPaymentDate$;
(function (EntryMaturityPaymentDate$) {
    /** @deprecated use `EntryMaturityPaymentDate$inboundSchema` instead. */
    EntryMaturityPaymentDate$.inboundSchema = EntryMaturityPaymentDate$inboundSchema;
    /** @deprecated use `EntryMaturityPaymentDate$outboundSchema` instead. */
    EntryMaturityPaymentDate$.outboundSchema = EntryMaturityPaymentDate$outboundSchema;
})(EntryMaturityPaymentDate$ || (EntryMaturityPaymentDate$ = {}));
export function entryMaturityPaymentDateToJSON(entryMaturityPaymentDate) {
    return JSON.stringify(EntryMaturityPaymentDate$outboundSchema.parse(entryMaturityPaymentDate));
}
export function entryMaturityPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMaturityPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMaturityPaymentDate' from JSON`);
}
/** @internal */
export const EntryMaturityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryMaturityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMaturityQuantity$;
(function (EntryMaturityQuantity$) {
    /** @deprecated use `EntryMaturityQuantity$inboundSchema` instead. */
    EntryMaturityQuantity$.inboundSchema = EntryMaturityQuantity$inboundSchema;
    /** @deprecated use `EntryMaturityQuantity$outboundSchema` instead. */
    EntryMaturityQuantity$.outboundSchema = EntryMaturityQuantity$outboundSchema;
})(EntryMaturityQuantity$ || (EntryMaturityQuantity$ = {}));
export function entryMaturityQuantityToJSON(entryMaturityQuantity) {
    return JSON.stringify(EntryMaturityQuantity$outboundSchema.parse(entryMaturityQuantity));
}
export function entryMaturityQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMaturityQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMaturityQuantity' from JSON`);
}
/** @internal */
export const Maturity$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryMaturityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryMaturityCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryMaturityPaymentDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryMaturityQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const Maturity$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryMaturityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryMaturityCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryMaturityPaymentDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryMaturityQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Maturity$;
(function (Maturity$) {
    /** @deprecated use `Maturity$inboundSchema` instead. */
    Maturity$.inboundSchema = Maturity$inboundSchema;
    /** @deprecated use `Maturity$outboundSchema` instead. */
    Maturity$.outboundSchema = Maturity$outboundSchema;
})(Maturity$ || (Maturity$ = {}));
export function maturityToJSON(maturity) {
    return JSON.stringify(Maturity$outboundSchema.parse(maturity));
}
export function maturityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Maturity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Maturity' from JSON`);
}
/** @internal */
export const EntryMergerAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryMergerAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryMergerAction$outboundSchema = z.union([
    z.nativeEnum(EntryMergerAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerAction$;
(function (EntryMergerAction$) {
    /** @deprecated use `EntryMergerAction$inboundSchema` instead. */
    EntryMergerAction$.inboundSchema = EntryMergerAction$inboundSchema;
    /** @deprecated use `EntryMergerAction$outboundSchema` instead. */
    EntryMergerAction$.outboundSchema = EntryMergerAction$outboundSchema;
})(EntryMergerAction$ || (EntryMergerAction$ = {}));
/** @internal */
export const EntryMergerCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryMergerCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerCashRate$;
(function (EntryMergerCashRate$) {
    /** @deprecated use `EntryMergerCashRate$inboundSchema` instead. */
    EntryMergerCashRate$.inboundSchema = EntryMergerCashRate$inboundSchema;
    /** @deprecated use `EntryMergerCashRate$outboundSchema` instead. */
    EntryMergerCashRate$.outboundSchema = EntryMergerCashRate$outboundSchema;
})(EntryMergerCashRate$ || (EntryMergerCashRate$ = {}));
export function entryMergerCashRateToJSON(entryMergerCashRate) {
    return JSON.stringify(EntryMergerCashRate$outboundSchema.parse(entryMergerCashRate));
}
export function entryMergerCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMergerCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMergerCashRate' from JSON`);
}
/** @internal */
export const EntryMergerCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryMergerCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerCorporateActionGeneralInformation$;
(function (EntryMergerCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryMergerCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryMergerCorporateActionGeneralInformation$.inboundSchema = EntryMergerCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryMergerCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryMergerCorporateActionGeneralInformation$.outboundSchema = EntryMergerCorporateActionGeneralInformation$outboundSchema;
})(EntryMergerCorporateActionGeneralInformation$ || (EntryMergerCorporateActionGeneralInformation$ = {}));
export function entryMergerCorporateActionGeneralInformationToJSON(entryMergerCorporateActionGeneralInformation) {
    return JSON.stringify(EntryMergerCorporateActionGeneralInformation$outboundSchema.parse(entryMergerCorporateActionGeneralInformation));
}
export function entryMergerCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMergerCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMergerCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryMergerEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryMergerEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerEffectiveDate$;
(function (EntryMergerEffectiveDate$) {
    /** @deprecated use `EntryMergerEffectiveDate$inboundSchema` instead. */
    EntryMergerEffectiveDate$.inboundSchema = EntryMergerEffectiveDate$inboundSchema;
    /** @deprecated use `EntryMergerEffectiveDate$outboundSchema` instead. */
    EntryMergerEffectiveDate$.outboundSchema = EntryMergerEffectiveDate$outboundSchema;
})(EntryMergerEffectiveDate$ || (EntryMergerEffectiveDate$ = {}));
export function entryMergerEffectiveDateToJSON(entryMergerEffectiveDate) {
    return JSON.stringify(EntryMergerEffectiveDate$outboundSchema.parse(entryMergerEffectiveDate));
}
export function entryMergerEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMergerEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMergerEffectiveDate' from JSON`);
}
/** @internal */
export const EntryMergerQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryMergerQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerQuantity$;
(function (EntryMergerQuantity$) {
    /** @deprecated use `EntryMergerQuantity$inboundSchema` instead. */
    EntryMergerQuantity$.inboundSchema = EntryMergerQuantity$inboundSchema;
    /** @deprecated use `EntryMergerQuantity$outboundSchema` instead. */
    EntryMergerQuantity$.outboundSchema = EntryMergerQuantity$outboundSchema;
})(EntryMergerQuantity$ || (EntryMergerQuantity$ = {}));
export function entryMergerQuantityToJSON(entryMergerQuantity) {
    return JSON.stringify(EntryMergerQuantity$outboundSchema.parse(entryMergerQuantity));
}
export function entryMergerQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMergerQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMergerQuantity' from JSON`);
}
/** @internal */
export const EntryMergerStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryMergerStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerStockRate$;
(function (EntryMergerStockRate$) {
    /** @deprecated use `EntryMergerStockRate$inboundSchema` instead. */
    EntryMergerStockRate$.inboundSchema = EntryMergerStockRate$inboundSchema;
    /** @deprecated use `EntryMergerStockRate$outboundSchema` instead. */
    EntryMergerStockRate$.outboundSchema = EntryMergerStockRate$outboundSchema;
})(EntryMergerStockRate$ || (EntryMergerStockRate$ = {}));
export function entryMergerStockRateToJSON(entryMergerStockRate) {
    return JSON.stringify(EntryMergerStockRate$outboundSchema.parse(entryMergerStockRate));
}
export function entryMergerStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryMergerStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryMergerStockRate' from JSON`);
}
/** @internal */
export const EntryMergerType$inboundSchema = z
    .union([
    z.nativeEnum(EntryMergerType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryMergerType$outboundSchema = z.union([
    z.nativeEnum(EntryMergerType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryMergerType$;
(function (EntryMergerType$) {
    /** @deprecated use `EntryMergerType$inboundSchema` instead. */
    EntryMergerType$.inboundSchema = EntryMergerType$inboundSchema;
    /** @deprecated use `EntryMergerType$outboundSchema` instead. */
    EntryMergerType$.outboundSchema = EntryMergerType$outboundSchema;
})(EntryMergerType$ || (EntryMergerType$ = {}));
/** @internal */
export const Merger$inboundSchema = z
    .object({
    action: EntryMergerAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => EntryMergerCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryMergerCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => EntryMergerEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryMergerQuantity$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => EntryMergerStockRate$inboundSchema))
        .optional(),
    type: EntryMergerType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const Merger$outboundSchema = z.object({
    action: EntryMergerAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => EntryMergerCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryMergerCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => EntryMergerEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryMergerQuantity$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => EntryMergerStockRate$outboundSchema))
        .optional(),
    type: EntryMergerType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Merger$;
(function (Merger$) {
    /** @deprecated use `Merger$inboundSchema` instead. */
    Merger$.inboundSchema = Merger$inboundSchema;
    /** @deprecated use `Merger$outboundSchema` instead. */
    Merger$.outboundSchema = Merger$outboundSchema;
})(Merger$ || (Merger$ = {}));
export function mergerToJSON(merger) {
    return JSON.stringify(Merger$outboundSchema.parse(merger));
}
export function mergerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Merger$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Merger' from JSON`);
}
/** @internal */
export const EntryNameChangeAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryNameChangeAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryNameChangeAction$outboundSchema = z.union([
    z.nativeEnum(EntryNameChangeAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryNameChangeAction$;
(function (EntryNameChangeAction$) {
    /** @deprecated use `EntryNameChangeAction$inboundSchema` instead. */
    EntryNameChangeAction$.inboundSchema = EntryNameChangeAction$inboundSchema;
    /** @deprecated use `EntryNameChangeAction$outboundSchema` instead. */
    EntryNameChangeAction$.outboundSchema = EntryNameChangeAction$outboundSchema;
})(EntryNameChangeAction$ || (EntryNameChangeAction$ = {}));
/** @internal */
export const EntryNameChangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryNameChangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryNameChangeCorporateActionGeneralInformation$;
(function (EntryNameChangeCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryNameChangeCorporateActionGeneralInformation$.inboundSchema = EntryNameChangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryNameChangeCorporateActionGeneralInformation$.outboundSchema = EntryNameChangeCorporateActionGeneralInformation$outboundSchema;
})(EntryNameChangeCorporateActionGeneralInformation$ || (EntryNameChangeCorporateActionGeneralInformation$ = {}));
export function entryNameChangeCorporateActionGeneralInformationToJSON(entryNameChangeCorporateActionGeneralInformation) {
    return JSON.stringify(EntryNameChangeCorporateActionGeneralInformation$outboundSchema.parse(entryNameChangeCorporateActionGeneralInformation));
}
export function entryNameChangeCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryNameChangeCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryNameChangeCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryNameChangeEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryNameChangeEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryNameChangeEffectiveDate$;
(function (EntryNameChangeEffectiveDate$) {
    /** @deprecated use `EntryNameChangeEffectiveDate$inboundSchema` instead. */
    EntryNameChangeEffectiveDate$.inboundSchema = EntryNameChangeEffectiveDate$inboundSchema;
    /** @deprecated use `EntryNameChangeEffectiveDate$outboundSchema` instead. */
    EntryNameChangeEffectiveDate$.outboundSchema = EntryNameChangeEffectiveDate$outboundSchema;
})(EntryNameChangeEffectiveDate$ || (EntryNameChangeEffectiveDate$ = {}));
export function entryNameChangeEffectiveDateToJSON(entryNameChangeEffectiveDate) {
    return JSON.stringify(EntryNameChangeEffectiveDate$outboundSchema.parse(entryNameChangeEffectiveDate));
}
export function entryNameChangeEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryNameChangeEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryNameChangeEffectiveDate' from JSON`);
}
/** @internal */
export const EntryNameChangeQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryNameChangeQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryNameChangeQuantity$;
(function (EntryNameChangeQuantity$) {
    /** @deprecated use `EntryNameChangeQuantity$inboundSchema` instead. */
    EntryNameChangeQuantity$.inboundSchema = EntryNameChangeQuantity$inboundSchema;
    /** @deprecated use `EntryNameChangeQuantity$outboundSchema` instead. */
    EntryNameChangeQuantity$.outboundSchema = EntryNameChangeQuantity$outboundSchema;
})(EntryNameChangeQuantity$ || (EntryNameChangeQuantity$ = {}));
export function entryNameChangeQuantityToJSON(entryNameChangeQuantity) {
    return JSON.stringify(EntryNameChangeQuantity$outboundSchema.parse(entryNameChangeQuantity));
}
export function entryNameChangeQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryNameChangeQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryNameChangeQuantity' from JSON`);
}
/** @internal */
export const NameChange$inboundSchema = z.object({
    action: EntryNameChangeAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryNameChangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => EntryNameChangeEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryNameChangeQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
    });
});
/** @internal */
export const NameChange$outboundSchema = z.object({
    action: EntryNameChangeAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryNameChangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => EntryNameChangeEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryNameChangeQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NameChange$;
(function (NameChange$) {
    /** @deprecated use `NameChange$inboundSchema` instead. */
    NameChange$.inboundSchema = NameChange$inboundSchema;
    /** @deprecated use `NameChange$outboundSchema` instead. */
    NameChange$.outboundSchema = NameChange$outboundSchema;
})(NameChange$ || (NameChange$ = {}));
export function nameChangeToJSON(nameChange) {
    return JSON.stringify(NameChange$outboundSchema.parse(nameChange));
}
export function nameChangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NameChange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NameChange' from JSON`);
}
/** @internal */
export const OriginalProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const OriginalProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OriginalProcessDate$;
(function (OriginalProcessDate$) {
    /** @deprecated use `OriginalProcessDate$inboundSchema` instead. */
    OriginalProcessDate$.inboundSchema = OriginalProcessDate$inboundSchema;
    /** @deprecated use `OriginalProcessDate$outboundSchema` instead. */
    OriginalProcessDate$.outboundSchema = OriginalProcessDate$outboundSchema;
})(OriginalProcessDate$ || (OriginalProcessDate$ = {}));
export function originalProcessDateToJSON(originalProcessDate) {
    return JSON.stringify(OriginalProcessDate$outboundSchema.parse(originalProcessDate));
}
export function originalProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OriginalProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OriginalProcessDate' from JSON`);
}
/** @internal */
export const EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentInKindCorporateActionGeneralInformation$;
(function (EntryPaymentInKindCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryPaymentInKindCorporateActionGeneralInformation$.inboundSchema = EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryPaymentInKindCorporateActionGeneralInformation$.outboundSchema = EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema;
})(EntryPaymentInKindCorporateActionGeneralInformation$ || (EntryPaymentInKindCorporateActionGeneralInformation$ = {}));
export function entryPaymentInKindCorporateActionGeneralInformationToJSON(entryPaymentInKindCorporateActionGeneralInformation) {
    return JSON.stringify(EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema.parse(entryPaymentInKindCorporateActionGeneralInformation));
}
export function entryPaymentInKindCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentInKindCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryPaymentInKindPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryPaymentInKindPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentInKindPaymentDate$;
(function (EntryPaymentInKindPaymentDate$) {
    /** @deprecated use `EntryPaymentInKindPaymentDate$inboundSchema` instead. */
    EntryPaymentInKindPaymentDate$.inboundSchema = EntryPaymentInKindPaymentDate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindPaymentDate$outboundSchema` instead. */
    EntryPaymentInKindPaymentDate$.outboundSchema = EntryPaymentInKindPaymentDate$outboundSchema;
})(EntryPaymentInKindPaymentDate$ || (EntryPaymentInKindPaymentDate$ = {}));
export function entryPaymentInKindPaymentDateToJSON(entryPaymentInKindPaymentDate) {
    return JSON.stringify(EntryPaymentInKindPaymentDate$outboundSchema.parse(entryPaymentInKindPaymentDate));
}
export function entryPaymentInKindPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentInKindPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentInKindPaymentDate' from JSON`);
}
/** @internal */
export const EntryPaymentInKindRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryPaymentInKindRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentInKindRecordDate$;
(function (EntryPaymentInKindRecordDate$) {
    /** @deprecated use `EntryPaymentInKindRecordDate$inboundSchema` instead. */
    EntryPaymentInKindRecordDate$.inboundSchema = EntryPaymentInKindRecordDate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindRecordDate$outboundSchema` instead. */
    EntryPaymentInKindRecordDate$.outboundSchema = EntryPaymentInKindRecordDate$outboundSchema;
})(EntryPaymentInKindRecordDate$ || (EntryPaymentInKindRecordDate$ = {}));
export function entryPaymentInKindRecordDateToJSON(entryPaymentInKindRecordDate) {
    return JSON.stringify(EntryPaymentInKindRecordDate$outboundSchema.parse(entryPaymentInKindRecordDate));
}
export function entryPaymentInKindRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentInKindRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentInKindRecordDate' from JSON`);
}
/** @internal */
export const EntryPaymentInKindSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPaymentInKindSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentInKindSettled$;
(function (EntryPaymentInKindSettled$) {
    /** @deprecated use `EntryPaymentInKindSettled$inboundSchema` instead. */
    EntryPaymentInKindSettled$.inboundSchema = EntryPaymentInKindSettled$inboundSchema;
    /** @deprecated use `EntryPaymentInKindSettled$outboundSchema` instead. */
    EntryPaymentInKindSettled$.outboundSchema = EntryPaymentInKindSettled$outboundSchema;
})(EntryPaymentInKindSettled$ || (EntryPaymentInKindSettled$ = {}));
export function entryPaymentInKindSettledToJSON(entryPaymentInKindSettled) {
    return JSON.stringify(EntryPaymentInKindSettled$outboundSchema.parse(entryPaymentInKindSettled));
}
export function entryPaymentInKindSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentInKindSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentInKindSettled' from JSON`);
}
/** @internal */
export const EntryPaymentInKindStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPaymentInKindStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPaymentInKindStockRate$;
(function (EntryPaymentInKindStockRate$) {
    /** @deprecated use `EntryPaymentInKindStockRate$inboundSchema` instead. */
    EntryPaymentInKindStockRate$.inboundSchema = EntryPaymentInKindStockRate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindStockRate$outboundSchema` instead. */
    EntryPaymentInKindStockRate$.outboundSchema = EntryPaymentInKindStockRate$outboundSchema;
})(EntryPaymentInKindStockRate$ || (EntryPaymentInKindStockRate$ = {}));
export function entryPaymentInKindStockRateToJSON(entryPaymentInKindStockRate) {
    return JSON.stringify(EntryPaymentInKindStockRate$outboundSchema.parse(entryPaymentInKindStockRate));
}
export function entryPaymentInKindStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPaymentInKindStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPaymentInKindStockRate' from JSON`);
}
/** @internal */
export const PaymentInKind$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryPaymentInKindPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntryPaymentInKindRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryPaymentInKindSettled$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => EntryPaymentInKindStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const PaymentInKind$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryPaymentInKindPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntryPaymentInKindRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryPaymentInKindSettled$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => EntryPaymentInKindStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentInKind$;
(function (PaymentInKind$) {
    /** @deprecated use `PaymentInKind$inboundSchema` instead. */
    PaymentInKind$.inboundSchema = PaymentInKind$inboundSchema;
    /** @deprecated use `PaymentInKind$outboundSchema` instead. */
    PaymentInKind$.outboundSchema = PaymentInKind$outboundSchema;
})(PaymentInKind$ || (PaymentInKind$ = {}));
export function paymentInKindToJSON(paymentInKind) {
    return JSON.stringify(PaymentInKind$outboundSchema.parse(paymentInKind));
}
export function paymentInKindFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentInKind$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentInKind' from JSON`);
}
/** @internal */
export const EntryPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPrice$;
(function (EntryPrice$) {
    /** @deprecated use `EntryPrice$inboundSchema` instead. */
    EntryPrice$.inboundSchema = EntryPrice$inboundSchema;
    /** @deprecated use `EntryPrice$outboundSchema` instead. */
    EntryPrice$.outboundSchema = EntryPrice$outboundSchema;
})(EntryPrice$ || (EntryPrice$ = {}));
export function entryPriceToJSON(entryPrice) {
    return JSON.stringify(EntryPrice$outboundSchema.parse(entryPrice));
}
export function entryPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPrice' from JSON`);
}
/** @internal */
export const EntryProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryProcessDate$;
(function (EntryProcessDate$) {
    /** @deprecated use `EntryProcessDate$inboundSchema` instead. */
    EntryProcessDate$.inboundSchema = EntryProcessDate$inboundSchema;
    /** @deprecated use `EntryProcessDate$outboundSchema` instead. */
    EntryProcessDate$.outboundSchema = EntryProcessDate$outboundSchema;
})(EntryProcessDate$ || (EntryProcessDate$ = {}));
export function entryProcessDateToJSON(entryProcessDate) {
    return JSON.stringify(EntryProcessDate$outboundSchema.parse(entryProcessDate));
}
export function entryProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryProcessDate' from JSON`);
}
/** @internal */
export const EntryQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryQuantity$;
(function (EntryQuantity$) {
    /** @deprecated use `EntryQuantity$inboundSchema` instead. */
    EntryQuantity$.inboundSchema = EntryQuantity$inboundSchema;
    /** @deprecated use `EntryQuantity$outboundSchema` instead. */
    EntryQuantity$.outboundSchema = EntryQuantity$outboundSchema;
})(EntryQuantity$ || (EntryQuantity$ = {}));
export function entryQuantityToJSON(entryQuantity) {
    return JSON.stringify(EntryQuantity$outboundSchema.parse(entryQuantity));
}
export function entryQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryQuantity' from JSON`);
}
/** @internal */
export const Receive$inboundSchema = z.object({});
/** @internal */
export const Receive$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Receive$;
(function (Receive$) {
    /** @deprecated use `Receive$inboundSchema` instead. */
    Receive$.inboundSchema = Receive$inboundSchema;
    /** @deprecated use `Receive$outboundSchema` instead. */
    Receive$.outboundSchema = Receive$outboundSchema;
})(Receive$ || (Receive$ = {}));
export function receiveToJSON(receive) {
    return JSON.stringify(Receive$outboundSchema.parse(receive));
}
export function receiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Receive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Receive' from JSON`);
}
/** @internal */
export const EntryRedemptionFullAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionFullAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryRedemptionFullAction$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionFullAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullAction$;
(function (EntryRedemptionFullAction$) {
    /** @deprecated use `EntryRedemptionFullAction$inboundSchema` instead. */
    EntryRedemptionFullAction$.inboundSchema = EntryRedemptionFullAction$inboundSchema;
    /** @deprecated use `EntryRedemptionFullAction$outboundSchema` instead. */
    EntryRedemptionFullAction$.outboundSchema = EntryRedemptionFullAction$outboundSchema;
})(EntryRedemptionFullAction$ || (EntryRedemptionFullAction$ = {}));
/** @internal */
export const EntryRedemptionFullCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRedemptionFullCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullCashRate$;
(function (EntryRedemptionFullCashRate$) {
    /** @deprecated use `EntryRedemptionFullCashRate$inboundSchema` instead. */
    EntryRedemptionFullCashRate$.inboundSchema = EntryRedemptionFullCashRate$inboundSchema;
    /** @deprecated use `EntryRedemptionFullCashRate$outboundSchema` instead. */
    EntryRedemptionFullCashRate$.outboundSchema = EntryRedemptionFullCashRate$outboundSchema;
})(EntryRedemptionFullCashRate$ || (EntryRedemptionFullCashRate$ = {}));
export function entryRedemptionFullCashRateToJSON(entryRedemptionFullCashRate) {
    return JSON.stringify(EntryRedemptionFullCashRate$outboundSchema.parse(entryRedemptionFullCashRate));
}
export function entryRedemptionFullCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionFullCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionFullCashRate' from JSON`);
}
/** @internal */
export const EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullCorporateActionGeneralInformation$;
(function (EntryRedemptionFullCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRedemptionFullCorporateActionGeneralInformation$.inboundSchema = EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRedemptionFullCorporateActionGeneralInformation$.outboundSchema = EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema;
})(EntryRedemptionFullCorporateActionGeneralInformation$ || (EntryRedemptionFullCorporateActionGeneralInformation$ = {}));
export function entryRedemptionFullCorporateActionGeneralInformationToJSON(entryRedemptionFullCorporateActionGeneralInformation) {
    return JSON.stringify(EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema.parse(entryRedemptionFullCorporateActionGeneralInformation));
}
export function entryRedemptionFullCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionFullCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryRedemptionFullPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryRedemptionFullPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullPaymentDate$;
(function (EntryRedemptionFullPaymentDate$) {
    /** @deprecated use `EntryRedemptionFullPaymentDate$inboundSchema` instead. */
    EntryRedemptionFullPaymentDate$.inboundSchema = EntryRedemptionFullPaymentDate$inboundSchema;
    /** @deprecated use `EntryRedemptionFullPaymentDate$outboundSchema` instead. */
    EntryRedemptionFullPaymentDate$.outboundSchema = EntryRedemptionFullPaymentDate$outboundSchema;
})(EntryRedemptionFullPaymentDate$ || (EntryRedemptionFullPaymentDate$ = {}));
export function entryRedemptionFullPaymentDateToJSON(entryRedemptionFullPaymentDate) {
    return JSON.stringify(EntryRedemptionFullPaymentDate$outboundSchema.parse(entryRedemptionFullPaymentDate));
}
export function entryRedemptionFullPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionFullPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionFullPaymentDate' from JSON`);
}
/** @internal */
export const EntryRedemptionFullQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRedemptionFullQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullQuantity$;
(function (EntryRedemptionFullQuantity$) {
    /** @deprecated use `EntryRedemptionFullQuantity$inboundSchema` instead. */
    EntryRedemptionFullQuantity$.inboundSchema = EntryRedemptionFullQuantity$inboundSchema;
    /** @deprecated use `EntryRedemptionFullQuantity$outboundSchema` instead. */
    EntryRedemptionFullQuantity$.outboundSchema = EntryRedemptionFullQuantity$outboundSchema;
})(EntryRedemptionFullQuantity$ || (EntryRedemptionFullQuantity$ = {}));
export function entryRedemptionFullQuantityToJSON(entryRedemptionFullQuantity) {
    return JSON.stringify(EntryRedemptionFullQuantity$outboundSchema.parse(entryRedemptionFullQuantity));
}
export function entryRedemptionFullQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionFullQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionFullQuantity' from JSON`);
}
/** @internal */
export const EntryRedemptionFullSubtype$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionFullSubtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryRedemptionFullSubtype$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionFullSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionFullSubtype$;
(function (EntryRedemptionFullSubtype$) {
    /** @deprecated use `EntryRedemptionFullSubtype$inboundSchema` instead. */
    EntryRedemptionFullSubtype$.inboundSchema = EntryRedemptionFullSubtype$inboundSchema;
    /** @deprecated use `EntryRedemptionFullSubtype$outboundSchema` instead. */
    EntryRedemptionFullSubtype$.outboundSchema = EntryRedemptionFullSubtype$outboundSchema;
})(EntryRedemptionFullSubtype$ || (EntryRedemptionFullSubtype$ = {}));
/** @internal */
export const RedemptionFull$inboundSchema = z.object({
    action: EntryRedemptionFullAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => EntryRedemptionFullCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryRedemptionFullPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryRedemptionFullQuantity$inboundSchema))
        .optional(),
    subtype: EntryRedemptionFullSubtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const RedemptionFull$outboundSchema = z.object({
    action: EntryRedemptionFullAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => EntryRedemptionFullCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryRedemptionFullPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryRedemptionFullQuantity$outboundSchema))
        .optional(),
    subtype: EntryRedemptionFullSubtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RedemptionFull$;
(function (RedemptionFull$) {
    /** @deprecated use `RedemptionFull$inboundSchema` instead. */
    RedemptionFull$.inboundSchema = RedemptionFull$inboundSchema;
    /** @deprecated use `RedemptionFull$outboundSchema` instead. */
    RedemptionFull$.outboundSchema = RedemptionFull$outboundSchema;
})(RedemptionFull$ || (RedemptionFull$ = {}));
export function redemptionFullToJSON(redemptionFull) {
    return JSON.stringify(RedemptionFull$outboundSchema.parse(redemptionFull));
}
export function redemptionFullFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RedemptionFull$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RedemptionFull' from JSON`);
}
/** @internal */
export const EntryRedemptionPartialAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionPartialAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryRedemptionPartialAction$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionPartialAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionPartialAction$;
(function (EntryRedemptionPartialAction$) {
    /** @deprecated use `EntryRedemptionPartialAction$inboundSchema` instead. */
    EntryRedemptionPartialAction$.inboundSchema = EntryRedemptionPartialAction$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialAction$outboundSchema` instead. */
    EntryRedemptionPartialAction$.outboundSchema = EntryRedemptionPartialAction$outboundSchema;
})(EntryRedemptionPartialAction$ || (EntryRedemptionPartialAction$ = {}));
/** @internal */
export const EntryRedemptionPartialCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRedemptionPartialCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionPartialCashRate$;
(function (EntryRedemptionPartialCashRate$) {
    /** @deprecated use `EntryRedemptionPartialCashRate$inboundSchema` instead. */
    EntryRedemptionPartialCashRate$.inboundSchema = EntryRedemptionPartialCashRate$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialCashRate$outboundSchema` instead. */
    EntryRedemptionPartialCashRate$.outboundSchema = EntryRedemptionPartialCashRate$outboundSchema;
})(EntryRedemptionPartialCashRate$ || (EntryRedemptionPartialCashRate$ = {}));
export function entryRedemptionPartialCashRateToJSON(entryRedemptionPartialCashRate) {
    return JSON.stringify(EntryRedemptionPartialCashRate$outboundSchema.parse(entryRedemptionPartialCashRate));
}
export function entryRedemptionPartialCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionPartialCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionPartialCashRate' from JSON`);
}
/** @internal */
export const EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionPartialCorporateActionGeneralInformation$;
(function (EntryRedemptionPartialCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRedemptionPartialCorporateActionGeneralInformation$.inboundSchema = EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRedemptionPartialCorporateActionGeneralInformation$.outboundSchema = EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema;
})(EntryRedemptionPartialCorporateActionGeneralInformation$ || (EntryRedemptionPartialCorporateActionGeneralInformation$ = {}));
export function entryRedemptionPartialCorporateActionGeneralInformationToJSON(entryRedemptionPartialCorporateActionGeneralInformation) {
    return JSON.stringify(EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema
        .parse(entryRedemptionPartialCorporateActionGeneralInformation));
}
export function entryRedemptionPartialCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionPartialCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryRedemptionPartialPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryRedemptionPartialPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionPartialPaymentDate$;
(function (EntryRedemptionPartialPaymentDate$) {
    /** @deprecated use `EntryRedemptionPartialPaymentDate$inboundSchema` instead. */
    EntryRedemptionPartialPaymentDate$.inboundSchema = EntryRedemptionPartialPaymentDate$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialPaymentDate$outboundSchema` instead. */
    EntryRedemptionPartialPaymentDate$.outboundSchema = EntryRedemptionPartialPaymentDate$outboundSchema;
})(EntryRedemptionPartialPaymentDate$ || (EntryRedemptionPartialPaymentDate$ = {}));
export function entryRedemptionPartialPaymentDateToJSON(entryRedemptionPartialPaymentDate) {
    return JSON.stringify(EntryRedemptionPartialPaymentDate$outboundSchema.parse(entryRedemptionPartialPaymentDate));
}
export function entryRedemptionPartialPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionPartialPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionPartialPaymentDate' from JSON`);
}
/** @internal */
export const EntryRedemptionPartialQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRedemptionPartialQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRedemptionPartialQuantity$;
(function (EntryRedemptionPartialQuantity$) {
    /** @deprecated use `EntryRedemptionPartialQuantity$inboundSchema` instead. */
    EntryRedemptionPartialQuantity$.inboundSchema = EntryRedemptionPartialQuantity$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialQuantity$outboundSchema` instead. */
    EntryRedemptionPartialQuantity$.outboundSchema = EntryRedemptionPartialQuantity$outboundSchema;
})(EntryRedemptionPartialQuantity$ || (EntryRedemptionPartialQuantity$ = {}));
export function entryRedemptionPartialQuantityToJSON(entryRedemptionPartialQuantity) {
    return JSON.stringify(EntryRedemptionPartialQuantity$outboundSchema.parse(entryRedemptionPartialQuantity));
}
export function entryRedemptionPartialQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRedemptionPartialQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRedemptionPartialQuantity' from JSON`);
}
/** @internal */
export const RedemptionPartial$inboundSchema = z.object({
    action: EntryRedemptionPartialAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => EntryRedemptionPartialCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryRedemptionPartialPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryRedemptionPartialQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const RedemptionPartial$outboundSchema = z.object({
    action: EntryRedemptionPartialAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => EntryRedemptionPartialCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryRedemptionPartialPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryRedemptionPartialQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RedemptionPartial$;
(function (RedemptionPartial$) {
    /** @deprecated use `RedemptionPartial$inboundSchema` instead. */
    RedemptionPartial$.inboundSchema = RedemptionPartial$inboundSchema;
    /** @deprecated use `RedemptionPartial$outboundSchema` instead. */
    RedemptionPartial$.outboundSchema = RedemptionPartial$outboundSchema;
})(RedemptionPartial$ || (RedemptionPartial$ = {}));
export function redemptionPartialToJSON(redemptionPartial) {
    return JSON.stringify(RedemptionPartial$outboundSchema.parse(redemptionPartial));
}
export function redemptionPartialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RedemptionPartial$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RedemptionPartial' from JSON`);
}
/** @internal */
export const EntryReverseStockSplitAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryReverseStockSplitAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryReverseStockSplitAction$outboundSchema = z.union([
    z.nativeEnum(EntryReverseStockSplitAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryReverseStockSplitAction$;
(function (EntryReverseStockSplitAction$) {
    /** @deprecated use `EntryReverseStockSplitAction$inboundSchema` instead. */
    EntryReverseStockSplitAction$.inboundSchema = EntryReverseStockSplitAction$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitAction$outboundSchema` instead. */
    EntryReverseStockSplitAction$.outboundSchema = EntryReverseStockSplitAction$outboundSchema;
})(EntryReverseStockSplitAction$ || (EntryReverseStockSplitAction$ = {}));
/** @internal */
export const EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryReverseStockSplitCorporateActionGeneralInformation$;
(function (EntryReverseStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryReverseStockSplitCorporateActionGeneralInformation$.inboundSchema = EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryReverseStockSplitCorporateActionGeneralInformation$.outboundSchema = EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryReverseStockSplitCorporateActionGeneralInformation$ || (EntryReverseStockSplitCorporateActionGeneralInformation$ = {}));
export function entryReverseStockSplitCorporateActionGeneralInformationToJSON(entryReverseStockSplitCorporateActionGeneralInformation) {
    return JSON.stringify(EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema
        .parse(entryReverseStockSplitCorporateActionGeneralInformation));
}
export function entryReverseStockSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EntryReverseStockSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryReverseStockSplitEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryReverseStockSplitEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryReverseStockSplitEffectiveDate$;
(function (EntryReverseStockSplitEffectiveDate$) {
    /** @deprecated use `EntryReverseStockSplitEffectiveDate$inboundSchema` instead. */
    EntryReverseStockSplitEffectiveDate$.inboundSchema = EntryReverseStockSplitEffectiveDate$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitEffectiveDate$outboundSchema` instead. */
    EntryReverseStockSplitEffectiveDate$.outboundSchema = EntryReverseStockSplitEffectiveDate$outboundSchema;
})(EntryReverseStockSplitEffectiveDate$ || (EntryReverseStockSplitEffectiveDate$ = {}));
export function entryReverseStockSplitEffectiveDateToJSON(entryReverseStockSplitEffectiveDate) {
    return JSON.stringify(EntryReverseStockSplitEffectiveDate$outboundSchema.parse(entryReverseStockSplitEffectiveDate));
}
export function entryReverseStockSplitEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryReverseStockSplitEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryReverseStockSplitEffectiveDate' from JSON`);
}
/** @internal */
export const FactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const FactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FactorDenominator$;
(function (FactorDenominator$) {
    /** @deprecated use `FactorDenominator$inboundSchema` instead. */
    FactorDenominator$.inboundSchema = FactorDenominator$inboundSchema;
    /** @deprecated use `FactorDenominator$outboundSchema` instead. */
    FactorDenominator$.outboundSchema = FactorDenominator$outboundSchema;
})(FactorDenominator$ || (FactorDenominator$ = {}));
export function factorDenominatorToJSON(factorDenominator) {
    return JSON.stringify(FactorDenominator$outboundSchema.parse(factorDenominator));
}
export function factorDenominatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FactorDenominator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FactorDenominator' from JSON`);
}
/** @internal */
export const FactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const FactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FactorNumerator$;
(function (FactorNumerator$) {
    /** @deprecated use `FactorNumerator$inboundSchema` instead. */
    FactorNumerator$.inboundSchema = FactorNumerator$inboundSchema;
    /** @deprecated use `FactorNumerator$outboundSchema` instead. */
    FactorNumerator$.outboundSchema = FactorNumerator$outboundSchema;
})(FactorNumerator$ || (FactorNumerator$ = {}));
export function factorNumeratorToJSON(factorNumerator) {
    return JSON.stringify(FactorNumerator$outboundSchema.parse(factorNumerator));
}
export function factorNumeratorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FactorNumerator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FactorNumerator' from JSON`);
}
/** @internal */
export const EntryReverseStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryReverseStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryReverseStockSplitQuantity$;
(function (EntryReverseStockSplitQuantity$) {
    /** @deprecated use `EntryReverseStockSplitQuantity$inboundSchema` instead. */
    EntryReverseStockSplitQuantity$.inboundSchema = EntryReverseStockSplitQuantity$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitQuantity$outboundSchema` instead. */
    EntryReverseStockSplitQuantity$.outboundSchema = EntryReverseStockSplitQuantity$outboundSchema;
})(EntryReverseStockSplitQuantity$ || (EntryReverseStockSplitQuantity$ = {}));
export function entryReverseStockSplitQuantityToJSON(entryReverseStockSplitQuantity) {
    return JSON.stringify(EntryReverseStockSplitQuantity$outboundSchema.parse(entryReverseStockSplitQuantity));
}
export function entryReverseStockSplitQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryReverseStockSplitQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryReverseStockSplitQuantity' from JSON`);
}
/** @internal */
export const EntryReverseStockSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryReverseStockSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryReverseStockSplitStockRate$;
(function (EntryReverseStockSplitStockRate$) {
    /** @deprecated use `EntryReverseStockSplitStockRate$inboundSchema` instead. */
    EntryReverseStockSplitStockRate$.inboundSchema = EntryReverseStockSplitStockRate$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitStockRate$outboundSchema` instead. */
    EntryReverseStockSplitStockRate$.outboundSchema = EntryReverseStockSplitStockRate$outboundSchema;
})(EntryReverseStockSplitStockRate$ || (EntryReverseStockSplitStockRate$ = {}));
export function entryReverseStockSplitStockRateToJSON(entryReverseStockSplitStockRate) {
    return JSON.stringify(EntryReverseStockSplitStockRate$outboundSchema.parse(entryReverseStockSplitStockRate));
}
export function entryReverseStockSplitStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryReverseStockSplitStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryReverseStockSplitStockRate' from JSON`);
}
/** @internal */
export const ReverseStockSplit$inboundSchema = z.object({
    action: EntryReverseStockSplitAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => EntryReverseStockSplitEffectiveDate$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => FactorDenominator$inboundSchema))
        .optional(),
    factor_numerator: z.nullable(z.lazy(() => FactorNumerator$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryReverseStockSplitQuantity$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => EntryReverseStockSplitStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ReverseStockSplit$outboundSchema = z.object({
    action: EntryReverseStockSplitAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => EntryReverseStockSplitEffectiveDate$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => FactorDenominator$outboundSchema))
        .optional(),
    factorNumerator: z.nullable(z.lazy(() => FactorNumerator$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryReverseStockSplitQuantity$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => EntryReverseStockSplitStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReverseStockSplit$;
(function (ReverseStockSplit$) {
    /** @deprecated use `ReverseStockSplit$inboundSchema` instead. */
    ReverseStockSplit$.inboundSchema = ReverseStockSplit$inboundSchema;
    /** @deprecated use `ReverseStockSplit$outboundSchema` instead. */
    ReverseStockSplit$.outboundSchema = ReverseStockSplit$outboundSchema;
})(ReverseStockSplit$ || (ReverseStockSplit$ = {}));
export function reverseStockSplitToJSON(reverseStockSplit) {
    return JSON.stringify(ReverseStockSplit$outboundSchema.parse(reverseStockSplit));
}
export function reverseStockSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReverseStockSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReverseStockSplit' from JSON`);
}
/** @internal */
export const EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRightsDistributionCorporateActionGeneralInformation$;
(function (EntryRightsDistributionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRightsDistributionCorporateActionGeneralInformation$.inboundSchema = EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRightsDistributionCorporateActionGeneralInformation$.outboundSchema = EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema;
})(EntryRightsDistributionCorporateActionGeneralInformation$ || (EntryRightsDistributionCorporateActionGeneralInformation$ = {}));
export function entryRightsDistributionCorporateActionGeneralInformationToJSON(entryRightsDistributionCorporateActionGeneralInformation) {
    return JSON.stringify(EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema
        .parse(entryRightsDistributionCorporateActionGeneralInformation));
}
export function entryRightsDistributionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EntryRightsDistributionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryRightsDistributionPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryRightsDistributionPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRightsDistributionPaymentDate$;
(function (EntryRightsDistributionPaymentDate$) {
    /** @deprecated use `EntryRightsDistributionPaymentDate$inboundSchema` instead. */
    EntryRightsDistributionPaymentDate$.inboundSchema = EntryRightsDistributionPaymentDate$inboundSchema;
    /** @deprecated use `EntryRightsDistributionPaymentDate$outboundSchema` instead. */
    EntryRightsDistributionPaymentDate$.outboundSchema = EntryRightsDistributionPaymentDate$outboundSchema;
})(EntryRightsDistributionPaymentDate$ || (EntryRightsDistributionPaymentDate$ = {}));
export function entryRightsDistributionPaymentDateToJSON(entryRightsDistributionPaymentDate) {
    return JSON.stringify(EntryRightsDistributionPaymentDate$outboundSchema.parse(entryRightsDistributionPaymentDate));
}
export function entryRightsDistributionPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRightsDistributionPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRightsDistributionPaymentDate' from JSON`);
}
/** @internal */
export const EntryRightsDistributionRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryRightsDistributionRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRightsDistributionRecordDate$;
(function (EntryRightsDistributionRecordDate$) {
    /** @deprecated use `EntryRightsDistributionRecordDate$inboundSchema` instead. */
    EntryRightsDistributionRecordDate$.inboundSchema = EntryRightsDistributionRecordDate$inboundSchema;
    /** @deprecated use `EntryRightsDistributionRecordDate$outboundSchema` instead. */
    EntryRightsDistributionRecordDate$.outboundSchema = EntryRightsDistributionRecordDate$outboundSchema;
})(EntryRightsDistributionRecordDate$ || (EntryRightsDistributionRecordDate$ = {}));
export function entryRightsDistributionRecordDateToJSON(entryRightsDistributionRecordDate) {
    return JSON.stringify(EntryRightsDistributionRecordDate$outboundSchema.parse(entryRightsDistributionRecordDate));
}
export function entryRightsDistributionRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRightsDistributionRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRightsDistributionRecordDate' from JSON`);
}
/** @internal */
export const EntryRightsDistributionSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRightsDistributionSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRightsDistributionSettled$;
(function (EntryRightsDistributionSettled$) {
    /** @deprecated use `EntryRightsDistributionSettled$inboundSchema` instead. */
    EntryRightsDistributionSettled$.inboundSchema = EntryRightsDistributionSettled$inboundSchema;
    /** @deprecated use `EntryRightsDistributionSettled$outboundSchema` instead. */
    EntryRightsDistributionSettled$.outboundSchema = EntryRightsDistributionSettled$outboundSchema;
})(EntryRightsDistributionSettled$ || (EntryRightsDistributionSettled$ = {}));
export function entryRightsDistributionSettledToJSON(entryRightsDistributionSettled) {
    return JSON.stringify(EntryRightsDistributionSettled$outboundSchema.parse(entryRightsDistributionSettled));
}
export function entryRightsDistributionSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRightsDistributionSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRightsDistributionSettled' from JSON`);
}
/** @internal */
export const RightsDistribution$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryRightsDistributionPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntryRightsDistributionRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryRightsDistributionSettled$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const RightsDistribution$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryRightsDistributionPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntryRightsDistributionRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntryRightsDistributionSettled$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RightsDistribution$;
(function (RightsDistribution$) {
    /** @deprecated use `RightsDistribution$inboundSchema` instead. */
    RightsDistribution$.inboundSchema = RightsDistribution$inboundSchema;
    /** @deprecated use `RightsDistribution$outboundSchema` instead. */
    RightsDistribution$.outboundSchema = RightsDistribution$outboundSchema;
})(RightsDistribution$ || (RightsDistribution$ = {}));
export function rightsDistributionToJSON(rightsDistribution) {
    return JSON.stringify(RightsDistribution$outboundSchema.parse(rightsDistribution));
}
export function rightsDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RightsDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RightsDistribution' from JSON`);
}
/** @internal */
export const EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRightsSubscriptionCorporateActionGeneralInformation$;
(function (EntryRightsSubscriptionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRightsSubscriptionCorporateActionGeneralInformation$.inboundSchema = EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRightsSubscriptionCorporateActionGeneralInformation$.outboundSchema = EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema;
})(EntryRightsSubscriptionCorporateActionGeneralInformation$ || (EntryRightsSubscriptionCorporateActionGeneralInformation$ = {}));
export function entryRightsSubscriptionCorporateActionGeneralInformationToJSON(entryRightsSubscriptionCorporateActionGeneralInformation) {
    return JSON.stringify(EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema
        .parse(entryRightsSubscriptionCorporateActionGeneralInformation));
}
export function entryRightsSubscriptionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EntryRightsSubscriptionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const RightsSubscription$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const RightsSubscription$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RightsSubscription$;
(function (RightsSubscription$) {
    /** @deprecated use `RightsSubscription$inboundSchema` instead. */
    RightsSubscription$.inboundSchema = RightsSubscription$inboundSchema;
    /** @deprecated use `RightsSubscription$outboundSchema` instead. */
    RightsSubscription$.outboundSchema = RightsSubscription$outboundSchema;
})(RightsSubscription$ || (RightsSubscription$ = {}));
export function rightsSubscriptionToJSON(rightsSubscription) {
    return JSON.stringify(RightsSubscription$outboundSchema.parse(rightsSubscription));
}
export function rightsSubscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RightsSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RightsSubscription' from JSON`);
}
/** @internal */
export const RoundingAdjustment$inboundSchema = z.object({
    rounding_reason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "rounding_reason": "roundingReason",
    });
});
/** @internal */
export const RoundingAdjustment$outboundSchema = z.object({
    roundingReason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        roundingReason: "rounding_reason",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoundingAdjustment$;
(function (RoundingAdjustment$) {
    /** @deprecated use `RoundingAdjustment$inboundSchema` instead. */
    RoundingAdjustment$.inboundSchema = RoundingAdjustment$inboundSchema;
    /** @deprecated use `RoundingAdjustment$outboundSchema` instead. */
    RoundingAdjustment$.outboundSchema = RoundingAdjustment$outboundSchema;
})(RoundingAdjustment$ || (RoundingAdjustment$ = {}));
export function roundingAdjustmentToJSON(roundingAdjustment) {
    return JSON.stringify(RoundingAdjustment$outboundSchema.parse(roundingAdjustment));
}
export function roundingAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoundingAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoundingAdjustment' from JSON`);
}
/** @internal */
export const EntrySaleOfRightsCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntrySaleOfRightsCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySaleOfRightsCashRate$;
(function (EntrySaleOfRightsCashRate$) {
    /** @deprecated use `EntrySaleOfRightsCashRate$inboundSchema` instead. */
    EntrySaleOfRightsCashRate$.inboundSchema = EntrySaleOfRightsCashRate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsCashRate$outboundSchema` instead. */
    EntrySaleOfRightsCashRate$.outboundSchema = EntrySaleOfRightsCashRate$outboundSchema;
})(EntrySaleOfRightsCashRate$ || (EntrySaleOfRightsCashRate$ = {}));
export function entrySaleOfRightsCashRateToJSON(entrySaleOfRightsCashRate) {
    return JSON.stringify(EntrySaleOfRightsCashRate$outboundSchema.parse(entrySaleOfRightsCashRate));
}
export function entrySaleOfRightsCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySaleOfRightsCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySaleOfRightsCashRate' from JSON`);
}
/** @internal */
export const EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySaleOfRightsCorporateActionGeneralInformation$;
(function (EntrySaleOfRightsCorporateActionGeneralInformation$) {
    /** @deprecated use `EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
    EntrySaleOfRightsCorporateActionGeneralInformation$.inboundSchema = EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
    EntrySaleOfRightsCorporateActionGeneralInformation$.outboundSchema = EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema;
})(EntrySaleOfRightsCorporateActionGeneralInformation$ || (EntrySaleOfRightsCorporateActionGeneralInformation$ = {}));
export function entrySaleOfRightsCorporateActionGeneralInformationToJSON(entrySaleOfRightsCorporateActionGeneralInformation) {
    return JSON.stringify(EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema.parse(entrySaleOfRightsCorporateActionGeneralInformation));
}
export function entrySaleOfRightsCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySaleOfRightsCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntrySaleOfRightsPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntrySaleOfRightsPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySaleOfRightsPaymentDate$;
(function (EntrySaleOfRightsPaymentDate$) {
    /** @deprecated use `EntrySaleOfRightsPaymentDate$inboundSchema` instead. */
    EntrySaleOfRightsPaymentDate$.inboundSchema = EntrySaleOfRightsPaymentDate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsPaymentDate$outboundSchema` instead. */
    EntrySaleOfRightsPaymentDate$.outboundSchema = EntrySaleOfRightsPaymentDate$outboundSchema;
})(EntrySaleOfRightsPaymentDate$ || (EntrySaleOfRightsPaymentDate$ = {}));
export function entrySaleOfRightsPaymentDateToJSON(entrySaleOfRightsPaymentDate) {
    return JSON.stringify(EntrySaleOfRightsPaymentDate$outboundSchema.parse(entrySaleOfRightsPaymentDate));
}
export function entrySaleOfRightsPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySaleOfRightsPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySaleOfRightsPaymentDate' from JSON`);
}
/** @internal */
export const EntrySaleOfRightsRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntrySaleOfRightsRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySaleOfRightsRecordDate$;
(function (EntrySaleOfRightsRecordDate$) {
    /** @deprecated use `EntrySaleOfRightsRecordDate$inboundSchema` instead. */
    EntrySaleOfRightsRecordDate$.inboundSchema = EntrySaleOfRightsRecordDate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsRecordDate$outboundSchema` instead. */
    EntrySaleOfRightsRecordDate$.outboundSchema = EntrySaleOfRightsRecordDate$outboundSchema;
})(EntrySaleOfRightsRecordDate$ || (EntrySaleOfRightsRecordDate$ = {}));
export function entrySaleOfRightsRecordDateToJSON(entrySaleOfRightsRecordDate) {
    return JSON.stringify(EntrySaleOfRightsRecordDate$outboundSchema.parse(entrySaleOfRightsRecordDate));
}
export function entrySaleOfRightsRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySaleOfRightsRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySaleOfRightsRecordDate' from JSON`);
}
/** @internal */
export const EntrySaleOfRightsSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntrySaleOfRightsSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySaleOfRightsSettled$;
(function (EntrySaleOfRightsSettled$) {
    /** @deprecated use `EntrySaleOfRightsSettled$inboundSchema` instead. */
    EntrySaleOfRightsSettled$.inboundSchema = EntrySaleOfRightsSettled$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsSettled$outboundSchema` instead. */
    EntrySaleOfRightsSettled$.outboundSchema = EntrySaleOfRightsSettled$outboundSchema;
})(EntrySaleOfRightsSettled$ || (EntrySaleOfRightsSettled$ = {}));
export function entrySaleOfRightsSettledToJSON(entrySaleOfRightsSettled) {
    return JSON.stringify(EntrySaleOfRightsSettled$outboundSchema.parse(entrySaleOfRightsSettled));
}
export function entrySaleOfRightsSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySaleOfRightsSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySaleOfRightsSettled' from JSON`);
}
/** @internal */
export const SaleOfRights$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntrySaleOfRightsCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntrySaleOfRightsPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntrySaleOfRightsRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntrySaleOfRightsSettled$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const SaleOfRights$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntrySaleOfRightsCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntrySaleOfRightsPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntrySaleOfRightsRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => EntrySaleOfRightsSettled$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SaleOfRights$;
(function (SaleOfRights$) {
    /** @deprecated use `SaleOfRights$inboundSchema` instead. */
    SaleOfRights$.inboundSchema = SaleOfRights$inboundSchema;
    /** @deprecated use `SaleOfRights$outboundSchema` instead. */
    SaleOfRights$.outboundSchema = SaleOfRights$outboundSchema;
})(SaleOfRights$ || (SaleOfRights$ = {}));
export function saleOfRightsToJSON(saleOfRights) {
    return JSON.stringify(SaleOfRights$outboundSchema.parse(saleOfRights));
}
export function saleOfRightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SaleOfRights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SaleOfRights' from JSON`);
}
/** @internal */
export const SettleDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const SettleDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SettleDate$;
(function (SettleDate$) {
    /** @deprecated use `SettleDate$inboundSchema` instead. */
    SettleDate$.inboundSchema = SettleDate$inboundSchema;
    /** @deprecated use `SettleDate$outboundSchema` instead. */
    SettleDate$.outboundSchema = SettleDate$outboundSchema;
})(SettleDate$ || (SettleDate$ = {}));
export function settleDateToJSON(settleDate) {
    return JSON.stringify(SettleDate$outboundSchema.parse(settleDate));
}
export function settleDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SettleDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SettleDate' from JSON`);
}
/** @internal */
export const EntrySide$inboundSchema = z
    .union([
    z.nativeEnum(EntrySide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntrySide$outboundSchema = z.union([
    z.nativeEnum(EntrySide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySide$;
(function (EntrySide$) {
    /** @deprecated use `EntrySide$inboundSchema` instead. */
    EntrySide$.inboundSchema = EntrySide$inboundSchema;
    /** @deprecated use `EntrySide$outboundSchema` instead. */
    EntrySide$.outboundSchema = EntrySide$outboundSchema;
})(EntrySide$ || (EntrySide$ = {}));
/** @internal */
export const EntrySideModifier$inboundSchema = z
    .union([
    z.nativeEnum(EntrySideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntrySideModifier$outboundSchema = z.union([
    z.nativeEnum(EntrySideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySideModifier$;
(function (EntrySideModifier$) {
    /** @deprecated use `EntrySideModifier$inboundSchema` instead. */
    EntrySideModifier$.inboundSchema = EntrySideModifier$inboundSchema;
    /** @deprecated use `EntrySideModifier$outboundSchema` instead. */
    EntrySideModifier$.outboundSchema = EntrySideModifier$outboundSchema;
})(EntrySideModifier$ || (EntrySideModifier$ = {}));
/** @internal */
export const EntrySpinOffCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntrySpinOffCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySpinOffCorporateActionGeneralInformation$;
(function (EntrySpinOffCorporateActionGeneralInformation$) {
    /** @deprecated use `EntrySpinOffCorporateActionGeneralInformation$inboundSchema` instead. */
    EntrySpinOffCorporateActionGeneralInformation$.inboundSchema = EntrySpinOffCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntrySpinOffCorporateActionGeneralInformation$outboundSchema` instead. */
    EntrySpinOffCorporateActionGeneralInformation$.outboundSchema = EntrySpinOffCorporateActionGeneralInformation$outboundSchema;
})(EntrySpinOffCorporateActionGeneralInformation$ || (EntrySpinOffCorporateActionGeneralInformation$ = {}));
export function entrySpinOffCorporateActionGeneralInformationToJSON(entrySpinOffCorporateActionGeneralInformation) {
    return JSON.stringify(EntrySpinOffCorporateActionGeneralInformation$outboundSchema.parse(entrySpinOffCorporateActionGeneralInformation));
}
export function entrySpinOffCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySpinOffCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySpinOffCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const PayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayDate$;
(function (PayDate$) {
    /** @deprecated use `PayDate$inboundSchema` instead. */
    PayDate$.inboundSchema = PayDate$inboundSchema;
    /** @deprecated use `PayDate$outboundSchema` instead. */
    PayDate$.outboundSchema = PayDate$outboundSchema;
})(PayDate$ || (PayDate$ = {}));
export function payDateToJSON(payDate) {
    return JSON.stringify(PayDate$outboundSchema.parse(payDate));
}
export function payDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayDate' from JSON`);
}
/** @internal */
export const EntrySpinOffQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntrySpinOffQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySpinOffQuantity$;
(function (EntrySpinOffQuantity$) {
    /** @deprecated use `EntrySpinOffQuantity$inboundSchema` instead. */
    EntrySpinOffQuantity$.inboundSchema = EntrySpinOffQuantity$inboundSchema;
    /** @deprecated use `EntrySpinOffQuantity$outboundSchema` instead. */
    EntrySpinOffQuantity$.outboundSchema = EntrySpinOffQuantity$outboundSchema;
})(EntrySpinOffQuantity$ || (EntrySpinOffQuantity$ = {}));
export function entrySpinOffQuantityToJSON(entrySpinOffQuantity) {
    return JSON.stringify(EntrySpinOffQuantity$outboundSchema.parse(entrySpinOffQuantity));
}
export function entrySpinOffQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySpinOffQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySpinOffQuantity' from JSON`);
}
/** @internal */
export const EntrySpinOffRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntrySpinOffRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySpinOffRate$;
(function (EntrySpinOffRate$) {
    /** @deprecated use `EntrySpinOffRate$inboundSchema` instead. */
    EntrySpinOffRate$.inboundSchema = EntrySpinOffRate$inboundSchema;
    /** @deprecated use `EntrySpinOffRate$outboundSchema` instead. */
    EntrySpinOffRate$.outboundSchema = EntrySpinOffRate$outboundSchema;
})(EntrySpinOffRate$ || (EntrySpinOffRate$ = {}));
export function entrySpinOffRateToJSON(entrySpinOffRate) {
    return JSON.stringify(EntrySpinOffRate$outboundSchema.parse(entrySpinOffRate));
}
export function entrySpinOffRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySpinOffRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySpinOffRate' from JSON`);
}
/** @internal */
export const EntrySpinOffRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntrySpinOffRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySpinOffRecordDate$;
(function (EntrySpinOffRecordDate$) {
    /** @deprecated use `EntrySpinOffRecordDate$inboundSchema` instead. */
    EntrySpinOffRecordDate$.inboundSchema = EntrySpinOffRecordDate$inboundSchema;
    /** @deprecated use `EntrySpinOffRecordDate$outboundSchema` instead. */
    EntrySpinOffRecordDate$.outboundSchema = EntrySpinOffRecordDate$outboundSchema;
})(EntrySpinOffRecordDate$ || (EntrySpinOffRecordDate$ = {}));
export function entrySpinOffRecordDateToJSON(entrySpinOffRecordDate) {
    return JSON.stringify(EntrySpinOffRecordDate$outboundSchema.parse(entrySpinOffRecordDate));
}
export function entrySpinOffRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntrySpinOffRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntrySpinOffRecordDate' from JSON`);
}
/** @internal */
export const SpinOff$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntrySpinOffCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => PayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntrySpinOffQuantity$inboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => EntrySpinOffRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntrySpinOffRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const SpinOff$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntrySpinOffCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => PayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntrySpinOffQuantity$outboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => EntrySpinOffRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntrySpinOffRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SpinOff$;
(function (SpinOff$) {
    /** @deprecated use `SpinOff$inboundSchema` instead. */
    SpinOff$.inboundSchema = SpinOff$inboundSchema;
    /** @deprecated use `SpinOff$outboundSchema` instead. */
    SpinOff$.outboundSchema = SpinOff$outboundSchema;
})(SpinOff$ || (SpinOff$ = {}));
export function spinOffToJSON(spinOff) {
    return JSON.stringify(SpinOff$outboundSchema.parse(spinOff));
}
export function spinOffFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SpinOff$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SpinOff' from JSON`);
}
/** @internal */
export const EntryState$inboundSchema = z
    .union([
    z.nativeEnum(EntryState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryState$outboundSchema = z.union([
    z.nativeEnum(EntryState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryState$;
(function (EntryState$) {
    /** @deprecated use `EntryState$inboundSchema` instead. */
    EntryState$.inboundSchema = EntryState$inboundSchema;
    /** @deprecated use `EntryState$outboundSchema` instead. */
    EntryState$.outboundSchema = EntryState$outboundSchema;
})(EntryState$ || (EntryState$ = {}));
/** @internal */
export const EntryStockDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryStockDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockDividendCorporateActionGeneralInformation$;
(function (EntryStockDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryStockDividendCorporateActionGeneralInformation$.inboundSchema = EntryStockDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryStockDividendCorporateActionGeneralInformation$.outboundSchema = EntryStockDividendCorporateActionGeneralInformation$outboundSchema;
})(EntryStockDividendCorporateActionGeneralInformation$ || (EntryStockDividendCorporateActionGeneralInformation$ = {}));
export function entryStockDividendCorporateActionGeneralInformationToJSON(entryStockDividendCorporateActionGeneralInformation) {
    return JSON.stringify(EntryStockDividendCorporateActionGeneralInformation$outboundSchema.parse(entryStockDividendCorporateActionGeneralInformation));
}
export function entryStockDividendCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockDividendCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockDividendCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPayDate$;
(function (EntryPayDate$) {
    /** @deprecated use `EntryPayDate$inboundSchema` instead. */
    EntryPayDate$.inboundSchema = EntryPayDate$inboundSchema;
    /** @deprecated use `EntryPayDate$outboundSchema` instead. */
    EntryPayDate$.outboundSchema = EntryPayDate$outboundSchema;
})(EntryPayDate$ || (EntryPayDate$ = {}));
export function entryPayDateToJSON(entryPayDate) {
    return JSON.stringify(EntryPayDate$outboundSchema.parse(entryPayDate));
}
export function entryPayDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPayDate' from JSON`);
}
/** @internal */
export const EntryStockDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryStockDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockDividendQuantity$;
(function (EntryStockDividendQuantity$) {
    /** @deprecated use `EntryStockDividendQuantity$inboundSchema` instead. */
    EntryStockDividendQuantity$.inboundSchema = EntryStockDividendQuantity$inboundSchema;
    /** @deprecated use `EntryStockDividendQuantity$outboundSchema` instead. */
    EntryStockDividendQuantity$.outboundSchema = EntryStockDividendQuantity$outboundSchema;
})(EntryStockDividendQuantity$ || (EntryStockDividendQuantity$ = {}));
export function entryStockDividendQuantityToJSON(entryStockDividendQuantity) {
    return JSON.stringify(EntryStockDividendQuantity$outboundSchema.parse(entryStockDividendQuantity));
}
export function entryStockDividendQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockDividendQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockDividendQuantity' from JSON`);
}
/** @internal */
export const EntryRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryRate$;
(function (EntryRate$) {
    /** @deprecated use `EntryRate$inboundSchema` instead. */
    EntryRate$.inboundSchema = EntryRate$inboundSchema;
    /** @deprecated use `EntryRate$outboundSchema` instead. */
    EntryRate$.outboundSchema = EntryRate$outboundSchema;
})(EntryRate$ || (EntryRate$ = {}));
export function entryRateToJSON(entryRate) {
    return JSON.stringify(EntryRate$outboundSchema.parse(entryRate));
}
export function entryRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryRate' from JSON`);
}
/** @internal */
export const EntryStockDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryStockDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockDividendRecordDate$;
(function (EntryStockDividendRecordDate$) {
    /** @deprecated use `EntryStockDividendRecordDate$inboundSchema` instead. */
    EntryStockDividendRecordDate$.inboundSchema = EntryStockDividendRecordDate$inboundSchema;
    /** @deprecated use `EntryStockDividendRecordDate$outboundSchema` instead. */
    EntryStockDividendRecordDate$.outboundSchema = EntryStockDividendRecordDate$outboundSchema;
})(EntryStockDividendRecordDate$ || (EntryStockDividendRecordDate$ = {}));
export function entryStockDividendRecordDateToJSON(entryStockDividendRecordDate) {
    return JSON.stringify(EntryStockDividendRecordDate$outboundSchema.parse(entryStockDividendRecordDate));
}
export function entryStockDividendRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockDividendRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockDividendRecordDate' from JSON`);
}
/** @internal */
export const StockDividend$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryStockDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => EntryPayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryStockDividendQuantity$inboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => EntryRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => EntryStockDividendRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const StockDividend$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryStockDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => EntryPayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => EntryStockDividendQuantity$outboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => EntryRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => EntryStockDividendRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StockDividend$;
(function (StockDividend$) {
    /** @deprecated use `StockDividend$inboundSchema` instead. */
    StockDividend$.inboundSchema = StockDividend$inboundSchema;
    /** @deprecated use `StockDividend$outboundSchema` instead. */
    StockDividend$.outboundSchema = StockDividend$outboundSchema;
})(StockDividend$ || (StockDividend$ = {}));
export function stockDividendToJSON(stockDividend) {
    return JSON.stringify(StockDividend$outboundSchema.parse(stockDividend));
}
export function stockDividendFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StockDividend$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StockDividend' from JSON`);
}
/** @internal */
export const EntryStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockSplitCorporateActionGeneralInformation$;
(function (EntryStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryStockSplitCorporateActionGeneralInformation$.inboundSchema = EntryStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryStockSplitCorporateActionGeneralInformation$.outboundSchema = EntryStockSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryStockSplitCorporateActionGeneralInformation$ || (EntryStockSplitCorporateActionGeneralInformation$ = {}));
export function entryStockSplitCorporateActionGeneralInformationToJSON(entryStockSplitCorporateActionGeneralInformation) {
    return JSON.stringify(EntryStockSplitCorporateActionGeneralInformation$outboundSchema.parse(entryStockSplitCorporateActionGeneralInformation));
}
export function entryStockSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockSplitCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFactorDenominator$;
(function (EntryFactorDenominator$) {
    /** @deprecated use `EntryFactorDenominator$inboundSchema` instead. */
    EntryFactorDenominator$.inboundSchema = EntryFactorDenominator$inboundSchema;
    /** @deprecated use `EntryFactorDenominator$outboundSchema` instead. */
    EntryFactorDenominator$.outboundSchema = EntryFactorDenominator$outboundSchema;
})(EntryFactorDenominator$ || (EntryFactorDenominator$ = {}));
export function entryFactorDenominatorToJSON(entryFactorDenominator) {
    return JSON.stringify(EntryFactorDenominator$outboundSchema.parse(entryFactorDenominator));
}
export function entryFactorDenominatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFactorDenominator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFactorDenominator' from JSON`);
}
/** @internal */
export const EntryFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryFactorNumerator$;
(function (EntryFactorNumerator$) {
    /** @deprecated use `EntryFactorNumerator$inboundSchema` instead. */
    EntryFactorNumerator$.inboundSchema = EntryFactorNumerator$inboundSchema;
    /** @deprecated use `EntryFactorNumerator$outboundSchema` instead. */
    EntryFactorNumerator$.outboundSchema = EntryFactorNumerator$outboundSchema;
})(EntryFactorNumerator$ || (EntryFactorNumerator$ = {}));
export function entryFactorNumeratorToJSON(entryFactorNumerator) {
    return JSON.stringify(EntryFactorNumerator$outboundSchema.parse(entryFactorNumerator));
}
export function entryFactorNumeratorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryFactorNumerator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryFactorNumerator' from JSON`);
}
/** @internal */
export const EntryStockSplitPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryStockSplitPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockSplitPayDate$;
(function (EntryStockSplitPayDate$) {
    /** @deprecated use `EntryStockSplitPayDate$inboundSchema` instead. */
    EntryStockSplitPayDate$.inboundSchema = EntryStockSplitPayDate$inboundSchema;
    /** @deprecated use `EntryStockSplitPayDate$outboundSchema` instead. */
    EntryStockSplitPayDate$.outboundSchema = EntryStockSplitPayDate$outboundSchema;
})(EntryStockSplitPayDate$ || (EntryStockSplitPayDate$ = {}));
export function entryStockSplitPayDateToJSON(entryStockSplitPayDate) {
    return JSON.stringify(EntryStockSplitPayDate$outboundSchema.parse(entryStockSplitPayDate));
}
export function entryStockSplitPayDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockSplitPayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockSplitPayDate' from JSON`);
}
/** @internal */
export const EntryStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockSplitQuantity$;
(function (EntryStockSplitQuantity$) {
    /** @deprecated use `EntryStockSplitQuantity$inboundSchema` instead. */
    EntryStockSplitQuantity$.inboundSchema = EntryStockSplitQuantity$inboundSchema;
    /** @deprecated use `EntryStockSplitQuantity$outboundSchema` instead. */
    EntryStockSplitQuantity$.outboundSchema = EntryStockSplitQuantity$outboundSchema;
})(EntryStockSplitQuantity$ || (EntryStockSplitQuantity$ = {}));
export function entryStockSplitQuantityToJSON(entryStockSplitQuantity) {
    return JSON.stringify(EntryStockSplitQuantity$outboundSchema.parse(entryStockSplitQuantity));
}
export function entryStockSplitQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockSplitQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockSplitQuantity' from JSON`);
}
/** @internal */
export const EntryStockSplitRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryStockSplitRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryStockSplitRecordDate$;
(function (EntryStockSplitRecordDate$) {
    /** @deprecated use `EntryStockSplitRecordDate$inboundSchema` instead. */
    EntryStockSplitRecordDate$.inboundSchema = EntryStockSplitRecordDate$inboundSchema;
    /** @deprecated use `EntryStockSplitRecordDate$outboundSchema` instead. */
    EntryStockSplitRecordDate$.outboundSchema = EntryStockSplitRecordDate$outboundSchema;
})(EntryStockSplitRecordDate$ || (EntryStockSplitRecordDate$ = {}));
export function entryStockSplitRecordDateToJSON(entryStockSplitRecordDate) {
    return JSON.stringify(EntryStockSplitRecordDate$outboundSchema.parse(entryStockSplitRecordDate));
}
export function entryStockSplitRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryStockSplitRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryStockSplitRecordDate' from JSON`);
}
/** @internal */
export const StockSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => EntryFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => EntryFactorNumerator$inboundSchema))
        .optional(),
    pay_date: z.nullable(z.lazy(() => EntryStockSplitPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryStockSplitQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => EntryStockSplitRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const StockSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => EntryFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => EntryFactorNumerator$outboundSchema))
        .optional(),
    payDate: z.nullable(z.lazy(() => EntryStockSplitPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryStockSplitQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => EntryStockSplitRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StockSplit$;
(function (StockSplit$) {
    /** @deprecated use `StockSplit$inboundSchema` instead. */
    StockSplit$.inboundSchema = StockSplit$inboundSchema;
    /** @deprecated use `StockSplit$outboundSchema` instead. */
    StockSplit$.outboundSchema = StockSplit$outboundSchema;
})(StockSplit$ || (StockSplit$ = {}));
export function stockSplitToJSON(stockSplit) {
    return JSON.stringify(StockSplit$outboundSchema.parse(stockSplit));
}
export function stockSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StockSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StockSplit' from JSON`);
}
/** @internal */
export const EntrySweepAction$inboundSchema = z
    .union([
    z.nativeEnum(EntrySweepAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntrySweepAction$outboundSchema = z.union([
    z.nativeEnum(EntrySweepAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySweepAction$;
(function (EntrySweepAction$) {
    /** @deprecated use `EntrySweepAction$inboundSchema` instead. */
    EntrySweepAction$.inboundSchema = EntrySweepAction$inboundSchema;
    /** @deprecated use `EntrySweepAction$outboundSchema` instead. */
    EntrySweepAction$.outboundSchema = EntrySweepAction$outboundSchema;
})(EntrySweepAction$ || (EntrySweepAction$ = {}));
/** @internal */
export const EntrySweepType$inboundSchema = z
    .union([
    z.nativeEnum(EntrySweepType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntrySweepType$outboundSchema = z.union([
    z.nativeEnum(EntrySweepType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntrySweepType$;
(function (EntrySweepType$) {
    /** @deprecated use `EntrySweepType$inboundSchema` instead. */
    EntrySweepType$.inboundSchema = EntrySweepType$inboundSchema;
    /** @deprecated use `EntrySweepType$outboundSchema` instead. */
    EntrySweepType$.outboundSchema = EntrySweepType$outboundSchema;
})(EntrySweepType$ || (EntrySweepType$ = {}));
/** @internal */
export const Sweep$inboundSchema = z
    .object({
    action: EntrySweepAction$inboundSchema.optional(),
    eod_redemption: z.boolean().optional(),
    type: EntrySweepType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "eod_redemption": "eodRedemption",
    });
});
/** @internal */
export const Sweep$outboundSchema = z.object({
    action: EntrySweepAction$outboundSchema.optional(),
    eodRedemption: z.boolean().optional(),
    type: EntrySweepType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        eodRedemption: "eod_redemption",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sweep$;
(function (Sweep$) {
    /** @deprecated use `Sweep$inboundSchema` instead. */
    Sweep$.inboundSchema = Sweep$inboundSchema;
    /** @deprecated use `Sweep$outboundSchema` instead. */
    Sweep$.outboundSchema = Sweep$outboundSchema;
})(Sweep$ || (Sweep$ = {}));
export function sweepToJSON(sweep) {
    return JSON.stringify(Sweep$outboundSchema.parse(sweep));
}
export function sweepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Sweep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Sweep' from JSON`);
}
/** @internal */
export const EntryTenderOfferCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryTenderOfferCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTenderOfferCashRate$;
(function (EntryTenderOfferCashRate$) {
    /** @deprecated use `EntryTenderOfferCashRate$inboundSchema` instead. */
    EntryTenderOfferCashRate$.inboundSchema = EntryTenderOfferCashRate$inboundSchema;
    /** @deprecated use `EntryTenderOfferCashRate$outboundSchema` instead. */
    EntryTenderOfferCashRate$.outboundSchema = EntryTenderOfferCashRate$outboundSchema;
})(EntryTenderOfferCashRate$ || (EntryTenderOfferCashRate$ = {}));
export function entryTenderOfferCashRateToJSON(entryTenderOfferCashRate) {
    return JSON.stringify(EntryTenderOfferCashRate$outboundSchema.parse(entryTenderOfferCashRate));
}
export function entryTenderOfferCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTenderOfferCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTenderOfferCashRate' from JSON`);
}
/** @internal */
export const EntryTenderOfferCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryTenderOfferCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTenderOfferCorporateActionGeneralInformation$;
(function (EntryTenderOfferCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryTenderOfferCorporateActionGeneralInformation$.inboundSchema = EntryTenderOfferCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryTenderOfferCorporateActionGeneralInformation$.outboundSchema = EntryTenderOfferCorporateActionGeneralInformation$outboundSchema;
})(EntryTenderOfferCorporateActionGeneralInformation$ || (EntryTenderOfferCorporateActionGeneralInformation$ = {}));
export function entryTenderOfferCorporateActionGeneralInformationToJSON(entryTenderOfferCorporateActionGeneralInformation) {
    return JSON.stringify(EntryTenderOfferCorporateActionGeneralInformation$outboundSchema.parse(entryTenderOfferCorporateActionGeneralInformation));
}
export function entryTenderOfferCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTenderOfferCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTenderOfferCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const TenderOfferType$inboundSchema = z
    .union([
    z.nativeEnum(TenderOfferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TenderOfferType$outboundSchema = z.union([
    z.nativeEnum(TenderOfferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TenderOfferType$;
(function (TenderOfferType$) {
    /** @deprecated use `TenderOfferType$inboundSchema` instead. */
    TenderOfferType$.inboundSchema = TenderOfferType$inboundSchema;
    /** @deprecated use `TenderOfferType$outboundSchema` instead. */
    TenderOfferType$.outboundSchema = TenderOfferType$outboundSchema;
})(TenderOfferType$ || (TenderOfferType$ = {}));
/** @internal */
export const TenderOffer$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => EntryTenderOfferCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => EntryTenderOfferCorporateActionGeneralInformation$inboundSchema)).optional(),
    tender_offer_type: TenderOfferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "tender_offer_type": "tenderOfferType",
    });
});
/** @internal */
export const TenderOffer$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => EntryTenderOfferCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryTenderOfferCorporateActionGeneralInformation$outboundSchema)).optional(),
    tenderOfferType: TenderOfferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        tenderOfferType: "tender_offer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TenderOffer$;
(function (TenderOffer$) {
    /** @deprecated use `TenderOffer$inboundSchema` instead. */
    TenderOffer$.inboundSchema = TenderOffer$inboundSchema;
    /** @deprecated use `TenderOffer$outboundSchema` instead. */
    TenderOffer$.outboundSchema = TenderOffer$outboundSchema;
})(TenderOffer$ || (TenderOffer$ = {}));
export function tenderOfferToJSON(tenderOffer) {
    return JSON.stringify(TenderOffer$outboundSchema.parse(tenderOffer));
}
export function tenderOfferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TenderOffer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TenderOffer' from JSON`);
}
/** @internal */
export const EntryTradeBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(EntryTradeBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryTradeBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(EntryTradeBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTradeBrokerCapacity$;
(function (EntryTradeBrokerCapacity$) {
    /** @deprecated use `EntryTradeBrokerCapacity$inboundSchema` instead. */
    EntryTradeBrokerCapacity$.inboundSchema = EntryTradeBrokerCapacity$inboundSchema;
    /** @deprecated use `EntryTradeBrokerCapacity$outboundSchema` instead. */
    EntryTradeBrokerCapacity$.outboundSchema = EntryTradeBrokerCapacity$outboundSchema;
})(EntryTradeBrokerCapacity$ || (EntryTradeBrokerCapacity$ = {}));
/** @internal */
export const EntryTradePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryTradePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTradePrevailingMarketPrice$;
(function (EntryTradePrevailingMarketPrice$) {
    /** @deprecated use `EntryTradePrevailingMarketPrice$inboundSchema` instead. */
    EntryTradePrevailingMarketPrice$.inboundSchema = EntryTradePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `EntryTradePrevailingMarketPrice$outboundSchema` instead. */
    EntryTradePrevailingMarketPrice$.outboundSchema = EntryTradePrevailingMarketPrice$outboundSchema;
})(EntryTradePrevailingMarketPrice$ || (EntryTradePrevailingMarketPrice$ = {}));
export function entryTradePrevailingMarketPriceToJSON(entryTradePrevailingMarketPrice) {
    return JSON.stringify(EntryTradePrevailingMarketPrice$outboundSchema.parse(entryTradePrevailingMarketPrice));
}
export function entryTradePrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTradePrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTradePrevailingMarketPrice' from JSON`);
}
/** @internal */
export const EntryTradePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryTradePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTradePriceAdjustmentAmount$;
(function (EntryTradePriceAdjustmentAmount$) {
    /** @deprecated use `EntryTradePriceAdjustmentAmount$inboundSchema` instead. */
    EntryTradePriceAdjustmentAmount$.inboundSchema = EntryTradePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `EntryTradePriceAdjustmentAmount$outboundSchema` instead. */
    EntryTradePriceAdjustmentAmount$.outboundSchema = EntryTradePriceAdjustmentAmount$outboundSchema;
})(EntryTradePriceAdjustmentAmount$ || (EntryTradePriceAdjustmentAmount$ = {}));
export function entryTradePriceAdjustmentAmountToJSON(entryTradePriceAdjustmentAmount) {
    return JSON.stringify(EntryTradePriceAdjustmentAmount$outboundSchema.parse(entryTradePriceAdjustmentAmount));
}
export function entryTradePriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTradePriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTradePriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const EntryPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPriceAdjustmentPercent$;
(function (EntryPriceAdjustmentPercent$) {
    /** @deprecated use `EntryPriceAdjustmentPercent$inboundSchema` instead. */
    EntryPriceAdjustmentPercent$.inboundSchema = EntryPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentPercent$outboundSchema` instead. */
    EntryPriceAdjustmentPercent$.outboundSchema = EntryPriceAdjustmentPercent$outboundSchema;
})(EntryPriceAdjustmentPercent$ || (EntryPriceAdjustmentPercent$ = {}));
export function entryPriceAdjustmentPercentToJSON(entryPriceAdjustmentPercent) {
    return JSON.stringify(EntryPriceAdjustmentPercent$outboundSchema.parse(entryPriceAdjustmentPercent));
}
export function entryPriceAdjustmentPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPriceAdjustmentPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPriceAdjustmentPercent' from JSON`);
}
/** @internal */
export const EntryTradePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(EntryTradePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryTradePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(EntryTradePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTradePriceAdjustmentType$;
(function (EntryTradePriceAdjustmentType$) {
    /** @deprecated use `EntryTradePriceAdjustmentType$inboundSchema` instead. */
    EntryTradePriceAdjustmentType$.inboundSchema = EntryTradePriceAdjustmentType$inboundSchema;
    /** @deprecated use `EntryTradePriceAdjustmentType$outboundSchema` instead. */
    EntryTradePriceAdjustmentType$.outboundSchema = EntryTradePriceAdjustmentType$outboundSchema;
})(EntryTradePriceAdjustmentType$ || (EntryTradePriceAdjustmentType$ = {}));
/** @internal */
export const EntryPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => EntryTradePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => EntryPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: EntryTradePriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const EntryPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => EntryTradePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => EntryPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: EntryTradePriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryPriceAdjustmentRecord$;
(function (EntryPriceAdjustmentRecord$) {
    /** @deprecated use `EntryPriceAdjustmentRecord$inboundSchema` instead. */
    EntryPriceAdjustmentRecord$.inboundSchema = EntryPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentRecord$outboundSchema` instead. */
    EntryPriceAdjustmentRecord$.outboundSchema = EntryPriceAdjustmentRecord$outboundSchema;
})(EntryPriceAdjustmentRecord$ || (EntryPriceAdjustmentRecord$ = {}));
export function entryPriceAdjustmentRecordToJSON(entryPriceAdjustmentRecord) {
    return JSON.stringify(EntryPriceAdjustmentRecord$outboundSchema.parse(entryPriceAdjustmentRecord));
}
export function entryPriceAdjustmentRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryPriceAdjustmentRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryPriceAdjustmentRecord' from JSON`);
}
/** @internal */
export const EntryTrade$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_booking_execution_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: EntryTradeBrokerCapacity$inboundSchema.optional(),
    client_memo: z.string().optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(Lot$inboundSchema).optional(),
    market: z.string().optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => EntryTradePrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => EntryPriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_booking_execution_id": "bookingApiBookingExecutionId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memo": "clientMemo",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
export const EntryTrade$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiBookingExecutionId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: EntryTradeBrokerCapacity$outboundSchema.optional(),
    clientMemo: z.string().optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(Lot$outboundSchema).optional(),
    market: z.string().optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => EntryTradePrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => EntryPriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiBookingExecutionId: "booking_api_booking_execution_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemo: "client_memo",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTrade$;
(function (EntryTrade$) {
    /** @deprecated use `EntryTrade$inboundSchema` instead. */
    EntryTrade$.inboundSchema = EntryTrade$inboundSchema;
    /** @deprecated use `EntryTrade$outboundSchema` instead. */
    EntryTrade$.outboundSchema = EntryTrade$outboundSchema;
})(EntryTrade$ || (EntryTrade$ = {}));
export function entryTradeToJSON(entryTrade) {
    return JSON.stringify(EntryTrade$outboundSchema.parse(entryTrade));
}
export function entryTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTrade' from JSON`);
}
/** @internal */
export const EntryTransferType$inboundSchema = z
    .union([
    z.nativeEnum(EntryTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryTransferType$outboundSchema = z.union([
    z.nativeEnum(EntryTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTransferType$;
(function (EntryTransferType$) {
    /** @deprecated use `EntryTransferType$inboundSchema` instead. */
    EntryTransferType$.inboundSchema = EntryTransferType$inboundSchema;
    /** @deprecated use `EntryTransferType$outboundSchema` instead. */
    EntryTransferType$.outboundSchema = EntryTransferType$outboundSchema;
})(EntryTransferType$ || (EntryTransferType$ = {}));
/** @internal */
export const EntryTransfer$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    client_brokerage: z.string().optional(),
    transfer_type: EntryTransferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "client_brokerage": "clientBrokerage",
        "transfer_type": "transferType",
    });
});
/** @internal */
export const EntryTransfer$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    clientBrokerage: z.string().optional(),
    transferType: EntryTransferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        clientBrokerage: "client_brokerage",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryTransfer$;
(function (EntryTransfer$) {
    /** @deprecated use `EntryTransfer$inboundSchema` instead. */
    EntryTransfer$.inboundSchema = EntryTransfer$inboundSchema;
    /** @deprecated use `EntryTransfer$outboundSchema` instead. */
    EntryTransfer$.outboundSchema = EntryTransfer$outboundSchema;
})(EntryTransfer$ || (EntryTransfer$ = {}));
export function entryTransferToJSON(entryTransfer) {
    return JSON.stringify(EntryTransfer$outboundSchema.parse(entryTransfer));
}
export function entryTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryTransfer' from JSON`);
}
/** @internal */
export const EntryType$inboundSchema = z
    .union([
    z.nativeEnum(EntryType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryType$outboundSchema = z.union([
    z.nativeEnum(EntryType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryType$;
(function (EntryType$) {
    /** @deprecated use `EntryType$inboundSchema` instead. */
    EntryType$.inboundSchema = EntryType$inboundSchema;
    /** @deprecated use `EntryType$outboundSchema` instead. */
    EntryType$.outboundSchema = EntryType$outboundSchema;
})(EntryType$ || (EntryType$ = {}));
/** @internal */
export const EntryUnitSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryUnitSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryUnitSplitCorporateActionGeneralInformation$;
(function (EntryUnitSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryUnitSplitCorporateActionGeneralInformation$.inboundSchema = EntryUnitSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryUnitSplitCorporateActionGeneralInformation$.outboundSchema = EntryUnitSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryUnitSplitCorporateActionGeneralInformation$ || (EntryUnitSplitCorporateActionGeneralInformation$ = {}));
export function entryUnitSplitCorporateActionGeneralInformationToJSON(entryUnitSplitCorporateActionGeneralInformation) {
    return JSON.stringify(EntryUnitSplitCorporateActionGeneralInformation$outboundSchema.parse(entryUnitSplitCorporateActionGeneralInformation));
}
export function entryUnitSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryUnitSplitCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryUnitSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryUnitSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryUnitSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryUnitSplitStockRate$;
(function (EntryUnitSplitStockRate$) {
    /** @deprecated use `EntryUnitSplitStockRate$inboundSchema` instead. */
    EntryUnitSplitStockRate$.inboundSchema = EntryUnitSplitStockRate$inboundSchema;
    /** @deprecated use `EntryUnitSplitStockRate$outboundSchema` instead. */
    EntryUnitSplitStockRate$.outboundSchema = EntryUnitSplitStockRate$outboundSchema;
})(EntryUnitSplitStockRate$ || (EntryUnitSplitStockRate$ = {}));
export function entryUnitSplitStockRateToJSON(entryUnitSplitStockRate) {
    return JSON.stringify(EntryUnitSplitStockRate$outboundSchema.parse(entryUnitSplitStockRate));
}
export function entryUnitSplitStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryUnitSplitStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryUnitSplitStockRate' from JSON`);
}
/** @internal */
export const UnitSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryUnitSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => EntryUnitSplitStockRate$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const UnitSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryUnitSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => EntryUnitSplitStockRate$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnitSplit$;
(function (UnitSplit$) {
    /** @deprecated use `UnitSplit$inboundSchema` instead. */
    UnitSplit$.inboundSchema = UnitSplit$inboundSchema;
    /** @deprecated use `UnitSplit$outboundSchema` instead. */
    UnitSplit$.outboundSchema = UnitSplit$outboundSchema;
})(UnitSplit$ || (UnitSplit$ = {}));
export function unitSplitToJSON(unitSplit) {
    return JSON.stringify(UnitSplit$outboundSchema.parse(unitSplit));
}
export function unitSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UnitSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UnitSplit' from JSON`);
}
/** @internal */
export const EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWarrantExerciseCorporateActionGeneralInformation$;
(function (EntryWarrantExerciseCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryWarrantExerciseCorporateActionGeneralInformation$.inboundSchema = EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryWarrantExerciseCorporateActionGeneralInformation$.outboundSchema = EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema;
})(EntryWarrantExerciseCorporateActionGeneralInformation$ || (EntryWarrantExerciseCorporateActionGeneralInformation$ = {}));
export function entryWarrantExerciseCorporateActionGeneralInformationToJSON(entryWarrantExerciseCorporateActionGeneralInformation) {
    return JSON.stringify(EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema.parse(entryWarrantExerciseCorporateActionGeneralInformation));
}
export function entryWarrantExerciseCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWarrantExerciseCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const WarrantExercise$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const WarrantExercise$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WarrantExercise$;
(function (WarrantExercise$) {
    /** @deprecated use `WarrantExercise$inboundSchema` instead. */
    WarrantExercise$.inboundSchema = WarrantExercise$inboundSchema;
    /** @deprecated use `WarrantExercise$outboundSchema` instead. */
    WarrantExercise$.outboundSchema = WarrantExercise$outboundSchema;
})(WarrantExercise$ || (WarrantExercise$ = {}));
export function warrantExerciseToJSON(warrantExercise) {
    return JSON.stringify(WarrantExercise$outboundSchema.parse(warrantExercise));
}
export function warrantExerciseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WarrantExercise$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WarrantExercise' from JSON`);
}
/** @internal */
export const DistributionType$inboundSchema = z
    .union([
    z.nativeEnum(DistributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const DistributionType$outboundSchema = z.union([
    z.nativeEnum(DistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionType$;
(function (DistributionType$) {
    /** @deprecated use `DistributionType$inboundSchema` instead. */
    DistributionType$.inboundSchema = DistributionType$inboundSchema;
    /** @deprecated use `DistributionType$outboundSchema` instead. */
    DistributionType$.outboundSchema = DistributionType$outboundSchema;
})(DistributionType$ || (DistributionType$ = {}));
/** @internal */
export const RetirementType$inboundSchema = z
    .union([
    z.nativeEnum(RetirementType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RetirementType$outboundSchema = z.union([
    z.nativeEnum(RetirementType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetirementType$;
(function (RetirementType$) {
    /** @deprecated use `RetirementType$inboundSchema` instead. */
    RetirementType$.inboundSchema = RetirementType$inboundSchema;
    /** @deprecated use `RetirementType$outboundSchema` instead. */
    RetirementType$.outboundSchema = RetirementType$outboundSchema;
})(RetirementType$ || (RetirementType$ = {}));
/** @internal */
export const EntryWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(EntryWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWithdrawalType$;
(function (EntryWithdrawalType$) {
    /** @deprecated use `EntryWithdrawalType$inboundSchema` instead. */
    EntryWithdrawalType$.inboundSchema = EntryWithdrawalType$inboundSchema;
    /** @deprecated use `EntryWithdrawalType$outboundSchema` instead. */
    EntryWithdrawalType$.outboundSchema = EntryWithdrawalType$outboundSchema;
})(EntryWithdrawalType$ || (EntryWithdrawalType$ = {}));
/** @internal */
export const Withdrawal$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    closing_account: z.boolean().optional(),
    destination_account_number: z.string().optional(),
    destination_institution: z.string().optional(),
    distribution_type: DistributionType$inboundSchema.optional(),
    distribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_institution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirement_type: RetirementType$inboundSchema.optional(),
    total_distribution: z.boolean().optional(),
    type: EntryWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "closing_account": "closingAccount",
        "destination_account_number": "destinationAccountNumber",
        "destination_institution": "destinationInstitution",
        "distribution_type": "distributionType",
        "distribution_year": "distributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_institution": "originatingInstitution",
        "retirement_type": "retirementType",
        "total_distribution": "totalDistribution",
    });
});
/** @internal */
export const Withdrawal$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    closingAccount: z.boolean().optional(),
    destinationAccountNumber: z.string().optional(),
    destinationInstitution: z.string().optional(),
    distributionType: DistributionType$outboundSchema.optional(),
    distributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingInstitution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirementType: RetirementType$outboundSchema.optional(),
    totalDistribution: z.boolean().optional(),
    type: EntryWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        closingAccount: "closing_account",
        destinationAccountNumber: "destination_account_number",
        destinationInstitution: "destination_institution",
        distributionType: "distribution_type",
        distributionYear: "distribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingInstitution: "originating_institution",
        retirementType: "retirement_type",
        totalDistribution: "total_distribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Withdrawal$;
(function (Withdrawal$) {
    /** @deprecated use `Withdrawal$inboundSchema` instead. */
    Withdrawal$.inboundSchema = Withdrawal$inboundSchema;
    /** @deprecated use `Withdrawal$outboundSchema` instead. */
    Withdrawal$.outboundSchema = Withdrawal$outboundSchema;
})(Withdrawal$ || (Withdrawal$ = {}));
export function withdrawalToJSON(withdrawal) {
    return JSON.stringify(Withdrawal$outboundSchema.parse(withdrawal));
}
export function withdrawalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Withdrawal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Withdrawal' from JSON`);
}
/** @internal */
export const Review$inboundSchema = z
    .union([
    z.nativeEnum(Review),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Review$outboundSchema = z.union([
    z.nativeEnum(Review),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Review$;
(function (Review$) {
    /** @deprecated use `Review$inboundSchema` instead. */
    Review$.inboundSchema = Review$inboundSchema;
    /** @deprecated use `Review$outboundSchema` instead. */
    Review$.outboundSchema = Review$outboundSchema;
})(Review$ || (Review$ = {}));
/** @internal */
export const WithdrawalPendingReview$inboundSchema = z.object({
    review: Review$inboundSchema.optional(),
});
/** @internal */
export const WithdrawalPendingReview$outboundSchema = z.object({
    review: Review$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithdrawalPendingReview$;
(function (WithdrawalPendingReview$) {
    /** @deprecated use `WithdrawalPendingReview$inboundSchema` instead. */
    WithdrawalPendingReview$.inboundSchema = WithdrawalPendingReview$inboundSchema;
    /** @deprecated use `WithdrawalPendingReview$outboundSchema` instead. */
    WithdrawalPendingReview$.outboundSchema = WithdrawalPendingReview$outboundSchema;
})(WithdrawalPendingReview$ || (WithdrawalPendingReview$ = {}));
export function withdrawalPendingReviewToJSON(withdrawalPendingReview) {
    return JSON.stringify(WithdrawalPendingReview$outboundSchema.parse(withdrawalPendingReview));
}
export function withdrawalPendingReviewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WithdrawalPendingReview$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WithdrawalPendingReview' from JSON`);
}
/** @internal */
export const EntryWithholdingRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EntryWithholdingRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWithholdingRate$;
(function (EntryWithholdingRate$) {
    /** @deprecated use `EntryWithholdingRate$inboundSchema` instead. */
    EntryWithholdingRate$.inboundSchema = EntryWithholdingRate$inboundSchema;
    /** @deprecated use `EntryWithholdingRate$outboundSchema` instead. */
    EntryWithholdingRate$.outboundSchema = EntryWithholdingRate$outboundSchema;
})(EntryWithholdingRate$ || (EntryWithholdingRate$ = {}));
export function entryWithholdingRateToJSON(entryWithholdingRate) {
    return JSON.stringify(EntryWithholdingRate$outboundSchema.parse(entryWithholdingRate));
}
export function entryWithholdingRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWithholdingRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWithholdingRate' from JSON`);
}
/** @internal */
export const EntryWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryWithholdingState$outboundSchema = z.union([
    z.nativeEnum(EntryWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWithholdingState$;
(function (EntryWithholdingState$) {
    /** @deprecated use `EntryWithholdingState$inboundSchema` instead. */
    EntryWithholdingState$.inboundSchema = EntryWithholdingState$inboundSchema;
    /** @deprecated use `EntryWithholdingState$outboundSchema` instead. */
    EntryWithholdingState$.outboundSchema = EntryWithholdingState$outboundSchema;
})(EntryWithholdingState$ || (EntryWithholdingState$ = {}));
/** @internal */
export const EntryWithholdingType$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithholdingType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntryWithholdingType$outboundSchema = z.union([
    z.nativeEnum(EntryWithholdingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWithholdingType$;
(function (EntryWithholdingType$) {
    /** @deprecated use `EntryWithholdingType$inboundSchema` instead. */
    EntryWithholdingType$.inboundSchema = EntryWithholdingType$inboundSchema;
    /** @deprecated use `EntryWithholdingType$outboundSchema` instead. */
    EntryWithholdingType$.outboundSchema = EntryWithholdingType$outboundSchema;
})(EntryWithholdingType$ || (EntryWithholdingType$ = {}));
/** @internal */
export const EntryWithholding$inboundSchema = z.object({
    rate: z.nullable(z.lazy(() => EntryWithholdingRate$inboundSchema)).optional(),
    region_code: z.string().optional(),
    state: EntryWithholdingState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: EntryWithholdingType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "region_code": "regionCode",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const EntryWithholding$outboundSchema = z.object({
    rate: z.nullable(z.lazy(() => EntryWithholdingRate$outboundSchema))
        .optional(),
    regionCode: z.string().optional(),
    state: EntryWithholdingState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: EntryWithholdingType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        regionCode: "region_code",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWithholding$;
(function (EntryWithholding$) {
    /** @deprecated use `EntryWithholding$inboundSchema` instead. */
    EntryWithholding$.inboundSchema = EntryWithholding$inboundSchema;
    /** @deprecated use `EntryWithholding$outboundSchema` instead. */
    EntryWithholding$.outboundSchema = EntryWithholding$outboundSchema;
})(EntryWithholding$ || (EntryWithholding$ = {}));
export function entryWithholdingToJSON(entryWithholding) {
    return JSON.stringify(EntryWithholding$outboundSchema.parse(entryWithholding));
}
export function entryWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWithholding' from JSON`);
}
/** @internal */
export const EntryWorthlessCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const EntryWorthlessCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWorthlessCorporateActionGeneralInformation$;
(function (EntryWorthlessCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryWorthlessCorporateActionGeneralInformation$.inboundSchema = EntryWorthlessCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryWorthlessCorporateActionGeneralInformation$.outboundSchema = EntryWorthlessCorporateActionGeneralInformation$outboundSchema;
})(EntryWorthlessCorporateActionGeneralInformation$ || (EntryWorthlessCorporateActionGeneralInformation$ = {}));
export function entryWorthlessCorporateActionGeneralInformationToJSON(entryWorthlessCorporateActionGeneralInformation) {
    return JSON.stringify(EntryWorthlessCorporateActionGeneralInformation$outboundSchema.parse(entryWorthlessCorporateActionGeneralInformation));
}
export function entryWorthlessCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWorthlessCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWorthlessCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const EntryWorthlessEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryWorthlessEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWorthlessEffectiveDate$;
(function (EntryWorthlessEffectiveDate$) {
    /** @deprecated use `EntryWorthlessEffectiveDate$inboundSchema` instead. */
    EntryWorthlessEffectiveDate$.inboundSchema = EntryWorthlessEffectiveDate$inboundSchema;
    /** @deprecated use `EntryWorthlessEffectiveDate$outboundSchema` instead. */
    EntryWorthlessEffectiveDate$.outboundSchema = EntryWorthlessEffectiveDate$outboundSchema;
})(EntryWorthlessEffectiveDate$ || (EntryWorthlessEffectiveDate$ = {}));
export function entryWorthlessEffectiveDateToJSON(entryWorthlessEffectiveDate) {
    return JSON.stringify(EntryWorthlessEffectiveDate$outboundSchema.parse(entryWorthlessEffectiveDate));
}
export function entryWorthlessEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWorthlessEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWorthlessEffectiveDate' from JSON`);
}
/** @internal */
export const EntryWorthlessPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EntryWorthlessPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntryWorthlessPaymentDate$;
(function (EntryWorthlessPaymentDate$) {
    /** @deprecated use `EntryWorthlessPaymentDate$inboundSchema` instead. */
    EntryWorthlessPaymentDate$.inboundSchema = EntryWorthlessPaymentDate$inboundSchema;
    /** @deprecated use `EntryWorthlessPaymentDate$outboundSchema` instead. */
    EntryWorthlessPaymentDate$.outboundSchema = EntryWorthlessPaymentDate$outboundSchema;
})(EntryWorthlessPaymentDate$ || (EntryWorthlessPaymentDate$ = {}));
export function entryWorthlessPaymentDateToJSON(entryWorthlessPaymentDate) {
    return JSON.stringify(EntryWorthlessPaymentDate$outboundSchema.parse(entryWorthlessPaymentDate));
}
export function entryWorthlessPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntryWorthlessPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntryWorthlessPaymentDate' from JSON`);
}
/** @internal */
export const Worthless$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => EntryWorthlessCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => EntryWorthlessEffectiveDate$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => EntryWorthlessPaymentDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const Worthless$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => EntryWorthlessCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => EntryWorthlessEffectiveDate$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => EntryWorthlessPaymentDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Worthless$;
(function (Worthless$) {
    /** @deprecated use `Worthless$inboundSchema` instead. */
    Worthless$.inboundSchema = Worthless$inboundSchema;
    /** @deprecated use `Worthless$outboundSchema` instead. */
    Worthless$.outboundSchema = Worthless$outboundSchema;
})(Worthless$ || (Worthless$ = {}));
export function worthlessToJSON(worthless) {
    return JSON.stringify(Worthless$outboundSchema.parse(worthless));
}
export function worthlessFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Worthless$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Worthless' from JSON`);
}
/** @internal */
export const Entry$inboundSchema = z
    .object({
    acats_pending_out: z.nullable(z.lazy(() => AcatsPendingOut$inboundSchema))
        .optional(),
    account_id: z.string().optional(),
    account_memo: AccountMemo$inboundSchema.optional(),
    account_transfer: z.nullable(z.lazy(() => AccountTransfer$inboundSchema))
        .optional(),
    accrued_interest: z.nullable(z.lazy(() => EntryAccruedInterest$inboundSchema)).optional(),
    acquisition: z.nullable(z.lazy(() => Acquisition$inboundSchema)).optional(),
    activity_date: z.nullable(z.lazy(() => ActivityDate$inboundSchema))
        .optional(),
    activity_id: z.string().optional(),
    activity_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    allocation: z.nullable(z.lazy(() => Allocation$inboundSchema)).optional(),
    asset_id: z.string().optional(),
    bond_default: z.nullable(z.lazy(() => BondDefault$inboundSchema))
        .optional(),
    capital_gains: z.nullable(z.lazy(() => CapitalGains$inboundSchema))
        .optional(),
    cash_dividend: z.nullable(z.lazy(() => CashDividend$inboundSchema))
        .optional(),
    cash_in_lieu: z.nullable(z.lazy(() => CashInLieu$inboundSchema)).optional(),
    commission: z.nullable(z.lazy(() => EntryCommission$inboundSchema))
        .optional(),
    conversion: z.nullable(z.lazy(() => Conversion$inboundSchema)).optional(),
    corporate_action_memo_adjustment: z.nullable(z.lazy(() => CorporateActionMemoAdjustment$inboundSchema)).optional(),
    credit: z.nullable(z.lazy(() => Credit$inboundSchema)).optional(),
    currency_asset_id: z.string().optional(),
    delivery: z.nullable(z.lazy(() => Delivery$inboundSchema)).optional(),
    deposit: z.nullable(z.lazy(() => Deposit$inboundSchema)).optional(),
    description: z.string().optional(),
    drip: z.nullable(z.lazy(() => Drip$inboundSchema)).optional(),
    entry_id: z.string().optional(),
    exchange: z.nullable(z.lazy(() => Exchange$inboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => EntryFee$inboundSchema)).optional(),
    flip: z.nullable(z.lazy(() => Flip$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => Fpsl$inboundSchema)).optional(),
    gross_amount: z.nullable(z.lazy(() => EntryGrossAmount$inboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => Interest$inboundSchema)).optional(),
    interest_payment: z.nullable(z.lazy(() => InterestPayment$inboundSchema))
        .optional(),
    liquidation: z.nullable(z.lazy(() => Liquidation$inboundSchema)).optional(),
    maturity: z.nullable(z.lazy(() => Maturity$inboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => Merger$inboundSchema)).optional(),
    name: z.string().optional(),
    name_change: z.nullable(z.lazy(() => NameChange$inboundSchema)).optional(),
    original_id: z.string().optional(),
    original_process_date: z.nullable(z.lazy(() => OriginalProcessDate$inboundSchema)).optional(),
    payment_in_kind: z.nullable(z.lazy(() => PaymentInKind$inboundSchema))
        .optional(),
    price: z.nullable(z.lazy(() => EntryPrice$inboundSchema)).optional(),
    process_date: z.nullable(z.lazy(() => EntryProcessDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryQuantity$inboundSchema)).optional(),
    receive: z.nullable(z.lazy(() => Receive$inboundSchema)).optional(),
    redemption_full: z.nullable(z.lazy(() => RedemptionFull$inboundSchema))
        .optional(),
    redemption_partial: z.nullable(z.lazy(() => RedemptionPartial$inboundSchema)).optional(),
    reverse_stock_split: z.nullable(z.lazy(() => ReverseStockSplit$inboundSchema)).optional(),
    reversed_entry_id: z.string().optional(),
    rights_distribution: z.nullable(z.lazy(() => RightsDistribution$inboundSchema)).optional(),
    rights_subscription: z.nullable(z.lazy(() => RightsSubscription$inboundSchema)).optional(),
    rounding_adjustment: z.nullable(z.lazy(() => RoundingAdjustment$inboundSchema)).optional(),
    sale_of_rights: z.nullable(z.lazy(() => SaleOfRights$inboundSchema))
        .optional(),
    settle_date: z.nullable(z.lazy(() => SettleDate$inboundSchema)).optional(),
    side: EntrySide$inboundSchema.optional(),
    side_modifier: EntrySideModifier$inboundSchema.optional(),
    spin_off: z.nullable(z.lazy(() => SpinOff$inboundSchema)).optional(),
    state: EntryState$inboundSchema.optional(),
    stock_dividend: z.nullable(z.lazy(() => StockDividend$inboundSchema))
        .optional(),
    stock_split: z.nullable(z.lazy(() => StockSplit$inboundSchema)).optional(),
    subtype_category: z.string().optional(),
    sweep: z.nullable(z.lazy(() => Sweep$inboundSchema)).optional(),
    tender_offer: z.nullable(z.lazy(() => TenderOffer$inboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => EntryTrade$inboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => EntryTransfer$inboundSchema)).optional(),
    type: EntryType$inboundSchema.optional(),
    unit_split: z.nullable(z.lazy(() => UnitSplit$inboundSchema)).optional(),
    warrant_exercise: z.nullable(z.lazy(() => WarrantExercise$inboundSchema))
        .optional(),
    withdrawal: z.nullable(z.lazy(() => Withdrawal$inboundSchema)).optional(),
    withdrawal_pending_review: z.nullable(z.lazy(() => WithdrawalPendingReview$inboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => EntryWithholding$inboundSchema))
        .optional(),
    worthless: z.nullable(z.lazy(() => Worthless$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_pending_out": "acatsPendingOut",
        "account_id": "accountId",
        "account_memo": "accountMemo",
        "account_transfer": "accountTransfer",
        "accrued_interest": "accruedInterest",
        "activity_date": "activityDate",
        "activity_id": "activityId",
        "activity_time": "activityTime",
        "asset_id": "assetId",
        "bond_default": "bondDefault",
        "capital_gains": "capitalGains",
        "cash_dividend": "cashDividend",
        "cash_in_lieu": "cashInLieu",
        "corporate_action_memo_adjustment": "corporateActionMemoAdjustment",
        "currency_asset_id": "currencyAssetId",
        "entry_id": "entryId",
        "gross_amount": "grossAmount",
        "interest_payment": "interestPayment",
        "name_change": "nameChange",
        "original_id": "originalId",
        "original_process_date": "originalProcessDate",
        "payment_in_kind": "paymentInKind",
        "process_date": "processDate",
        "redemption_full": "redemptionFull",
        "redemption_partial": "redemptionPartial",
        "reverse_stock_split": "reverseStockSplit",
        "reversed_entry_id": "reversedEntryId",
        "rights_distribution": "rightsDistribution",
        "rights_subscription": "rightsSubscription",
        "rounding_adjustment": "roundingAdjustment",
        "sale_of_rights": "saleOfRights",
        "settle_date": "settleDate",
        "side_modifier": "sideModifier",
        "spin_off": "spinOff",
        "stock_dividend": "stockDividend",
        "stock_split": "stockSplit",
        "subtype_category": "subtypeCategory",
        "tender_offer": "tenderOffer",
        "unit_split": "unitSplit",
        "warrant_exercise": "warrantExercise",
        "withdrawal_pending_review": "withdrawalPendingReview",
    });
});
/** @internal */
export const Entry$outboundSchema = z.object({
    acatsPendingOut: z.nullable(z.lazy(() => AcatsPendingOut$outboundSchema))
        .optional(),
    accountId: z.string().optional(),
    accountMemo: AccountMemo$outboundSchema.optional(),
    accountTransfer: z.nullable(z.lazy(() => AccountTransfer$outboundSchema))
        .optional(),
    accruedInterest: z.nullable(z.lazy(() => EntryAccruedInterest$outboundSchema))
        .optional(),
    acquisition: z.nullable(z.lazy(() => Acquisition$outboundSchema)).optional(),
    activityDate: z.nullable(z.lazy(() => ActivityDate$outboundSchema))
        .optional(),
    activityId: z.string().optional(),
    activityTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    allocation: z.nullable(z.lazy(() => Allocation$outboundSchema)).optional(),
    assetId: z.string().optional(),
    bondDefault: z.nullable(z.lazy(() => BondDefault$outboundSchema)).optional(),
    capitalGains: z.nullable(z.lazy(() => CapitalGains$outboundSchema))
        .optional(),
    cashDividend: z.nullable(z.lazy(() => CashDividend$outboundSchema))
        .optional(),
    cashInLieu: z.nullable(z.lazy(() => CashInLieu$outboundSchema)).optional(),
    commission: z.nullable(z.lazy(() => EntryCommission$outboundSchema))
        .optional(),
    conversion: z.nullable(z.lazy(() => Conversion$outboundSchema)).optional(),
    corporateActionMemoAdjustment: z.nullable(z.lazy(() => CorporateActionMemoAdjustment$outboundSchema)).optional(),
    credit: z.nullable(z.lazy(() => Credit$outboundSchema)).optional(),
    currencyAssetId: z.string().optional(),
    delivery: z.nullable(z.lazy(() => Delivery$outboundSchema)).optional(),
    deposit: z.nullable(z.lazy(() => Deposit$outboundSchema)).optional(),
    description: z.string().optional(),
    drip: z.nullable(z.lazy(() => Drip$outboundSchema)).optional(),
    entryId: z.string().optional(),
    exchange: z.nullable(z.lazy(() => Exchange$outboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => EntryFee$outboundSchema)).optional(),
    flip: z.nullable(z.lazy(() => Flip$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => Fpsl$outboundSchema)).optional(),
    grossAmount: z.nullable(z.lazy(() => EntryGrossAmount$outboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => Interest$outboundSchema)).optional(),
    interestPayment: z.nullable(z.lazy(() => InterestPayment$outboundSchema))
        .optional(),
    liquidation: z.nullable(z.lazy(() => Liquidation$outboundSchema)).optional(),
    maturity: z.nullable(z.lazy(() => Maturity$outboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => Merger$outboundSchema)).optional(),
    name: z.string().optional(),
    nameChange: z.nullable(z.lazy(() => NameChange$outboundSchema)).optional(),
    originalId: z.string().optional(),
    originalProcessDate: z.nullable(z.lazy(() => OriginalProcessDate$outboundSchema)).optional(),
    paymentInKind: z.nullable(z.lazy(() => PaymentInKind$outboundSchema))
        .optional(),
    price: z.nullable(z.lazy(() => EntryPrice$outboundSchema)).optional(),
    processDate: z.nullable(z.lazy(() => EntryProcessDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => EntryQuantity$outboundSchema)).optional(),
    receive: z.nullable(z.lazy(() => Receive$outboundSchema)).optional(),
    redemptionFull: z.nullable(z.lazy(() => RedemptionFull$outboundSchema))
        .optional(),
    redemptionPartial: z.nullable(z.lazy(() => RedemptionPartial$outboundSchema))
        .optional(),
    reverseStockSplit: z.nullable(z.lazy(() => ReverseStockSplit$outboundSchema))
        .optional(),
    reversedEntryId: z.string().optional(),
    rightsDistribution: z.nullable(z.lazy(() => RightsDistribution$outboundSchema)).optional(),
    rightsSubscription: z.nullable(z.lazy(() => RightsSubscription$outboundSchema)).optional(),
    roundingAdjustment: z.nullable(z.lazy(() => RoundingAdjustment$outboundSchema)).optional(),
    saleOfRights: z.nullable(z.lazy(() => SaleOfRights$outboundSchema))
        .optional(),
    settleDate: z.nullable(z.lazy(() => SettleDate$outboundSchema)).optional(),
    side: EntrySide$outboundSchema.optional(),
    sideModifier: EntrySideModifier$outboundSchema.optional(),
    spinOff: z.nullable(z.lazy(() => SpinOff$outboundSchema)).optional(),
    state: EntryState$outboundSchema.optional(),
    stockDividend: z.nullable(z.lazy(() => StockDividend$outboundSchema))
        .optional(),
    stockSplit: z.nullable(z.lazy(() => StockSplit$outboundSchema)).optional(),
    subtypeCategory: z.string().optional(),
    sweep: z.nullable(z.lazy(() => Sweep$outboundSchema)).optional(),
    tenderOffer: z.nullable(z.lazy(() => TenderOffer$outboundSchema)).optional(),
    trade: z.nullable(z.lazy(() => EntryTrade$outboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => EntryTransfer$outboundSchema)).optional(),
    type: EntryType$outboundSchema.optional(),
    unitSplit: z.nullable(z.lazy(() => UnitSplit$outboundSchema)).optional(),
    warrantExercise: z.nullable(z.lazy(() => WarrantExercise$outboundSchema))
        .optional(),
    withdrawal: z.nullable(z.lazy(() => Withdrawal$outboundSchema)).optional(),
    withdrawalPendingReview: z.nullable(z.lazy(() => WithdrawalPendingReview$outboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => EntryWithholding$outboundSchema))
        .optional(),
    worthless: z.nullable(z.lazy(() => Worthless$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        acatsPendingOut: "acats_pending_out",
        accountId: "account_id",
        accountMemo: "account_memo",
        accountTransfer: "account_transfer",
        accruedInterest: "accrued_interest",
        activityDate: "activity_date",
        activityId: "activity_id",
        activityTime: "activity_time",
        assetId: "asset_id",
        bondDefault: "bond_default",
        capitalGains: "capital_gains",
        cashDividend: "cash_dividend",
        cashInLieu: "cash_in_lieu",
        corporateActionMemoAdjustment: "corporate_action_memo_adjustment",
        currencyAssetId: "currency_asset_id",
        entryId: "entry_id",
        grossAmount: "gross_amount",
        interestPayment: "interest_payment",
        nameChange: "name_change",
        originalId: "original_id",
        originalProcessDate: "original_process_date",
        paymentInKind: "payment_in_kind",
        processDate: "process_date",
        redemptionFull: "redemption_full",
        redemptionPartial: "redemption_partial",
        reverseStockSplit: "reverse_stock_split",
        reversedEntryId: "reversed_entry_id",
        rightsDistribution: "rights_distribution",
        rightsSubscription: "rights_subscription",
        roundingAdjustment: "rounding_adjustment",
        saleOfRights: "sale_of_rights",
        settleDate: "settle_date",
        sideModifier: "side_modifier",
        spinOff: "spin_off",
        stockDividend: "stock_dividend",
        stockSplit: "stock_split",
        subtypeCategory: "subtype_category",
        tenderOffer: "tender_offer",
        unitSplit: "unit_split",
        warrantExercise: "warrant_exercise",
        withdrawalPendingReview: "withdrawal_pending_review",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Entry$;
(function (Entry$) {
    /** @deprecated use `Entry$inboundSchema` instead. */
    Entry$.inboundSchema = Entry$inboundSchema;
    /** @deprecated use `Entry$outboundSchema` instead. */
    Entry$.outboundSchema = Entry$outboundSchema;
})(Entry$ || (Entry$ = {}));
export function entryToJSON(entry) {
    return JSON.stringify(Entry$outboundSchema.parse(entry));
}
export function entryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Entry$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Entry' from JSON`);
}
//# sourceMappingURL=entry.js.map