/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The outcome of the delivery
 */
export var Result;
(function (Result) {
    Result["PushSubscriptionDeliveryResultUnspecified"] = "PUSH_SUBSCRIPTION_DELIVERY_RESULT_UNSPECIFIED";
    Result["Succeeded"] = "SUCCEEDED";
    Result["Failed"] = "FAILED";
})(Result || (Result = {}));
/** @internal */
export const Result$inboundSchema = z
    .union([
    z.nativeEnum(Result),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Result$outboundSchema = z.union([
    z.nativeEnum(Result),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Result$;
(function (Result$) {
    /** @deprecated use `Result$inboundSchema` instead. */
    Result$.inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    Result$.outboundSchema = Result$outboundSchema;
})(Result$ || (Result$ = {}));
/** @internal */
export const PushSubscriptionDelivery$inboundSchema = z.object({
    delivery_id: z.string().optional(),
    duration: z.string().optional(),
    event: z.string().optional(),
    event_publish_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    last_response: z.string().optional(),
    last_send_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    result: Result$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "delivery_id": "deliveryId",
        "event_publish_time": "eventPublishTime",
        "last_response": "lastResponse",
        "last_send_time": "lastSendTime",
    });
});
/** @internal */
export const PushSubscriptionDelivery$outboundSchema = z.object({
    deliveryId: z.string().optional(),
    duration: z.string().optional(),
    event: z.string().optional(),
    eventPublishTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    lastResponse: z.string().optional(),
    lastSendTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    name: z.string().optional(),
    result: Result$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        deliveryId: "delivery_id",
        eventPublishTime: "event_publish_time",
        lastResponse: "last_response",
        lastSendTime: "last_send_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PushSubscriptionDelivery$;
(function (PushSubscriptionDelivery$) {
    /** @deprecated use `PushSubscriptionDelivery$inboundSchema` instead. */
    PushSubscriptionDelivery$.inboundSchema = PushSubscriptionDelivery$inboundSchema;
    /** @deprecated use `PushSubscriptionDelivery$outboundSchema` instead. */
    PushSubscriptionDelivery$.outboundSchema = PushSubscriptionDelivery$outboundSchema;
})(PushSubscriptionDelivery$ || (PushSubscriptionDelivery$ = {}));
export function pushSubscriptionDeliveryToJSON(pushSubscriptionDelivery) {
    return JSON.stringify(PushSubscriptionDelivery$outboundSchema.parse(pushSubscriptionDelivery));
}
export function pushSubscriptionDeliveryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PushSubscriptionDelivery$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PushSubscriptionDelivery' from JSON`);
}
//# sourceMappingURL=pushsubscriptiondelivery.js.map