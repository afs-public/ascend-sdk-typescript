/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export var LegalEntityBusinessIndustrialClassification;
(function (LegalEntityBusinessIndustrialClassification) {
    LegalEntityBusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    LegalEntityBusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    LegalEntityBusinessIndustrialClassification["Mining"] = "MINING";
    LegalEntityBusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    LegalEntityBusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    LegalEntityBusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    LegalEntityBusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    LegalEntityBusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    LegalEntityBusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    LegalEntityBusinessIndustrialClassification["Services"] = "SERVICES";
    LegalEntityBusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(LegalEntityBusinessIndustrialClassification || (LegalEntityBusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
export var LegalEntityCorporateStructure;
(function (LegalEntityCorporateStructure) {
    LegalEntityCorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    LegalEntityCorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    LegalEntityCorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    LegalEntityCorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    LegalEntityCorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(LegalEntityCorporateStructure || (LegalEntityCorporateStructure = {}));
/**
 * The entity type.
 */
export var LegalEntityEntityType;
(function (LegalEntityEntityType) {
    LegalEntityEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    LegalEntityEntityType["Corporation"] = "CORPORATION";
    LegalEntityEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    LegalEntityEntityType["Partnership"] = "PARTNERSHIP";
    LegalEntityEntityType["Trust"] = "TRUST";
    LegalEntityEntityType["Estate"] = "ESTATE";
})(LegalEntityEntityType || (LegalEntityEntityType = {}));
/**
 * **Field Dependencies:**
 *
 * @remarks
 *
 * Exempt entities must set `exempt_verifying_beneficial_owners` to `true` and provide an `exempt_customer_reason` on the owner record.
 *
 * Required if `exempt_verifying_beneficial_owners` is `true`.
 *
 * Otherwise, must be empty.
 */
export var LegalEntityExemptCustomerReason;
(function (LegalEntityExemptCustomerReason) {
    LegalEntityExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    LegalEntityExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    LegalEntityExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    LegalEntityExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    LegalEntityExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    LegalEntityExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    LegalEntityExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    LegalEntityExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    LegalEntityExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    LegalEntityExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    LegalEntityExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    LegalEntityExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(LegalEntityExemptCustomerReason || (LegalEntityExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var LegalEntityTaxIdType;
(function (LegalEntityTaxIdType) {
    LegalEntityTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalEntityTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalEntityTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalEntityTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalEntityTaxIdType || (LegalEntityTaxIdType = {}));
/**
 * Federal tax classification.
 */
export var LegalEntityFederalTaxClassification;
(function (LegalEntityFederalTaxClassification) {
    LegalEntityFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    LegalEntityFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    LegalEntityFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    LegalEntityFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    LegalEntityFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    LegalEntityFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    LegalEntityFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    LegalEntityFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    LegalEntityFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    LegalEntityFederalTaxClassification["Other"] = "OTHER";
})(LegalEntityFederalTaxClassification || (LegalEntityFederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var LegalEntityIrsFormType;
(function (LegalEntityIrsFormType) {
    LegalEntityIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    LegalEntityIrsFormType["W9"] = "W_9";
    LegalEntityIrsFormType["W8Ben"] = "W_8BEN";
})(LegalEntityIrsFormType || (LegalEntityIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
export var LegalEntityReportingEligibility;
(function (LegalEntityReportingEligibility) {
    LegalEntityReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    LegalEntityReportingEligibility["Eligible"] = "ELIGIBLE";
    LegalEntityReportingEligibility["Ineligible"] = "INELIGIBLE";
})(LegalEntityReportingEligibility || (LegalEntityReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
export var LegalEntityTaxpayerCertificationState;
(function (LegalEntityTaxpayerCertificationState) {
    LegalEntityTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    LegalEntityTaxpayerCertificationState["Certified"] = "CERTIFIED";
    LegalEntityTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(LegalEntityTaxpayerCertificationState || (LegalEntityTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var LegalEntityUsTinStatus;
(function (LegalEntityUsTinStatus) {
    LegalEntityUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    LegalEntityUsTinStatus["Passing"] = "PASSING";
    LegalEntityUsTinStatus["Failing"] = "FAILING";
})(LegalEntityUsTinStatus || (LegalEntityUsTinStatus = {}));
/**
 * B/C Notice status.
 */
export var LegalEntityWithholdingState;
(function (LegalEntityWithholdingState) {
    LegalEntityWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    LegalEntityWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    LegalEntityWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    LegalEntityWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    LegalEntityWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(LegalEntityWithholdingState || (LegalEntityWithholdingState = {}));
/** @internal */
export const LegalEntityBusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityBusinessIndustrialClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityBusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(LegalEntityBusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityBusinessIndustrialClassification$;
(function (LegalEntityBusinessIndustrialClassification$) {
    /** @deprecated use `LegalEntityBusinessIndustrialClassification$inboundSchema` instead. */
    LegalEntityBusinessIndustrialClassification$.inboundSchema = LegalEntityBusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `LegalEntityBusinessIndustrialClassification$outboundSchema` instead. */
    LegalEntityBusinessIndustrialClassification$.outboundSchema = LegalEntityBusinessIndustrialClassification$outboundSchema;
})(LegalEntityBusinessIndustrialClassification$ || (LegalEntityBusinessIndustrialClassification$ = {}));
/** @internal */
export const LegalEntityCorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityCorporateStructure),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityCorporateStructure$outboundSchema = z.union([
    z.nativeEnum(LegalEntityCorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityCorporateStructure$;
(function (LegalEntityCorporateStructure$) {
    /** @deprecated use `LegalEntityCorporateStructure$inboundSchema` instead. */
    LegalEntityCorporateStructure$.inboundSchema = LegalEntityCorporateStructure$inboundSchema;
    /** @deprecated use `LegalEntityCorporateStructure$outboundSchema` instead. */
    LegalEntityCorporateStructure$.outboundSchema = LegalEntityCorporateStructure$outboundSchema;
})(LegalEntityCorporateStructure$ || (LegalEntityCorporateStructure$ = {}));
/** @internal */
export const LegalEntityNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
export const LegalEntityNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityNegativeNews$;
(function (LegalEntityNegativeNews$) {
    /** @deprecated use `LegalEntityNegativeNews$inboundSchema` instead. */
    LegalEntityNegativeNews$.inboundSchema = LegalEntityNegativeNews$inboundSchema;
    /** @deprecated use `LegalEntityNegativeNews$outboundSchema` instead. */
    LegalEntityNegativeNews$.outboundSchema = LegalEntityNegativeNews$outboundSchema;
})(LegalEntityNegativeNews$ || (LegalEntityNegativeNews$ = {}));
export function legalEntityNegativeNewsToJSON(legalEntityNegativeNews) {
    return JSON.stringify(LegalEntityNegativeNews$outboundSchema.parse(legalEntityNegativeNews));
}
export function legalEntityNegativeNewsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityNegativeNews$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityNegativeNews' from JSON`);
}
/** @internal */
export const EntityDueDiligence$inboundSchema = z.object({
    entity_issues_bearer_shares: z.boolean().optional(),
    negative_news: z.nullable(z.lazy(() => LegalEntityNegativeNews$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "entity_issues_bearer_shares": "entityIssuesBearerShares",
        "negative_news": "negativeNews",
    });
});
/** @internal */
export const EntityDueDiligence$outboundSchema = z.object({
    entityIssuesBearerShares: z.boolean().optional(),
    negativeNews: z.nullable(z.lazy(() => LegalEntityNegativeNews$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        entityIssuesBearerShares: "entity_issues_bearer_shares",
        negativeNews: "negative_news",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityDueDiligence$;
(function (EntityDueDiligence$) {
    /** @deprecated use `EntityDueDiligence$inboundSchema` instead. */
    EntityDueDiligence$.inboundSchema = EntityDueDiligence$inboundSchema;
    /** @deprecated use `EntityDueDiligence$outboundSchema` instead. */
    EntityDueDiligence$.outboundSchema = EntityDueDiligence$outboundSchema;
})(EntityDueDiligence$ || (EntityDueDiligence$ = {}));
export function entityDueDiligenceToJSON(entityDueDiligence) {
    return JSON.stringify(EntityDueDiligence$outboundSchema.parse(entityDueDiligence));
}
export function entityDueDiligenceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntityDueDiligence$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntityDueDiligence' from JSON`);
}
/** @internal */
export const LegalEntityEntityType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityEntityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityEntityType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityEntityType$;
(function (LegalEntityEntityType$) {
    /** @deprecated use `LegalEntityEntityType$inboundSchema` instead. */
    LegalEntityEntityType$.inboundSchema = LegalEntityEntityType$inboundSchema;
    /** @deprecated use `LegalEntityEntityType$outboundSchema` instead. */
    LegalEntityEntityType$.outboundSchema = LegalEntityEntityType$outboundSchema;
})(LegalEntityEntityType$ || (LegalEntityEntityType$ = {}));
/** @internal */
export const LegalEntityExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityExemptCustomerReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(LegalEntityExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityExemptCustomerReason$;
(function (LegalEntityExemptCustomerReason$) {
    /** @deprecated use `LegalEntityExemptCustomerReason$inboundSchema` instead. */
    LegalEntityExemptCustomerReason$.inboundSchema = LegalEntityExemptCustomerReason$inboundSchema;
    /** @deprecated use `LegalEntityExemptCustomerReason$outboundSchema` instead. */
    LegalEntityExemptCustomerReason$.outboundSchema = LegalEntityExemptCustomerReason$outboundSchema;
})(LegalEntityExemptCustomerReason$ || (LegalEntityExemptCustomerReason$ = {}));
/** @internal */
export const FormationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const FormationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FormationDate$;
(function (FormationDate$) {
    /** @deprecated use `FormationDate$inboundSchema` instead. */
    FormationDate$.inboundSchema = FormationDate$inboundSchema;
    /** @deprecated use `FormationDate$outboundSchema` instead. */
    FormationDate$.outboundSchema = FormationDate$outboundSchema;
})(FormationDate$ || (FormationDate$ = {}));
export function formationDateToJSON(formationDate) {
    return JSON.stringify(FormationDate$outboundSchema.parse(formationDate));
}
export function formationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FormationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FormationDate' from JSON`);
}
/** @internal */
export const LegalEntityEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LegalEntityEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityEffectiveDate$;
(function (LegalEntityEffectiveDate$) {
    /** @deprecated use `LegalEntityEffectiveDate$inboundSchema` instead. */
    LegalEntityEffectiveDate$.inboundSchema = LegalEntityEffectiveDate$inboundSchema;
    /** @deprecated use `LegalEntityEffectiveDate$outboundSchema` instead. */
    LegalEntityEffectiveDate$.outboundSchema = LegalEntityEffectiveDate$outboundSchema;
})(LegalEntityEffectiveDate$ || (LegalEntityEffectiveDate$ = {}));
export function legalEntityEffectiveDateToJSON(legalEntityEffectiveDate) {
    return JSON.stringify(LegalEntityEffectiveDate$outboundSchema.parse(legalEntityEffectiveDate));
}
export function legalEntityEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityEffectiveDate' from JSON`);
}
/** @internal */
export const LegalEntityLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => LegalEntityEffectiveDate$inboundSchema)).optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const LegalEntityLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => LegalEntityEffectiveDate$outboundSchema)).optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityLargeTrader$;
(function (LegalEntityLargeTrader$) {
    /** @deprecated use `LegalEntityLargeTrader$inboundSchema` instead. */
    LegalEntityLargeTrader$.inboundSchema = LegalEntityLargeTrader$inboundSchema;
    /** @deprecated use `LegalEntityLargeTrader$outboundSchema` instead. */
    LegalEntityLargeTrader$.outboundSchema = LegalEntityLargeTrader$outboundSchema;
})(LegalEntityLargeTrader$ || (LegalEntityLargeTrader$ = {}));
export function legalEntityLargeTraderToJSON(legalEntityLargeTrader) {
    return JSON.stringify(LegalEntityLargeTrader$outboundSchema.parse(legalEntityLargeTrader));
}
export function legalEntityLargeTraderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityLargeTrader$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityLargeTrader' from JSON`);
}
/** @internal */
export const LegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const LegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalAddress$;
(function (LegalAddress$) {
    /** @deprecated use `LegalAddress$inboundSchema` instead. */
    LegalAddress$.inboundSchema = LegalAddress$inboundSchema;
    /** @deprecated use `LegalAddress$outboundSchema` instead. */
    LegalAddress$.outboundSchema = LegalAddress$outboundSchema;
})(LegalAddress$ || (LegalAddress$ = {}));
export function legalAddressToJSON(legalAddress) {
    return JSON.stringify(LegalAddress$outboundSchema.parse(legalAddress));
}
export function legalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalAddress' from JSON`);
}
/** @internal */
export const LegalEntityTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityTaxIdType$;
(function (LegalEntityTaxIdType$) {
    /** @deprecated use `LegalEntityTaxIdType$inboundSchema` instead. */
    LegalEntityTaxIdType$.inboundSchema = LegalEntityTaxIdType$inboundSchema;
    /** @deprecated use `LegalEntityTaxIdType$outboundSchema` instead. */
    LegalEntityTaxIdType$.outboundSchema = LegalEntityTaxIdType$outboundSchema;
})(LegalEntityTaxIdType$ || (LegalEntityTaxIdType$ = {}));
/** @internal */
export const LegalEntityCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LegalEntityCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityCNoticeDate$;
(function (LegalEntityCNoticeDate$) {
    /** @deprecated use `LegalEntityCNoticeDate$inboundSchema` instead. */
    LegalEntityCNoticeDate$.inboundSchema = LegalEntityCNoticeDate$inboundSchema;
    /** @deprecated use `LegalEntityCNoticeDate$outboundSchema` instead. */
    LegalEntityCNoticeDate$.outboundSchema = LegalEntityCNoticeDate$outboundSchema;
})(LegalEntityCNoticeDate$ || (LegalEntityCNoticeDate$ = {}));
export function legalEntityCNoticeDateToJSON(legalEntityCNoticeDate) {
    return JSON.stringify(LegalEntityCNoticeDate$outboundSchema.parse(legalEntityCNoticeDate));
}
export function legalEntityCNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityCNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityCNoticeDate' from JSON`);
}
/** @internal */
export const LegalEntityFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityFederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(LegalEntityFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityFederalTaxClassification$;
(function (LegalEntityFederalTaxClassification$) {
    /** @deprecated use `LegalEntityFederalTaxClassification$inboundSchema` instead. */
    LegalEntityFederalTaxClassification$.inboundSchema = LegalEntityFederalTaxClassification$inboundSchema;
    /** @deprecated use `LegalEntityFederalTaxClassification$outboundSchema` instead. */
    LegalEntityFederalTaxClassification$.outboundSchema = LegalEntityFederalTaxClassification$outboundSchema;
})(LegalEntityFederalTaxClassification$ || (LegalEntityFederalTaxClassification$ = {}));
/** @internal */
export const LegalEntityFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LegalEntityFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityFirstBNoticeDate$;
(function (LegalEntityFirstBNoticeDate$) {
    /** @deprecated use `LegalEntityFirstBNoticeDate$inboundSchema` instead. */
    LegalEntityFirstBNoticeDate$.inboundSchema = LegalEntityFirstBNoticeDate$inboundSchema;
    /** @deprecated use `LegalEntityFirstBNoticeDate$outboundSchema` instead. */
    LegalEntityFirstBNoticeDate$.outboundSchema = LegalEntityFirstBNoticeDate$outboundSchema;
})(LegalEntityFirstBNoticeDate$ || (LegalEntityFirstBNoticeDate$ = {}));
export function legalEntityFirstBNoticeDateToJSON(legalEntityFirstBNoticeDate) {
    return JSON.stringify(LegalEntityFirstBNoticeDate$outboundSchema.parse(legalEntityFirstBNoticeDate));
}
export function legalEntityFirstBNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityFirstBNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityFirstBNoticeDate' from JSON`);
}
/** @internal */
export const LegalEntityIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityIrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityIrsFormType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityIrsFormType$;
(function (LegalEntityIrsFormType$) {
    /** @deprecated use `LegalEntityIrsFormType$inboundSchema` instead. */
    LegalEntityIrsFormType$.inboundSchema = LegalEntityIrsFormType$inboundSchema;
    /** @deprecated use `LegalEntityIrsFormType$outboundSchema` instead. */
    LegalEntityIrsFormType$.outboundSchema = LegalEntityIrsFormType$outboundSchema;
})(LegalEntityIrsFormType$ || (LegalEntityIrsFormType$ = {}));
/** @internal */
export const LegalEntityReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityReportingEligibility),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(LegalEntityReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityReportingEligibility$;
(function (LegalEntityReportingEligibility$) {
    /** @deprecated use `LegalEntityReportingEligibility$inboundSchema` instead. */
    LegalEntityReportingEligibility$.inboundSchema = LegalEntityReportingEligibility$inboundSchema;
    /** @deprecated use `LegalEntityReportingEligibility$outboundSchema` instead. */
    LegalEntityReportingEligibility$.outboundSchema = LegalEntityReportingEligibility$outboundSchema;
})(LegalEntityReportingEligibility$ || (LegalEntityReportingEligibility$ = {}));
/** @internal */
export const LegalEntityTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LegalEntityTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityTaxCertificationDate$;
(function (LegalEntityTaxCertificationDate$) {
    /** @deprecated use `LegalEntityTaxCertificationDate$inboundSchema` instead. */
    LegalEntityTaxCertificationDate$.inboundSchema = LegalEntityTaxCertificationDate$inboundSchema;
    /** @deprecated use `LegalEntityTaxCertificationDate$outboundSchema` instead. */
    LegalEntityTaxCertificationDate$.outboundSchema = LegalEntityTaxCertificationDate$outboundSchema;
})(LegalEntityTaxCertificationDate$ || (LegalEntityTaxCertificationDate$ = {}));
export function legalEntityTaxCertificationDateToJSON(legalEntityTaxCertificationDate) {
    return JSON.stringify(LegalEntityTaxCertificationDate$outboundSchema.parse(legalEntityTaxCertificationDate));
}
export function legalEntityTaxCertificationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityTaxCertificationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityTaxCertificationDate' from JSON`);
}
/** @internal */
export const LegalEntityTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityTaxpayerCertificationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(LegalEntityTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityTaxpayerCertificationState$;
(function (LegalEntityTaxpayerCertificationState$) {
    /** @deprecated use `LegalEntityTaxpayerCertificationState$inboundSchema` instead. */
    LegalEntityTaxpayerCertificationState$.inboundSchema = LegalEntityTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `LegalEntityTaxpayerCertificationState$outboundSchema` instead. */
    LegalEntityTaxpayerCertificationState$.outboundSchema = LegalEntityTaxpayerCertificationState$outboundSchema;
})(LegalEntityTaxpayerCertificationState$ || (LegalEntityTaxpayerCertificationState$ = {}));
/** @internal */
export const LegalEntityUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityUsTinStatus$;
(function (LegalEntityUsTinStatus$) {
    /** @deprecated use `LegalEntityUsTinStatus$inboundSchema` instead. */
    LegalEntityUsTinStatus$.inboundSchema = LegalEntityUsTinStatus$inboundSchema;
    /** @deprecated use `LegalEntityUsTinStatus$outboundSchema` instead. */
    LegalEntityUsTinStatus$.outboundSchema = LegalEntityUsTinStatus$outboundSchema;
})(LegalEntityUsTinStatus$ || (LegalEntityUsTinStatus$ = {}));
/** @internal */
export const LegalEntityWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityWithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityWithholdingState$outboundSchema = z.union([
    z.nativeEnum(LegalEntityWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityWithholdingState$;
(function (LegalEntityWithholdingState$) {
    /** @deprecated use `LegalEntityWithholdingState$inboundSchema` instead. */
    LegalEntityWithholdingState$.inboundSchema = LegalEntityWithholdingState$inboundSchema;
    /** @deprecated use `LegalEntityWithholdingState$outboundSchema` instead. */
    LegalEntityWithholdingState$.outboundSchema = LegalEntityWithholdingState$outboundSchema;
})(LegalEntityWithholdingState$ || (LegalEntityWithholdingState$ = {}));
/** @internal */
export const LegalEntityTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => LegalEntityCNoticeDate$inboundSchema))
        .optional(),
    federal_tax_classification: LegalEntityFederalTaxClassification$inboundSchema
        .optional(),
    first_b_notice_date: z.nullable(z.lazy(() => LegalEntityFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: LegalEntityIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: LegalEntityReportingEligibility$inboundSchema
        .optional(),
    tax_certification_date: z.nullable(z.lazy(() => LegalEntityTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: LegalEntityTaxpayerCertificationState$inboundSchema.optional(),
    us_tin_status: LegalEntityUsTinStatus$inboundSchema.optional(),
    withholding_state: LegalEntityWithholdingState$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
export const LegalEntityTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => LegalEntityCNoticeDate$outboundSchema))
        .optional(),
    federalTaxClassification: LegalEntityFederalTaxClassification$outboundSchema
        .optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => LegalEntityFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: LegalEntityIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: LegalEntityReportingEligibility$outboundSchema
        .optional(),
    taxCertificationDate: z.nullable(z.lazy(() => LegalEntityTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: LegalEntityTaxpayerCertificationState$outboundSchema.optional(),
    usTinStatus: LegalEntityUsTinStatus$outboundSchema.optional(),
    withholdingState: LegalEntityWithholdingState$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityTaxProfile$;
(function (LegalEntityTaxProfile$) {
    /** @deprecated use `LegalEntityTaxProfile$inboundSchema` instead. */
    LegalEntityTaxProfile$.inboundSchema = LegalEntityTaxProfile$inboundSchema;
    /** @deprecated use `LegalEntityTaxProfile$outboundSchema` instead. */
    LegalEntityTaxProfile$.outboundSchema = LegalEntityTaxProfile$outboundSchema;
})(LegalEntityTaxProfile$ || (LegalEntityTaxProfile$ = {}));
export function legalEntityTaxProfileToJSON(legalEntityTaxProfile) {
    return JSON.stringify(LegalEntityTaxProfile$outboundSchema.parse(legalEntityTaxProfile));
}
export function legalEntityTaxProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityTaxProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityTaxProfile' from JSON`);
}
/** @internal */
export const LegalEntity$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: LegalEntityBusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: LegalEntityCorporateStructure$inboundSchema.optional(),
    correspondent_id: z.string().optional(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: z.nullable(z.lazy(() => EntityDueDiligence$inboundSchema)).optional(),
    entity_name: z.string().optional(),
    entity_type: LegalEntityEntityType$inboundSchema.optional(),
    exempt_customer_reason: LegalEntityExemptCustomerReason$inboundSchema
        .optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_entity: z.boolean().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: z.nullable(z.lazy(() => FormationDate$inboundSchema))
        .optional(),
    global_person_id: z.string().optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => LegalEntityLargeTrader$inboundSchema))
        .optional(),
    legal_address: z.nullable(z.lazy(() => LegalAddress$inboundSchema))
        .optional(),
    legal_entity_id: z.string().optional(),
    lei_code: z.string().optional(),
    name: z.string().optional(),
    operating_regions: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: LegalEntityTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => LegalEntityTaxProfile$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_entity": "foreignEntity",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "global_person_id": "globalPersonId",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "legal_entity_id": "legalEntityId",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const LegalEntity$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: LegalEntityBusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: LegalEntityCorporateStructure$outboundSchema.optional(),
    correspondentId: z.string().optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: z.nullable(z.lazy(() => EntityDueDiligence$outboundSchema)).optional(),
    entityName: z.string().optional(),
    entityType: LegalEntityEntityType$outboundSchema.optional(),
    exemptCustomerReason: LegalEntityExemptCustomerReason$outboundSchema
        .optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignEntity: z.boolean().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: z.nullable(z.lazy(() => FormationDate$outboundSchema))
        .optional(),
    globalPersonId: z.string().optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => LegalEntityLargeTrader$outboundSchema))
        .optional(),
    legalAddress: z.nullable(z.lazy(() => LegalAddress$outboundSchema))
        .optional(),
    legalEntityId: z.string().optional(),
    leiCode: z.string().optional(),
    name: z.string().optional(),
    operatingRegions: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: LegalEntityTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => LegalEntityTaxProfile$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignEntity: "foreign_entity",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        globalPersonId: "global_person_id",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        legalEntityId: "legal_entity_id",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntity$;
(function (LegalEntity$) {
    /** @deprecated use `LegalEntity$inboundSchema` instead. */
    LegalEntity$.inboundSchema = LegalEntity$inboundSchema;
    /** @deprecated use `LegalEntity$outboundSchema` instead. */
    LegalEntity$.outboundSchema = LegalEntity$outboundSchema;
})(LegalEntity$ || (LegalEntity$ = {}));
export function legalEntityToJSON(legalEntity) {
    return JSON.stringify(LegalEntity$outboundSchema.parse(legalEntity));
}
export function legalEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntity' from JSON`);
}
//# sourceMappingURL=legalentity.js.map