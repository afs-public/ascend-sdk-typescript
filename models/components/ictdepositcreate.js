/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
import { IctDepositTravelRuleCreate$inboundSchema, IctDepositTravelRuleCreate$outboundSchema, } from "./ictdeposittravelrulecreate.js";
import { RetirementContributionCreate$inboundSchema, RetirementContributionCreate$outboundSchema, } from "./retirementcontributioncreate.js";
/**
 * The name of the program the ICT deposit is associated with
 */
export var Program;
(function (Program) {
    Program["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    Program["BrokerPartner"] = "BROKER_PARTNER";
    Program["DepositOnly"] = "DEPOSIT_ONLY";
    Program["BankingPartner"] = "BANKING_PARTNER";
    Program["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    Program["DigitalPartner"] = "DIGITAL_PARTNER";
})(Program || (Program = {}));
/** @internal */
export const Program$inboundSchema = z
    .union([
    z.nativeEnum(Program),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Program$outboundSchema = z.union([
    z.nativeEnum(Program),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Program$;
(function (Program$) {
    /** @deprecated use `Program$inboundSchema` instead. */
    Program$.inboundSchema = Program$inboundSchema;
    /** @deprecated use `Program$outboundSchema` instead. */
    Program$.outboundSchema = Program$outboundSchema;
})(Program$ || (Program$ = {}));
/** @internal */
export const IctDepositCreate$inboundSchema = z.object({
    amount: DecimalCreate$inboundSchema,
    client_transfer_id: z.string(),
    program: Program$inboundSchema,
    retirement_contribution: RetirementContributionCreate$inboundSchema
        .optional(),
    travel_rule: IctDepositTravelRuleCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "retirement_contribution": "retirementContribution",
        "travel_rule": "travelRule",
    });
});
/** @internal */
export const IctDepositCreate$outboundSchema = z.object({
    amount: DecimalCreate$outboundSchema,
    clientTransferId: z.string(),
    program: Program$outboundSchema,
    retirementContribution: RetirementContributionCreate$outboundSchema
        .optional(),
    travelRule: IctDepositTravelRuleCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        retirementContribution: "retirement_contribution",
        travelRule: "travel_rule",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositCreate$;
(function (IctDepositCreate$) {
    /** @deprecated use `IctDepositCreate$inboundSchema` instead. */
    IctDepositCreate$.inboundSchema = IctDepositCreate$inboundSchema;
    /** @deprecated use `IctDepositCreate$outboundSchema` instead. */
    IctDepositCreate$.outboundSchema = IctDepositCreate$outboundSchema;
})(IctDepositCreate$ || (IctDepositCreate$ = {}));
export function ictDepositCreateToJSON(ictDepositCreate) {
    return JSON.stringify(IctDepositCreate$outboundSchema.parse(ictDepositCreate));
}
export function ictDepositCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositCreate' from JSON`);
}
//# sourceMappingURL=ictdepositcreate.js.map