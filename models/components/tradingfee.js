/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of fee being specified. Only the type of "BROKER_FEE" is supported.
 */
export var TradingFeeType;
(function (TradingFeeType) {
    TradingFeeType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    TradingFeeType["BrokerFee"] = "BROKER_FEE";
    TradingFeeType["ContractFee"] = "CONTRACT_FEE";
})(TradingFeeType || (TradingFeeType = {}));
/** @internal */
export const TradingFeeAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradingFeeAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingFeeAmount$;
(function (TradingFeeAmount$) {
    /** @deprecated use `TradingFeeAmount$inboundSchema` instead. */
    TradingFeeAmount$.inboundSchema = TradingFeeAmount$inboundSchema;
    /** @deprecated use `TradingFeeAmount$outboundSchema` instead. */
    TradingFeeAmount$.outboundSchema = TradingFeeAmount$outboundSchema;
})(TradingFeeAmount$ || (TradingFeeAmount$ = {}));
export function tradingFeeAmountToJSON(tradingFeeAmount) {
    return JSON.stringify(TradingFeeAmount$outboundSchema.parse(tradingFeeAmount));
}
export function tradingFeeAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradingFeeAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradingFeeAmount' from JSON`);
}
/** @internal */
export const TradingFeeType$inboundSchema = z
    .union([
    z.nativeEnum(TradingFeeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradingFeeType$outboundSchema = z.union([
    z.nativeEnum(TradingFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingFeeType$;
(function (TradingFeeType$) {
    /** @deprecated use `TradingFeeType$inboundSchema` instead. */
    TradingFeeType$.inboundSchema = TradingFeeType$inboundSchema;
    /** @deprecated use `TradingFeeType$outboundSchema` instead. */
    TradingFeeType$.outboundSchema = TradingFeeType$outboundSchema;
})(TradingFeeType$ || (TradingFeeType$ = {}));
/** @internal */
export const TradingFee$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TradingFeeAmount$inboundSchema)).optional(),
    type: TradingFeeType$inboundSchema.optional(),
});
/** @internal */
export const TradingFee$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TradingFeeAmount$outboundSchema)).optional(),
    type: TradingFeeType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingFee$;
(function (TradingFee$) {
    /** @deprecated use `TradingFee$inboundSchema` instead. */
    TradingFee$.inboundSchema = TradingFee$inboundSchema;
    /** @deprecated use `TradingFee$outboundSchema` instead. */
    TradingFee$.outboundSchema = TradingFee$outboundSchema;
})(TradingFee$ || (TradingFee$ = {}));
export function tradingFeeToJSON(tradingFee) {
    return JSON.stringify(TradingFee$outboundSchema.parse(tradingFee));
}
export function tradingFeeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradingFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradingFee' from JSON`);
}
//# sourceMappingURL=tradingfee.js.map