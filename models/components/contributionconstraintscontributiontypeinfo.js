/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Retirement contribution type
 */
export var ContributionConstraintsContributionTypeInfoType;
(function (ContributionConstraintsContributionTypeInfoType) {
    ContributionConstraintsContributionTypeInfoType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    ContributionConstraintsContributionTypeInfoType["Regular"] = "REGULAR";
    ContributionConstraintsContributionTypeInfoType["Employee"] = "EMPLOYEE";
    ContributionConstraintsContributionTypeInfoType["Employer"] = "EMPLOYER";
    ContributionConstraintsContributionTypeInfoType["Recharacterization"] = "RECHARACTERIZATION";
    ContributionConstraintsContributionTypeInfoType["Rollover60Day"] = "ROLLOVER_60_DAY";
    ContributionConstraintsContributionTypeInfoType["RolloverDirect"] = "ROLLOVER_DIRECT";
    ContributionConstraintsContributionTypeInfoType["Transfer"] = "TRANSFER";
    ContributionConstraintsContributionTypeInfoType["TrusteeFee"] = "TRUSTEE_FEE";
    ContributionConstraintsContributionTypeInfoType["Conversion"] = "CONVERSION";
    ContributionConstraintsContributionTypeInfoType["Repayment"] = "REPAYMENT";
    ContributionConstraintsContributionTypeInfoType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(ContributionConstraintsContributionTypeInfoType || (ContributionConstraintsContributionTypeInfoType = {}));
/** @internal */
export const PreviousYearDeadline$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PreviousYearDeadline$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousYearDeadline$;
(function (PreviousYearDeadline$) {
    /** @deprecated use `PreviousYearDeadline$inboundSchema` instead. */
    PreviousYearDeadline$.inboundSchema = PreviousYearDeadline$inboundSchema;
    /** @deprecated use `PreviousYearDeadline$outboundSchema` instead. */
    PreviousYearDeadline$.outboundSchema = PreviousYearDeadline$outboundSchema;
})(PreviousYearDeadline$ || (PreviousYearDeadline$ = {}));
export function previousYearDeadlineToJSON(previousYearDeadline) {
    return JSON.stringify(PreviousYearDeadline$outboundSchema.parse(previousYearDeadline));
}
export function previousYearDeadlineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PreviousYearDeadline$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PreviousYearDeadline' from JSON`);
}
/** @internal */
export const ContributionConstraintsContributionTypeInfoType$inboundSchema = z
    .union([
    z.nativeEnum(ContributionConstraintsContributionTypeInfoType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ContributionConstraintsContributionTypeInfoType$outboundSchema = z.union([
    z.nativeEnum(ContributionConstraintsContributionTypeInfoType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionConstraintsContributionTypeInfoType$;
(function (ContributionConstraintsContributionTypeInfoType$) {
    /** @deprecated use `ContributionConstraintsContributionTypeInfoType$inboundSchema` instead. */
    ContributionConstraintsContributionTypeInfoType$.inboundSchema = ContributionConstraintsContributionTypeInfoType$inboundSchema;
    /** @deprecated use `ContributionConstraintsContributionTypeInfoType$outboundSchema` instead. */
    ContributionConstraintsContributionTypeInfoType$.outboundSchema = ContributionConstraintsContributionTypeInfoType$outboundSchema;
})(ContributionConstraintsContributionTypeInfoType$ || (ContributionConstraintsContributionTypeInfoType$ = {}));
/** @internal */
export const ContributionConstraintsContributionTypeInfo$inboundSchema = z.object({
    previous_year_allowed: z.boolean().optional(),
    previous_year_deadline: z.nullable(z.lazy(() => PreviousYearDeadline$inboundSchema)).optional(),
    type: ContributionConstraintsContributionTypeInfoType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "previous_year_allowed": "previousYearAllowed",
        "previous_year_deadline": "previousYearDeadline",
    });
});
/** @internal */
export const ContributionConstraintsContributionTypeInfo$outboundSchema = z.object({
    previousYearAllowed: z.boolean().optional(),
    previousYearDeadline: z.nullable(z.lazy(() => PreviousYearDeadline$outboundSchema)).optional(),
    type: ContributionConstraintsContributionTypeInfoType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        previousYearAllowed: "previous_year_allowed",
        previousYearDeadline: "previous_year_deadline",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionConstraintsContributionTypeInfo$;
(function (ContributionConstraintsContributionTypeInfo$) {
    /** @deprecated use `ContributionConstraintsContributionTypeInfo$inboundSchema` instead. */
    ContributionConstraintsContributionTypeInfo$.inboundSchema = ContributionConstraintsContributionTypeInfo$inboundSchema;
    /** @deprecated use `ContributionConstraintsContributionTypeInfo$outboundSchema` instead. */
    ContributionConstraintsContributionTypeInfo$.outboundSchema = ContributionConstraintsContributionTypeInfo$outboundSchema;
})(ContributionConstraintsContributionTypeInfo$ || (ContributionConstraintsContributionTypeInfo$ = {}));
export function contributionConstraintsContributionTypeInfoToJSON(contributionConstraintsContributionTypeInfo) {
    return JSON.stringify(ContributionConstraintsContributionTypeInfo$outboundSchema.parse(contributionConstraintsContributionTypeInfo));
}
export function contributionConstraintsContributionTypeInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContributionConstraintsContributionTypeInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionConstraintsContributionTypeInfo' from JSON`);
}
//# sourceMappingURL=contributionconstraintscontributiontypeinfo.js.map