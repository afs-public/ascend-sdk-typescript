/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Retirement distribution type
 */
export var DistributionConstraintsDistributionTypeInfoType;
(function (DistributionConstraintsDistributionTypeInfoType) {
    DistributionConstraintsDistributionTypeInfoType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    DistributionConstraintsDistributionTypeInfoType["Normal"] = "NORMAL";
    DistributionConstraintsDistributionTypeInfoType["Disability"] = "DISABILITY";
    DistributionConstraintsDistributionTypeInfoType["Sosepp"] = "SOSEPP";
    DistributionConstraintsDistributionTypeInfoType["Premature"] = "PREMATURE";
    DistributionConstraintsDistributionTypeInfoType["Death"] = "DEATH";
    DistributionConstraintsDistributionTypeInfoType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    DistributionConstraintsDistributionTypeInfoType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    DistributionConstraintsDistributionTypeInfoType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    DistributionConstraintsDistributionTypeInfoType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    DistributionConstraintsDistributionTypeInfoType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    DistributionConstraintsDistributionTypeInfoType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    DistributionConstraintsDistributionTypeInfoType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    DistributionConstraintsDistributionTypeInfoType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    DistributionConstraintsDistributionTypeInfoType["ManagementFee"] = "MANAGEMENT_FEE";
    DistributionConstraintsDistributionTypeInfoType["PlanLoan401K"] = "PLAN_LOAN_401K";
    DistributionConstraintsDistributionTypeInfoType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    DistributionConstraintsDistributionTypeInfoType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    DistributionConstraintsDistributionTypeInfoType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    DistributionConstraintsDistributionTypeInfoType["Revocation"] = "REVOCATION";
    DistributionConstraintsDistributionTypeInfoType["NonReportable"] = "NON_REPORTABLE";
})(DistributionConstraintsDistributionTypeInfoType || (DistributionConstraintsDistributionTypeInfoType = {}));
/** @internal */
export const DistributionConstraintsDistributionTypeInfoType$inboundSchema = z
    .union([
    z.nativeEnum(DistributionConstraintsDistributionTypeInfoType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const DistributionConstraintsDistributionTypeInfoType$outboundSchema = z.union([
    z.nativeEnum(DistributionConstraintsDistributionTypeInfoType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionConstraintsDistributionTypeInfoType$;
(function (DistributionConstraintsDistributionTypeInfoType$) {
    /** @deprecated use `DistributionConstraintsDistributionTypeInfoType$inboundSchema` instead. */
    DistributionConstraintsDistributionTypeInfoType$.inboundSchema = DistributionConstraintsDistributionTypeInfoType$inboundSchema;
    /** @deprecated use `DistributionConstraintsDistributionTypeInfoType$outboundSchema` instead. */
    DistributionConstraintsDistributionTypeInfoType$.outboundSchema = DistributionConstraintsDistributionTypeInfoType$outboundSchema;
})(DistributionConstraintsDistributionTypeInfoType$ || (DistributionConstraintsDistributionTypeInfoType$ = {}));
/** @internal */
export const DistributionConstraintsDistributionTypeInfo$inboundSchema = z.object({
    federal_withholding_enabled: z.boolean().optional(),
    state_withholding_enabled: z.boolean().optional(),
    type: DistributionConstraintsDistributionTypeInfoType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_withholding_enabled": "federalWithholdingEnabled",
        "state_withholding_enabled": "stateWithholdingEnabled",
    });
});
/** @internal */
export const DistributionConstraintsDistributionTypeInfo$outboundSchema = z.object({
    federalWithholdingEnabled: z.boolean().optional(),
    stateWithholdingEnabled: z.boolean().optional(),
    type: DistributionConstraintsDistributionTypeInfoType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        federalWithholdingEnabled: "federal_withholding_enabled",
        stateWithholdingEnabled: "state_withholding_enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionConstraintsDistributionTypeInfo$;
(function (DistributionConstraintsDistributionTypeInfo$) {
    /** @deprecated use `DistributionConstraintsDistributionTypeInfo$inboundSchema` instead. */
    DistributionConstraintsDistributionTypeInfo$.inboundSchema = DistributionConstraintsDistributionTypeInfo$inboundSchema;
    /** @deprecated use `DistributionConstraintsDistributionTypeInfo$outboundSchema` instead. */
    DistributionConstraintsDistributionTypeInfo$.outboundSchema = DistributionConstraintsDistributionTypeInfo$outboundSchema;
})(DistributionConstraintsDistributionTypeInfo$ || (DistributionConstraintsDistributionTypeInfo$ = {}));
export function distributionConstraintsDistributionTypeInfoToJSON(distributionConstraintsDistributionTypeInfo) {
    return JSON.stringify(DistributionConstraintsDistributionTypeInfo$outboundSchema.parse(distributionConstraintsDistributionTypeInfo));
}
export function distributionConstraintsDistributionTypeInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionConstraintsDistributionTypeInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionConstraintsDistributionTypeInfo' from JSON`);
}
//# sourceMappingURL=distributionconstraintsdistributiontypeinfo.js.map