/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const EventMessage$inboundSchema = z.object({
    account_id: z.string().optional(),
    client_id: z.string().optional(),
    correspondent_id: z.string().optional(),
    data: z.nullable(z.record(z.any())).optional(),
    event_type: z.string().optional(),
    message_id: z.string().optional(),
    name: z.string().optional(),
    partition_key: z.string().optional(),
    publish_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "client_id": "clientId",
        "correspondent_id": "correspondentId",
        "event_type": "eventType",
        "message_id": "messageId",
        "partition_key": "partitionKey",
        "publish_time": "publishTime",
    });
});
/** @internal */
export const EventMessage$outboundSchema = z.object({
    accountId: z.string().optional(),
    clientId: z.string().optional(),
    correspondentId: z.string().optional(),
    data: z.nullable(z.record(z.any())).optional(),
    eventType: z.string().optional(),
    messageId: z.string().optional(),
    name: z.string().optional(),
    partitionKey: z.string().optional(),
    publishTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        clientId: "client_id",
        correspondentId: "correspondent_id",
        eventType: "event_type",
        messageId: "message_id",
        partitionKey: "partition_key",
        publishTime: "publish_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventMessage$;
(function (EventMessage$) {
    /** @deprecated use `EventMessage$inboundSchema` instead. */
    EventMessage$.inboundSchema = EventMessage$inboundSchema;
    /** @deprecated use `EventMessage$outboundSchema` instead. */
    EventMessage$.outboundSchema = EventMessage$outboundSchema;
})(EventMessage$ || (EventMessage$ = {}));
export function eventMessageToJSON(eventMessage) {
    return JSON.stringify(EventMessage$outboundSchema.parse(eventMessage));
}
export function eventMessageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventMessage' from JSON`);
}
//# sourceMappingURL=eventmessage.js.map