/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const EffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EffectiveDate$;
(function (EffectiveDate$) {
    /** @deprecated use `EffectiveDate$inboundSchema` instead. */
    EffectiveDate$.inboundSchema = EffectiveDate$inboundSchema;
    /** @deprecated use `EffectiveDate$outboundSchema` instead. */
    EffectiveDate$.outboundSchema = EffectiveDate$outboundSchema;
})(EffectiveDate$ || (EffectiveDate$ = {}));
export function effectiveDateToJSON(effectiveDate) {
    return JSON.stringify(EffectiveDate$outboundSchema.parse(effectiveDate));
}
export function effectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EffectiveDate' from JSON`);
}
/** @internal */
export const LargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => EffectiveDate$inboundSchema))
        .optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const LargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => EffectiveDate$outboundSchema))
        .optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LargeTrader$;
(function (LargeTrader$) {
    /** @deprecated use `LargeTrader$inboundSchema` instead. */
    LargeTrader$.inboundSchema = LargeTrader$inboundSchema;
    /** @deprecated use `LargeTrader$outboundSchema` instead. */
    LargeTrader$.outboundSchema = LargeTrader$outboundSchema;
})(LargeTrader$ || (LargeTrader$ = {}));
export function largeTraderToJSON(largeTrader) {
    return JSON.stringify(LargeTrader$outboundSchema.parse(largeTrader));
}
export function largeTraderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LargeTrader$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LargeTrader' from JSON`);
}
//# sourceMappingURL=largetrader.js.map