/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
/** @internal */
export const Any$inboundSchema = collectExtraKeys$(z.object({
    "@type": z.string().optional(),
}).catchall(z.any()), "additionalProperties", true).transform((v) => {
    return remap$(v, {
        "@type": "atType",
    });
});
/** @internal */
export const Any$outboundSchema = z
    .object({
    atType: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            atType: "@type",
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Any$;
(function (Any$) {
    /** @deprecated use `Any$inboundSchema` instead. */
    Any$.inboundSchema = Any$inboundSchema;
    /** @deprecated use `Any$outboundSchema` instead. */
    Any$.outboundSchema = Any$outboundSchema;
})(Any$ || (Any$ = {}));
export function anyToJSON(any) {
    return JSON.stringify(Any$outboundSchema.parse(any));
}
export function anyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Any$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Any' from JSON`);
}
//# sourceMappingURL=any.js.map