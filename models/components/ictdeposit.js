/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The name of the program the ICT deposit is associated with
 */
export var IctDepositProgram;
(function (IctDepositProgram) {
    IctDepositProgram["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    IctDepositProgram["BrokerPartner"] = "BROKER_PARTNER";
    IctDepositProgram["DepositOnly"] = "DEPOSIT_ONLY";
    IctDepositProgram["BankingPartner"] = "BANKING_PARTNER";
    IctDepositProgram["MoneyTransmitter"] = "MONEY_TRANSMITTER";
    IctDepositProgram["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    IctDepositProgram["DigitalPartner"] = "DIGITAL_PARTNER";
})(IctDepositProgram || (IctDepositProgram = {}));
/**
 * The type of retirement contribution.
 */
export var IctDepositType;
(function (IctDepositType) {
    IctDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    IctDepositType["Regular"] = "REGULAR";
    IctDepositType["Employee"] = "EMPLOYEE";
    IctDepositType["Employer"] = "EMPLOYER";
    IctDepositType["Recharacterization"] = "RECHARACTERIZATION";
    IctDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    IctDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    IctDepositType["Transfer"] = "TRANSFER";
    IctDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    IctDepositType["Conversion"] = "CONVERSION";
    IctDepositType["Repayment"] = "REPAYMENT";
    IctDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(IctDepositType || (IctDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var IctDepositStateState;
(function (IctDepositStateState) {
    IctDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctDepositStateState["Processing"] = "PROCESSING";
    IctDepositStateState["PendingReview"] = "PENDING_REVIEW";
    IctDepositStateState["Posted"] = "POSTED";
    IctDepositStateState["Completed"] = "COMPLETED";
    IctDepositStateState["Rejected"] = "REJECTED";
    IctDepositStateState["Canceled"] = "CANCELED";
    IctDepositStateState["Returned"] = "RETURNED";
    IctDepositStateState["Postponed"] = "POSTPONED";
})(IctDepositStateState || (IctDepositStateState = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var IctDepositTransferStateState;
(function (IctDepositTransferStateState) {
    IctDepositTransferStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctDepositTransferStateState["Processing"] = "PROCESSING";
    IctDepositTransferStateState["PendingReview"] = "PENDING_REVIEW";
    IctDepositTransferStateState["Posted"] = "POSTED";
    IctDepositTransferStateState["Completed"] = "COMPLETED";
    IctDepositTransferStateState["Rejected"] = "REJECTED";
    IctDepositTransferStateState["Canceled"] = "CANCELED";
    IctDepositTransferStateState["Returned"] = "RETURNED";
    IctDepositTransferStateState["Postponed"] = "POSTPONED";
})(IctDepositTransferStateState || (IctDepositTransferStateState = {}));
/** @internal */
export const IctDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositAmount$;
(function (IctDepositAmount$) {
    /** @deprecated use `IctDepositAmount$inboundSchema` instead. */
    IctDepositAmount$.inboundSchema = IctDepositAmount$inboundSchema;
    /** @deprecated use `IctDepositAmount$outboundSchema` instead. */
    IctDepositAmount$.outboundSchema = IctDepositAmount$outboundSchema;
})(IctDepositAmount$ || (IctDepositAmount$ = {}));
export function ictDepositAmountToJSON(ictDepositAmount) {
    return JSON.stringify(IctDepositAmount$outboundSchema.parse(ictDepositAmount));
}
export function ictDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositAmount' from JSON`);
}
/** @internal */
export const IctDepositProgram$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositProgram),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctDepositProgram$outboundSchema = z.union([
    z.nativeEnum(IctDepositProgram),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositProgram$;
(function (IctDepositProgram$) {
    /** @deprecated use `IctDepositProgram$inboundSchema` instead. */
    IctDepositProgram$.inboundSchema = IctDepositProgram$inboundSchema;
    /** @deprecated use `IctDepositProgram$outboundSchema` instead. */
    IctDepositProgram$.outboundSchema = IctDepositProgram$outboundSchema;
})(IctDepositProgram$ || (IctDepositProgram$ = {}));
/** @internal */
export const IctDepositType$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctDepositType$outboundSchema = z.union([
    z.nativeEnum(IctDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositType$;
(function (IctDepositType$) {
    /** @deprecated use `IctDepositType$inboundSchema` instead. */
    IctDepositType$.inboundSchema = IctDepositType$inboundSchema;
    /** @deprecated use `IctDepositType$outboundSchema` instead. */
    IctDepositType$.outboundSchema = IctDepositType$outboundSchema;
})(IctDepositType$ || (IctDepositType$ = {}));
/** @internal */
export const IctDepositRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: IctDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const IctDepositRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: IctDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositRetirementContribution$;
(function (IctDepositRetirementContribution$) {
    /** @deprecated use `IctDepositRetirementContribution$inboundSchema` instead. */
    IctDepositRetirementContribution$.inboundSchema = IctDepositRetirementContribution$inboundSchema;
    /** @deprecated use `IctDepositRetirementContribution$outboundSchema` instead. */
    IctDepositRetirementContribution$.outboundSchema = IctDepositRetirementContribution$outboundSchema;
})(IctDepositRetirementContribution$ || (IctDepositRetirementContribution$ = {}));
export function ictDepositRetirementContributionToJSON(ictDepositRetirementContribution) {
    return JSON.stringify(IctDepositRetirementContribution$outboundSchema.parse(ictDepositRetirementContribution));
}
export function ictDepositRetirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositRetirementContribution' from JSON`);
}
/** @internal */
export const IctDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctDepositStateState$outboundSchema = z.union([
    z.nativeEnum(IctDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositStateState$;
(function (IctDepositStateState$) {
    /** @deprecated use `IctDepositStateState$inboundSchema` instead. */
    IctDepositStateState$.inboundSchema = IctDepositStateState$inboundSchema;
    /** @deprecated use `IctDepositStateState$outboundSchema` instead. */
    IctDepositStateState$.outboundSchema = IctDepositStateState$outboundSchema;
})(IctDepositStateState$ || (IctDepositStateState$ = {}));
/** @internal */
export const IctDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const IctDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositState$;
(function (IctDepositState$) {
    /** @deprecated use `IctDepositState$inboundSchema` instead. */
    IctDepositState$.inboundSchema = IctDepositState$inboundSchema;
    /** @deprecated use `IctDepositState$outboundSchema` instead. */
    IctDepositState$.outboundSchema = IctDepositState$outboundSchema;
})(IctDepositState$ || (IctDepositState$ = {}));
export function ictDepositStateToJSON(ictDepositState) {
    return JSON.stringify(IctDepositState$outboundSchema.parse(ictDepositState));
}
export function ictDepositStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositState' from JSON`);
}
/** @internal */
export const IctDepositTransferStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositTransferStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctDepositTransferStateState$outboundSchema = z.union([
    z.nativeEnum(IctDepositTransferStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositTransferStateState$;
(function (IctDepositTransferStateState$) {
    /** @deprecated use `IctDepositTransferStateState$inboundSchema` instead. */
    IctDepositTransferStateState$.inboundSchema = IctDepositTransferStateState$inboundSchema;
    /** @deprecated use `IctDepositTransferStateState$outboundSchema` instead. */
    IctDepositTransferStateState$.outboundSchema = IctDepositTransferStateState$outboundSchema;
})(IctDepositTransferStateState$ || (IctDepositTransferStateState$ = {}));
/** @internal */
export const TransferState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctDepositTransferStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const TransferState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctDepositTransferStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferState$;
(function (TransferState$) {
    /** @deprecated use `TransferState$inboundSchema` instead. */
    TransferState$.inboundSchema = TransferState$inboundSchema;
    /** @deprecated use `TransferState$outboundSchema` instead. */
    TransferState$.outboundSchema = TransferState$outboundSchema;
})(TransferState$ || (TransferState$ = {}));
export function transferStateToJSON(transferState) {
    return JSON.stringify(TransferState$outboundSchema.parse(transferState));
}
export function transferStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferState' from JSON`);
}
/** @internal */
export const IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositTravelRuleEntityOriginatingPartyAddress$;
(function (IctDepositTravelRuleEntityOriginatingPartyAddress$) {
    /** @deprecated use `IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema` instead. */
    IctDepositTravelRuleEntityOriginatingPartyAddress$.inboundSchema = IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema` instead. */
    IctDepositTravelRuleEntityOriginatingPartyAddress$.outboundSchema = IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema;
})(IctDepositTravelRuleEntityOriginatingPartyAddress$ || (IctDepositTravelRuleEntityOriginatingPartyAddress$ = {}));
export function ictDepositTravelRuleEntityOriginatingPartyAddressToJSON(ictDepositTravelRuleEntityOriginatingPartyAddress) {
    return JSON.stringify(IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema.parse(ictDepositTravelRuleEntityOriginatingPartyAddress));
}
export function ictDepositTravelRuleEntityOriginatingPartyAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositTravelRuleEntityOriginatingPartyAddress' from JSON`);
}
/** @internal */
export const EntityOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema)).optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
export const EntityOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema)).optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityOriginatingParty$;
(function (EntityOriginatingParty$) {
    /** @deprecated use `EntityOriginatingParty$inboundSchema` instead. */
    EntityOriginatingParty$.inboundSchema = EntityOriginatingParty$inboundSchema;
    /** @deprecated use `EntityOriginatingParty$outboundSchema` instead. */
    EntityOriginatingParty$.outboundSchema = EntityOriginatingParty$outboundSchema;
})(EntityOriginatingParty$ || (EntityOriginatingParty$ = {}));
export function entityOriginatingPartyToJSON(entityOriginatingParty) {
    return JSON.stringify(EntityOriginatingParty$outboundSchema.parse(entityOriginatingParty));
}
export function entityOriginatingPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntityOriginatingParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntityOriginatingParty' from JSON`);
}
/** @internal */
export const IctDepositAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctDepositAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositAddress$;
(function (IctDepositAddress$) {
    /** @deprecated use `IctDepositAddress$inboundSchema` instead. */
    IctDepositAddress$.inboundSchema = IctDepositAddress$inboundSchema;
    /** @deprecated use `IctDepositAddress$outboundSchema` instead. */
    IctDepositAddress$.outboundSchema = IctDepositAddress$outboundSchema;
})(IctDepositAddress$ || (IctDepositAddress$ = {}));
export function ictDepositAddressToJSON(ictDepositAddress) {
    return JSON.stringify(IctDepositAddress$outboundSchema.parse(ictDepositAddress));
}
export function ictDepositAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositAddress' from JSON`);
}
/** @internal */
export const EntityRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositAddress$inboundSchema)).optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
export const EntityRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositAddress$outboundSchema))
        .optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityRecipientParty$;
(function (EntityRecipientParty$) {
    /** @deprecated use `EntityRecipientParty$inboundSchema` instead. */
    EntityRecipientParty$.inboundSchema = EntityRecipientParty$inboundSchema;
    /** @deprecated use `EntityRecipientParty$outboundSchema` instead. */
    EntityRecipientParty$.outboundSchema = EntityRecipientParty$outboundSchema;
})(EntityRecipientParty$ || (EntityRecipientParty$ = {}));
export function entityRecipientPartyToJSON(entityRecipientParty) {
    return JSON.stringify(EntityRecipientParty$outboundSchema.parse(entityRecipientParty));
}
export function entityRecipientPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntityRecipientParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntityRecipientParty' from JSON`);
}
/** @internal */
export const IctDepositTravelRuleAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctDepositTravelRuleAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositTravelRuleAddress$;
(function (IctDepositTravelRuleAddress$) {
    /** @deprecated use `IctDepositTravelRuleAddress$inboundSchema` instead. */
    IctDepositTravelRuleAddress$.inboundSchema = IctDepositTravelRuleAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleAddress$outboundSchema` instead. */
    IctDepositTravelRuleAddress$.outboundSchema = IctDepositTravelRuleAddress$outboundSchema;
})(IctDepositTravelRuleAddress$ || (IctDepositTravelRuleAddress$ = {}));
export function ictDepositTravelRuleAddressToJSON(ictDepositTravelRuleAddress) {
    return JSON.stringify(IctDepositTravelRuleAddress$outboundSchema.parse(ictDepositTravelRuleAddress));
}
export function ictDepositTravelRuleAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositTravelRuleAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositTravelRuleAddress' from JSON`);
}
/** @internal */
export const IndividualOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleAddress$inboundSchema))
        .optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
export const IndividualOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleAddress$outboundSchema))
        .optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IndividualOriginatingParty$;
(function (IndividualOriginatingParty$) {
    /** @deprecated use `IndividualOriginatingParty$inboundSchema` instead. */
    IndividualOriginatingParty$.inboundSchema = IndividualOriginatingParty$inboundSchema;
    /** @deprecated use `IndividualOriginatingParty$outboundSchema` instead. */
    IndividualOriginatingParty$.outboundSchema = IndividualOriginatingParty$outboundSchema;
})(IndividualOriginatingParty$ || (IndividualOriginatingParty$ = {}));
export function individualOriginatingPartyToJSON(individualOriginatingParty) {
    return JSON.stringify(IndividualOriginatingParty$outboundSchema.parse(individualOriginatingParty));
}
export function individualOriginatingPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IndividualOriginatingParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IndividualOriginatingParty' from JSON`);
}
/** @internal */
export const IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositTravelRuleIndividualRecipientPartyAddress$;
(function (IctDepositTravelRuleIndividualRecipientPartyAddress$) {
    /** @deprecated use `IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema` instead. */
    IctDepositTravelRuleIndividualRecipientPartyAddress$.inboundSchema = IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema` instead. */
    IctDepositTravelRuleIndividualRecipientPartyAddress$.outboundSchema = IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema;
})(IctDepositTravelRuleIndividualRecipientPartyAddress$ || (IctDepositTravelRuleIndividualRecipientPartyAddress$ = {}));
export function ictDepositTravelRuleIndividualRecipientPartyAddressToJSON(ictDepositTravelRuleIndividualRecipientPartyAddress) {
    return JSON.stringify(IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema.parse(ictDepositTravelRuleIndividualRecipientPartyAddress));
}
export function ictDepositTravelRuleIndividualRecipientPartyAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositTravelRuleIndividualRecipientPartyAddress' from JSON`);
}
/** @internal */
export const IndividualRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema)).optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
export const IndividualRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema)).optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IndividualRecipientParty$;
(function (IndividualRecipientParty$) {
    /** @deprecated use `IndividualRecipientParty$inboundSchema` instead. */
    IndividualRecipientParty$.inboundSchema = IndividualRecipientParty$inboundSchema;
    /** @deprecated use `IndividualRecipientParty$outboundSchema` instead. */
    IndividualRecipientParty$.outboundSchema = IndividualRecipientParty$outboundSchema;
})(IndividualRecipientParty$ || (IndividualRecipientParty$ = {}));
export function individualRecipientPartyToJSON(individualRecipientParty) {
    return JSON.stringify(IndividualRecipientParty$outboundSchema.parse(individualRecipientParty));
}
export function individualRecipientPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IndividualRecipientParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IndividualRecipientParty' from JSON`);
}
/** @internal */
export const OriginatingInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const OriginatingInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OriginatingInstitution$;
(function (OriginatingInstitution$) {
    /** @deprecated use `OriginatingInstitution$inboundSchema` instead. */
    OriginatingInstitution$.inboundSchema = OriginatingInstitution$inboundSchema;
    /** @deprecated use `OriginatingInstitution$outboundSchema` instead. */
    OriginatingInstitution$.outboundSchema = OriginatingInstitution$outboundSchema;
})(OriginatingInstitution$ || (OriginatingInstitution$ = {}));
export function originatingInstitutionToJSON(originatingInstitution) {
    return JSON.stringify(OriginatingInstitution$outboundSchema.parse(originatingInstitution));
}
export function originatingInstitutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OriginatingInstitution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OriginatingInstitution' from JSON`);
}
/** @internal */
export const RecipientInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const RecipientInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RecipientInstitution$;
(function (RecipientInstitution$) {
    /** @deprecated use `RecipientInstitution$inboundSchema` instead. */
    RecipientInstitution$.inboundSchema = RecipientInstitution$inboundSchema;
    /** @deprecated use `RecipientInstitution$outboundSchema` instead. */
    RecipientInstitution$.outboundSchema = RecipientInstitution$outboundSchema;
})(RecipientInstitution$ || (RecipientInstitution$ = {}));
export function recipientInstitutionToJSON(recipientInstitution) {
    return JSON.stringify(RecipientInstitution$outboundSchema.parse(recipientInstitution));
}
export function recipientInstitutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RecipientInstitution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RecipientInstitution' from JSON`);
}
/** @internal */
export const TravelRule$inboundSchema = z.object({
    entity_originating_party: z.nullable(z.lazy(() => EntityOriginatingParty$inboundSchema)).optional(),
    entity_recipient_party: z.nullable(z.lazy(() => EntityRecipientParty$inboundSchema)).optional(),
    individual_originating_party: z.nullable(z.lazy(() => IndividualOriginatingParty$inboundSchema)).optional(),
    individual_recipient_party: z.nullable(z.lazy(() => IndividualRecipientParty$inboundSchema)).optional(),
    originating_institution: z.nullable(z.lazy(() => OriginatingInstitution$inboundSchema)).optional(),
    recipient_institution: z.nullable(z.lazy(() => RecipientInstitution$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "entity_originating_party": "entityOriginatingParty",
        "entity_recipient_party": "entityRecipientParty",
        "individual_originating_party": "individualOriginatingParty",
        "individual_recipient_party": "individualRecipientParty",
        "originating_institution": "originatingInstitution",
        "recipient_institution": "recipientInstitution",
    });
});
/** @internal */
export const TravelRule$outboundSchema = z.object({
    entityOriginatingParty: z.nullable(z.lazy(() => EntityOriginatingParty$outboundSchema)).optional(),
    entityRecipientParty: z.nullable(z.lazy(() => EntityRecipientParty$outboundSchema)).optional(),
    individualOriginatingParty: z.nullable(z.lazy(() => IndividualOriginatingParty$outboundSchema)).optional(),
    individualRecipientParty: z.nullable(z.lazy(() => IndividualRecipientParty$outboundSchema)).optional(),
    originatingInstitution: z.nullable(z.lazy(() => OriginatingInstitution$outboundSchema)).optional(),
    recipientInstitution: z.nullable(z.lazy(() => RecipientInstitution$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        entityOriginatingParty: "entity_originating_party",
        entityRecipientParty: "entity_recipient_party",
        individualOriginatingParty: "individual_originating_party",
        individualRecipientParty: "individual_recipient_party",
        originatingInstitution: "originating_institution",
        recipientInstitution: "recipient_institution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TravelRule$;
(function (TravelRule$) {
    /** @deprecated use `TravelRule$inboundSchema` instead. */
    TravelRule$.inboundSchema = TravelRule$inboundSchema;
    /** @deprecated use `TravelRule$outboundSchema` instead. */
    TravelRule$.outboundSchema = TravelRule$outboundSchema;
})(TravelRule$ || (TravelRule$ = {}));
export function travelRuleToJSON(travelRule) {
    return JSON.stringify(TravelRule$outboundSchema.parse(travelRule));
}
export function travelRuleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TravelRule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TravelRule' from JSON`);
}
/** @internal */
export const IctDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctDepositAmount$inboundSchema)).optional(),
    client_transfer_id: z.string().optional(),
    name: z.string().optional(),
    program: IctDepositProgram$inboundSchema.optional(),
    retirement_contribution: z.nullable(z.lazy(() => IctDepositRetirementContribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => IctDepositState$inboundSchema)).optional(),
    transfer_state: z.nullable(z.lazy(() => TransferState$inboundSchema))
        .optional(),
    travel_rule: z.nullable(z.lazy(() => TravelRule$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "retirement_contribution": "retirementContribution",
        "transfer_state": "transferState",
        "travel_rule": "travelRule",
    });
});
/** @internal */
export const IctDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctDepositAmount$outboundSchema)).optional(),
    clientTransferId: z.string().optional(),
    name: z.string().optional(),
    program: IctDepositProgram$outboundSchema.optional(),
    retirementContribution: z.nullable(z.lazy(() => IctDepositRetirementContribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => IctDepositState$outboundSchema)).optional(),
    transferState: z.nullable(z.lazy(() => TransferState$outboundSchema))
        .optional(),
    travelRule: z.nullable(z.lazy(() => TravelRule$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        retirementContribution: "retirement_contribution",
        transferState: "transfer_state",
        travelRule: "travel_rule",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDeposit$;
(function (IctDeposit$) {
    /** @deprecated use `IctDeposit$inboundSchema` instead. */
    IctDeposit$.inboundSchema = IctDeposit$inboundSchema;
    /** @deprecated use `IctDeposit$outboundSchema` instead. */
    IctDeposit$.outboundSchema = IctDeposit$outboundSchema;
})(IctDeposit$ || (IctDeposit$ = {}));
export function ictDepositToJSON(ictDeposit) {
    return JSON.stringify(IctDeposit$outboundSchema.parse(ictDeposit));
}
export function ictDepositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDeposit' from JSON`);
}
//# sourceMappingURL=ictdeposit.js.map