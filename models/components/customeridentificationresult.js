/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Whether or not the customer birth date was verified
 */
export var BirthDateVerified;
(function (BirthDateVerified) {
    BirthDateVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    BirthDateVerified["NotInScope"] = "NOT_IN_SCOPE";
    BirthDateVerified["Verified"] = "VERIFIED";
    BirthDateVerified["Unverified"] = "UNVERIFIED";
    BirthDateVerified["Inconclusive"] = "INCONCLUSIVE";
})(BirthDateVerified || (BirthDateVerified = {}));
/**
 * Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary
 */
export var DocumentAuthenticityVerified;
(function (DocumentAuthenticityVerified) {
    DocumentAuthenticityVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    DocumentAuthenticityVerified["NotInScope"] = "NOT_IN_SCOPE";
    DocumentAuthenticityVerified["Verified"] = "VERIFIED";
    DocumentAuthenticityVerified["Unverified"] = "UNVERIFIED";
    DocumentAuthenticityVerified["Inconclusive"] = "INCONCLUSIVE";
})(DocumentAuthenticityVerified || (DocumentAuthenticityVerified = {}));
/**
 * Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED
 */
export var DocumentExpiryStatus;
(function (DocumentExpiryStatus) {
    DocumentExpiryStatus["ExpirationStateUnspecified"] = "EXPIRATION_STATE_UNSPECIFIED";
    DocumentExpiryStatus["Unexpired"] = "UNEXPIRED";
    DocumentExpiryStatus["Expired"] = "EXPIRED";
    DocumentExpiryStatus["NotApplicable"] = "NOT_APPLICABLE";
})(DocumentExpiryStatus || (DocumentExpiryStatus = {}));
/**
 * Whether or not the customer email was verified
 */
export var EmailVerified;
(function (EmailVerified) {
    EmailVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    EmailVerified["NotInScope"] = "NOT_IN_SCOPE";
    EmailVerified["Verified"] = "VERIFIED";
    EmailVerified["Unverified"] = "UNVERIFIED";
    EmailVerified["Inconclusive"] = "INCONCLUSIVE";
})(EmailVerified || (EmailVerified = {}));
/**
 * Whether or not the customer identification number was verified
 */
export var IdentificationNumberVerified;
(function (IdentificationNumberVerified) {
    IdentificationNumberVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    IdentificationNumberVerified["NotInScope"] = "NOT_IN_SCOPE";
    IdentificationNumberVerified["Verified"] = "VERIFIED";
    IdentificationNumberVerified["Unverified"] = "UNVERIFIED";
    IdentificationNumberVerified["Inconclusive"] = "INCONCLUSIVE";
})(IdentificationNumberVerified || (IdentificationNumberVerified = {}));
export var IdentityVerificationTypes;
(function (IdentityVerificationTypes) {
    IdentityVerificationTypes["IdentityVerificationTypeUnspecified"] = "IDENTITY_VERIFICATION_TYPE_UNSPECIFIED";
    IdentityVerificationTypes["Database"] = "DATABASE";
    IdentityVerificationTypes["Documentary"] = "DOCUMENTARY";
    IdentityVerificationTypes["Selfie"] = "SELFIE";
})(IdentityVerificationTypes || (IdentityVerificationTypes = {}));
/**
 * Whether or not the customer legal address was verified
 */
export var LegalAddressVerified;
(function (LegalAddressVerified) {
    LegalAddressVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    LegalAddressVerified["NotInScope"] = "NOT_IN_SCOPE";
    LegalAddressVerified["Verified"] = "VERIFIED";
    LegalAddressVerified["Unverified"] = "UNVERIFIED";
    LegalAddressVerified["Inconclusive"] = "INCONCLUSIVE";
})(LegalAddressVerified || (LegalAddressVerified = {}));
/**
 * Presents verified results e.g. if name or birth date have been verified
 */
export var NameVerified;
(function (NameVerified) {
    NameVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    NameVerified["NotInScope"] = "NOT_IN_SCOPE";
    NameVerified["Verified"] = "VERIFIED";
    NameVerified["Unverified"] = "UNVERIFIED";
    NameVerified["Inconclusive"] = "INCONCLUSIVE";
})(NameVerified || (NameVerified = {}));
/**
 * Whether or not the customer phone number was verified
 */
export var PhoneNumberVerified;
(function (PhoneNumberVerified) {
    PhoneNumberVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    PhoneNumberVerified["NotInScope"] = "NOT_IN_SCOPE";
    PhoneNumberVerified["Verified"] = "VERIFIED";
    PhoneNumberVerified["Unverified"] = "UNVERIFIED";
    PhoneNumberVerified["Inconclusive"] = "INCONCLUSIVE";
})(PhoneNumberVerified || (PhoneNumberVerified = {}));
/**
 * Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie
 */
export var SelfieVerified;
(function (SelfieVerified) {
    SelfieVerified["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    SelfieVerified["NotInScope"] = "NOT_IN_SCOPE";
    SelfieVerified["Verified"] = "VERIFIED";
    SelfieVerified["Unverified"] = "UNVERIFIED";
    SelfieVerified["Inconclusive"] = "INCONCLUSIVE";
})(SelfieVerified || (SelfieVerified = {}));
/** @internal */
export const BirthDateVerified$inboundSchema = z
    .union([
    z.nativeEnum(BirthDateVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BirthDateVerified$outboundSchema = z.union([
    z.nativeEnum(BirthDateVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BirthDateVerified$;
(function (BirthDateVerified$) {
    /** @deprecated use `BirthDateVerified$inboundSchema` instead. */
    BirthDateVerified$.inboundSchema = BirthDateVerified$inboundSchema;
    /** @deprecated use `BirthDateVerified$outboundSchema` instead. */
    BirthDateVerified$.outboundSchema = BirthDateVerified$outboundSchema;
})(BirthDateVerified$ || (BirthDateVerified$ = {}));
/** @internal */
export const DocumentAuthenticityVerified$inboundSchema = z
    .union([
    z.nativeEnum(DocumentAuthenticityVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const DocumentAuthenticityVerified$outboundSchema = z.union([
    z.nativeEnum(DocumentAuthenticityVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DocumentAuthenticityVerified$;
(function (DocumentAuthenticityVerified$) {
    /** @deprecated use `DocumentAuthenticityVerified$inboundSchema` instead. */
    DocumentAuthenticityVerified$.inboundSchema = DocumentAuthenticityVerified$inboundSchema;
    /** @deprecated use `DocumentAuthenticityVerified$outboundSchema` instead. */
    DocumentAuthenticityVerified$.outboundSchema = DocumentAuthenticityVerified$outboundSchema;
})(DocumentAuthenticityVerified$ || (DocumentAuthenticityVerified$ = {}));
/** @internal */
export const DocumentExpiryStatus$inboundSchema = z
    .union([
    z.nativeEnum(DocumentExpiryStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const DocumentExpiryStatus$outboundSchema = z.union([
    z.nativeEnum(DocumentExpiryStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DocumentExpiryStatus$;
(function (DocumentExpiryStatus$) {
    /** @deprecated use `DocumentExpiryStatus$inboundSchema` instead. */
    DocumentExpiryStatus$.inboundSchema = DocumentExpiryStatus$inboundSchema;
    /** @deprecated use `DocumentExpiryStatus$outboundSchema` instead. */
    DocumentExpiryStatus$.outboundSchema = DocumentExpiryStatus$outboundSchema;
})(DocumentExpiryStatus$ || (DocumentExpiryStatus$ = {}));
/** @internal */
export const EmailVerified$inboundSchema = z
    .union([
    z.nativeEnum(EmailVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EmailVerified$outboundSchema = z.union([
    z.nativeEnum(EmailVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailVerified$;
(function (EmailVerified$) {
    /** @deprecated use `EmailVerified$inboundSchema` instead. */
    EmailVerified$.inboundSchema = EmailVerified$inboundSchema;
    /** @deprecated use `EmailVerified$outboundSchema` instead. */
    EmailVerified$.outboundSchema = EmailVerified$outboundSchema;
})(EmailVerified$ || (EmailVerified$ = {}));
/** @internal */
export const IdentificationNumberVerified$inboundSchema = z
    .union([
    z.nativeEnum(IdentificationNumberVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentificationNumberVerified$outboundSchema = z.union([
    z.nativeEnum(IdentificationNumberVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentificationNumberVerified$;
(function (IdentificationNumberVerified$) {
    /** @deprecated use `IdentificationNumberVerified$inboundSchema` instead. */
    IdentificationNumberVerified$.inboundSchema = IdentificationNumberVerified$inboundSchema;
    /** @deprecated use `IdentificationNumberVerified$outboundSchema` instead. */
    IdentificationNumberVerified$.outboundSchema = IdentificationNumberVerified$outboundSchema;
})(IdentificationNumberVerified$ || (IdentificationNumberVerified$ = {}));
/** @internal */
export const IdentityVerificationTypes$inboundSchema = z
    .union([
    z.nativeEnum(IdentityVerificationTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentityVerificationTypes$outboundSchema = z.union([
    z.nativeEnum(IdentityVerificationTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityVerificationTypes$;
(function (IdentityVerificationTypes$) {
    /** @deprecated use `IdentityVerificationTypes$inboundSchema` instead. */
    IdentityVerificationTypes$.inboundSchema = IdentityVerificationTypes$inboundSchema;
    /** @deprecated use `IdentityVerificationTypes$outboundSchema` instead. */
    IdentityVerificationTypes$.outboundSchema = IdentityVerificationTypes$outboundSchema;
})(IdentityVerificationTypes$ || (IdentityVerificationTypes$ = {}));
/** @internal */
export const LegalAddressVerified$inboundSchema = z
    .union([
    z.nativeEnum(LegalAddressVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalAddressVerified$outboundSchema = z.union([
    z.nativeEnum(LegalAddressVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalAddressVerified$;
(function (LegalAddressVerified$) {
    /** @deprecated use `LegalAddressVerified$inboundSchema` instead. */
    LegalAddressVerified$.inboundSchema = LegalAddressVerified$inboundSchema;
    /** @deprecated use `LegalAddressVerified$outboundSchema` instead. */
    LegalAddressVerified$.outboundSchema = LegalAddressVerified$outboundSchema;
})(LegalAddressVerified$ || (LegalAddressVerified$ = {}));
/** @internal */
export const NameVerified$inboundSchema = z
    .union([
    z.nativeEnum(NameVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const NameVerified$outboundSchema = z.union([
    z.nativeEnum(NameVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NameVerified$;
(function (NameVerified$) {
    /** @deprecated use `NameVerified$inboundSchema` instead. */
    NameVerified$.inboundSchema = NameVerified$inboundSchema;
    /** @deprecated use `NameVerified$outboundSchema` instead. */
    NameVerified$.outboundSchema = NameVerified$outboundSchema;
})(NameVerified$ || (NameVerified$ = {}));
/** @internal */
export const PhoneNumberVerified$inboundSchema = z
    .union([
    z.nativeEnum(PhoneNumberVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PhoneNumberVerified$outboundSchema = z.union([
    z.nativeEnum(PhoneNumberVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PhoneNumberVerified$;
(function (PhoneNumberVerified$) {
    /** @deprecated use `PhoneNumberVerified$inboundSchema` instead. */
    PhoneNumberVerified$.inboundSchema = PhoneNumberVerified$inboundSchema;
    /** @deprecated use `PhoneNumberVerified$outboundSchema` instead. */
    PhoneNumberVerified$.outboundSchema = PhoneNumberVerified$outboundSchema;
})(PhoneNumberVerified$ || (PhoneNumberVerified$ = {}));
/** @internal */
export const SelfieVerified$inboundSchema = z
    .union([
    z.nativeEnum(SelfieVerified),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SelfieVerified$outboundSchema = z.union([
    z.nativeEnum(SelfieVerified),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelfieVerified$;
(function (SelfieVerified$) {
    /** @deprecated use `SelfieVerified$inboundSchema` instead. */
    SelfieVerified$.inboundSchema = SelfieVerified$inboundSchema;
    /** @deprecated use `SelfieVerified$outboundSchema` instead. */
    SelfieVerified$.outboundSchema = SelfieVerified$outboundSchema;
})(SelfieVerified$ || (SelfieVerified$ = {}));
/** @internal */
export const CustomerIdentificationResult$inboundSchema = z.object({
    birth_date_verified: BirthDateVerified$inboundSchema.optional(),
    completed: z.boolean().optional(),
    document_authenticity_verified: DocumentAuthenticityVerified$inboundSchema
        .optional(),
    document_expiry_status: DocumentExpiryStatus$inboundSchema.optional(),
    document_verification_ids: z.array(z.string()).optional(),
    documentary_session_uri: z.string().optional(),
    email_verified: EmailVerified$inboundSchema.optional(),
    expired: z.boolean().optional(),
    external_vendor: z.string().optional(),
    external_vendor_id: z.string().optional(),
    identification_number_verified: IdentificationNumberVerified$inboundSchema
        .optional(),
    identity_verification_types: z.array(IdentityVerificationTypes$inboundSchema)
        .optional(),
    legal_address_verified: LegalAddressVerified$inboundSchema.optional(),
    name_verified: NameVerified$inboundSchema.optional(),
    phone_number_verified: PhoneNumberVerified$inboundSchema.optional(),
    raw_vendor_result: z.string().optional(),
    selfie_verified: SelfieVerified$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "birth_date_verified": "birthDateVerified",
        "document_authenticity_verified": "documentAuthenticityVerified",
        "document_expiry_status": "documentExpiryStatus",
        "document_verification_ids": "documentVerificationIds",
        "documentary_session_uri": "documentarySessionUri",
        "email_verified": "emailVerified",
        "external_vendor": "externalVendor",
        "external_vendor_id": "externalVendorId",
        "identification_number_verified": "identificationNumberVerified",
        "identity_verification_types": "identityVerificationTypes",
        "legal_address_verified": "legalAddressVerified",
        "name_verified": "nameVerified",
        "phone_number_verified": "phoneNumberVerified",
        "raw_vendor_result": "rawVendorResult",
        "selfie_verified": "selfieVerified",
    });
});
/** @internal */
export const CustomerIdentificationResult$outboundSchema = z.object({
    birthDateVerified: BirthDateVerified$outboundSchema.optional(),
    completed: z.boolean().optional(),
    documentAuthenticityVerified: DocumentAuthenticityVerified$outboundSchema
        .optional(),
    documentExpiryStatus: DocumentExpiryStatus$outboundSchema.optional(),
    documentVerificationIds: z.array(z.string()).optional(),
    documentarySessionUri: z.string().optional(),
    emailVerified: EmailVerified$outboundSchema.optional(),
    expired: z.boolean().optional(),
    externalVendor: z.string().optional(),
    externalVendorId: z.string().optional(),
    identificationNumberVerified: IdentificationNumberVerified$outboundSchema
        .optional(),
    identityVerificationTypes: z.array(IdentityVerificationTypes$outboundSchema)
        .optional(),
    legalAddressVerified: LegalAddressVerified$outboundSchema.optional(),
    nameVerified: NameVerified$outboundSchema.optional(),
    phoneNumberVerified: PhoneNumberVerified$outboundSchema.optional(),
    rawVendorResult: z.string().optional(),
    selfieVerified: SelfieVerified$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        birthDateVerified: "birth_date_verified",
        documentAuthenticityVerified: "document_authenticity_verified",
        documentExpiryStatus: "document_expiry_status",
        documentVerificationIds: "document_verification_ids",
        documentarySessionUri: "documentary_session_uri",
        emailVerified: "email_verified",
        externalVendor: "external_vendor",
        externalVendorId: "external_vendor_id",
        identificationNumberVerified: "identification_number_verified",
        identityVerificationTypes: "identity_verification_types",
        legalAddressVerified: "legal_address_verified",
        nameVerified: "name_verified",
        phoneNumberVerified: "phone_number_verified",
        rawVendorResult: "raw_vendor_result",
        selfieVerified: "selfie_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationResult$;
(function (CustomerIdentificationResult$) {
    /** @deprecated use `CustomerIdentificationResult$inboundSchema` instead. */
    CustomerIdentificationResult$.inboundSchema = CustomerIdentificationResult$inboundSchema;
    /** @deprecated use `CustomerIdentificationResult$outboundSchema` instead. */
    CustomerIdentificationResult$.outboundSchema = CustomerIdentificationResult$outboundSchema;
})(CustomerIdentificationResult$ || (CustomerIdentificationResult$ = {}));
export function customerIdentificationResultToJSON(customerIdentificationResult) {
    return JSON.stringify(CustomerIdentificationResult$outboundSchema.parse(customerIdentificationResult));
}
export function customerIdentificationResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentificationResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationResult' from JSON`);
}
//# sourceMappingURL=customeridentificationresult.js.map