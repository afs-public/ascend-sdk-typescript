/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AccountTaxProfileCreate$inboundSchema, AccountTaxProfileCreate$outboundSchema, } from "./accounttaxprofilecreate.js";
import { IdentifierCreate$inboundSchema, IdentifierCreate$outboundSchema, } from "./identifiercreate.js";
import { InterestedPartyCreate$inboundSchema, InterestedPartyCreate$outboundSchema, } from "./interestedpartycreate.js";
import { InvestmentProfileCreate$inboundSchema, InvestmentProfileCreate$outboundSchema, } from "./investmentprofilecreate.js";
import { PartyRequestCreate$inboundSchema, PartyRequestCreate$outboundSchema, } from "./partyrequestcreate.js";
import { TrustedContactCreate$inboundSchema, TrustedContactCreate$outboundSchema, } from "./trustedcontactcreate.js";
/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
export var CatAccountHolderType;
(function (CatAccountHolderType) {
    CatAccountHolderType["CatAccountHolderTypeUnspecified"] = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED";
    CatAccountHolderType["AInstitutionalCustomer"] = "A_INSTITUTIONAL_CUSTOMER";
    CatAccountHolderType["EEmployeeAccount"] = "E_EMPLOYEE_ACCOUNT";
    CatAccountHolderType["FForeign"] = "F_FOREIGN";
    CatAccountHolderType["IIndividual"] = "I_INDIVIDUAL";
    CatAccountHolderType["OMarketMaking"] = "O_MARKET_MAKING";
    CatAccountHolderType["VAgencyAveragePriceAccount"] = "V_AGENCY_AVERAGE_PRICE_ACCOUNT";
    CatAccountHolderType["POtherProprietary"] = "P_OTHER_PROPRIETARY";
    CatAccountHolderType["XErrorAccount"] = "X_ERROR_ACCOUNT";
})(CatAccountHolderType || (CatAccountHolderType = {}));
/** @internal */
export const CatAccountHolderType$inboundSchema = z
    .union([
    z.nativeEnum(CatAccountHolderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CatAccountHolderType$outboundSchema = z.union([
    z.nativeEnum(CatAccountHolderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CatAccountHolderType$;
(function (CatAccountHolderType$) {
    /** @deprecated use `CatAccountHolderType$inboundSchema` instead. */
    CatAccountHolderType$.inboundSchema = CatAccountHolderType$inboundSchema;
    /** @deprecated use `CatAccountHolderType$outboundSchema` instead. */
    CatAccountHolderType$.outboundSchema = CatAccountHolderType$outboundSchema;
})(CatAccountHolderType$ || (CatAccountHolderType$ = {}));
/** @internal */
export const AccountRequestCreate$inboundSchema = z.object({
    accepts_issuer_direct_communication: z.boolean().optional(),
    account_group_id: z.string(),
    advised: z.boolean().optional(),
    cat_account_holder_type: CatAccountHolderType$inboundSchema.optional(),
    correspondent_id: z.string(),
    identifiers: z.array(IdentifierCreate$inboundSchema).optional(),
    interested_parties: z.array(InterestedPartyCreate$inboundSchema).optional(),
    investment_profile: InvestmentProfileCreate$inboundSchema.optional(),
    managed: z.boolean().optional(),
    parties: z.array(PartyRequestCreate$inboundSchema),
    primary_registered_rep_id: z.string().optional(),
    tax_profile: AccountTaxProfileCreate$inboundSchema.optional(),
    trusted_contacts: z.array(TrustedContactCreate$inboundSchema).optional(),
    wrap_fee_billed: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "accepts_issuer_direct_communication": "acceptsIssuerDirectCommunication",
        "account_group_id": "accountGroupId",
        "cat_account_holder_type": "catAccountHolderType",
        "correspondent_id": "correspondentId",
        "interested_parties": "interestedParties",
        "investment_profile": "investmentProfile",
        "primary_registered_rep_id": "primaryRegisteredRepId",
        "tax_profile": "taxProfile",
        "trusted_contacts": "trustedContacts",
        "wrap_fee_billed": "wrapFeeBilled",
    });
});
/** @internal */
export const AccountRequestCreate$outboundSchema = z.object({
    acceptsIssuerDirectCommunication: z.boolean().optional(),
    accountGroupId: z.string(),
    advised: z.boolean().optional(),
    catAccountHolderType: CatAccountHolderType$outboundSchema.optional(),
    correspondentId: z.string(),
    identifiers: z.array(IdentifierCreate$outboundSchema).optional(),
    interestedParties: z.array(InterestedPartyCreate$outboundSchema).optional(),
    investmentProfile: InvestmentProfileCreate$outboundSchema.optional(),
    managed: z.boolean().optional(),
    parties: z.array(PartyRequestCreate$outboundSchema),
    primaryRegisteredRepId: z.string().optional(),
    taxProfile: AccountTaxProfileCreate$outboundSchema.optional(),
    trustedContacts: z.array(TrustedContactCreate$outboundSchema).optional(),
    wrapFeeBilled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        acceptsIssuerDirectCommunication: "accepts_issuer_direct_communication",
        accountGroupId: "account_group_id",
        catAccountHolderType: "cat_account_holder_type",
        correspondentId: "correspondent_id",
        interestedParties: "interested_parties",
        investmentProfile: "investment_profile",
        primaryRegisteredRepId: "primary_registered_rep_id",
        taxProfile: "tax_profile",
        trustedContacts: "trusted_contacts",
        wrapFeeBilled: "wrap_fee_billed",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountRequestCreate$;
(function (AccountRequestCreate$) {
    /** @deprecated use `AccountRequestCreate$inboundSchema` instead. */
    AccountRequestCreate$.inboundSchema = AccountRequestCreate$inboundSchema;
    /** @deprecated use `AccountRequestCreate$outboundSchema` instead. */
    AccountRequestCreate$.outboundSchema = AccountRequestCreate$outboundSchema;
})(AccountRequestCreate$ || (AccountRequestCreate$ = {}));
export function accountRequestCreateToJSON(accountRequestCreate) {
    return JSON.stringify(AccountRequestCreate$outboundSchema.parse(accountRequestCreate));
}
export function accountRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountRequestCreate' from JSON`);
}
//# sourceMappingURL=accountrequestcreate.js.map