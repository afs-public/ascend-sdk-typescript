/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * An internal indicator from where the agreement was generated; Typically `ACCOUNTS_SERVICE` if accessing our public APIs
 */
export var AgreementSource;
(function (AgreementSource) {
    AgreementSource["AgreementSourceUnspecified"] = "AGREEMENT_SOURCE_UNSPECIFIED";
    AgreementSource["AtlasForm"] = "ATLAS_FORM";
    AgreementSource["OtherSource"] = "OTHER_SOURCE";
    AgreementSource["AccountsService"] = "ACCOUNTS_SERVICE";
})(AgreementSource || (AgreementSource = {}));
/**
 * The status of an agreement which blocks an enrollment; `REQUIRED` if not yet received, or `AFFIRMED` if acknowledgement has been received by AFS
 */
export var AgreementState;
(function (AgreementState) {
    AgreementState["AgreementStateUnspecified"] = "AGREEMENT_STATE_UNSPECIFIED";
    AgreementState["Required"] = "REQUIRED";
    AgreementState["Affirmed"] = "AFFIRMED";
    AgreementState["Voided"] = "VOIDED";
})(AgreementState || (AgreementState = {}));
/** @internal */
export const AgreementSource$inboundSchema = z
    .union([
    z.nativeEnum(AgreementSource),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AgreementSource$outboundSchema = z.union([
    z.nativeEnum(AgreementSource),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AgreementSource$;
(function (AgreementSource$) {
    /** @deprecated use `AgreementSource$inboundSchema` instead. */
    AgreementSource$.inboundSchema = AgreementSource$inboundSchema;
    /** @deprecated use `AgreementSource$outboundSchema` instead. */
    AgreementSource$.outboundSchema = AgreementSource$outboundSchema;
})(AgreementSource$ || (AgreementSource$ = {}));
/** @internal */
export const AgreementState$inboundSchema = z
    .union([
    z.nativeEnum(AgreementState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AgreementState$outboundSchema = z.union([
    z.nativeEnum(AgreementState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AgreementState$;
(function (AgreementState$) {
    /** @deprecated use `AgreementState$inboundSchema` instead. */
    AgreementState$.inboundSchema = AgreementState$inboundSchema;
    /** @deprecated use `AgreementState$outboundSchema` instead. */
    AgreementState$.outboundSchema = AgreementState$outboundSchema;
})(AgreementState$ || (AgreementState$ = {}));
/** @internal */
export const Agreement$inboundSchema = z.object({
    affirmation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    agreement_id: z.string().optional(),
    agreement_name: z.string().optional(),
    agreement_source: AgreementSource$inboundSchema.optional(),
    agreement_state: AgreementState$inboundSchema.optional(),
    agreement_uri: z.string().optional(),
    agreement_version: z.string().optional(),
    enrollment_id: z.string().optional(),
    legal_entity_id: z.string().optional(),
    legal_natural_person_id: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "affirmation_time": "affirmationTime",
        "agreement_id": "agreementId",
        "agreement_name": "agreementName",
        "agreement_source": "agreementSource",
        "agreement_state": "agreementState",
        "agreement_uri": "agreementUri",
        "agreement_version": "agreementVersion",
        "enrollment_id": "enrollmentId",
        "legal_entity_id": "legalEntityId",
        "legal_natural_person_id": "legalNaturalPersonId",
    });
});
/** @internal */
export const Agreement$outboundSchema = z.object({
    affirmationTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    agreementId: z.string().optional(),
    agreementName: z.string().optional(),
    agreementSource: AgreementSource$outboundSchema.optional(),
    agreementState: AgreementState$outboundSchema.optional(),
    agreementUri: z.string().optional(),
    agreementVersion: z.string().optional(),
    enrollmentId: z.string().optional(),
    legalEntityId: z.string().optional(),
    legalNaturalPersonId: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        affirmationTime: "affirmation_time",
        agreementId: "agreement_id",
        agreementName: "agreement_name",
        agreementSource: "agreement_source",
        agreementState: "agreement_state",
        agreementUri: "agreement_uri",
        agreementVersion: "agreement_version",
        enrollmentId: "enrollment_id",
        legalEntityId: "legal_entity_id",
        legalNaturalPersonId: "legal_natural_person_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Agreement$;
(function (Agreement$) {
    /** @deprecated use `Agreement$inboundSchema` instead. */
    Agreement$.inboundSchema = Agreement$inboundSchema;
    /** @deprecated use `Agreement$outboundSchema` instead. */
    Agreement$.outboundSchema = Agreement$outboundSchema;
})(Agreement$ || (Agreement$ = {}));
export function agreementToJSON(agreement) {
    return JSON.stringify(Agreement$outboundSchema.parse(agreement));
}
export function agreementFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Agreement$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Agreement' from JSON`);
}
//# sourceMappingURL=agreement.js.map