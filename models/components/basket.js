/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The processing status of the basket
 */
export var BasketState;
(function (BasketState) {
    BasketState["StateUnspecified"] = "STATE_UNSPECIFIED";
    BasketState["New"] = "NEW";
    BasketState["Submitted"] = "SUBMITTED";
    BasketState["Executing"] = "EXECUTING";
    BasketState["Allocating"] = "ALLOCATING";
    BasketState["Done"] = "DONE";
    BasketState["Rejected"] = "REJECTED";
    BasketState["PartiallyFilled"] = "PARTIALLY_FILLED";
})(BasketState || (BasketState = {}));
/** @internal */
export const BasketState$inboundSchema = z
    .union([
    z.nativeEnum(BasketState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketState$outboundSchema = z.union([
    z.nativeEnum(BasketState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketState$;
(function (BasketState$) {
    /** @deprecated use `BasketState$inboundSchema` instead. */
    BasketState$.inboundSchema = BasketState$inboundSchema;
    /** @deprecated use `BasketState$outboundSchema` instead. */
    BasketState$.outboundSchema = BasketState$outboundSchema;
})(BasketState$ || (BasketState$ = {}));
/** @internal */
export const Basket$inboundSchema = z
    .object({
    basket_id: z.string().optional(),
    basket_order_count: z.string().optional(),
    basket_state: BasketState$inboundSchema.optional(),
    client_basket_id: z.string().optional(),
    client_basket_submit_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    complete_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    compressed_order_count: z.string().optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    distinct_account_count: z.string().optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    rejected_account_count: z.string().optional(),
    submit_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "basket_id": "basketId",
        "basket_order_count": "basketOrderCount",
        "basket_state": "basketState",
        "client_basket_id": "clientBasketId",
        "client_basket_submit_time": "clientBasketSubmitTime",
        "complete_time": "completeTime",
        "compressed_order_count": "compressedOrderCount",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "distinct_account_count": "distinctAccountCount",
        "last_update_time": "lastUpdateTime",
        "rejected_account_count": "rejectedAccountCount",
        "submit_time": "submitTime",
    });
});
/** @internal */
export const Basket$outboundSchema = z.object({
    basketId: z.string().optional(),
    basketOrderCount: z.string().optional(),
    basketState: BasketState$outboundSchema.optional(),
    clientBasketId: z.string().optional(),
    clientBasketSubmitTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    completeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    compressedOrderCount: z.string().optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    distinctAccountCount: z.string().optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    name: z.string().optional(),
    rejectedAccountCount: z.string().optional(),
    submitTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        basketId: "basket_id",
        basketOrderCount: "basket_order_count",
        basketState: "basket_state",
        clientBasketId: "client_basket_id",
        clientBasketSubmitTime: "client_basket_submit_time",
        completeTime: "complete_time",
        compressedOrderCount: "compressed_order_count",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        distinctAccountCount: "distinct_account_count",
        lastUpdateTime: "last_update_time",
        rejectedAccountCount: "rejected_account_count",
        submitTime: "submit_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Basket$;
(function (Basket$) {
    /** @deprecated use `Basket$inboundSchema` instead. */
    Basket$.inboundSchema = Basket$inboundSchema;
    /** @deprecated use `Basket$outboundSchema` instead. */
    Basket$.outboundSchema = Basket$outboundSchema;
})(Basket$ || (Basket$ = {}));
export function basketToJSON(basket) {
    return JSON.stringify(Basket$outboundSchema.parse(basket));
}
export function basketFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Basket$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Basket' from JSON`);
}
//# sourceMappingURL=basket.js.map