/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
/** @internal */
export const IdentityVerificationResultCreate$inboundSchema = z.object({
    address_verified: z.boolean(),
    birth_date_verified: z.boolean(),
    execution_date: DateCreate$inboundSchema,
    external_case_id: z.string(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    name_verified: z.boolean(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean(),
    vendor: z.string(),
}).transform((v) => {
    return remap$(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "name_verified": "nameVerified",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
export const IdentityVerificationResultCreate$outboundSchema = z.object({
    addressVerified: z.boolean(),
    birthDateVerified: z.boolean(),
    executionDate: DateCreate$outboundSchema,
    externalCaseId: z.string(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    nameVerified: z.boolean(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean(),
    vendor: z.string(),
}).transform((v) => {
    return remap$(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        nameVerified: "name_verified",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityVerificationResultCreate$;
(function (IdentityVerificationResultCreate$) {
    /** @deprecated use `IdentityVerificationResultCreate$inboundSchema` instead. */
    IdentityVerificationResultCreate$.inboundSchema = IdentityVerificationResultCreate$inboundSchema;
    /** @deprecated use `IdentityVerificationResultCreate$outboundSchema` instead. */
    IdentityVerificationResultCreate$.outboundSchema = IdentityVerificationResultCreate$outboundSchema;
})(IdentityVerificationResultCreate$ || (IdentityVerificationResultCreate$ = {}));
export function identityVerificationResultCreateToJSON(identityVerificationResultCreate) {
    return JSON.stringify(IdentityVerificationResultCreate$outboundSchema.parse(identityVerificationResultCreate));
}
export function identityVerificationResultCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IdentityVerificationResultCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IdentityVerificationResultCreate' from JSON`);
}
//# sourceMappingURL=identityverificationresultcreate.js.map