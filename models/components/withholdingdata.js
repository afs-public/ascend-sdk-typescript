/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export var WithholdingDataState;
(function (WithholdingDataState) {
    WithholdingDataState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    WithholdingDataState["Ca"] = "CA";
    WithholdingDataState["Me"] = "ME";
    WithholdingDataState["Vt"] = "VT";
    WithholdingDataState["Al"] = "AL";
    WithholdingDataState["Ak"] = "AK";
    WithholdingDataState["Az"] = "AZ";
    WithholdingDataState["Ar"] = "AR";
    WithholdingDataState["Co"] = "CO";
    WithholdingDataState["Ct"] = "CT";
    WithholdingDataState["De"] = "DE";
    WithholdingDataState["Fl"] = "FL";
    WithholdingDataState["Ga"] = "GA";
    WithholdingDataState["Hi"] = "HI";
    WithholdingDataState["Id"] = "ID";
    WithholdingDataState["Il"] = "IL";
    WithholdingDataState["In"] = "IN";
    WithholdingDataState["Ia"] = "IA";
    WithholdingDataState["Ks"] = "KS";
    WithholdingDataState["Ky"] = "KY";
    WithholdingDataState["La"] = "LA";
    WithholdingDataState["Md"] = "MD";
    WithholdingDataState["Ma"] = "MA";
    WithholdingDataState["Mi"] = "MI";
    WithholdingDataState["Mn"] = "MN";
    WithholdingDataState["Ms"] = "MS";
    WithholdingDataState["Mo"] = "MO";
    WithholdingDataState["Mt"] = "MT";
    WithholdingDataState["Ne"] = "NE";
    WithholdingDataState["Nv"] = "NV";
    WithholdingDataState["Nh"] = "NH";
    WithholdingDataState["Nj"] = "NJ";
    WithholdingDataState["Nm"] = "NM";
    WithholdingDataState["Ny"] = "NY";
    WithholdingDataState["Nc"] = "NC";
    WithholdingDataState["Nd"] = "ND";
    WithholdingDataState["Oh"] = "OH";
    WithholdingDataState["Ok"] = "OK";
    WithholdingDataState["Or"] = "OR";
    WithholdingDataState["Pa"] = "PA";
    WithholdingDataState["Ri"] = "RI";
    WithholdingDataState["Sc"] = "SC";
    WithholdingDataState["Sd"] = "SD";
    WithholdingDataState["Tn"] = "TN";
    WithholdingDataState["Tx"] = "TX";
    WithholdingDataState["Ut"] = "UT";
    WithholdingDataState["Va"] = "VA";
    WithholdingDataState["Wa"] = "WA";
    WithholdingDataState["Wv"] = "WV";
    WithholdingDataState["Wi"] = "WI";
    WithholdingDataState["Wy"] = "WY";
    WithholdingDataState["Dc"] = "DC";
})(WithholdingDataState || (WithholdingDataState = {}));
/**
 * Provides more detail on the type of the withholding (Federal, State, etc.)
 */
export var WithholdingDataType;
(function (WithholdingDataType) {
    WithholdingDataType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    WithholdingDataType["Federal"] = "FEDERAL";
    WithholdingDataType["State"] = "STATE";
    WithholdingDataType["ForeignSecurity"] = "FOREIGN_SECURITY";
    WithholdingDataType["FederalIra"] = "FEDERAL_IRA";
    WithholdingDataType["StateIra"] = "STATE_IRA";
    WithholdingDataType["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(WithholdingDataType || (WithholdingDataType = {}));
/** @internal */
export const Rate$inboundSchema = z
    .object({
    value: z.string().optional(),
});
/** @internal */
export const Rate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Rate$;
(function (Rate$) {
    /** @deprecated use `Rate$inboundSchema` instead. */
    Rate$.inboundSchema = Rate$inboundSchema;
    /** @deprecated use `Rate$outboundSchema` instead. */
    Rate$.outboundSchema = Rate$outboundSchema;
})(Rate$ || (Rate$ = {}));
export function rateToJSON(rate) {
    return JSON.stringify(Rate$outboundSchema.parse(rate));
}
export function rateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Rate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Rate' from JSON`);
}
/** @internal */
export const WithholdingDataState$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingDataState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WithholdingDataState$outboundSchema = z.union([
    z.nativeEnum(WithholdingDataState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingDataState$;
(function (WithholdingDataState$) {
    /** @deprecated use `WithholdingDataState$inboundSchema` instead. */
    WithholdingDataState$.inboundSchema = WithholdingDataState$inboundSchema;
    /** @deprecated use `WithholdingDataState$outboundSchema` instead. */
    WithholdingDataState$.outboundSchema = WithholdingDataState$outboundSchema;
})(WithholdingDataState$ || (WithholdingDataState$ = {}));
/** @internal */
export const WithholdingDataType$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingDataType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WithholdingDataType$outboundSchema = z.union([
    z.nativeEnum(WithholdingDataType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingDataType$;
(function (WithholdingDataType$) {
    /** @deprecated use `WithholdingDataType$inboundSchema` instead. */
    WithholdingDataType$.inboundSchema = WithholdingDataType$inboundSchema;
    /** @deprecated use `WithholdingDataType$outboundSchema` instead. */
    WithholdingDataType$.outboundSchema = WithholdingDataType$outboundSchema;
})(WithholdingDataType$ || (WithholdingDataType$ = {}));
/** @internal */
export const WithholdingData$inboundSchema = z.object({
    rate: z.nullable(z.lazy(() => Rate$inboundSchema)).optional(),
    region_code: z.string().optional(),
    state: WithholdingDataState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: WithholdingDataType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "region_code": "regionCode",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const WithholdingData$outboundSchema = z.object({
    rate: z.nullable(z.lazy(() => Rate$outboundSchema)).optional(),
    regionCode: z.string().optional(),
    state: WithholdingDataState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: WithholdingDataType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        regionCode: "region_code",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingData$;
(function (WithholdingData$) {
    /** @deprecated use `WithholdingData$inboundSchema` instead. */
    WithholdingData$.inboundSchema = WithholdingData$inboundSchema;
    /** @deprecated use `WithholdingData$outboundSchema` instead. */
    WithholdingData$.outboundSchema = WithholdingData$outboundSchema;
})(WithholdingData$ || (WithholdingData$ = {}));
export function withholdingDataToJSON(withholdingData) {
    return JSON.stringify(WithholdingData$outboundSchema.parse(withholdingData));
}
export function withholdingDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WithholdingData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WithholdingData' from JSON`);
}
//# sourceMappingURL=withholdingdata.js.map