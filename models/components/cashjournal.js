/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Whether a cash journal is first party or third party Determined asynchronously when the transfer is processing, and will be set by the time the transfer is posted
 */
export var PartyType;
(function (PartyType) {
    PartyType["PartyTypeUnspecified"] = "PARTY_TYPE_UNSPECIFIED";
    PartyType["FirstParty"] = "FIRST_PARTY";
    PartyType["ThirdParty"] = "THIRD_PARTY";
})(PartyType || (PartyType = {}));
/**
 * The type of retirement contribution.
 */
export var CashJournalType;
(function (CashJournalType) {
    CashJournalType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    CashJournalType["Regular"] = "REGULAR";
    CashJournalType["Employee"] = "EMPLOYEE";
    CashJournalType["Employer"] = "EMPLOYER";
    CashJournalType["Recharacterization"] = "RECHARACTERIZATION";
    CashJournalType["Rollover60Day"] = "ROLLOVER_60_DAY";
    CashJournalType["RolloverDirect"] = "ROLLOVER_DIRECT";
    CashJournalType["Transfer"] = "TRANSFER";
    CashJournalType["TrusteeFee"] = "TRUSTEE_FEE";
    CashJournalType["Conversion"] = "CONVERSION";
    CashJournalType["Repayment"] = "REPAYMENT";
    CashJournalType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(CashJournalType || (CashJournalType = {}));
/**
 * The type of retirement distribution.
 */
export var CashJournalRetirementDistributionType;
(function (CashJournalRetirementDistributionType) {
    CashJournalRetirementDistributionType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    CashJournalRetirementDistributionType["Normal"] = "NORMAL";
    CashJournalRetirementDistributionType["Disability"] = "DISABILITY";
    CashJournalRetirementDistributionType["Sosepp"] = "SOSEPP";
    CashJournalRetirementDistributionType["Premature"] = "PREMATURE";
    CashJournalRetirementDistributionType["Death"] = "DEATH";
    CashJournalRetirementDistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    CashJournalRetirementDistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    CashJournalRetirementDistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    CashJournalRetirementDistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    CashJournalRetirementDistributionType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    CashJournalRetirementDistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    CashJournalRetirementDistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    CashJournalRetirementDistributionType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    CashJournalRetirementDistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    CashJournalRetirementDistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    CashJournalRetirementDistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    CashJournalRetirementDistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    CashJournalRetirementDistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    CashJournalRetirementDistributionType["Revocation"] = "REVOCATION";
    CashJournalRetirementDistributionType["NonReportable"] = "NON_REPORTABLE";
})(CashJournalRetirementDistributionType || (CashJournalRetirementDistributionType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var CashJournalStateState;
(function (CashJournalStateState) {
    CashJournalStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    CashJournalStateState["Processing"] = "PROCESSING";
    CashJournalStateState["PendingReview"] = "PENDING_REVIEW";
    CashJournalStateState["Posted"] = "POSTED";
    CashJournalStateState["Completed"] = "COMPLETED";
    CashJournalStateState["Rejected"] = "REJECTED";
    CashJournalStateState["Canceled"] = "CANCELED";
    CashJournalStateState["Returned"] = "RETURNED";
    CashJournalStateState["Postponed"] = "POSTPONED";
})(CashJournalStateState || (CashJournalStateState = {}));
/** @internal */
export const CashJournalAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashJournalAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalAmount$;
(function (CashJournalAmount$) {
    /** @deprecated use `CashJournalAmount$inboundSchema` instead. */
    CashJournalAmount$.inboundSchema = CashJournalAmount$inboundSchema;
    /** @deprecated use `CashJournalAmount$outboundSchema` instead. */
    CashJournalAmount$.outboundSchema = CashJournalAmount$outboundSchema;
})(CashJournalAmount$ || (CashJournalAmount$ = {}));
export function cashJournalAmountToJSON(cashJournalAmount) {
    return JSON.stringify(CashJournalAmount$outboundSchema.parse(cashJournalAmount));
}
export function cashJournalAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalAmount' from JSON`);
}
/** @internal */
export const PartyType$inboundSchema = z
    .union([
    z.nativeEnum(PartyType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyType$outboundSchema = z.union([
    z.nativeEnum(PartyType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyType$;
(function (PartyType$) {
    /** @deprecated use `PartyType$inboundSchema` instead. */
    PartyType$.inboundSchema = PartyType$inboundSchema;
    /** @deprecated use `PartyType$outboundSchema` instead. */
    PartyType$.outboundSchema = PartyType$outboundSchema;
})(PartyType$ || (PartyType$ = {}));
/** @internal */
export const CashJournalType$inboundSchema = z
    .union([
    z.nativeEnum(CashJournalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CashJournalType$outboundSchema = z.union([
    z.nativeEnum(CashJournalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalType$;
(function (CashJournalType$) {
    /** @deprecated use `CashJournalType$inboundSchema` instead. */
    CashJournalType$.inboundSchema = CashJournalType$inboundSchema;
    /** @deprecated use `CashJournalType$outboundSchema` instead. */
    CashJournalType$.outboundSchema = CashJournalType$outboundSchema;
})(CashJournalType$ || (CashJournalType$ = {}));
/** @internal */
export const CashJournalRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: CashJournalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const CashJournalRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: CashJournalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementContribution$;
(function (CashJournalRetirementContribution$) {
    /** @deprecated use `CashJournalRetirementContribution$inboundSchema` instead. */
    CashJournalRetirementContribution$.inboundSchema = CashJournalRetirementContribution$inboundSchema;
    /** @deprecated use `CashJournalRetirementContribution$outboundSchema` instead. */
    CashJournalRetirementContribution$.outboundSchema = CashJournalRetirementContribution$outboundSchema;
})(CashJournalRetirementContribution$ || (CashJournalRetirementContribution$ = {}));
export function cashJournalRetirementContributionToJSON(cashJournalRetirementContribution) {
    return JSON.stringify(CashJournalRetirementContribution$outboundSchema.parse(cashJournalRetirementContribution));
}
export function cashJournalRetirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalRetirementContribution' from JSON`);
}
/** @internal */
export const CashJournalRetirementDistributionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashJournalRetirementDistributionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementDistributionAmount$;
(function (CashJournalRetirementDistributionAmount$) {
    /** @deprecated use `CashJournalRetirementDistributionAmount$inboundSchema` instead. */
    CashJournalRetirementDistributionAmount$.inboundSchema = CashJournalRetirementDistributionAmount$inboundSchema;
    /** @deprecated use `CashJournalRetirementDistributionAmount$outboundSchema` instead. */
    CashJournalRetirementDistributionAmount$.outboundSchema = CashJournalRetirementDistributionAmount$outboundSchema;
})(CashJournalRetirementDistributionAmount$ || (CashJournalRetirementDistributionAmount$ = {}));
export function cashJournalRetirementDistributionAmountToJSON(cashJournalRetirementDistributionAmount) {
    return JSON.stringify(CashJournalRetirementDistributionAmount$outboundSchema.parse(cashJournalRetirementDistributionAmount));
}
export function cashJournalRetirementDistributionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalRetirementDistributionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalRetirementDistributionAmount' from JSON`);
}
/** @internal */
export const CashJournalPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashJournalPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalPercentage$;
(function (CashJournalPercentage$) {
    /** @deprecated use `CashJournalPercentage$inboundSchema` instead. */
    CashJournalPercentage$.inboundSchema = CashJournalPercentage$inboundSchema;
    /** @deprecated use `CashJournalPercentage$outboundSchema` instead. */
    CashJournalPercentage$.outboundSchema = CashJournalPercentage$outboundSchema;
})(CashJournalPercentage$ || (CashJournalPercentage$ = {}));
export function cashJournalPercentageToJSON(cashJournalPercentage) {
    return JSON.stringify(CashJournalPercentage$outboundSchema.parse(cashJournalPercentage));
}
export function cashJournalPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalPercentage' from JSON`);
}
/** @internal */
export const CashJournalFederalTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalRetirementDistributionAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => CashJournalPercentage$inboundSchema))
        .optional(),
});
/** @internal */
export const CashJournalFederalTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalRetirementDistributionAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => CashJournalPercentage$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalFederalTaxWithholding$;
(function (CashJournalFederalTaxWithholding$) {
    /** @deprecated use `CashJournalFederalTaxWithholding$inboundSchema` instead. */
    CashJournalFederalTaxWithholding$.inboundSchema = CashJournalFederalTaxWithholding$inboundSchema;
    /** @deprecated use `CashJournalFederalTaxWithholding$outboundSchema` instead. */
    CashJournalFederalTaxWithholding$.outboundSchema = CashJournalFederalTaxWithholding$outboundSchema;
})(CashJournalFederalTaxWithholding$ || (CashJournalFederalTaxWithholding$ = {}));
export function cashJournalFederalTaxWithholdingToJSON(cashJournalFederalTaxWithholding) {
    return JSON.stringify(CashJournalFederalTaxWithholding$outboundSchema.parse(cashJournalFederalTaxWithholding));
}
export function cashJournalFederalTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalFederalTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalFederalTaxWithholding' from JSON`);
}
/** @internal */
export const CashJournalRetirementDistributionStateTaxWithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashJournalRetirementDistributionStateTaxWithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementDistributionStateTaxWithholdingAmount$;
(function (CashJournalRetirementDistributionStateTaxWithholdingAmount$) {
    /** @deprecated use `CashJournalRetirementDistributionStateTaxWithholdingAmount$inboundSchema` instead. */
    CashJournalRetirementDistributionStateTaxWithholdingAmount$.inboundSchema = CashJournalRetirementDistributionStateTaxWithholdingAmount$inboundSchema;
    /** @deprecated use `CashJournalRetirementDistributionStateTaxWithholdingAmount$outboundSchema` instead. */
    CashJournalRetirementDistributionStateTaxWithholdingAmount$.outboundSchema = CashJournalRetirementDistributionStateTaxWithholdingAmount$outboundSchema;
})(CashJournalRetirementDistributionStateTaxWithholdingAmount$ || (CashJournalRetirementDistributionStateTaxWithholdingAmount$ = {}));
export function cashJournalRetirementDistributionStateTaxWithholdingAmountToJSON(cashJournalRetirementDistributionStateTaxWithholdingAmount) {
    return JSON.stringify(CashJournalRetirementDistributionStateTaxWithholdingAmount$outboundSchema
        .parse(cashJournalRetirementDistributionStateTaxWithholdingAmount));
}
export function cashJournalRetirementDistributionStateTaxWithholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalRetirementDistributionStateTaxWithholdingAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CashJournalRetirementDistributionStateTaxWithholdingAmount' from JSON`);
}
/** @internal */
export const CashJournalRetirementDistributionPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashJournalRetirementDistributionPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementDistributionPercentage$;
(function (CashJournalRetirementDistributionPercentage$) {
    /** @deprecated use `CashJournalRetirementDistributionPercentage$inboundSchema` instead. */
    CashJournalRetirementDistributionPercentage$.inboundSchema = CashJournalRetirementDistributionPercentage$inboundSchema;
    /** @deprecated use `CashJournalRetirementDistributionPercentage$outboundSchema` instead. */
    CashJournalRetirementDistributionPercentage$.outboundSchema = CashJournalRetirementDistributionPercentage$outboundSchema;
})(CashJournalRetirementDistributionPercentage$ || (CashJournalRetirementDistributionPercentage$ = {}));
export function cashJournalRetirementDistributionPercentageToJSON(cashJournalRetirementDistributionPercentage) {
    return JSON.stringify(CashJournalRetirementDistributionPercentage$outboundSchema.parse(cashJournalRetirementDistributionPercentage));
}
export function cashJournalRetirementDistributionPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalRetirementDistributionPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalRetirementDistributionPercentage' from JSON`);
}
/** @internal */
export const CashJournalStateTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalRetirementDistributionStateTaxWithholdingAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => CashJournalRetirementDistributionPercentage$inboundSchema)).optional(),
});
/** @internal */
export const CashJournalStateTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalRetirementDistributionStateTaxWithholdingAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => CashJournalRetirementDistributionPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalStateTaxWithholding$;
(function (CashJournalStateTaxWithholding$) {
    /** @deprecated use `CashJournalStateTaxWithholding$inboundSchema` instead. */
    CashJournalStateTaxWithholding$.inboundSchema = CashJournalStateTaxWithholding$inboundSchema;
    /** @deprecated use `CashJournalStateTaxWithholding$outboundSchema` instead. */
    CashJournalStateTaxWithholding$.outboundSchema = CashJournalStateTaxWithholding$outboundSchema;
})(CashJournalStateTaxWithholding$ || (CashJournalStateTaxWithholding$ = {}));
export function cashJournalStateTaxWithholdingToJSON(cashJournalStateTaxWithholding) {
    return JSON.stringify(CashJournalStateTaxWithholding$outboundSchema.parse(cashJournalStateTaxWithholding));
}
export function cashJournalStateTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalStateTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalStateTaxWithholding' from JSON`);
}
/** @internal */
export const CashJournalRetirementDistributionType$inboundSchema = z
    .union([
    z.nativeEnum(CashJournalRetirementDistributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CashJournalRetirementDistributionType$outboundSchema = z.union([
    z.nativeEnum(CashJournalRetirementDistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementDistributionType$;
(function (CashJournalRetirementDistributionType$) {
    /** @deprecated use `CashJournalRetirementDistributionType$inboundSchema` instead. */
    CashJournalRetirementDistributionType$.inboundSchema = CashJournalRetirementDistributionType$inboundSchema;
    /** @deprecated use `CashJournalRetirementDistributionType$outboundSchema` instead. */
    CashJournalRetirementDistributionType$.outboundSchema = CashJournalRetirementDistributionType$outboundSchema;
})(CashJournalRetirementDistributionType$ || (CashJournalRetirementDistributionType$ = {}));
/** @internal */
export const CashJournalRetirementDistribution$inboundSchema = z.object({
    federal_tax_withholding: z.nullable(z.lazy(() => CashJournalFederalTaxWithholding$inboundSchema)).optional(),
    receiving_institution: z.string().optional(),
    state_tax_withholding: z.nullable(z.lazy(() => CashJournalStateTaxWithholding$inboundSchema)).optional(),
    state_withholding_waiver: z.boolean().optional(),
    tax_year: z.number().int().optional(),
    type: CashJournalRetirementDistributionType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_withholding": "federalTaxWithholding",
        "receiving_institution": "receivingInstitution",
        "state_tax_withholding": "stateTaxWithholding",
        "state_withholding_waiver": "stateWithholdingWaiver",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const CashJournalRetirementDistribution$outboundSchema = z.object({
    federalTaxWithholding: z.nullable(z.lazy(() => CashJournalFederalTaxWithholding$outboundSchema)).optional(),
    receivingInstitution: z.string().optional(),
    stateTaxWithholding: z.nullable(z.lazy(() => CashJournalStateTaxWithholding$outboundSchema)).optional(),
    stateWithholdingWaiver: z.boolean().optional(),
    taxYear: z.number().int().optional(),
    type: CashJournalRetirementDistributionType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxWithholding: "federal_tax_withholding",
        receivingInstitution: "receiving_institution",
        stateTaxWithholding: "state_tax_withholding",
        stateWithholdingWaiver: "state_withholding_waiver",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalRetirementDistribution$;
(function (CashJournalRetirementDistribution$) {
    /** @deprecated use `CashJournalRetirementDistribution$inboundSchema` instead. */
    CashJournalRetirementDistribution$.inboundSchema = CashJournalRetirementDistribution$inboundSchema;
    /** @deprecated use `CashJournalRetirementDistribution$outboundSchema` instead. */
    CashJournalRetirementDistribution$.outboundSchema = CashJournalRetirementDistribution$outboundSchema;
})(CashJournalRetirementDistribution$ || (CashJournalRetirementDistribution$ = {}));
export function cashJournalRetirementDistributionToJSON(cashJournalRetirementDistribution) {
    return JSON.stringify(CashJournalRetirementDistribution$outboundSchema.parse(cashJournalRetirementDistribution));
}
export function cashJournalRetirementDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalRetirementDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalRetirementDistribution' from JSON`);
}
/** @internal */
export const CashJournalStateState$inboundSchema = z
    .union([
    z.nativeEnum(CashJournalStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CashJournalStateState$outboundSchema = z.union([
    z.nativeEnum(CashJournalStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalStateState$;
(function (CashJournalStateState$) {
    /** @deprecated use `CashJournalStateState$inboundSchema` instead. */
    CashJournalStateState$.inboundSchema = CashJournalStateState$inboundSchema;
    /** @deprecated use `CashJournalStateState$outboundSchema` instead. */
    CashJournalStateState$.outboundSchema = CashJournalStateState$outboundSchema;
})(CashJournalStateState$ || (CashJournalStateState$ = {}));
/** @internal */
export const CashJournalState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: CashJournalStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const CashJournalState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: CashJournalStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournalState$;
(function (CashJournalState$) {
    /** @deprecated use `CashJournalState$inboundSchema` instead. */
    CashJournalState$.inboundSchema = CashJournalState$inboundSchema;
    /** @deprecated use `CashJournalState$outboundSchema` instead. */
    CashJournalState$.outboundSchema = CashJournalState$outboundSchema;
})(CashJournalState$ || (CashJournalState$ = {}));
export function cashJournalStateToJSON(cashJournalState) {
    return JSON.stringify(CashJournalState$outboundSchema.parse(cashJournalState));
}
export function cashJournalStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournalState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournalState' from JSON`);
}
/** @internal */
export const CashJournal$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalAmount$inboundSchema)).optional(),
    client_transfer_id: z.string().optional(),
    destination_account: z.string().optional(),
    name: z.string().optional(),
    party_type: PartyType$inboundSchema.optional(),
    retirement_contribution: z.nullable(z.lazy(() => CashJournalRetirementContribution$inboundSchema)).optional(),
    retirement_distribution: z.nullable(z.lazy(() => CashJournalRetirementDistribution$inboundSchema)).optional(),
    source_account: z.string().optional(),
    state: z.nullable(z.lazy(() => CashJournalState$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "destination_account": "destinationAccount",
        "party_type": "partyType",
        "retirement_contribution": "retirementContribution",
        "retirement_distribution": "retirementDistribution",
        "source_account": "sourceAccount",
    });
});
/** @internal */
export const CashJournal$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CashJournalAmount$outboundSchema)).optional(),
    clientTransferId: z.string().optional(),
    destinationAccount: z.string().optional(),
    name: z.string().optional(),
    partyType: PartyType$outboundSchema.optional(),
    retirementContribution: z.nullable(z.lazy(() => CashJournalRetirementContribution$outboundSchema)).optional(),
    retirementDistribution: z.nullable(z.lazy(() => CashJournalRetirementDistribution$outboundSchema)).optional(),
    sourceAccount: z.string().optional(),
    state: z.nullable(z.lazy(() => CashJournalState$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        destinationAccount: "destination_account",
        partyType: "party_type",
        retirementContribution: "retirement_contribution",
        retirementDistribution: "retirement_distribution",
        sourceAccount: "source_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashJournal$;
(function (CashJournal$) {
    /** @deprecated use `CashJournal$inboundSchema` instead. */
    CashJournal$.inboundSchema = CashJournal$inboundSchema;
    /** @deprecated use `CashJournal$outboundSchema` instead. */
    CashJournal$.outboundSchema = CashJournal$outboundSchema;
})(CashJournal$ || (CashJournal$ = {}));
export function cashJournalToJSON(cashJournal) {
    return JSON.stringify(CashJournal$outboundSchema.parse(cashJournal));
}
export function cashJournalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashJournal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashJournal' from JSON`);
}
//# sourceMappingURL=cashjournal.js.map