/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const BookingLotMoneyPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BookingLotMoneyPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingLotMoneyPrice$;
(function (BookingLotMoneyPrice$) {
    /** @deprecated use `BookingLotMoneyPrice$inboundSchema` instead. */
    BookingLotMoneyPrice$.inboundSchema = BookingLotMoneyPrice$inboundSchema;
    /** @deprecated use `BookingLotMoneyPrice$outboundSchema` instead. */
    BookingLotMoneyPrice$.outboundSchema = BookingLotMoneyPrice$outboundSchema;
})(BookingLotMoneyPrice$ || (BookingLotMoneyPrice$ = {}));
export function bookingLotMoneyPriceToJSON(bookingLotMoneyPrice) {
    return JSON.stringify(BookingLotMoneyPrice$outboundSchema.parse(bookingLotMoneyPrice));
}
export function bookingLotMoneyPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingLotMoneyPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotMoneyPrice' from JSON`);
}
/** @internal */
export const BookingLotMoney$inboundSchema = z.object({
    currency_code: z.string().optional(),
    price: z.nullable(z.lazy(() => BookingLotMoneyPrice$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "currency_code": "currencyCode",
    });
});
/** @internal */
export const BookingLotMoney$outboundSchema = z.object({
    currencyCode: z.string().optional(),
    price: z.nullable(z.lazy(() => BookingLotMoneyPrice$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        currencyCode: "currency_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingLotMoney$;
(function (BookingLotMoney$) {
    /** @deprecated use `BookingLotMoney$inboundSchema` instead. */
    BookingLotMoney$.inboundSchema = BookingLotMoney$inboundSchema;
    /** @deprecated use `BookingLotMoney$outboundSchema` instead. */
    BookingLotMoney$.outboundSchema = BookingLotMoney$outboundSchema;
})(BookingLotMoney$ || (BookingLotMoney$ = {}));
export function bookingLotMoneyToJSON(bookingLotMoney) {
    return JSON.stringify(BookingLotMoney$outboundSchema.parse(bookingLotMoney));
}
export function bookingLotMoneyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingLotMoney$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotMoney' from JSON`);
}
/** @internal */
export const BookingLotPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BookingLotPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingLotPrice$;
(function (BookingLotPrice$) {
    /** @deprecated use `BookingLotPrice$inboundSchema` instead. */
    BookingLotPrice$.inboundSchema = BookingLotPrice$inboundSchema;
    /** @deprecated use `BookingLotPrice$outboundSchema` instead. */
    BookingLotPrice$.outboundSchema = BookingLotPrice$outboundSchema;
})(BookingLotPrice$ || (BookingLotPrice$ = {}));
export function bookingLotPriceToJSON(bookingLotPrice) {
    return JSON.stringify(BookingLotPrice$outboundSchema.parse(bookingLotPrice));
}
export function bookingLotPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingLotPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotPrice' from JSON`);
}
/** @internal */
export const BookingLotQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BookingLotQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingLotQuantity$;
(function (BookingLotQuantity$) {
    /** @deprecated use `BookingLotQuantity$inboundSchema` instead. */
    BookingLotQuantity$.inboundSchema = BookingLotQuantity$inboundSchema;
    /** @deprecated use `BookingLotQuantity$outboundSchema` instead. */
    BookingLotQuantity$.outboundSchema = BookingLotQuantity$outboundSchema;
})(BookingLotQuantity$ || (BookingLotQuantity$ = {}));
export function bookingLotQuantityToJSON(bookingLotQuantity) {
    return JSON.stringify(BookingLotQuantity$outboundSchema.parse(bookingLotQuantity));
}
export function bookingLotQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingLotQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotQuantity' from JSON`);
}
/** @internal */
export const TradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const TradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeDate$;
(function (TradeDate$) {
    /** @deprecated use `TradeDate$inboundSchema` instead. */
    TradeDate$.inboundSchema = TradeDate$inboundSchema;
    /** @deprecated use `TradeDate$outboundSchema` instead. */
    TradeDate$.outboundSchema = TradeDate$outboundSchema;
})(TradeDate$ || (TradeDate$ = {}));
export function tradeDateToJSON(tradeDate) {
    return JSON.stringify(TradeDate$outboundSchema.parse(tradeDate));
}
export function tradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeDate' from JSON`);
}
/** @internal */
export const BookingLot$inboundSchema = z.object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => BookingLotMoney$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => BookingLotPrice$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => BookingLotQuantity$inboundSchema))
        .optional(),
    trade_date: z.nullable(z.lazy(() => TradeDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "trade_date": "tradeDate",
    });
});
/** @internal */
export const BookingLot$outboundSchema = z.object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => BookingLotMoney$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => BookingLotPrice$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => BookingLotQuantity$outboundSchema))
        .optional(),
    tradeDate: z.nullable(z.lazy(() => TradeDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        tradeDate: "trade_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingLot$;
(function (BookingLot$) {
    /** @deprecated use `BookingLot$inboundSchema` instead. */
    BookingLot$.inboundSchema = BookingLot$inboundSchema;
    /** @deprecated use `BookingLot$outboundSchema` instead. */
    BookingLot$.outboundSchema = BookingLot$outboundSchema;
})(BookingLot$ || (BookingLot$ = {}));
export function bookingLotToJSON(bookingLot) {
    return JSON.stringify(BookingLot$outboundSchema.parse(bookingLot));
}
export function bookingLotFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingLot$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLot' from JSON`);
}
//# sourceMappingURL=bookinglot.js.map