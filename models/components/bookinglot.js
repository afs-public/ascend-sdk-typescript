"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BookingLot$ = exports.BookingLot$outboundSchema = exports.BookingLot$inboundSchema = exports.TradeDate$ = exports.TradeDate$outboundSchema = exports.TradeDate$inboundSchema = exports.BookingLotQuantity$ = exports.BookingLotQuantity$outboundSchema = exports.BookingLotQuantity$inboundSchema = exports.BookingLotPrice$ = exports.BookingLotPrice$outboundSchema = exports.BookingLotPrice$inboundSchema = exports.BookingLotMoney$ = exports.BookingLotMoney$outboundSchema = exports.BookingLotMoney$inboundSchema = exports.BookingLotMoneyPrice$ = exports.BookingLotMoneyPrice$outboundSchema = exports.BookingLotMoneyPrice$inboundSchema = void 0;
exports.bookingLotMoneyPriceToJSON = bookingLotMoneyPriceToJSON;
exports.bookingLotMoneyPriceFromJSON = bookingLotMoneyPriceFromJSON;
exports.bookingLotMoneyToJSON = bookingLotMoneyToJSON;
exports.bookingLotMoneyFromJSON = bookingLotMoneyFromJSON;
exports.bookingLotPriceToJSON = bookingLotPriceToJSON;
exports.bookingLotPriceFromJSON = bookingLotPriceFromJSON;
exports.bookingLotQuantityToJSON = bookingLotQuantityToJSON;
exports.bookingLotQuantityFromJSON = bookingLotQuantityFromJSON;
exports.tradeDateToJSON = tradeDateToJSON;
exports.tradeDateFromJSON = tradeDateFromJSON;
exports.bookingLotToJSON = bookingLotToJSON;
exports.bookingLotFromJSON = bookingLotFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.BookingLotMoneyPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BookingLotMoneyPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BookingLotMoneyPrice$;
(function (BookingLotMoneyPrice$) {
    /** @deprecated use `BookingLotMoneyPrice$inboundSchema` instead. */
    BookingLotMoneyPrice$.inboundSchema = exports.BookingLotMoneyPrice$inboundSchema;
    /** @deprecated use `BookingLotMoneyPrice$outboundSchema` instead. */
    BookingLotMoneyPrice$.outboundSchema = exports.BookingLotMoneyPrice$outboundSchema;
})(BookingLotMoneyPrice$ || (exports.BookingLotMoneyPrice$ = BookingLotMoneyPrice$ = {}));
function bookingLotMoneyPriceToJSON(bookingLotMoneyPrice) {
    return JSON.stringify(exports.BookingLotMoneyPrice$outboundSchema.parse(bookingLotMoneyPrice));
}
function bookingLotMoneyPriceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BookingLotMoneyPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotMoneyPrice' from JSON`);
}
/** @internal */
exports.BookingLotMoney$inboundSchema = z.object({
    currency_code: z.string().optional(),
    price: z.nullable(z.lazy(() => exports.BookingLotMoneyPrice$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "currency_code": "currencyCode",
    });
});
/** @internal */
exports.BookingLotMoney$outboundSchema = z.object({
    currencyCode: z.string().optional(),
    price: z.nullable(z.lazy(() => exports.BookingLotMoneyPrice$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        currencyCode: "currency_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BookingLotMoney$;
(function (BookingLotMoney$) {
    /** @deprecated use `BookingLotMoney$inboundSchema` instead. */
    BookingLotMoney$.inboundSchema = exports.BookingLotMoney$inboundSchema;
    /** @deprecated use `BookingLotMoney$outboundSchema` instead. */
    BookingLotMoney$.outboundSchema = exports.BookingLotMoney$outboundSchema;
})(BookingLotMoney$ || (exports.BookingLotMoney$ = BookingLotMoney$ = {}));
function bookingLotMoneyToJSON(bookingLotMoney) {
    return JSON.stringify(exports.BookingLotMoney$outboundSchema.parse(bookingLotMoney));
}
function bookingLotMoneyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BookingLotMoney$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotMoney' from JSON`);
}
/** @internal */
exports.BookingLotPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BookingLotPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BookingLotPrice$;
(function (BookingLotPrice$) {
    /** @deprecated use `BookingLotPrice$inboundSchema` instead. */
    BookingLotPrice$.inboundSchema = exports.BookingLotPrice$inboundSchema;
    /** @deprecated use `BookingLotPrice$outboundSchema` instead. */
    BookingLotPrice$.outboundSchema = exports.BookingLotPrice$outboundSchema;
})(BookingLotPrice$ || (exports.BookingLotPrice$ = BookingLotPrice$ = {}));
function bookingLotPriceToJSON(bookingLotPrice) {
    return JSON.stringify(exports.BookingLotPrice$outboundSchema.parse(bookingLotPrice));
}
function bookingLotPriceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BookingLotPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotPrice' from JSON`);
}
/** @internal */
exports.BookingLotQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BookingLotQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BookingLotQuantity$;
(function (BookingLotQuantity$) {
    /** @deprecated use `BookingLotQuantity$inboundSchema` instead. */
    BookingLotQuantity$.inboundSchema = exports.BookingLotQuantity$inboundSchema;
    /** @deprecated use `BookingLotQuantity$outboundSchema` instead. */
    BookingLotQuantity$.outboundSchema = exports.BookingLotQuantity$outboundSchema;
})(BookingLotQuantity$ || (exports.BookingLotQuantity$ = BookingLotQuantity$ = {}));
function bookingLotQuantityToJSON(bookingLotQuantity) {
    return JSON.stringify(exports.BookingLotQuantity$outboundSchema.parse(bookingLotQuantity));
}
function bookingLotQuantityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BookingLotQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLotQuantity' from JSON`);
}
/** @internal */
exports.TradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.TradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeDate$;
(function (TradeDate$) {
    /** @deprecated use `TradeDate$inboundSchema` instead. */
    TradeDate$.inboundSchema = exports.TradeDate$inboundSchema;
    /** @deprecated use `TradeDate$outboundSchema` instead. */
    TradeDate$.outboundSchema = exports.TradeDate$outboundSchema;
})(TradeDate$ || (exports.TradeDate$ = TradeDate$ = {}));
function tradeDateToJSON(tradeDate) {
    return JSON.stringify(exports.TradeDate$outboundSchema.parse(tradeDate));
}
function tradeDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeDate' from JSON`);
}
/** @internal */
exports.BookingLot$inboundSchema = z.object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => exports.BookingLotMoney$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.BookingLotPrice$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.BookingLotQuantity$inboundSchema))
        .optional(),
    trade_date: z.nullable(z.lazy(() => exports.TradeDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "trade_date": "tradeDate",
    });
});
/** @internal */
exports.BookingLot$outboundSchema = z.object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => exports.BookingLotMoney$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.BookingLotPrice$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.BookingLotQuantity$outboundSchema))
        .optional(),
    tradeDate: z.nullable(z.lazy(() => exports.TradeDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        tradeDate: "trade_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BookingLot$;
(function (BookingLot$) {
    /** @deprecated use `BookingLot$inboundSchema` instead. */
    BookingLot$.inboundSchema = exports.BookingLot$inboundSchema;
    /** @deprecated use `BookingLot$outboundSchema` instead. */
    BookingLot$.outboundSchema = exports.BookingLot$outboundSchema;
})(BookingLot$ || (exports.BookingLot$ = BookingLot$ = {}));
function bookingLotToJSON(bookingLot) {
    return JSON.stringify(exports.BookingLot$outboundSchema.parse(bookingLot));
}
function bookingLotFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BookingLot$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingLot' from JSON`);
}
//# sourceMappingURL=bookinglot.js.map