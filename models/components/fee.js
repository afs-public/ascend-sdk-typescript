/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of fee being assessed
 */
export var FeeType;
(function (FeeType) {
    FeeType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    FeeType["ClientClearing"] = "CLIENT_CLEARING";
    FeeType["Liquidity"] = "LIQUIDITY";
    FeeType["GeneralPurpose"] = "GENERAL_PURPOSE";
    FeeType["Commission"] = "COMMISSION";
    FeeType["Taf"] = "TAF";
    FeeType["Sec"] = "SEC";
    FeeType["AccountClosing"] = "ACCOUNT_CLOSING";
    FeeType["AccountIra"] = "ACCOUNT_IRA";
    FeeType["AchReturn"] = "ACH_RETURN";
    FeeType["Advisory"] = "ADVISORY";
    FeeType["CheckFee"] = "CHECK_FEE";
    FeeType["Exchange"] = "EXCHANGE";
    FeeType["Management"] = "MANAGEMENT";
    FeeType["Overnight"] = "OVERNIGHT";
    FeeType["Platform"] = "PLATFORM";
    FeeType["Statement"] = "STATEMENT";
    FeeType["StopPayment"] = "STOP_PAYMENT";
    FeeType["WireFee"] = "WIRE_FEE";
    FeeType["Inactivity"] = "INACTIVITY";
    FeeType["AmaService"] = "AMA_SERVICE";
    FeeType["NoticeOfChange"] = "NOTICE_OF_CHANGE";
    FeeType["AccountTransfer"] = "ACCOUNT_TRANSFER";
    FeeType["AgencyProcessing"] = "AGENCY_PROCESSING";
    FeeType["RtpFee"] = "RTP_FEE";
    FeeType["DomesticWireDepositFee"] = "DOMESTIC_WIRE_DEPOSIT_FEE";
    FeeType["DomesticWireWithdrawalFee"] = "DOMESTIC_WIRE_WITHDRAWAL_FEE";
    FeeType["InternationalWireDepositFee"] = "INTERNATIONAL_WIRE_DEPOSIT_FEE";
    FeeType["InternationalWireWithdrawalFee"] = "INTERNATIONAL_WIRE_WITHDRAWAL_FEE";
    FeeType["BrokerFee"] = "BROKER_FEE";
    FeeType["OccFee"] = "OCC_FEE";
    FeeType["ContractFee"] = "CONTRACT_FEE";
    FeeType["OptionsRegulatory"] = "OPTIONS_REGULATORY";
    FeeType["FinancialTransactionTax"] = "FINANCIAL_TRANSACTION_TAX";
    FeeType["RegularCheckDelivery"] = "REGULAR_CHECK_DELIVERY";
    FeeType["OvernightCheckDelivery"] = "OVERNIGHT_CHECK_DELIVERY";
    FeeType["SaturdayCheckDelivery"] = "SATURDAY_CHECK_DELIVERY";
    FeeType["OvernightCheckToBroker"] = "OVERNIGHT_CHECK_TO_BROKER";
    FeeType["InternationalCheckOvernightDelivery"] = "INTERNATIONAL_CHECK_OVERNIGHT_DELIVERY";
    FeeType["InternationalCheckRegularDelivery"] = "INTERNATIONAL_CHECK_REGULAR_DELIVERY";
    FeeType["PrintCheckAtFirm"] = "PRINT_CHECK_AT_FIRM";
    FeeType["VoidedCheck"] = "VOIDED_CHECK";
    FeeType["StopPaymentAfter180Days"] = "STOP_PAYMENT_AFTER_180_DAYS";
})(FeeType || (FeeType = {}));
/** @internal */
export const FeeAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const FeeAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeeAmount$;
(function (FeeAmount$) {
    /** @deprecated use `FeeAmount$inboundSchema` instead. */
    FeeAmount$.inboundSchema = FeeAmount$inboundSchema;
    /** @deprecated use `FeeAmount$outboundSchema` instead. */
    FeeAmount$.outboundSchema = FeeAmount$outboundSchema;
})(FeeAmount$ || (FeeAmount$ = {}));
export function feeAmountToJSON(feeAmount) {
    return JSON.stringify(FeeAmount$outboundSchema.parse(feeAmount));
}
export function feeAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeeAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeeAmount' from JSON`);
}
/** @internal */
export const FeeType$inboundSchema = z
    .union([
    z.nativeEnum(FeeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FeeType$outboundSchema = z.union([
    z.nativeEnum(FeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeeType$;
(function (FeeType$) {
    /** @deprecated use `FeeType$inboundSchema` instead. */
    FeeType$.inboundSchema = FeeType$inboundSchema;
    /** @deprecated use `FeeType$outboundSchema` instead. */
    FeeType$.outboundSchema = FeeType$outboundSchema;
})(FeeType$ || (FeeType$ = {}));
/** @internal */
export const Fee$inboundSchema = z
    .object({
    amount: z.nullable(z.lazy(() => FeeAmount$inboundSchema)).optional(),
    type: FeeType$inboundSchema.optional(),
});
/** @internal */
export const Fee$outboundSchema = z
    .object({
    amount: z.nullable(z.lazy(() => FeeAmount$outboundSchema)).optional(),
    type: FeeType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fee$;
(function (Fee$) {
    /** @deprecated use `Fee$inboundSchema` instead. */
    Fee$.inboundSchema = Fee$inboundSchema;
    /** @deprecated use `Fee$outboundSchema` instead. */
    Fee$.outboundSchema = Fee$outboundSchema;
})(Fee$ || (Fee$ = {}));
export function feeToJSON(fee) {
    return JSON.stringify(Fee$outboundSchema.parse(fee));
}
export function feeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fee' from JSON`);
}
//# sourceMappingURL=fee.js.map