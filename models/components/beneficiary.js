/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The entity type of the beneficiary; Required if the beneficiary is a legal entity.
 */
export var BeneficiaryEntityType;
(function (BeneficiaryEntityType) {
    BeneficiaryEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    BeneficiaryEntityType["Corporation"] = "CORPORATION";
    BeneficiaryEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    BeneficiaryEntityType["Partnership"] = "PARTNERSHIP";
    BeneficiaryEntityType["Trust"] = "TRUST";
    BeneficiaryEntityType["Estate"] = "ESTATE";
})(BeneficiaryEntityType || (BeneficiaryEntityType = {}));
/**
 * The relationship of the beneficiary to the account owner
 */
export var BeneficiaryRelationType;
(function (BeneficiaryRelationType) {
    BeneficiaryRelationType["RelationTypeUnspecified"] = "RELATION_TYPE_UNSPECIFIED";
    BeneficiaryRelationType["Spouse"] = "SPOUSE";
    BeneficiaryRelationType["Trust"] = "TRUST";
    BeneficiaryRelationType["Other"] = "OTHER";
})(BeneficiaryRelationType || (BeneficiaryRelationType = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN. Tax id type is required if birth date is not provided.
 */
export var BeneficiaryTaxIdType;
(function (BeneficiaryTaxIdType) {
    BeneficiaryTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    BeneficiaryTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    BeneficiaryTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    BeneficiaryTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(BeneficiaryTaxIdType || (BeneficiaryTaxIdType = {}));
/** @internal */
export const BeneficiaryBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const BeneficiaryBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryBirthDate$;
(function (BeneficiaryBirthDate$) {
    /** @deprecated use `BeneficiaryBirthDate$inboundSchema` instead. */
    BeneficiaryBirthDate$.inboundSchema = BeneficiaryBirthDate$inboundSchema;
    /** @deprecated use `BeneficiaryBirthDate$outboundSchema` instead. */
    BeneficiaryBirthDate$.outboundSchema = BeneficiaryBirthDate$outboundSchema;
})(BeneficiaryBirthDate$ || (BeneficiaryBirthDate$ = {}));
export function beneficiaryBirthDateToJSON(beneficiaryBirthDate) {
    return JSON.stringify(BeneficiaryBirthDate$outboundSchema.parse(beneficiaryBirthDate));
}
export function beneficiaryBirthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BeneficiaryBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BeneficiaryBirthDate' from JSON`);
}
/** @internal */
export const BeneficiaryEntityType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryEntityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryEntityType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryEntityType$;
(function (BeneficiaryEntityType$) {
    /** @deprecated use `BeneficiaryEntityType$inboundSchema` instead. */
    BeneficiaryEntityType$.inboundSchema = BeneficiaryEntityType$inboundSchema;
    /** @deprecated use `BeneficiaryEntityType$outboundSchema` instead. */
    BeneficiaryEntityType$.outboundSchema = BeneficiaryEntityType$outboundSchema;
})(BeneficiaryEntityType$ || (BeneficiaryEntityType$ = {}));
/** @internal */
export const MailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const MailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MailingAddress$;
(function (MailingAddress$) {
    /** @deprecated use `MailingAddress$inboundSchema` instead. */
    MailingAddress$.inboundSchema = MailingAddress$inboundSchema;
    /** @deprecated use `MailingAddress$outboundSchema` instead. */
    MailingAddress$.outboundSchema = MailingAddress$outboundSchema;
})(MailingAddress$ || (MailingAddress$ = {}));
export function mailingAddressToJSON(mailingAddress) {
    return JSON.stringify(MailingAddress$outboundSchema.parse(mailingAddress));
}
export function mailingAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MailingAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MailingAddress' from JSON`);
}
/** @internal */
export const ShortCode$inboundSchema = z.object({
    number: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "region_code": "regionCode",
    });
});
/** @internal */
export const ShortCode$outboundSchema = z.object({
    number: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ShortCode$;
(function (ShortCode$) {
    /** @deprecated use `ShortCode$inboundSchema` instead. */
    ShortCode$.inboundSchema = ShortCode$inboundSchema;
    /** @deprecated use `ShortCode$outboundSchema` instead. */
    ShortCode$.outboundSchema = ShortCode$outboundSchema;
})(ShortCode$ || (ShortCode$ = {}));
export function shortCodeToJSON(shortCode) {
    return JSON.stringify(ShortCode$outboundSchema.parse(shortCode));
}
export function shortCodeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ShortCode$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ShortCode' from JSON`);
}
/** @internal */
export const PhoneNumber$inboundSchema = z.object({
    e164_number: z.string().optional(),
    extension: z.string().optional(),
    short_code: z.nullable(z.lazy(() => ShortCode$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "e164_number": "e164Number",
        "short_code": "shortCode",
    });
});
/** @internal */
export const PhoneNumber$outboundSchema = z.object({
    e164Number: z.string().optional(),
    extension: z.string().optional(),
    shortCode: z.nullable(z.lazy(() => ShortCode$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        e164Number: "e164_number",
        shortCode: "short_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PhoneNumber$;
(function (PhoneNumber$) {
    /** @deprecated use `PhoneNumber$inboundSchema` instead. */
    PhoneNumber$.inboundSchema = PhoneNumber$inboundSchema;
    /** @deprecated use `PhoneNumber$outboundSchema` instead. */
    PhoneNumber$.outboundSchema = PhoneNumber$outboundSchema;
})(PhoneNumber$ || (PhoneNumber$ = {}));
export function phoneNumberToJSON(phoneNumber) {
    return JSON.stringify(PhoneNumber$outboundSchema.parse(phoneNumber));
}
export function phoneNumberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PhoneNumber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PhoneNumber' from JSON`);
}
/** @internal */
export const BeneficiaryRelationType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryRelationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryRelationType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryRelationType$;
(function (BeneficiaryRelationType$) {
    /** @deprecated use `BeneficiaryRelationType$inboundSchema` instead. */
    BeneficiaryRelationType$.inboundSchema = BeneficiaryRelationType$inboundSchema;
    /** @deprecated use `BeneficiaryRelationType$outboundSchema` instead. */
    BeneficiaryRelationType$.outboundSchema = BeneficiaryRelationType$outboundSchema;
})(BeneficiaryRelationType$ || (BeneficiaryRelationType$ = {}));
/** @internal */
export const BeneficiaryTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryTaxIdType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryTaxIdType$;
(function (BeneficiaryTaxIdType$) {
    /** @deprecated use `BeneficiaryTaxIdType$inboundSchema` instead. */
    BeneficiaryTaxIdType$.inboundSchema = BeneficiaryTaxIdType$inboundSchema;
    /** @deprecated use `BeneficiaryTaxIdType$outboundSchema` instead. */
    BeneficiaryTaxIdType$.outboundSchema = BeneficiaryTaxIdType$outboundSchema;
})(BeneficiaryTaxIdType$ || (BeneficiaryTaxIdType$ = {}));
/** @internal */
export const Beneficiary$inboundSchema = z.object({
    beneficiary_percentage: z.number().int().optional(),
    birth_date: z.nullable(z.lazy(() => BeneficiaryBirthDate$inboundSchema))
        .optional(),
    email: z.string().optional(),
    entity_name: z.string().optional(),
    entity_type: BeneficiaryEntityType$inboundSchema.optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    mailing_address: z.nullable(z.lazy(() => MailingAddress$inboundSchema))
        .optional(),
    middle_names: z.string().optional(),
    phone_number: z.nullable(z.lazy(() => PhoneNumber$inboundSchema)).optional(),
    relation_type: BeneficiaryRelationType$inboundSchema.optional(),
    tax_id: z.string().optional(),
    tax_id_type: BeneficiaryTaxIdType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "beneficiary_percentage": "beneficiaryPercentage",
        "birth_date": "birthDate",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "family_name": "familyName",
        "given_name": "givenName",
        "mailing_address": "mailingAddress",
        "middle_names": "middleNames",
        "phone_number": "phoneNumber",
        "relation_type": "relationType",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
    });
});
/** @internal */
export const Beneficiary$outboundSchema = z.object({
    beneficiaryPercentage: z.number().int().optional(),
    birthDate: z.nullable(z.lazy(() => BeneficiaryBirthDate$outboundSchema))
        .optional(),
    email: z.string().optional(),
    entityName: z.string().optional(),
    entityType: BeneficiaryEntityType$outboundSchema.optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    mailingAddress: z.nullable(z.lazy(() => MailingAddress$outboundSchema))
        .optional(),
    middleNames: z.string().optional(),
    phoneNumber: z.nullable(z.lazy(() => PhoneNumber$outboundSchema)).optional(),
    relationType: BeneficiaryRelationType$outboundSchema.optional(),
    taxId: z.string().optional(),
    taxIdType: BeneficiaryTaxIdType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        beneficiaryPercentage: "beneficiary_percentage",
        birthDate: "birth_date",
        entityName: "entity_name",
        entityType: "entity_type",
        familyName: "family_name",
        givenName: "given_name",
        mailingAddress: "mailing_address",
        middleNames: "middle_names",
        phoneNumber: "phone_number",
        relationType: "relation_type",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Beneficiary$;
(function (Beneficiary$) {
    /** @deprecated use `Beneficiary$inboundSchema` instead. */
    Beneficiary$.inboundSchema = Beneficiary$inboundSchema;
    /** @deprecated use `Beneficiary$outboundSchema` instead. */
    Beneficiary$.outboundSchema = Beneficiary$outboundSchema;
})(Beneficiary$ || (Beneficiary$ = {}));
export function beneficiaryToJSON(beneficiary) {
    return JSON.stringify(Beneficiary$outboundSchema.parse(beneficiary));
}
export function beneficiaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Beneficiary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Beneficiary' from JSON`);
}
//# sourceMappingURL=beneficiary.js.map