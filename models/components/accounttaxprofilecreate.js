/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
 */
export var CostBasisLotDisposalMethod;
(function (CostBasisLotDisposalMethod) {
    CostBasisLotDisposalMethod["CostBasisLotDisposalMethodUnspecified"] = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED";
    CostBasisLotDisposalMethod["CostBasisLotDisposalFifo"] = "COST_BASIS_LOT_DISPOSAL_FIFO";
    CostBasisLotDisposalMethod["CostBasisLotDisposalLifo"] = "COST_BASIS_LOT_DISPOSAL_LIFO";
    CostBasisLotDisposalMethod["CostBasisLotDisposalHighCost"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST";
    CostBasisLotDisposalMethod["CostBasisLotDisposalHighCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM";
    CostBasisLotDisposalMethod["CostBasisLotDisposalHighCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM";
    CostBasisLotDisposalMethod["CostBasisLotDisposalLowCost"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST";
    CostBasisLotDisposalMethod["CostBasisLotDisposalLowCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM";
    CostBasisLotDisposalMethod["CostBasisLotDisposalLowCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM";
    CostBasisLotDisposalMethod["CostBasisLotDisposalMinTaxTerm"] = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM";
})(CostBasisLotDisposalMethod || (CostBasisLotDisposalMethod = {}));
/** @internal */
export const CostBasisLotDisposalMethod$inboundSchema = z
    .union([
    z.nativeEnum(CostBasisLotDisposalMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CostBasisLotDisposalMethod$outboundSchema = z.union([
    z.nativeEnum(CostBasisLotDisposalMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CostBasisLotDisposalMethod$;
(function (CostBasisLotDisposalMethod$) {
    /** @deprecated use `CostBasisLotDisposalMethod$inboundSchema` instead. */
    CostBasisLotDisposalMethod$.inboundSchema = CostBasisLotDisposalMethod$inboundSchema;
    /** @deprecated use `CostBasisLotDisposalMethod$outboundSchema` instead. */
    CostBasisLotDisposalMethod$.outboundSchema = CostBasisLotDisposalMethod$outboundSchema;
})(CostBasisLotDisposalMethod$ || (CostBasisLotDisposalMethod$ = {}));
/** @internal */
export const AccountTaxProfileCreate$inboundSchema = z.object({
    cost_basis_lot_disposal_method: CostBasisLotDisposalMethod$inboundSchema
        .optional(),
    section_475_election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "cost_basis_lot_disposal_method": "costBasisLotDisposalMethod",
        "section_475_election": "section475Election",
    });
});
/** @internal */
export const AccountTaxProfileCreate$outboundSchema = z.object({
    costBasisLotDisposalMethod: CostBasisLotDisposalMethod$outboundSchema
        .optional(),
    section475Election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        costBasisLotDisposalMethod: "cost_basis_lot_disposal_method",
        section475Election: "section_475_election",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTaxProfileCreate$;
(function (AccountTaxProfileCreate$) {
    /** @deprecated use `AccountTaxProfileCreate$inboundSchema` instead. */
    AccountTaxProfileCreate$.inboundSchema = AccountTaxProfileCreate$inboundSchema;
    /** @deprecated use `AccountTaxProfileCreate$outboundSchema` instead. */
    AccountTaxProfileCreate$.outboundSchema = AccountTaxProfileCreate$outboundSchema;
})(AccountTaxProfileCreate$ || (AccountTaxProfileCreate$ = {}));
export function accountTaxProfileCreateToJSON(accountTaxProfileCreate) {
    return JSON.stringify(AccountTaxProfileCreate$outboundSchema.parse(accountTaxProfileCreate));
}
export function accountTaxProfileCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTaxProfileCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTaxProfileCreate' from JSON`);
}
//# sourceMappingURL=accounttaxprofilecreate.js.map