/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
 */
export var AccountGoalsUpdateInvestmentObjective;
(function (AccountGoalsUpdateInvestmentObjective) {
    AccountGoalsUpdateInvestmentObjective["InvestmentObjectiveUnspecified"] = "INVESTMENT_OBJECTIVE_UNSPECIFIED";
    AccountGoalsUpdateInvestmentObjective["Balanced"] = "BALANCED";
    AccountGoalsUpdateInvestmentObjective["CapitalAppreciation"] = "CAPITAL_APPRECIATION";
    AccountGoalsUpdateInvestmentObjective["CapitalPreservation"] = "CAPITAL_PRESERVATION";
    AccountGoalsUpdateInvestmentObjective["Growth"] = "GROWTH";
    AccountGoalsUpdateInvestmentObjective["GrowthAndIncome"] = "GROWTH_AND_INCOME";
    AccountGoalsUpdateInvestmentObjective["GrowthIncome"] = "GROWTH_INCOME";
    AccountGoalsUpdateInvestmentObjective["Income"] = "INCOME";
    AccountGoalsUpdateInvestmentObjective["LongTermGrowthWithGreaterRisk"] = "LONG_TERM_GROWTH_WITH_GREATER_RISK";
    AccountGoalsUpdateInvestmentObjective["LongTermGrowthWithSafety"] = "LONG_TERM_GROWTH_WITH_SAFETY";
    AccountGoalsUpdateInvestmentObjective["MaximumGrowth"] = "MAXIMUM_GROWTH";
    AccountGoalsUpdateInvestmentObjective["ShortTermGrowthWithRisk"] = "SHORT_TERM_GROWTH_WITH_RISK";
    AccountGoalsUpdateInvestmentObjective["Speculation"] = "SPECULATION";
    AccountGoalsUpdateInvestmentObjective["Other"] = "OTHER";
})(AccountGoalsUpdateInvestmentObjective || (AccountGoalsUpdateInvestmentObjective = {}));
/**
 * An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
 */
export var AccountGoalsUpdateLiquidityNeeds;
(function (AccountGoalsUpdateLiquidityNeeds) {
    AccountGoalsUpdateLiquidityNeeds["LiquidityNeedsUnspecified"] = "LIQUIDITY_NEEDS_UNSPECIFIED";
    AccountGoalsUpdateLiquidityNeeds["VeryImportant"] = "VERY_IMPORTANT";
    AccountGoalsUpdateLiquidityNeeds["SomewhatImportant"] = "SOMEWHAT_IMPORTANT";
    AccountGoalsUpdateLiquidityNeeds["NotImportant"] = "NOT_IMPORTANT";
})(AccountGoalsUpdateLiquidityNeeds || (AccountGoalsUpdateLiquidityNeeds = {}));
/**
 * An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
 */
export var AccountGoalsUpdateRiskTolerance;
(function (AccountGoalsUpdateRiskTolerance) {
    AccountGoalsUpdateRiskTolerance["RiskToleranceUnspecified"] = "RISK_TOLERANCE_UNSPECIFIED";
    AccountGoalsUpdateRiskTolerance["Low"] = "LOW";
    AccountGoalsUpdateRiskTolerance["Medium"] = "MEDIUM";
    AccountGoalsUpdateRiskTolerance["High"] = "HIGH";
})(AccountGoalsUpdateRiskTolerance || (AccountGoalsUpdateRiskTolerance = {}));
/**
 * TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
 */
export var AccountGoalsUpdateTimeHorizon;
(function (AccountGoalsUpdateTimeHorizon) {
    AccountGoalsUpdateTimeHorizon["TimeHorizonUnspecified"] = "TIME_HORIZON_UNSPECIFIED";
    AccountGoalsUpdateTimeHorizon["Short"] = "SHORT";
    AccountGoalsUpdateTimeHorizon["Average"] = "AVERAGE";
    AccountGoalsUpdateTimeHorizon["Long"] = "LONG";
})(AccountGoalsUpdateTimeHorizon || (AccountGoalsUpdateTimeHorizon = {}));
/** @internal */
export const AccountGoalsUpdateInvestmentObjective$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateInvestmentObjective),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountGoalsUpdateInvestmentObjective$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateInvestmentObjective),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsUpdateInvestmentObjective$;
(function (AccountGoalsUpdateInvestmentObjective$) {
    /** @deprecated use `AccountGoalsUpdateInvestmentObjective$inboundSchema` instead. */
    AccountGoalsUpdateInvestmentObjective$.inboundSchema = AccountGoalsUpdateInvestmentObjective$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateInvestmentObjective$outboundSchema` instead. */
    AccountGoalsUpdateInvestmentObjective$.outboundSchema = AccountGoalsUpdateInvestmentObjective$outboundSchema;
})(AccountGoalsUpdateInvestmentObjective$ || (AccountGoalsUpdateInvestmentObjective$ = {}));
/** @internal */
export const AccountGoalsUpdateLiquidityNeeds$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateLiquidityNeeds),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountGoalsUpdateLiquidityNeeds$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateLiquidityNeeds),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsUpdateLiquidityNeeds$;
(function (AccountGoalsUpdateLiquidityNeeds$) {
    /** @deprecated use `AccountGoalsUpdateLiquidityNeeds$inboundSchema` instead. */
    AccountGoalsUpdateLiquidityNeeds$.inboundSchema = AccountGoalsUpdateLiquidityNeeds$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateLiquidityNeeds$outboundSchema` instead. */
    AccountGoalsUpdateLiquidityNeeds$.outboundSchema = AccountGoalsUpdateLiquidityNeeds$outboundSchema;
})(AccountGoalsUpdateLiquidityNeeds$ || (AccountGoalsUpdateLiquidityNeeds$ = {}));
/** @internal */
export const AccountGoalsUpdateRiskTolerance$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateRiskTolerance),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountGoalsUpdateRiskTolerance$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateRiskTolerance),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsUpdateRiskTolerance$;
(function (AccountGoalsUpdateRiskTolerance$) {
    /** @deprecated use `AccountGoalsUpdateRiskTolerance$inboundSchema` instead. */
    AccountGoalsUpdateRiskTolerance$.inboundSchema = AccountGoalsUpdateRiskTolerance$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateRiskTolerance$outboundSchema` instead. */
    AccountGoalsUpdateRiskTolerance$.outboundSchema = AccountGoalsUpdateRiskTolerance$outboundSchema;
})(AccountGoalsUpdateRiskTolerance$ || (AccountGoalsUpdateRiskTolerance$ = {}));
/** @internal */
export const AccountGoalsUpdateTimeHorizon$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateTimeHorizon),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountGoalsUpdateTimeHorizon$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateTimeHorizon),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsUpdateTimeHorizon$;
(function (AccountGoalsUpdateTimeHorizon$) {
    /** @deprecated use `AccountGoalsUpdateTimeHorizon$inboundSchema` instead. */
    AccountGoalsUpdateTimeHorizon$.inboundSchema = AccountGoalsUpdateTimeHorizon$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateTimeHorizon$outboundSchema` instead. */
    AccountGoalsUpdateTimeHorizon$.outboundSchema = AccountGoalsUpdateTimeHorizon$outboundSchema;
})(AccountGoalsUpdateTimeHorizon$ || (AccountGoalsUpdateTimeHorizon$ = {}));
/** @internal */
export const AccountGoalsUpdate$inboundSchema = z.object({
    investment_objective: AccountGoalsUpdateInvestmentObjective$inboundSchema
        .optional(),
    liquidity_needs: AccountGoalsUpdateLiquidityNeeds$inboundSchema.optional(),
    risk_tolerance: AccountGoalsUpdateRiskTolerance$inboundSchema.optional(),
    time_horizon: AccountGoalsUpdateTimeHorizon$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "investment_objective": "investmentObjective",
        "liquidity_needs": "liquidityNeeds",
        "risk_tolerance": "riskTolerance",
        "time_horizon": "timeHorizon",
    });
});
/** @internal */
export const AccountGoalsUpdate$outboundSchema = z.object({
    investmentObjective: AccountGoalsUpdateInvestmentObjective$outboundSchema
        .optional(),
    liquidityNeeds: AccountGoalsUpdateLiquidityNeeds$outboundSchema.optional(),
    riskTolerance: AccountGoalsUpdateRiskTolerance$outboundSchema.optional(),
    timeHorizon: AccountGoalsUpdateTimeHorizon$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        investmentObjective: "investment_objective",
        liquidityNeeds: "liquidity_needs",
        riskTolerance: "risk_tolerance",
        timeHorizon: "time_horizon",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsUpdate$;
(function (AccountGoalsUpdate$) {
    /** @deprecated use `AccountGoalsUpdate$inboundSchema` instead. */
    AccountGoalsUpdate$.inboundSchema = AccountGoalsUpdate$inboundSchema;
    /** @deprecated use `AccountGoalsUpdate$outboundSchema` instead. */
    AccountGoalsUpdate$.outboundSchema = AccountGoalsUpdate$outboundSchema;
})(AccountGoalsUpdate$ || (AccountGoalsUpdate$ = {}));
export function accountGoalsUpdateToJSON(accountGoalsUpdate) {
    return JSON.stringify(AccountGoalsUpdate$outboundSchema.parse(accountGoalsUpdate));
}
export function accountGoalsUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountGoalsUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountGoalsUpdate' from JSON`);
}
//# sourceMappingURL=accountgoalsupdate.js.map