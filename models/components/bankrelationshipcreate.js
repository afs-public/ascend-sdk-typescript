/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BankAccountCreate$inboundSchema, BankAccountCreate$outboundSchema, } from "./bankaccountcreate.js";
/**
 * The verification method of the bank relationship.
 */
export var VerificationMethod;
(function (VerificationMethod) {
    VerificationMethod["VerificationMethodUnspecified"] = "VERIFICATION_METHOD_UNSPECIFIED";
    VerificationMethod["MicroDeposit"] = "MICRO_DEPOSIT";
    VerificationMethod["Yodlee"] = "YODLEE";
    VerificationMethod["Quovo"] = "QUOVO";
    VerificationMethod["Giact"] = "GIACT";
    VerificationMethod["Synapse"] = "SYNAPSE";
    VerificationMethod["Sophtron"] = "SOPHTRON";
    VerificationMethod["InternalBank"] = "INTERNAL_BANK";
    VerificationMethod["Mx"] = "MX";
    VerificationMethod["Fiserv"] = "FISERV";
    VerificationMethod["PlaidToken"] = "PLAID_TOKEN";
})(VerificationMethod || (VerificationMethod = {}));
/** @internal */
export const VerificationMethod$inboundSchema = z
    .union([
    z.nativeEnum(VerificationMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const VerificationMethod$outboundSchema = z.union([
    z.nativeEnum(VerificationMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VerificationMethod$;
(function (VerificationMethod$) {
    /** @deprecated use `VerificationMethod$inboundSchema` instead. */
    VerificationMethod$.inboundSchema = VerificationMethod$inboundSchema;
    /** @deprecated use `VerificationMethod$outboundSchema` instead. */
    VerificationMethod$.outboundSchema = VerificationMethod$outboundSchema;
})(VerificationMethod$ || (VerificationMethod$ = {}));
/** @internal */
export const BankRelationshipCreate$inboundSchema = z.object({
    bank_account: BankAccountCreate$inboundSchema.optional(),
    nickname: z.string(),
    plaid_processor_token: z.string().optional(),
    verification_method: VerificationMethod$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "bank_account": "bankAccount",
        "plaid_processor_token": "plaidProcessorToken",
        "verification_method": "verificationMethod",
    });
});
/** @internal */
export const BankRelationshipCreate$outboundSchema = z.object({
    bankAccount: BankAccountCreate$outboundSchema.optional(),
    nickname: z.string(),
    plaidProcessorToken: z.string().optional(),
    verificationMethod: VerificationMethod$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        bankAccount: "bank_account",
        plaidProcessorToken: "plaid_processor_token",
        verificationMethod: "verification_method",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipCreate$;
(function (BankRelationshipCreate$) {
    /** @deprecated use `BankRelationshipCreate$inboundSchema` instead. */
    BankRelationshipCreate$.inboundSchema = BankRelationshipCreate$inboundSchema;
    /** @deprecated use `BankRelationshipCreate$outboundSchema` instead. */
    BankRelationshipCreate$.outboundSchema = BankRelationshipCreate$outboundSchema;
})(BankRelationshipCreate$ || (BankRelationshipCreate$ = {}));
export function bankRelationshipCreateToJSON(bankRelationshipCreate) {
    return JSON.stringify(BankRelationshipCreate$outboundSchema.parse(bankRelationshipCreate));
}
export function bankRelationshipCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankRelationshipCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankRelationshipCreate' from JSON`);
}
//# sourceMappingURL=bankrelationshipcreate.js.map