/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { PhoneNumberCreate$inboundSchema, PhoneNumberCreate$outboundSchema, } from "./phonenumbercreate.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
/**
 * The entity type of the beneficiary; Required if the beneficiary is a legal entity.
 */
export var BeneficiaryCreateEntityType;
(function (BeneficiaryCreateEntityType) {
    BeneficiaryCreateEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    BeneficiaryCreateEntityType["Corporation"] = "CORPORATION";
    BeneficiaryCreateEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    BeneficiaryCreateEntityType["Partnership"] = "PARTNERSHIP";
    BeneficiaryCreateEntityType["Trust"] = "TRUST";
    BeneficiaryCreateEntityType["Estate"] = "ESTATE";
})(BeneficiaryCreateEntityType || (BeneficiaryCreateEntityType = {}));
/**
 * The relationship of the beneficiary to the account owner
 */
export var BeneficiaryCreateRelationType;
(function (BeneficiaryCreateRelationType) {
    BeneficiaryCreateRelationType["RelationTypeUnspecified"] = "RELATION_TYPE_UNSPECIFIED";
    BeneficiaryCreateRelationType["Spouse"] = "SPOUSE";
    BeneficiaryCreateRelationType["Trust"] = "TRUST";
    BeneficiaryCreateRelationType["Other"] = "OTHER";
})(BeneficiaryCreateRelationType || (BeneficiaryCreateRelationType = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN. Tax id type is required if birth date is not provided.
 */
export var BeneficiaryCreateTaxIdType;
(function (BeneficiaryCreateTaxIdType) {
    BeneficiaryCreateTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    BeneficiaryCreateTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    BeneficiaryCreateTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    BeneficiaryCreateTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(BeneficiaryCreateTaxIdType || (BeneficiaryCreateTaxIdType = {}));
/** @internal */
export const BeneficiaryCreateEntityType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryCreateEntityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryCreateEntityType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryCreateEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryCreateEntityType$;
(function (BeneficiaryCreateEntityType$) {
    /** @deprecated use `BeneficiaryCreateEntityType$inboundSchema` instead. */
    BeneficiaryCreateEntityType$.inboundSchema = BeneficiaryCreateEntityType$inboundSchema;
    /** @deprecated use `BeneficiaryCreateEntityType$outboundSchema` instead. */
    BeneficiaryCreateEntityType$.outboundSchema = BeneficiaryCreateEntityType$outboundSchema;
})(BeneficiaryCreateEntityType$ || (BeneficiaryCreateEntityType$ = {}));
/** @internal */
export const BeneficiaryCreateRelationType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryCreateRelationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryCreateRelationType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryCreateRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryCreateRelationType$;
(function (BeneficiaryCreateRelationType$) {
    /** @deprecated use `BeneficiaryCreateRelationType$inboundSchema` instead. */
    BeneficiaryCreateRelationType$.inboundSchema = BeneficiaryCreateRelationType$inboundSchema;
    /** @deprecated use `BeneficiaryCreateRelationType$outboundSchema` instead. */
    BeneficiaryCreateRelationType$.outboundSchema = BeneficiaryCreateRelationType$outboundSchema;
})(BeneficiaryCreateRelationType$ || (BeneficiaryCreateRelationType$ = {}));
/** @internal */
export const BeneficiaryCreateTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryCreateTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BeneficiaryCreateTaxIdType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryCreateTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryCreateTaxIdType$;
(function (BeneficiaryCreateTaxIdType$) {
    /** @deprecated use `BeneficiaryCreateTaxIdType$inboundSchema` instead. */
    BeneficiaryCreateTaxIdType$.inboundSchema = BeneficiaryCreateTaxIdType$inboundSchema;
    /** @deprecated use `BeneficiaryCreateTaxIdType$outboundSchema` instead. */
    BeneficiaryCreateTaxIdType$.outboundSchema = BeneficiaryCreateTaxIdType$outboundSchema;
})(BeneficiaryCreateTaxIdType$ || (BeneficiaryCreateTaxIdType$ = {}));
/** @internal */
export const BeneficiaryCreate$inboundSchema = z.object({
    beneficiary_percentage: z.number().int(),
    birth_date: DateCreate$inboundSchema.optional(),
    email: z.string().optional(),
    entity_name: z.string().optional(),
    entity_type: BeneficiaryCreateEntityType$inboundSchema.optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    mailing_address: PostalAddressCreate$inboundSchema.optional(),
    middle_names: z.string().optional(),
    phone_number: PhoneNumberCreate$inboundSchema.optional(),
    relation_type: BeneficiaryCreateRelationType$inboundSchema,
    tax_id: z.string().optional(),
    tax_id_type: BeneficiaryCreateTaxIdType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "beneficiary_percentage": "beneficiaryPercentage",
        "birth_date": "birthDate",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "family_name": "familyName",
        "given_name": "givenName",
        "mailing_address": "mailingAddress",
        "middle_names": "middleNames",
        "phone_number": "phoneNumber",
        "relation_type": "relationType",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
    });
});
/** @internal */
export const BeneficiaryCreate$outboundSchema = z.object({
    beneficiaryPercentage: z.number().int(),
    birthDate: DateCreate$outboundSchema.optional(),
    email: z.string().optional(),
    entityName: z.string().optional(),
    entityType: BeneficiaryCreateEntityType$outboundSchema.optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    mailingAddress: PostalAddressCreate$outboundSchema.optional(),
    middleNames: z.string().optional(),
    phoneNumber: PhoneNumberCreate$outboundSchema.optional(),
    relationType: BeneficiaryCreateRelationType$outboundSchema,
    taxId: z.string().optional(),
    taxIdType: BeneficiaryCreateTaxIdType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        beneficiaryPercentage: "beneficiary_percentage",
        birthDate: "birth_date",
        entityName: "entity_name",
        entityType: "entity_type",
        familyName: "family_name",
        givenName: "given_name",
        mailingAddress: "mailing_address",
        middleNames: "middle_names",
        phoneNumber: "phone_number",
        relationType: "relation_type",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryCreate$;
(function (BeneficiaryCreate$) {
    /** @deprecated use `BeneficiaryCreate$inboundSchema` instead. */
    BeneficiaryCreate$.inboundSchema = BeneficiaryCreate$inboundSchema;
    /** @deprecated use `BeneficiaryCreate$outboundSchema` instead. */
    BeneficiaryCreate$.outboundSchema = BeneficiaryCreate$outboundSchema;
})(BeneficiaryCreate$ || (BeneficiaryCreate$ = {}));
export function beneficiaryCreateToJSON(beneficiaryCreate) {
    return JSON.stringify(BeneficiaryCreate$outboundSchema.parse(beneficiaryCreate));
}
export function beneficiaryCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BeneficiaryCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BeneficiaryCreate' from JSON`);
}
//# sourceMappingURL=beneficiarycreate.js.map