/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { EntityDueDiligenceCreate$inboundSchema, EntityDueDiligenceCreate$outboundSchema, } from "./entityduediligencecreate.js";
import { LargeTraderCreate$inboundSchema, LargeTraderCreate$outboundSchema, } from "./largetradercreate.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
import { TaxProfileCreate$inboundSchema, TaxProfileCreate$outboundSchema, } from "./taxprofilecreate.js";
export var BusinessIndustrialClassification;
(function (BusinessIndustrialClassification) {
    BusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    BusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    BusinessIndustrialClassification["Mining"] = "MINING";
    BusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    BusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    BusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    BusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    BusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    BusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    BusinessIndustrialClassification["Services"] = "SERVICES";
    BusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(BusinessIndustrialClassification || (BusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
export var CorporateStructure;
(function (CorporateStructure) {
    CorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    CorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    CorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    CorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    CorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(CorporateStructure || (CorporateStructure = {}));
/**
 * The entity type.
 */
export var EntityType;
(function (EntityType) {
    EntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    EntityType["Corporation"] = "CORPORATION";
    EntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    EntityType["Partnership"] = "PARTNERSHIP";
    EntityType["Trust"] = "TRUST";
    EntityType["Estate"] = "ESTATE";
})(EntityType || (EntityType = {}));
/**
 * **Field Dependencies:**
 *
 * @remarks
 *
 * Exempt entities must set `exempt_verifying_beneficial_owners` to `true` and provide an `exempt_customer_reason` on the owner record.
 *
 * Required if `exempt_verifying_beneficial_owners` is `true`.
 *
 * Otherwise, must be empty.
 */
export var ExemptCustomerReason;
(function (ExemptCustomerReason) {
    ExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    ExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    ExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    ExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    ExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    ExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    ExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    ExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    ExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    ExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    ExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    ExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(ExemptCustomerReason || (ExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var LegalEntityCreateTaxIdType;
(function (LegalEntityCreateTaxIdType) {
    LegalEntityCreateTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalEntityCreateTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalEntityCreateTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalEntityCreateTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalEntityCreateTaxIdType || (LegalEntityCreateTaxIdType = {}));
/** @internal */
export const BusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(BusinessIndustrialClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(BusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BusinessIndustrialClassification$;
(function (BusinessIndustrialClassification$) {
    /** @deprecated use `BusinessIndustrialClassification$inboundSchema` instead. */
    BusinessIndustrialClassification$.inboundSchema = BusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `BusinessIndustrialClassification$outboundSchema` instead. */
    BusinessIndustrialClassification$.outboundSchema = BusinessIndustrialClassification$outboundSchema;
})(BusinessIndustrialClassification$ || (BusinessIndustrialClassification$ = {}));
/** @internal */
export const CorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(CorporateStructure),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CorporateStructure$outboundSchema = z.union([
    z.nativeEnum(CorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CorporateStructure$;
(function (CorporateStructure$) {
    /** @deprecated use `CorporateStructure$inboundSchema` instead. */
    CorporateStructure$.inboundSchema = CorporateStructure$inboundSchema;
    /** @deprecated use `CorporateStructure$outboundSchema` instead. */
    CorporateStructure$.outboundSchema = CorporateStructure$outboundSchema;
})(CorporateStructure$ || (CorporateStructure$ = {}));
/** @internal */
export const EntityType$inboundSchema = z
    .union([
    z.nativeEnum(EntityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntityType$outboundSchema = z.union([
    z.nativeEnum(EntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityType$;
(function (EntityType$) {
    /** @deprecated use `EntityType$inboundSchema` instead. */
    EntityType$.inboundSchema = EntityType$inboundSchema;
    /** @deprecated use `EntityType$outboundSchema` instead. */
    EntityType$.outboundSchema = EntityType$outboundSchema;
})(EntityType$ || (EntityType$ = {}));
/** @internal */
export const ExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(ExemptCustomerReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(ExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExemptCustomerReason$;
(function (ExemptCustomerReason$) {
    /** @deprecated use `ExemptCustomerReason$inboundSchema` instead. */
    ExemptCustomerReason$.inboundSchema = ExemptCustomerReason$inboundSchema;
    /** @deprecated use `ExemptCustomerReason$outboundSchema` instead. */
    ExemptCustomerReason$.outboundSchema = ExemptCustomerReason$outboundSchema;
})(ExemptCustomerReason$ || (ExemptCustomerReason$ = {}));
/** @internal */
export const LegalEntityCreateTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityCreateTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalEntityCreateTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityCreateTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityCreateTaxIdType$;
(function (LegalEntityCreateTaxIdType$) {
    /** @deprecated use `LegalEntityCreateTaxIdType$inboundSchema` instead. */
    LegalEntityCreateTaxIdType$.inboundSchema = LegalEntityCreateTaxIdType$inboundSchema;
    /** @deprecated use `LegalEntityCreateTaxIdType$outboundSchema` instead. */
    LegalEntityCreateTaxIdType$.outboundSchema = LegalEntityCreateTaxIdType$outboundSchema;
})(LegalEntityCreateTaxIdType$ || (LegalEntityCreateTaxIdType$ = {}));
/** @internal */
export const LegalEntityCreate$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: BusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: CorporateStructure$inboundSchema.optional(),
    correspondent_id: z.string(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: EntityDueDiligenceCreate$inboundSchema.optional(),
    entity_name: z.string(),
    entity_type: EntityType$inboundSchema,
    exempt_customer_reason: ExemptCustomerReason$inboundSchema.optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: DateCreate$inboundSchema.optional(),
    institutional_customer: z.boolean().optional(),
    large_trader: LargeTraderCreate$inboundSchema.optional(),
    legal_address: PostalAddressCreate$inboundSchema,
    lei_code: z.string().optional(),
    operating_regions: z.array(z.string()),
    registration_region: z.string(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    subject_to_backup_withholding: z.boolean().optional(),
    tax_id: z.string(),
    tax_id_type: LegalEntityCreateTaxIdType$inboundSchema,
    tax_profile: TaxProfileCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "institutional_customer": "institutionalCustomer",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "subject_to_backup_withholding": "subjectToBackupWithholding",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const LegalEntityCreate$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: BusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: CorporateStructure$outboundSchema.optional(),
    correspondentId: z.string(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: EntityDueDiligenceCreate$outboundSchema.optional(),
    entityName: z.string(),
    entityType: EntityType$outboundSchema,
    exemptCustomerReason: ExemptCustomerReason$outboundSchema.optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: DateCreate$outboundSchema.optional(),
    institutionalCustomer: z.boolean().optional(),
    largeTrader: LargeTraderCreate$outboundSchema.optional(),
    legalAddress: PostalAddressCreate$outboundSchema,
    leiCode: z.string().optional(),
    operatingRegions: z.array(z.string()),
    registrationRegion: z.string(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    subjectToBackupWithholding: z.boolean().optional(),
    taxId: z.string(),
    taxIdType: LegalEntityCreateTaxIdType$outboundSchema,
    taxProfile: TaxProfileCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        institutionalCustomer: "institutional_customer",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        subjectToBackupWithholding: "subject_to_backup_withholding",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalEntityCreate$;
(function (LegalEntityCreate$) {
    /** @deprecated use `LegalEntityCreate$inboundSchema` instead. */
    LegalEntityCreate$.inboundSchema = LegalEntityCreate$inboundSchema;
    /** @deprecated use `LegalEntityCreate$outboundSchema` instead. */
    LegalEntityCreate$.outboundSchema = LegalEntityCreate$outboundSchema;
})(LegalEntityCreate$ || (LegalEntityCreate$ = {}));
export function legalEntityCreateToJSON(legalEntityCreate) {
    return JSON.stringify(LegalEntityCreate$outboundSchema.parse(legalEntityCreate));
}
export function legalEntityCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalEntityCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalEntityCreate' from JSON`);
}
//# sourceMappingURL=legalentitycreate.js.map