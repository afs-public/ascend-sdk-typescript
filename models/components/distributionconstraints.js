/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DistributionConstraintsDistributionTypeInfo$inboundSchema, DistributionConstraintsDistributionTypeInfo$outboundSchema, } from "./distributionconstraintsdistributiontypeinfo.js";
/** @internal */
export const DistributionConstraints$inboundSchema = z.object({
    full_distribution_allowed: z.boolean().optional(),
    valid_types: z.array(DistributionConstraintsDistributionTypeInfo$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "full_distribution_allowed": "fullDistributionAllowed",
        "valid_types": "validTypes",
    });
});
/** @internal */
export const DistributionConstraints$outboundSchema = z.object({
    fullDistributionAllowed: z.boolean().optional(),
    validTypes: z.array(DistributionConstraintsDistributionTypeInfo$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fullDistributionAllowed: "full_distribution_allowed",
        validTypes: "valid_types",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionConstraints$;
(function (DistributionConstraints$) {
    /** @deprecated use `DistributionConstraints$inboundSchema` instead. */
    DistributionConstraints$.inboundSchema = DistributionConstraints$inboundSchema;
    /** @deprecated use `DistributionConstraints$outboundSchema` instead. */
    DistributionConstraints$.outboundSchema = DistributionConstraints$outboundSchema;
})(DistributionConstraints$ || (DistributionConstraints$ = {}));
export function distributionConstraintsToJSON(distributionConstraints) {
    return JSON.stringify(DistributionConstraints$outboundSchema.parse(distributionConstraints));
}
export function distributionConstraintsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionConstraints$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionConstraints' from JSON`);
}
//# sourceMappingURL=distributionconstraints.js.map