/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Token$inboundSchema = z
    .object({
    access_token: z.string().optional(),
    expires_in: z.number().int().optional(),
    token_type: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "access_token": "accessToken",
        "expires_in": "expiresIn",
        "token_type": "tokenType",
    });
});
/** @internal */
export const Token$outboundSchema = z.object({
    accessToken: z.string().optional(),
    expiresIn: z.number().int().optional(),
    tokenType: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accessToken: "access_token",
        expiresIn: "expires_in",
        tokenType: "token_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Token$;
(function (Token$) {
    /** @deprecated use `Token$inboundSchema` instead. */
    Token$.inboundSchema = Token$inboundSchema;
    /** @deprecated use `Token$outboundSchema` instead. */
    Token$.outboundSchema = Token$outboundSchema;
})(Token$ || (Token$ = {}));
export function tokenToJSON(token) {
    return JSON.stringify(Token$outboundSchema.parse(token));
}
export function tokenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Token$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Token' from JSON`);
}
//# sourceMappingURL=token.js.map