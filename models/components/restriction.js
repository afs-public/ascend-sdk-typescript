/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Restriction$inboundSchema = z.object({
    active: z.boolean().optional(),
    create_reason: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    create_user_id: z.string().optional(),
    ended_reason: z.string().optional(),
    ended_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ended_user_id: z.string().optional(),
    restriction_code: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "create_reason": "createReason",
        "create_time": "createTime",
        "create_user_id": "createUserId",
        "ended_reason": "endedReason",
        "ended_time": "endedTime",
        "ended_user_id": "endedUserId",
        "restriction_code": "restrictionCode",
    });
});
/** @internal */
export const Restriction$outboundSchema = z.object({
    active: z.boolean().optional(),
    createReason: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createUserId: z.string().optional(),
    endedReason: z.string().optional(),
    endedTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    endedUserId: z.string().optional(),
    restrictionCode: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        createReason: "create_reason",
        createTime: "create_time",
        createUserId: "create_user_id",
        endedReason: "ended_reason",
        endedTime: "ended_time",
        endedUserId: "ended_user_id",
        restrictionCode: "restriction_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Restriction$;
(function (Restriction$) {
    /** @deprecated use `Restriction$inboundSchema` instead. */
    Restriction$.inboundSchema = Restriction$inboundSchema;
    /** @deprecated use `Restriction$outboundSchema` instead. */
    Restriction$.outboundSchema = Restriction$outboundSchema;
})(Restriction$ || (Restriction$ = {}));
export function restrictionToJSON(restriction) {
    return JSON.stringify(Restriction$outboundSchema.parse(restriction));
}
export function restrictionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Restriction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Restriction' from JSON`);
}
//# sourceMappingURL=restriction.js.map