/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Federal tax classification.
 */
export var FederalTaxClassification;
(function (FederalTaxClassification) {
    FederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    FederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    FederalTaxClassification["Partnership"] = "PARTNERSHIP";
    FederalTaxClassification["CCorporation"] = "C_CORPORATION";
    FederalTaxClassification["SCorporation"] = "S_CORPORATION";
    FederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    FederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    FederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    FederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    FederalTaxClassification["Other"] = "OTHER";
})(FederalTaxClassification || (FederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var IrsFormType;
(function (IrsFormType) {
    IrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    IrsFormType["W9"] = "W_9";
    IrsFormType["W8Ben"] = "W_8BEN";
})(IrsFormType || (IrsFormType = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var UsTinStatus;
(function (UsTinStatus) {
    UsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    UsTinStatus["Passing"] = "PASSING";
    UsTinStatus["Failing"] = "FAILING";
})(UsTinStatus || (UsTinStatus = {}));
/** @internal */
export const FederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(FederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(FederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FederalTaxClassification$;
(function (FederalTaxClassification$) {
    /** @deprecated use `FederalTaxClassification$inboundSchema` instead. */
    FederalTaxClassification$.inboundSchema = FederalTaxClassification$inboundSchema;
    /** @deprecated use `FederalTaxClassification$outboundSchema` instead. */
    FederalTaxClassification$.outboundSchema = FederalTaxClassification$outboundSchema;
})(FederalTaxClassification$ || (FederalTaxClassification$ = {}));
/** @internal */
export const IrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(IrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IrsFormType$outboundSchema = z.union([
    z.nativeEnum(IrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IrsFormType$;
(function (IrsFormType$) {
    /** @deprecated use `IrsFormType$inboundSchema` instead. */
    IrsFormType$.inboundSchema = IrsFormType$inboundSchema;
    /** @deprecated use `IrsFormType$outboundSchema` instead. */
    IrsFormType$.outboundSchema = IrsFormType$outboundSchema;
})(IrsFormType$ || (IrsFormType$ = {}));
/** @internal */
export const UsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(UsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UsTinStatus$outboundSchema = z.union([
    z.nativeEnum(UsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UsTinStatus$;
(function (UsTinStatus$) {
    /** @deprecated use `UsTinStatus$inboundSchema` instead. */
    UsTinStatus$.inboundSchema = UsTinStatus$inboundSchema;
    /** @deprecated use `UsTinStatus$outboundSchema` instead. */
    UsTinStatus$.outboundSchema = UsTinStatus$outboundSchema;
})(UsTinStatus$ || (UsTinStatus$ = {}));
/** @internal */
export const TaxProfileCreate$inboundSchema = z.object({
    federal_tax_classification: FederalTaxClassification$inboundSchema,
    irs_form_type: IrsFormType$inboundSchema,
    legal_tax_region_code: z.string(),
    us_tin_status: UsTinStatus$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "federal_tax_classification": "federalTaxClassification",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "us_tin_status": "usTinStatus",
    });
});
/** @internal */
export const TaxProfileCreate$outboundSchema = z.object({
    federalTaxClassification: FederalTaxClassification$outboundSchema,
    irsFormType: IrsFormType$outboundSchema,
    legalTaxRegionCode: z.string(),
    usTinStatus: UsTinStatus$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        federalTaxClassification: "federal_tax_classification",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        usTinStatus: "us_tin_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfileCreate$;
(function (TaxProfileCreate$) {
    /** @deprecated use `TaxProfileCreate$inboundSchema` instead. */
    TaxProfileCreate$.inboundSchema = TaxProfileCreate$inboundSchema;
    /** @deprecated use `TaxProfileCreate$outboundSchema` instead. */
    TaxProfileCreate$.outboundSchema = TaxProfileCreate$outboundSchema;
})(TaxProfileCreate$ || (TaxProfileCreate$ = {}));
export function taxProfileCreateToJSON(taxProfileCreate) {
    return JSON.stringify(TaxProfileCreate$outboundSchema.parse(taxProfileCreate));
}
export function taxProfileCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxProfileCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxProfileCreate' from JSON`);
}
//# sourceMappingURL=taxprofilecreate.js.map