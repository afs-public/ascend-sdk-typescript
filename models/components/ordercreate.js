/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { CommissionCreate$inboundSchema, CommissionCreate$outboundSchema, } from "./commissioncreate.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
import { FeeCreate$inboundSchema, FeeCreate$outboundSchema, } from "./feecreate.js";
import { LetterOfIntentCreate$inboundSchema, LetterOfIntentCreate$outboundSchema, } from "./letterofintentcreate.js";
import { LimitPriceCreate$inboundSchema, LimitPriceCreate$outboundSchema, } from "./limitpricecreate.js";
import { RightsOfAccumulationCreate$inboundSchema, RightsOfAccumulationCreate$outboundSchema, } from "./rightsofaccumulationcreate.js";
import { StopPriceCreate$inboundSchema, StopPriceCreate$outboundSchema, } from "./stoppricecreate.js";
/**
 * The type of the asset in this order, which must be one of the following:
 *
 * @remarks
 *  EQUITY, MUTUAL_FUND, and FIXED_INCOME.
 */
export var AssetType;
(function (AssetType) {
    AssetType["Equity"] = "EQUITY";
    AssetType["FixedIncome"] = "FIXED_INCOME";
    AssetType["MutualFund"] = "MUTUAL_FUND";
})(AssetType || (AssetType = {}));
/**
 * Defaults to "AGENCY" if not specified. For Equities: Only "AGENCY" is allowed. For Mutual Funds: Only "AGENCY" is allowed. For Fixed Income: Either "AGENCY" or "PRINCIPAL" are allowed.
 */
export var BrokerCapacity;
(function (BrokerCapacity) {
    BrokerCapacity["BrokerCapacityUnspecified"] = "BROKER_CAPACITY_UNSPECIFIED";
    BrokerCapacity["Agency"] = "AGENCY";
    BrokerCapacity["Principal"] = "PRINCIPAL";
})(BrokerCapacity || (BrokerCapacity = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported For Fixed Income: only CUSIP and ISIN are supported
 */
export var IdentifierType;
(function (IdentifierType) {
    IdentifierType["Symbol"] = "SYMBOL";
    IdentifierType["Cusip"] = "CUSIP";
    IdentifierType["Isin"] = "ISIN";
})(IdentifierType || (IdentifierType = {}));
/**
 * The execution type of this order. For Equities: MARKET, LIMIT, STOP and MARKET_IF_TOUCHED are supported. For Mutual Funds: only MARKET is supported. For Fixed Income: only LIMIT is supported.
 */
export var OrderType;
(function (OrderType) {
    OrderType["Limit"] = "LIMIT";
    OrderType["Market"] = "MARKET";
    OrderType["Stop"] = "STOP";
    OrderType["MarketIfTouched"] = "MARKET_IF_TOUCHED";
})(OrderType || (OrderType = {}));
/**
 * The side of this order.
 */
export var Side;
(function (Side) {
    Side["SideUnspecified"] = "SIDE_UNSPECIFIED";
    Side["Buy"] = "BUY";
    Side["Sell"] = "SELL";
})(Side || (Side = {}));
export var SpecialReportingInstructions;
(function (SpecialReportingInstructions) {
    SpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    SpecialReportingInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    SpecialReportingInstructions["WithDividend"] = "WITH_DIVIDEND";
    SpecialReportingInstructions["WithRights"] = "WITH_RIGHTS";
    SpecialReportingInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    SpecialReportingInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    SpecialReportingInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    SpecialReportingInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    SpecialReportingInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    SpecialReportingInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    SpecialReportingInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    SpecialReportingInstructions["Solicited"] = "SOLICITED";
    SpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    SpecialReportingInstructions["XDividend"] = "X_DIVIDEND";
    SpecialReportingInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    SpecialReportingInstructions["AveragePrice"] = "AVERAGE_PRICE";
    SpecialReportingInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    SpecialReportingInstructions["InternetOrder"] = "INTERNET_ORDER";
    SpecialReportingInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    SpecialReportingInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    SpecialReportingInstructions["RisklessPrincipal"] = "RISKLESS_PRINCIPAL";
    SpecialReportingInstructions["ThirdMarket"] = "THIRD_MARKET";
    SpecialReportingInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    SpecialReportingInstructions["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(SpecialReportingInstructions || (SpecialReportingInstructions = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
export var TimeInForce;
(function (TimeInForce) {
    TimeInForce["Day"] = "DAY";
    TimeInForce["GoodTillDate"] = "GOOD_TILL_DATE";
})(TimeInForce || (TimeInForce = {}));
/**
 * Which TradingSession to trade in, defaults to 'CORE'. Only available for Equity orders.
 */
export var TradingSession;
(function (TradingSession) {
    TradingSession["TradingSessionUnspecified"] = "TRADING_SESSION_UNSPECIFIED";
    TradingSession["Core"] = "CORE";
    TradingSession["Pre"] = "PRE";
    TradingSession["Post"] = "POST";
    TradingSession["Overnight"] = "OVERNIGHT";
    TradingSession["Apex24"] = "APEX24";
    TradingSession["Gtx"] = "GTX";
})(TradingSession || (TradingSession = {}));
/** @internal */
export const AssetType$inboundSchema = z
    .union([
    z.nativeEnum(AssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AssetType$outboundSchema = z.union([
    z.nativeEnum(AssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetType$;
(function (AssetType$) {
    /** @deprecated use `AssetType$inboundSchema` instead. */
    AssetType$.inboundSchema = AssetType$inboundSchema;
    /** @deprecated use `AssetType$outboundSchema` instead. */
    AssetType$.outboundSchema = AssetType$outboundSchema;
})(AssetType$ || (AssetType$ = {}));
/** @internal */
export const BrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(BrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(BrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BrokerCapacity$;
(function (BrokerCapacity$) {
    /** @deprecated use `BrokerCapacity$inboundSchema` instead. */
    BrokerCapacity$.inboundSchema = BrokerCapacity$inboundSchema;
    /** @deprecated use `BrokerCapacity$outboundSchema` instead. */
    BrokerCapacity$.outboundSchema = BrokerCapacity$outboundSchema;
})(BrokerCapacity$ || (BrokerCapacity$ = {}));
/** @internal */
export const IdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(IdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentifierType$outboundSchema = z.union([
    z.nativeEnum(IdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentifierType$;
(function (IdentifierType$) {
    /** @deprecated use `IdentifierType$inboundSchema` instead. */
    IdentifierType$.inboundSchema = IdentifierType$inboundSchema;
    /** @deprecated use `IdentifierType$outboundSchema` instead. */
    IdentifierType$.outboundSchema = IdentifierType$outboundSchema;
})(IdentifierType$ || (IdentifierType$ = {}));
/** @internal */
export const OrderType$inboundSchema = z
    .union([
    z.nativeEnum(OrderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OrderType$outboundSchema = z.union([
    z.nativeEnum(OrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderType$;
(function (OrderType$) {
    /** @deprecated use `OrderType$inboundSchema` instead. */
    OrderType$.inboundSchema = OrderType$inboundSchema;
    /** @deprecated use `OrderType$outboundSchema` instead. */
    OrderType$.outboundSchema = OrderType$outboundSchema;
})(OrderType$ || (OrderType$ = {}));
/** @internal */
export const Side$inboundSchema = z
    .union([
    z.nativeEnum(Side),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Side$outboundSchema = z.union([
    z.nativeEnum(Side),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Side$;
(function (Side$) {
    /** @deprecated use `Side$inboundSchema` instead. */
    Side$.inboundSchema = Side$inboundSchema;
    /** @deprecated use `Side$outboundSchema` instead. */
    Side$.outboundSchema = Side$outboundSchema;
})(Side$ || (Side$ = {}));
/** @internal */
export const SpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(SpecialReportingInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(SpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SpecialReportingInstructions$;
(function (SpecialReportingInstructions$) {
    /** @deprecated use `SpecialReportingInstructions$inboundSchema` instead. */
    SpecialReportingInstructions$.inboundSchema = SpecialReportingInstructions$inboundSchema;
    /** @deprecated use `SpecialReportingInstructions$outboundSchema` instead. */
    SpecialReportingInstructions$.outboundSchema = SpecialReportingInstructions$outboundSchema;
})(SpecialReportingInstructions$ || (SpecialReportingInstructions$ = {}));
/** @internal */
export const TimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(TimeInForce),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TimeInForce$outboundSchema = z.union([
    z.nativeEnum(TimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TimeInForce$;
(function (TimeInForce$) {
    /** @deprecated use `TimeInForce$inboundSchema` instead. */
    TimeInForce$.inboundSchema = TimeInForce$inboundSchema;
    /** @deprecated use `TimeInForce$outboundSchema` instead. */
    TimeInForce$.outboundSchema = TimeInForce$outboundSchema;
})(TimeInForce$ || (TimeInForce$ = {}));
/** @internal */
export const TradingSession$inboundSchema = z
    .union([
    z.nativeEnum(TradingSession),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradingSession$outboundSchema = z.union([
    z.nativeEnum(TradingSession),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingSession$;
(function (TradingSession$) {
    /** @deprecated use `TradingSession$inboundSchema` instead. */
    TradingSession$.inboundSchema = TradingSession$inboundSchema;
    /** @deprecated use `TradingSession$outboundSchema` instead. */
    TradingSession$.outboundSchema = TradingSession$outboundSchema;
})(TradingSession$ || (TradingSession$ = {}));
/** @internal */
export const OrderCreate$inboundSchema = z.object({
    asset_type: AssetType$inboundSchema,
    broker_capacity: BrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string(),
    client_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    client_sent_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    commission: CommissionCreate$inboundSchema.optional(),
    currency_code: z.string().optional(),
    fees: z.array(FeeCreate$inboundSchema).optional(),
    identifier: z.string(),
    identifier_issuing_region_code: z.string().optional(),
    identifier_type: IdentifierType$inboundSchema,
    letter_of_intent: LetterOfIntentCreate$inboundSchema.optional(),
    limit_price: LimitPriceCreate$inboundSchema.optional(),
    max_sell_quantity: DecimalCreate$inboundSchema.optional(),
    notional_value: DecimalCreate$inboundSchema.optional(),
    order_date: DateCreate$inboundSchema,
    order_type: OrderType$inboundSchema,
    quantity: DecimalCreate$inboundSchema.optional(),
    rights_of_accumulation: RightsOfAccumulationCreate$inboundSchema.optional(),
    side: Side$inboundSchema,
    special_reporting_instructions: z.array(SpecialReportingInstructions$inboundSchema).optional(),
    stop_price: StopPriceCreate$inboundSchema.optional(),
    time_in_force: TimeInForce$inboundSchema,
    time_in_force_expiration_date: DateCreate$inboundSchema.optional(),
    trading_session: TradingSession$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "client_received_time": "clientReceivedTime",
        "client_sent_time": "clientSentTime",
        "currency_code": "currencyCode",
        "identifier_issuing_region_code": "identifierIssuingRegionCode",
        "identifier_type": "identifierType",
        "letter_of_intent": "letterOfIntent",
        "limit_price": "limitPrice",
        "max_sell_quantity": "maxSellQuantity",
        "notional_value": "notionalValue",
        "order_date": "orderDate",
        "order_type": "orderType",
        "rights_of_accumulation": "rightsOfAccumulation",
        "special_reporting_instructions": "specialReportingInstructions",
        "stop_price": "stopPrice",
        "time_in_force": "timeInForce",
        "time_in_force_expiration_date": "timeInForceExpirationDate",
        "trading_session": "tradingSession",
    });
});
/** @internal */
export const OrderCreate$outboundSchema = z.object({
    assetType: AssetType$outboundSchema,
    brokerCapacity: BrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string(),
    clientReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    clientSentTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    commission: CommissionCreate$outboundSchema.optional(),
    currencyCode: z.string().optional(),
    fees: z.array(FeeCreate$outboundSchema).optional(),
    identifier: z.string(),
    identifierIssuingRegionCode: z.string().optional(),
    identifierType: IdentifierType$outboundSchema,
    letterOfIntent: LetterOfIntentCreate$outboundSchema.optional(),
    limitPrice: LimitPriceCreate$outboundSchema.optional(),
    maxSellQuantity: DecimalCreate$outboundSchema.optional(),
    notionalValue: DecimalCreate$outboundSchema.optional(),
    orderDate: DateCreate$outboundSchema,
    orderType: OrderType$outboundSchema,
    quantity: DecimalCreate$outboundSchema.optional(),
    rightsOfAccumulation: RightsOfAccumulationCreate$outboundSchema.optional(),
    side: Side$outboundSchema,
    specialReportingInstructions: z.array(SpecialReportingInstructions$outboundSchema).optional(),
    stopPrice: StopPriceCreate$outboundSchema.optional(),
    timeInForce: TimeInForce$outboundSchema,
    timeInForceExpirationDate: DateCreate$outboundSchema.optional(),
    tradingSession: TradingSession$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        clientReceivedTime: "client_received_time",
        clientSentTime: "client_sent_time",
        currencyCode: "currency_code",
        identifierIssuingRegionCode: "identifier_issuing_region_code",
        identifierType: "identifier_type",
        letterOfIntent: "letter_of_intent",
        limitPrice: "limit_price",
        maxSellQuantity: "max_sell_quantity",
        notionalValue: "notional_value",
        orderDate: "order_date",
        orderType: "order_type",
        rightsOfAccumulation: "rights_of_accumulation",
        specialReportingInstructions: "special_reporting_instructions",
        stopPrice: "stop_price",
        timeInForce: "time_in_force",
        timeInForceExpirationDate: "time_in_force_expiration_date",
        tradingSession: "trading_session",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCreate$;
(function (OrderCreate$) {
    /** @deprecated use `OrderCreate$inboundSchema` instead. */
    OrderCreate$.inboundSchema = OrderCreate$inboundSchema;
    /** @deprecated use `OrderCreate$outboundSchema` instead. */
    OrderCreate$.outboundSchema = OrderCreate$outboundSchema;
})(OrderCreate$ || (OrderCreate$ = {}));
export function orderCreateToJSON(orderCreate) {
    return JSON.stringify(OrderCreate$outboundSchema.parse(orderCreate));
}
export function orderCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCreate' from JSON`);
}
//# sourceMappingURL=ordercreate.js.map