/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BondYield$inboundSchema, BondYield$outboundSchema, } from "./bondyield.js";
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
export var RebookExecutionResponsePriceAdjustmentType;
(function (RebookExecutionResponsePriceAdjustmentType) {
    RebookExecutionResponsePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    RebookExecutionResponsePriceAdjustmentType["Markup"] = "MARKUP";
    RebookExecutionResponsePriceAdjustmentType["Markdown"] = "MARKDOWN";
    RebookExecutionResponsePriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(RebookExecutionResponsePriceAdjustmentType || (RebookExecutionResponsePriceAdjustmentType = {}));
/**
 * The state that the trade is in.
 */
export var RebookExecutionResponseState;
(function (RebookExecutionResponseState) {
    RebookExecutionResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    RebookExecutionResponseState["Creating"] = "CREATING";
    RebookExecutionResponseState["Rebooking"] = "REBOOKING";
    RebookExecutionResponseState["Canceling"] = "CANCELING";
    RebookExecutionResponseState["Booked"] = "BOOKED";
    RebookExecutionResponseState["Rebooked"] = "REBOOKED";
    RebookExecutionResponseState["Canceled"] = "CANCELED";
    RebookExecutionResponseState["Failed"] = "FAILED";
})(RebookExecutionResponseState || (RebookExecutionResponseState = {}));
/** @internal */
export const RebookExecutionResponseAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponseAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseAccruedInterestAmount$;
(function (RebookExecutionResponseAccruedInterestAmount$) {
    /** @deprecated use `RebookExecutionResponseAccruedInterestAmount$inboundSchema` instead. */
    RebookExecutionResponseAccruedInterestAmount$.inboundSchema = RebookExecutionResponseAccruedInterestAmount$inboundSchema;
    /** @deprecated use `RebookExecutionResponseAccruedInterestAmount$outboundSchema` instead. */
    RebookExecutionResponseAccruedInterestAmount$.outboundSchema = RebookExecutionResponseAccruedInterestAmount$outboundSchema;
})(RebookExecutionResponseAccruedInterestAmount$ || (RebookExecutionResponseAccruedInterestAmount$ = {}));
export function rebookExecutionResponseAccruedInterestAmountToJSON(rebookExecutionResponseAccruedInterestAmount) {
    return JSON.stringify(RebookExecutionResponseAccruedInterestAmount$outboundSchema.parse(rebookExecutionResponseAccruedInterestAmount));
}
export function rebookExecutionResponseAccruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponseAccruedInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponseAccruedInterestAmount' from JSON`);
}
/** @internal */
export const RebookExecutionResponseCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponseCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseCommissionAmount$;
(function (RebookExecutionResponseCommissionAmount$) {
    /** @deprecated use `RebookExecutionResponseCommissionAmount$inboundSchema` instead. */
    RebookExecutionResponseCommissionAmount$.inboundSchema = RebookExecutionResponseCommissionAmount$inboundSchema;
    /** @deprecated use `RebookExecutionResponseCommissionAmount$outboundSchema` instead. */
    RebookExecutionResponseCommissionAmount$.outboundSchema = RebookExecutionResponseCommissionAmount$outboundSchema;
})(RebookExecutionResponseCommissionAmount$ || (RebookExecutionResponseCommissionAmount$ = {}));
export function rebookExecutionResponseCommissionAmountToJSON(rebookExecutionResponseCommissionAmount) {
    return JSON.stringify(RebookExecutionResponseCommissionAmount$outboundSchema.parse(rebookExecutionResponseCommissionAmount));
}
export function rebookExecutionResponseCommissionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponseCommissionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponseCommissionAmount' from JSON`);
}
/** @internal */
export const RebookExecutionResponseGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponseGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseGrossAmount$;
(function (RebookExecutionResponseGrossAmount$) {
    /** @deprecated use `RebookExecutionResponseGrossAmount$inboundSchema` instead. */
    RebookExecutionResponseGrossAmount$.inboundSchema = RebookExecutionResponseGrossAmount$inboundSchema;
    /** @deprecated use `RebookExecutionResponseGrossAmount$outboundSchema` instead. */
    RebookExecutionResponseGrossAmount$.outboundSchema = RebookExecutionResponseGrossAmount$outboundSchema;
})(RebookExecutionResponseGrossAmount$ || (RebookExecutionResponseGrossAmount$ = {}));
export function rebookExecutionResponseGrossAmountToJSON(rebookExecutionResponseGrossAmount) {
    return JSON.stringify(RebookExecutionResponseGrossAmount$outboundSchema.parse(rebookExecutionResponseGrossAmount));
}
export function rebookExecutionResponseGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponseGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponseGrossAmount' from JSON`);
}
/** @internal */
export const RebookExecutionResponsePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponsePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponsePrevailingMarketPrice$;
(function (RebookExecutionResponsePrevailingMarketPrice$) {
    /** @deprecated use `RebookExecutionResponsePrevailingMarketPrice$inboundSchema` instead. */
    RebookExecutionResponsePrevailingMarketPrice$.inboundSchema = RebookExecutionResponsePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `RebookExecutionResponsePrevailingMarketPrice$outboundSchema` instead. */
    RebookExecutionResponsePrevailingMarketPrice$.outboundSchema = RebookExecutionResponsePrevailingMarketPrice$outboundSchema;
})(RebookExecutionResponsePrevailingMarketPrice$ || (RebookExecutionResponsePrevailingMarketPrice$ = {}));
export function rebookExecutionResponsePrevailingMarketPriceToJSON(rebookExecutionResponsePrevailingMarketPrice) {
    return JSON.stringify(RebookExecutionResponsePrevailingMarketPrice$outboundSchema.parse(rebookExecutionResponsePrevailingMarketPrice));
}
export function rebookExecutionResponsePrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponsePrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponsePrevailingMarketPrice' from JSON`);
}
/** @internal */
export const RebookExecutionResponsePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponsePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponsePrice$;
(function (RebookExecutionResponsePrice$) {
    /** @deprecated use `RebookExecutionResponsePrice$inboundSchema` instead. */
    RebookExecutionResponsePrice$.inboundSchema = RebookExecutionResponsePrice$inboundSchema;
    /** @deprecated use `RebookExecutionResponsePrice$outboundSchema` instead. */
    RebookExecutionResponsePrice$.outboundSchema = RebookExecutionResponsePrice$outboundSchema;
})(RebookExecutionResponsePrice$ || (RebookExecutionResponsePrice$ = {}));
export function rebookExecutionResponsePriceToJSON(rebookExecutionResponsePrice) {
    return JSON.stringify(RebookExecutionResponsePrice$outboundSchema.parse(rebookExecutionResponsePrice));
}
export function rebookExecutionResponsePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponsePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponsePrice' from JSON`);
}
/** @internal */
export const RebookExecutionResponsePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponsePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponsePriceAdjustmentAmount$;
(function (RebookExecutionResponsePriceAdjustmentAmount$) {
    /** @deprecated use `RebookExecutionResponsePriceAdjustmentAmount$inboundSchema` instead. */
    RebookExecutionResponsePriceAdjustmentAmount$.inboundSchema = RebookExecutionResponsePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `RebookExecutionResponsePriceAdjustmentAmount$outboundSchema` instead. */
    RebookExecutionResponsePriceAdjustmentAmount$.outboundSchema = RebookExecutionResponsePriceAdjustmentAmount$outboundSchema;
})(RebookExecutionResponsePriceAdjustmentAmount$ || (RebookExecutionResponsePriceAdjustmentAmount$ = {}));
export function rebookExecutionResponsePriceAdjustmentAmountToJSON(rebookExecutionResponsePriceAdjustmentAmount) {
    return JSON.stringify(RebookExecutionResponsePriceAdjustmentAmount$outboundSchema.parse(rebookExecutionResponsePriceAdjustmentAmount));
}
export function rebookExecutionResponsePriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponsePriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponsePriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const RebookExecutionResponsePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(RebookExecutionResponsePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookExecutionResponsePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(RebookExecutionResponsePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponsePriceAdjustmentType$;
(function (RebookExecutionResponsePriceAdjustmentType$) {
    /** @deprecated use `RebookExecutionResponsePriceAdjustmentType$inboundSchema` instead. */
    RebookExecutionResponsePriceAdjustmentType$.inboundSchema = RebookExecutionResponsePriceAdjustmentType$inboundSchema;
    /** @deprecated use `RebookExecutionResponsePriceAdjustmentType$outboundSchema` instead. */
    RebookExecutionResponsePriceAdjustmentType$.outboundSchema = RebookExecutionResponsePriceAdjustmentType$outboundSchema;
})(RebookExecutionResponsePriceAdjustmentType$ || (RebookExecutionResponsePriceAdjustmentType$ = {}));
/** @internal */
export const RebookExecutionResponsePriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => RebookExecutionResponsePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: RebookExecutionResponsePriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const RebookExecutionResponsePriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => RebookExecutionResponsePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: RebookExecutionResponsePriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponsePriceAdjustment$;
(function (RebookExecutionResponsePriceAdjustment$) {
    /** @deprecated use `RebookExecutionResponsePriceAdjustment$inboundSchema` instead. */
    RebookExecutionResponsePriceAdjustment$.inboundSchema = RebookExecutionResponsePriceAdjustment$inboundSchema;
    /** @deprecated use `RebookExecutionResponsePriceAdjustment$outboundSchema` instead. */
    RebookExecutionResponsePriceAdjustment$.outboundSchema = RebookExecutionResponsePriceAdjustment$outboundSchema;
})(RebookExecutionResponsePriceAdjustment$ || (RebookExecutionResponsePriceAdjustment$ = {}));
export function rebookExecutionResponsePriceAdjustmentToJSON(rebookExecutionResponsePriceAdjustment) {
    return JSON.stringify(RebookExecutionResponsePriceAdjustment$outboundSchema.parse(rebookExecutionResponsePriceAdjustment));
}
export function rebookExecutionResponsePriceAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponsePriceAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponsePriceAdjustment' from JSON`);
}
/** @internal */
export const RebookExecutionResponseQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookExecutionResponseQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseQuantity$;
(function (RebookExecutionResponseQuantity$) {
    /** @deprecated use `RebookExecutionResponseQuantity$inboundSchema` instead. */
    RebookExecutionResponseQuantity$.inboundSchema = RebookExecutionResponseQuantity$inboundSchema;
    /** @deprecated use `RebookExecutionResponseQuantity$outboundSchema` instead. */
    RebookExecutionResponseQuantity$.outboundSchema = RebookExecutionResponseQuantity$outboundSchema;
})(RebookExecutionResponseQuantity$ || (RebookExecutionResponseQuantity$ = {}));
export function rebookExecutionResponseQuantityToJSON(rebookExecutionResponseQuantity) {
    return JSON.stringify(RebookExecutionResponseQuantity$outboundSchema.parse(rebookExecutionResponseQuantity));
}
export function rebookExecutionResponseQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponseQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponseQuantity' from JSON`);
}
/** @internal */
export const RebookExecutionResponseState$inboundSchema = z
    .union([
    z.nativeEnum(RebookExecutionResponseState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookExecutionResponseState$outboundSchema = z.union([
    z.nativeEnum(RebookExecutionResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseState$;
(function (RebookExecutionResponseState$) {
    /** @deprecated use `RebookExecutionResponseState$inboundSchema` instead. */
    RebookExecutionResponseState$.inboundSchema = RebookExecutionResponseState$inboundSchema;
    /** @deprecated use `RebookExecutionResponseState$outboundSchema` instead. */
    RebookExecutionResponseState$.outboundSchema = RebookExecutionResponseState$outboundSchema;
})(RebookExecutionResponseState$ || (RebookExecutionResponseState$ = {}));
/** @internal */
export const RebookExecutionResponseExecution$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => RebookExecutionResponseAccruedInterestAmount$inboundSchema)).optional(),
    activity_id: z.string().optional(),
    bond_yield: z.array(BondYield$inboundSchema).optional(),
    commission_amount: z.nullable(z.lazy(() => RebookExecutionResponseCommissionAmount$inboundSchema)).optional(),
    execution_id: z.string().optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    external_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => RebookExecutionResponseGrossAmount$inboundSchema)).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => RebookExecutionResponsePrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookExecutionResponsePrice$inboundSchema))
        .optional(),
    price_adjustment: z.nullable(z.lazy(() => RebookExecutionResponsePriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookExecutionResponseQuantity$inboundSchema)).optional(),
    state: RebookExecutionResponseState$inboundSchema.optional(),
    street_execution_id: z.string().optional(),
    trade_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "activity_id": "activityId",
        "bond_yield": "bondYield",
        "commission_amount": "commissionAmount",
        "execution_id": "executionId",
        "execution_time": "executionTime",
        "external_id": "externalId",
        "gross_amount": "grossAmount",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "street_execution_id": "streetExecutionId",
        "trade_id": "tradeId",
    });
});
/** @internal */
export const RebookExecutionResponseExecution$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => RebookExecutionResponseAccruedInterestAmount$outboundSchema)).optional(),
    activityId: z.string().optional(),
    bondYield: z.array(BondYield$outboundSchema).optional(),
    commissionAmount: z.nullable(z.lazy(() => RebookExecutionResponseCommissionAmount$outboundSchema)).optional(),
    executionId: z.string().optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    externalId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => RebookExecutionResponseGrossAmount$outboundSchema)).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => RebookExecutionResponsePrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookExecutionResponsePrice$outboundSchema))
        .optional(),
    priceAdjustment: z.nullable(z.lazy(() => RebookExecutionResponsePriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookExecutionResponseQuantity$outboundSchema)).optional(),
    state: RebookExecutionResponseState$outboundSchema.optional(),
    streetExecutionId: z.string().optional(),
    tradeId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        activityId: "activity_id",
        bondYield: "bond_yield",
        commissionAmount: "commission_amount",
        executionId: "execution_id",
        executionTime: "execution_time",
        externalId: "external_id",
        grossAmount: "gross_amount",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        streetExecutionId: "street_execution_id",
        tradeId: "trade_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponseExecution$;
(function (RebookExecutionResponseExecution$) {
    /** @deprecated use `RebookExecutionResponseExecution$inboundSchema` instead. */
    RebookExecutionResponseExecution$.inboundSchema = RebookExecutionResponseExecution$inboundSchema;
    /** @deprecated use `RebookExecutionResponseExecution$outboundSchema` instead. */
    RebookExecutionResponseExecution$.outboundSchema = RebookExecutionResponseExecution$outboundSchema;
})(RebookExecutionResponseExecution$ || (RebookExecutionResponseExecution$ = {}));
export function rebookExecutionResponseExecutionToJSON(rebookExecutionResponseExecution) {
    return JSON.stringify(RebookExecutionResponseExecution$outboundSchema.parse(rebookExecutionResponseExecution));
}
export function rebookExecutionResponseExecutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponseExecution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponseExecution' from JSON`);
}
/** @internal */
export const RebookExecutionResponse$inboundSchema = z.object({
    execution: z.nullable(z.lazy(() => RebookExecutionResponseExecution$inboundSchema)).optional(),
});
/** @internal */
export const RebookExecutionResponse$outboundSchema = z.object({
    execution: z.nullable(z.lazy(() => RebookExecutionResponseExecution$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookExecutionResponse$;
(function (RebookExecutionResponse$) {
    /** @deprecated use `RebookExecutionResponse$inboundSchema` instead. */
    RebookExecutionResponse$.inboundSchema = RebookExecutionResponse$inboundSchema;
    /** @deprecated use `RebookExecutionResponse$outboundSchema` instead. */
    RebookExecutionResponse$.outboundSchema = RebookExecutionResponse$outboundSchema;
})(RebookExecutionResponse$ || (RebookExecutionResponse$ = {}));
export function rebookExecutionResponseToJSON(rebookExecutionResponse) {
    return JSON.stringify(RebookExecutionResponse$outboundSchema.parse(rebookExecutionResponse));
}
export function rebookExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookExecutionResponse' from JSON`);
}
//# sourceMappingURL=rebookexecutionresponse.js.map