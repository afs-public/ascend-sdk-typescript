/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The entity tax id type, one of:
 *
 * @remarks
 * - `ID_ENTITY_TYPE_UNSPECIFIED` - Default/Null value.
 * - `EIN` - Employer Identification Number (US government issued, 9 digits, XX-XXXXXXX).
 * - `LEI` - Legal Entity Identifier (20 digit alphanumeric).
 * - `DUNS` - Dun and Bradstreet number.
 */
export var EntityIdentificationType;
(function (EntityIdentificationType) {
    EntityIdentificationType["IdEntityTypeUnspecified"] = "ID_ENTITY_TYPE_UNSPECIFIED";
    EntityIdentificationType["Ein"] = "EIN";
    EntityIdentificationType["Lei"] = "LEI";
    EntityIdentificationType["Duns"] = "DUNS";
})(EntityIdentificationType || (EntityIdentificationType = {}));
/** @internal */
export const EntityIdentificationType$inboundSchema = z
    .union([
    z.nativeEnum(EntityIdentificationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntityIdentificationType$outboundSchema = z.union([
    z.nativeEnum(EntityIdentificationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityIdentificationType$;
(function (EntityIdentificationType$) {
    /** @deprecated use `EntityIdentificationType$inboundSchema` instead. */
    EntityIdentificationType$.inboundSchema = EntityIdentificationType$inboundSchema;
    /** @deprecated use `EntityIdentificationType$outboundSchema` instead. */
    EntityIdentificationType$.outboundSchema = EntityIdentificationType$outboundSchema;
})(EntityIdentificationType$ || (EntityIdentificationType$ = {}));
/** @internal */
export const EntityIdentification$inboundSchema = z.object({
    administrative_area: z.string().optional(),
    document_reference_ids: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    type: EntityIdentificationType$inboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "administrative_area": "administrativeArea",
        "document_reference_ids": "documentReferenceIds",
        "region_code": "regionCode",
    });
});
/** @internal */
export const EntityIdentification$outboundSchema = z.object({
    administrativeArea: z.string().optional(),
    documentReferenceIds: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    type: EntityIdentificationType$outboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        administrativeArea: "administrative_area",
        documentReferenceIds: "document_reference_ids",
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntityIdentification$;
(function (EntityIdentification$) {
    /** @deprecated use `EntityIdentification$inboundSchema` instead. */
    EntityIdentification$.inboundSchema = EntityIdentification$inboundSchema;
    /** @deprecated use `EntityIdentification$outboundSchema` instead. */
    EntityIdentification$.outboundSchema = EntityIdentification$outboundSchema;
})(EntityIdentification$ || (EntityIdentification$ = {}));
export function entityIdentificationToJSON(entityIdentification) {
    return JSON.stringify(EntityIdentification$outboundSchema.parse(entityIdentification));
}
export function entityIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EntityIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EntityIdentification' from JSON`);
}
//# sourceMappingURL=entityidentification.js.map