/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const AddressCreate$inboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postal_code: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "postal_code": "postalCode",
    });
});
/** @internal */
export const AddressCreate$outboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postalCode: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        postalCode: "postal_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddressCreate$;
(function (AddressCreate$) {
    /** @deprecated use `AddressCreate$inboundSchema` instead. */
    AddressCreate$.inboundSchema = AddressCreate$inboundSchema;
    /** @deprecated use `AddressCreate$outboundSchema` instead. */
    AddressCreate$.outboundSchema = AddressCreate$outboundSchema;
})(AddressCreate$ || (AddressCreate$ = {}));
export function addressCreateToJSON(addressCreate) {
    return JSON.stringify(AddressCreate$outboundSchema.parse(addressCreate));
}
export function addressCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddressCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddressCreate' from JSON`);
}
//# sourceMappingURL=addresscreate.js.map