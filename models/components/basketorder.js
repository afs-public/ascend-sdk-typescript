/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BasketTradingExecutedPrice$inboundSchema, BasketTradingExecutedPrice$outboundSchema, } from "./baskettradingexecutedprice.js";
import { BasketTradingExecutions$inboundSchema, BasketTradingExecutions$outboundSchema, } from "./baskettradingexecutions.js";
/**
 * The type of the asset in this order
 */
export var BasketOrderAssetType;
(function (BasketOrderAssetType) {
    BasketOrderAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    BasketOrderAssetType["Equity"] = "EQUITY";
    BasketOrderAssetType["MutualFund"] = "MUTUAL_FUND";
})(BasketOrderAssetType || (BasketOrderAssetType = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported
 */
export var BasketOrderIdentifierType;
(function (BasketOrderIdentifierType) {
    BasketOrderIdentifierType["Symbol"] = "SYMBOL";
    BasketOrderIdentifierType["Cusip"] = "CUSIP";
    BasketOrderIdentifierType["Isin"] = "ISIN";
})(BasketOrderIdentifierType || (BasketOrderIdentifierType = {}));
/**
 * When an order has the REJECTED status, this will be populated with a system code describing the rejection.
 */
export var BasketOrderOrderRejectedReason;
(function (BasketOrderOrderRejectedReason) {
    BasketOrderOrderRejectedReason["OrderRejectReasonUnspecified"] = "ORDER_REJECT_REASON_UNSPECIFIED";
    BasketOrderOrderRejectedReason["BrokerOption"] = "BROKER_OPTION";
    BasketOrderOrderRejectedReason["UnknownSecurity"] = "UNKNOWN_SECURITY";
    BasketOrderOrderRejectedReason["ExchangeClosed"] = "EXCHANGE_CLOSED";
    BasketOrderOrderRejectedReason["TooLateToEnter"] = "TOO_LATE_TO_ENTER";
    BasketOrderOrderRejectedReason["UnknownOrder"] = "UNKNOWN_ORDER";
    BasketOrderOrderRejectedReason["DuplicateOrder"] = "DUPLICATE_ORDER";
    BasketOrderOrderRejectedReason["StaleOrder"] = "STALE_ORDER";
    BasketOrderOrderRejectedReason["BelowNotionalMinimum"] = "BELOW_NOTIONAL_MINIMUM";
    BasketOrderOrderRejectedReason["AccountNotEntitled"] = "ACCOUNT_NOT_ENTITLED";
    BasketOrderOrderRejectedReason["SystemError"] = "SYSTEM_ERROR";
    BasketOrderOrderRejectedReason["BlockingCorporateAction"] = "BLOCKING_CORPORATE_ACTION";
    BasketOrderOrderRejectedReason["UnavailablePriceQuote"] = "UNAVAILABLE_PRICE_QUOTE";
    BasketOrderOrderRejectedReason["ExecutionMisconfiguredClient"] = "EXECUTION_MISCONFIGURED_CLIENT";
    BasketOrderOrderRejectedReason["NotionalQuantityNotAllowedForSecurity"] = "NOTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    BasketOrderOrderRejectedReason["FractionalQuantityNotAllowedForSecurity"] = "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    BasketOrderOrderRejectedReason["OnlyFractionalSellOrWholeOrdersAllowedForSecurity"] = "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY";
    BasketOrderOrderRejectedReason["SymbolNotTradeable"] = "SYMBOL_NOT_TRADEABLE";
    BasketOrderOrderRejectedReason["AboveNotionalMaximum"] = "ABOVE_NOTIONAL_MAXIMUM";
    BasketOrderOrderRejectedReason["AboveShareMaximum"] = "ABOVE_SHARE_MAXIMUM";
    BasketOrderOrderRejectedReason["MaxSellQuantityRequired"] = "MAX_SELL_QUANTITY_REQUIRED";
    BasketOrderOrderRejectedReason["MaxSellQuantityProhibited"] = "MAX_SELL_QUANTITY_PROHIBITED";
    BasketOrderOrderRejectedReason["StockTradesDisabled"] = "STOCK_TRADES_DISABLED";
    BasketOrderOrderRejectedReason["AssetNotSetUpToTrade"] = "ASSET_NOT_SET_UP_TO_TRADE";
    BasketOrderOrderRejectedReason["AnotherBasketOrderForAccountHasFailedRiskChecks"] = "ANOTHER_BASKET_ORDER_FOR_ACCOUNT_HAS_FAILED_RISK_CHECKS";
    BasketOrderOrderRejectedReason["InsufficientPosition"] = "INSUFFICIENT_POSITION";
    BasketOrderOrderRejectedReason["FailedBuyingPower"] = "FAILED_BUYING_POWER";
    BasketOrderOrderRejectedReason["RoundUpAmountTooSmall"] = "ROUND_UP_AMOUNT_TOO_SMALL";
    BasketOrderOrderRejectedReason["AssetNotSetUpForRoundUps"] = "ASSET_NOT_SET_UP_FOR_ROUND_UPS";
})(BasketOrderOrderRejectedReason || (BasketOrderOrderRejectedReason = {}));
/**
 * The processing status of the order
 */
export var BasketOrderOrderStatus;
(function (BasketOrderOrderStatus) {
    BasketOrderOrderStatus["OrderStatusUnspecified"] = "ORDER_STATUS_UNSPECIFIED";
    BasketOrderOrderStatus["PendingNew"] = "PENDING_NEW";
    BasketOrderOrderStatus["New"] = "NEW";
    BasketOrderOrderStatus["PartiallyFilled"] = "PARTIALLY_FILLED";
    BasketOrderOrderStatus["Filled"] = "FILLED";
    BasketOrderOrderStatus["Rejected"] = "REJECTED";
    BasketOrderOrderStatus["RemovedBeforeSubmission"] = "REMOVED_BEFORE_SUBMISSION";
})(BasketOrderOrderStatus || (BasketOrderOrderStatus = {}));
/**
 * The execution type of this order.
 */
export var BasketOrderOrderType;
(function (BasketOrderOrderType) {
    BasketOrderOrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    BasketOrderOrderType["Market"] = "MARKET";
})(BasketOrderOrderType || (BasketOrderOrderType = {}));
/**
 * The side of this order.
 */
export var BasketOrderSide;
(function (BasketOrderSide) {
    BasketOrderSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    BasketOrderSide["Buy"] = "BUY";
    BasketOrderSide["Sell"] = "SELL";
})(BasketOrderSide || (BasketOrderSide = {}));
export var BasketOrderSpecialReportingInstructions;
(function (BasketOrderSpecialReportingInstructions) {
    BasketOrderSpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    BasketOrderSpecialReportingInstructions["Solicited"] = "SOLICITED";
    BasketOrderSpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    BasketOrderSpecialReportingInstructions["RoundUp"] = "ROUND_UP";
})(BasketOrderSpecialReportingInstructions || (BasketOrderSpecialReportingInstructions = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
export var BasketOrderTimeInForce;
(function (BasketOrderTimeInForce) {
    BasketOrderTimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    BasketOrderTimeInForce["Day"] = "DAY";
})(BasketOrderTimeInForce || (BasketOrderTimeInForce = {}));
/** @internal */
export const BasketOrderAssetType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderAssetType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderAssetType$;
(function (BasketOrderAssetType$) {
    /** @deprecated use `BasketOrderAssetType$inboundSchema` instead. */
    BasketOrderAssetType$.inboundSchema = BasketOrderAssetType$inboundSchema;
    /** @deprecated use `BasketOrderAssetType$outboundSchema` instead. */
    BasketOrderAssetType$.outboundSchema = BasketOrderAssetType$outboundSchema;
})(BasketOrderAssetType$ || (BasketOrderAssetType$ = {}));
/** @internal */
export const BasketOrderCumulativeNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketOrderCumulativeNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCumulativeNotionalValue$;
(function (BasketOrderCumulativeNotionalValue$) {
    /** @deprecated use `BasketOrderCumulativeNotionalValue$inboundSchema` instead. */
    BasketOrderCumulativeNotionalValue$.inboundSchema = BasketOrderCumulativeNotionalValue$inboundSchema;
    /** @deprecated use `BasketOrderCumulativeNotionalValue$outboundSchema` instead. */
    BasketOrderCumulativeNotionalValue$.outboundSchema = BasketOrderCumulativeNotionalValue$outboundSchema;
})(BasketOrderCumulativeNotionalValue$ || (BasketOrderCumulativeNotionalValue$ = {}));
export function basketOrderCumulativeNotionalValueToJSON(basketOrderCumulativeNotionalValue) {
    return JSON.stringify(BasketOrderCumulativeNotionalValue$outboundSchema.parse(basketOrderCumulativeNotionalValue));
}
export function basketOrderCumulativeNotionalValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderCumulativeNotionalValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderCumulativeNotionalValue' from JSON`);
}
/** @internal */
export const BasketOrderFilledQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketOrderFilledQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderFilledQuantity$;
(function (BasketOrderFilledQuantity$) {
    /** @deprecated use `BasketOrderFilledQuantity$inboundSchema` instead. */
    BasketOrderFilledQuantity$.inboundSchema = BasketOrderFilledQuantity$inboundSchema;
    /** @deprecated use `BasketOrderFilledQuantity$outboundSchema` instead. */
    BasketOrderFilledQuantity$.outboundSchema = BasketOrderFilledQuantity$outboundSchema;
})(BasketOrderFilledQuantity$ || (BasketOrderFilledQuantity$ = {}));
export function basketOrderFilledQuantityToJSON(basketOrderFilledQuantity) {
    return JSON.stringify(BasketOrderFilledQuantity$outboundSchema.parse(basketOrderFilledQuantity));
}
export function basketOrderFilledQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderFilledQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderFilledQuantity' from JSON`);
}
/** @internal */
export const BasketOrderIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderIdentifierType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderIdentifierType$;
(function (BasketOrderIdentifierType$) {
    /** @deprecated use `BasketOrderIdentifierType$inboundSchema` instead. */
    BasketOrderIdentifierType$.inboundSchema = BasketOrderIdentifierType$inboundSchema;
    /** @deprecated use `BasketOrderIdentifierType$outboundSchema` instead. */
    BasketOrderIdentifierType$.outboundSchema = BasketOrderIdentifierType$outboundSchema;
})(BasketOrderIdentifierType$ || (BasketOrderIdentifierType$ = {}));
/** @internal */
export const BasketOrderMaxSellQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketOrderMaxSellQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderMaxSellQuantity$;
(function (BasketOrderMaxSellQuantity$) {
    /** @deprecated use `BasketOrderMaxSellQuantity$inboundSchema` instead. */
    BasketOrderMaxSellQuantity$.inboundSchema = BasketOrderMaxSellQuantity$inboundSchema;
    /** @deprecated use `BasketOrderMaxSellQuantity$outboundSchema` instead. */
    BasketOrderMaxSellQuantity$.outboundSchema = BasketOrderMaxSellQuantity$outboundSchema;
})(BasketOrderMaxSellQuantity$ || (BasketOrderMaxSellQuantity$ = {}));
export function basketOrderMaxSellQuantityToJSON(basketOrderMaxSellQuantity) {
    return JSON.stringify(BasketOrderMaxSellQuantity$outboundSchema.parse(basketOrderMaxSellQuantity));
}
export function basketOrderMaxSellQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderMaxSellQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderMaxSellQuantity' from JSON`);
}
/** @internal */
export const BasketOrderNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketOrderNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderNotionalValue$;
(function (BasketOrderNotionalValue$) {
    /** @deprecated use `BasketOrderNotionalValue$inboundSchema` instead. */
    BasketOrderNotionalValue$.inboundSchema = BasketOrderNotionalValue$inboundSchema;
    /** @deprecated use `BasketOrderNotionalValue$outboundSchema` instead. */
    BasketOrderNotionalValue$.outboundSchema = BasketOrderNotionalValue$outboundSchema;
})(BasketOrderNotionalValue$ || (BasketOrderNotionalValue$ = {}));
export function basketOrderNotionalValueToJSON(basketOrderNotionalValue) {
    return JSON.stringify(BasketOrderNotionalValue$outboundSchema.parse(basketOrderNotionalValue));
}
export function basketOrderNotionalValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderNotionalValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderNotionalValue' from JSON`);
}
/** @internal */
export const BasketOrderOrderRejectedReason$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderRejectedReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderOrderRejectedReason$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderRejectedReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderOrderRejectedReason$;
(function (BasketOrderOrderRejectedReason$) {
    /** @deprecated use `BasketOrderOrderRejectedReason$inboundSchema` instead. */
    BasketOrderOrderRejectedReason$.inboundSchema = BasketOrderOrderRejectedReason$inboundSchema;
    /** @deprecated use `BasketOrderOrderRejectedReason$outboundSchema` instead. */
    BasketOrderOrderRejectedReason$.outboundSchema = BasketOrderOrderRejectedReason$outboundSchema;
})(BasketOrderOrderRejectedReason$ || (BasketOrderOrderRejectedReason$ = {}));
/** @internal */
export const BasketOrderOrderStatus$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderOrderStatus$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderOrderStatus$;
(function (BasketOrderOrderStatus$) {
    /** @deprecated use `BasketOrderOrderStatus$inboundSchema` instead. */
    BasketOrderOrderStatus$.inboundSchema = BasketOrderOrderStatus$inboundSchema;
    /** @deprecated use `BasketOrderOrderStatus$outboundSchema` instead. */
    BasketOrderOrderStatus$.outboundSchema = BasketOrderOrderStatus$outboundSchema;
})(BasketOrderOrderStatus$ || (BasketOrderOrderStatus$ = {}));
/** @internal */
export const BasketOrderOrderType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderOrderType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderOrderType$;
(function (BasketOrderOrderType$) {
    /** @deprecated use `BasketOrderOrderType$inboundSchema` instead. */
    BasketOrderOrderType$.inboundSchema = BasketOrderOrderType$inboundSchema;
    /** @deprecated use `BasketOrderOrderType$outboundSchema` instead. */
    BasketOrderOrderType$.outboundSchema = BasketOrderOrderType$outboundSchema;
})(BasketOrderOrderType$ || (BasketOrderOrderType$ = {}));
/** @internal */
export const BasketOrderQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketOrderQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderQuantity$;
(function (BasketOrderQuantity$) {
    /** @deprecated use `BasketOrderQuantity$inboundSchema` instead. */
    BasketOrderQuantity$.inboundSchema = BasketOrderQuantity$inboundSchema;
    /** @deprecated use `BasketOrderQuantity$outboundSchema` instead. */
    BasketOrderQuantity$.outboundSchema = BasketOrderQuantity$outboundSchema;
})(BasketOrderQuantity$ || (BasketOrderQuantity$ = {}));
export function basketOrderQuantityToJSON(basketOrderQuantity) {
    return JSON.stringify(BasketOrderQuantity$outboundSchema.parse(basketOrderQuantity));
}
export function basketOrderQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderQuantity' from JSON`);
}
/** @internal */
export const BasketOrderSide$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderSide$outboundSchema = z.union([
    z.nativeEnum(BasketOrderSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderSide$;
(function (BasketOrderSide$) {
    /** @deprecated use `BasketOrderSide$inboundSchema` instead. */
    BasketOrderSide$.inboundSchema = BasketOrderSide$inboundSchema;
    /** @deprecated use `BasketOrderSide$outboundSchema` instead. */
    BasketOrderSide$.outboundSchema = BasketOrderSide$outboundSchema;
})(BasketOrderSide$ || (BasketOrderSide$ = {}));
/** @internal */
export const BasketOrderSpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderSpecialReportingInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderSpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(BasketOrderSpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderSpecialReportingInstructions$;
(function (BasketOrderSpecialReportingInstructions$) {
    /** @deprecated use `BasketOrderSpecialReportingInstructions$inboundSchema` instead. */
    BasketOrderSpecialReportingInstructions$.inboundSchema = BasketOrderSpecialReportingInstructions$inboundSchema;
    /** @deprecated use `BasketOrderSpecialReportingInstructions$outboundSchema` instead. */
    BasketOrderSpecialReportingInstructions$.outboundSchema = BasketOrderSpecialReportingInstructions$outboundSchema;
})(BasketOrderSpecialReportingInstructions$ || (BasketOrderSpecialReportingInstructions$ = {}));
/** @internal */
export const BasketOrderTimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderTimeInForce),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderTimeInForce$outboundSchema = z.union([
    z.nativeEnum(BasketOrderTimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderTimeInForce$;
(function (BasketOrderTimeInForce$) {
    /** @deprecated use `BasketOrderTimeInForce$inboundSchema` instead. */
    BasketOrderTimeInForce$.inboundSchema = BasketOrderTimeInForce$inboundSchema;
    /** @deprecated use `BasketOrderTimeInForce$outboundSchema` instead. */
    BasketOrderTimeInForce$.outboundSchema = BasketOrderTimeInForce$outboundSchema;
})(BasketOrderTimeInForce$ || (BasketOrderTimeInForce$ = {}));
/** @internal */
export const BasketOrder$inboundSchema = z.object({
    account_id: z.string().optional(),
    asset_id: z.string().optional(),
    asset_type: BasketOrderAssetType$inboundSchema.optional(),
    average_prices: z.array(BasketTradingExecutedPrice$inboundSchema).optional(),
    basket_order_id: z.string().optional(),
    client_order_id: z.string().optional(),
    client_order_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    cumulative_notional_value: z.nullable(z.lazy(() => BasketOrderCumulativeNotionalValue$inboundSchema)).optional(),
    currency_code: z.string().optional(),
    executions: z.array(BasketTradingExecutions$inboundSchema).optional(),
    filled_quantity: z.nullable(z.lazy(() => BasketOrderFilledQuantity$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: BasketOrderIdentifierType$inboundSchema.optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    max_sell_quantity: z.nullable(z.lazy(() => BasketOrderMaxSellQuantity$inboundSchema)).optional(),
    name: z.string().optional(),
    notional_value: z.nullable(z.lazy(() => BasketOrderNotionalValue$inboundSchema)).optional(),
    order_rejected_reason: BasketOrderOrderRejectedReason$inboundSchema
        .optional(),
    order_status: BasketOrderOrderStatus$inboundSchema.optional(),
    order_type: BasketOrderOrderType$inboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => BasketOrderQuantity$inboundSchema))
        .optional(),
    side: BasketOrderSide$inboundSchema.optional(),
    special_reporting_instructions: z.array(BasketOrderSpecialReportingInstructions$inboundSchema).optional(),
    time_in_force: BasketOrderTimeInForce$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "asset_id": "assetId",
        "asset_type": "assetType",
        "average_prices": "averagePrices",
        "basket_order_id": "basketOrderId",
        "client_order_id": "clientOrderId",
        "client_order_received_time": "clientOrderReceivedTime",
        "create_time": "createTime",
        "cumulative_notional_value": "cumulativeNotionalValue",
        "currency_code": "currencyCode",
        "filled_quantity": "filledQuantity",
        "identifier_type": "identifierType",
        "last_update_time": "lastUpdateTime",
        "max_sell_quantity": "maxSellQuantity",
        "notional_value": "notionalValue",
        "order_rejected_reason": "orderRejectedReason",
        "order_status": "orderStatus",
        "order_type": "orderType",
        "special_reporting_instructions": "specialReportingInstructions",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
export const BasketOrder$outboundSchema = z.object({
    accountId: z.string().optional(),
    assetId: z.string().optional(),
    assetType: BasketOrderAssetType$outboundSchema.optional(),
    averagePrices: z.array(BasketTradingExecutedPrice$outboundSchema).optional(),
    basketOrderId: z.string().optional(),
    clientOrderId: z.string().optional(),
    clientOrderReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    cumulativeNotionalValue: z.nullable(z.lazy(() => BasketOrderCumulativeNotionalValue$outboundSchema)).optional(),
    currencyCode: z.string().optional(),
    executions: z.array(BasketTradingExecutions$outboundSchema).optional(),
    filledQuantity: z.nullable(z.lazy(() => BasketOrderFilledQuantity$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: BasketOrderIdentifierType$outboundSchema.optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    maxSellQuantity: z.nullable(z.lazy(() => BasketOrderMaxSellQuantity$outboundSchema)).optional(),
    name: z.string().optional(),
    notionalValue: z.nullable(z.lazy(() => BasketOrderNotionalValue$outboundSchema)).optional(),
    orderRejectedReason: BasketOrderOrderRejectedReason$outboundSchema.optional(),
    orderStatus: BasketOrderOrderStatus$outboundSchema.optional(),
    orderType: BasketOrderOrderType$outboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => BasketOrderQuantity$outboundSchema))
        .optional(),
    side: BasketOrderSide$outboundSchema.optional(),
    specialReportingInstructions: z.array(BasketOrderSpecialReportingInstructions$outboundSchema).optional(),
    timeInForce: BasketOrderTimeInForce$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        assetId: "asset_id",
        assetType: "asset_type",
        averagePrices: "average_prices",
        basketOrderId: "basket_order_id",
        clientOrderId: "client_order_id",
        clientOrderReceivedTime: "client_order_received_time",
        createTime: "create_time",
        cumulativeNotionalValue: "cumulative_notional_value",
        currencyCode: "currency_code",
        filledQuantity: "filled_quantity",
        identifierType: "identifier_type",
        lastUpdateTime: "last_update_time",
        maxSellQuantity: "max_sell_quantity",
        notionalValue: "notional_value",
        orderRejectedReason: "order_rejected_reason",
        orderStatus: "order_status",
        orderType: "order_type",
        specialReportingInstructions: "special_reporting_instructions",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrder$;
(function (BasketOrder$) {
    /** @deprecated use `BasketOrder$inboundSchema` instead. */
    BasketOrder$.inboundSchema = BasketOrder$inboundSchema;
    /** @deprecated use `BasketOrder$outboundSchema` instead. */
    BasketOrder$.outboundSchema = BasketOrder$outboundSchema;
})(BasketOrder$ || (BasketOrder$ = {}));
export function basketOrderToJSON(basketOrder) {
    return JSON.stringify(BasketOrder$outboundSchema.parse(basketOrder));
}
export function basketOrderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrder$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrder' from JSON`);
}
//# sourceMappingURL=basketorder.js.map