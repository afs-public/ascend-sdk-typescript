/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Federal tax classification.
 */
export var TaxProfileUpdateFederalTaxClassification;
(function (TaxProfileUpdateFederalTaxClassification) {
    TaxProfileUpdateFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    TaxProfileUpdateFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    TaxProfileUpdateFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    TaxProfileUpdateFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    TaxProfileUpdateFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    TaxProfileUpdateFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    TaxProfileUpdateFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    TaxProfileUpdateFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    TaxProfileUpdateFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    TaxProfileUpdateFederalTaxClassification["Other"] = "OTHER";
})(TaxProfileUpdateFederalTaxClassification || (TaxProfileUpdateFederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var TaxProfileUpdateIrsFormType;
(function (TaxProfileUpdateIrsFormType) {
    TaxProfileUpdateIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    TaxProfileUpdateIrsFormType["W9"] = "W_9";
    TaxProfileUpdateIrsFormType["W8Ben"] = "W_8BEN";
})(TaxProfileUpdateIrsFormType || (TaxProfileUpdateIrsFormType = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var TaxProfileUpdateUsTinStatus;
(function (TaxProfileUpdateUsTinStatus) {
    TaxProfileUpdateUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    TaxProfileUpdateUsTinStatus["Passing"] = "PASSING";
    TaxProfileUpdateUsTinStatus["Failing"] = "FAILING";
})(TaxProfileUpdateUsTinStatus || (TaxProfileUpdateUsTinStatus = {}));
/** @internal */
export const TaxProfileUpdateFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(TaxProfileUpdateFederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxProfileUpdateFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(TaxProfileUpdateFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfileUpdateFederalTaxClassification$;
(function (TaxProfileUpdateFederalTaxClassification$) {
    /** @deprecated use `TaxProfileUpdateFederalTaxClassification$inboundSchema` instead. */
    TaxProfileUpdateFederalTaxClassification$.inboundSchema = TaxProfileUpdateFederalTaxClassification$inboundSchema;
    /** @deprecated use `TaxProfileUpdateFederalTaxClassification$outboundSchema` instead. */
    TaxProfileUpdateFederalTaxClassification$.outboundSchema = TaxProfileUpdateFederalTaxClassification$outboundSchema;
})(TaxProfileUpdateFederalTaxClassification$ || (TaxProfileUpdateFederalTaxClassification$ = {}));
/** @internal */
export const TaxProfileUpdateIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(TaxProfileUpdateIrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxProfileUpdateIrsFormType$outboundSchema = z.union([
    z.nativeEnum(TaxProfileUpdateIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfileUpdateIrsFormType$;
(function (TaxProfileUpdateIrsFormType$) {
    /** @deprecated use `TaxProfileUpdateIrsFormType$inboundSchema` instead. */
    TaxProfileUpdateIrsFormType$.inboundSchema = TaxProfileUpdateIrsFormType$inboundSchema;
    /** @deprecated use `TaxProfileUpdateIrsFormType$outboundSchema` instead. */
    TaxProfileUpdateIrsFormType$.outboundSchema = TaxProfileUpdateIrsFormType$outboundSchema;
})(TaxProfileUpdateIrsFormType$ || (TaxProfileUpdateIrsFormType$ = {}));
/** @internal */
export const TaxProfileUpdateUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(TaxProfileUpdateUsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxProfileUpdateUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(TaxProfileUpdateUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfileUpdateUsTinStatus$;
(function (TaxProfileUpdateUsTinStatus$) {
    /** @deprecated use `TaxProfileUpdateUsTinStatus$inboundSchema` instead. */
    TaxProfileUpdateUsTinStatus$.inboundSchema = TaxProfileUpdateUsTinStatus$inboundSchema;
    /** @deprecated use `TaxProfileUpdateUsTinStatus$outboundSchema` instead. */
    TaxProfileUpdateUsTinStatus$.outboundSchema = TaxProfileUpdateUsTinStatus$outboundSchema;
})(TaxProfileUpdateUsTinStatus$ || (TaxProfileUpdateUsTinStatus$ = {}));
/** @internal */
export const TaxProfileUpdate$inboundSchema = z.object({
    federal_tax_classification: TaxProfileUpdateFederalTaxClassification$inboundSchema.optional(),
    irs_form_type: TaxProfileUpdateIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    us_tin_status: TaxProfileUpdateUsTinStatus$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_classification": "federalTaxClassification",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "us_tin_status": "usTinStatus",
    });
});
/** @internal */
export const TaxProfileUpdate$outboundSchema = z.object({
    federalTaxClassification: TaxProfileUpdateFederalTaxClassification$outboundSchema.optional(),
    irsFormType: TaxProfileUpdateIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    usTinStatus: TaxProfileUpdateUsTinStatus$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxClassification: "federal_tax_classification",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        usTinStatus: "us_tin_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfileUpdate$;
(function (TaxProfileUpdate$) {
    /** @deprecated use `TaxProfileUpdate$inboundSchema` instead. */
    TaxProfileUpdate$.inboundSchema = TaxProfileUpdate$inboundSchema;
    /** @deprecated use `TaxProfileUpdate$outboundSchema` instead. */
    TaxProfileUpdate$.outboundSchema = TaxProfileUpdate$outboundSchema;
})(TaxProfileUpdate$ || (TaxProfileUpdate$ = {}));
export function taxProfileUpdateToJSON(taxProfileUpdate) {
    return JSON.stringify(TaxProfileUpdate$outboundSchema.parse(taxProfileUpdate));
}
export function taxProfileUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxProfileUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxProfileUpdate' from JSON`);
}
//# sourceMappingURL=taxprofileupdate.js.map