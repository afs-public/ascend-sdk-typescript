/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PhoneNumberUpdate$inboundSchema, PhoneNumberUpdate$outboundSchema, } from "./phonenumberupdate.js";
import { PostalAddressUpdate$inboundSchema, PostalAddressUpdate$outboundSchema, } from "./postaladdressupdate.js";
/**
 * Delivery method instruction for prospectuses for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestUpdateProspectusDeliveryPreference;
(function (PartyRequestUpdateProspectusDeliveryPreference) {
    PartyRequestUpdateProspectusDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestUpdateProspectusDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestUpdateProspectusDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestUpdateProspectusDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestUpdateProspectusDeliveryPreference || (PartyRequestUpdateProspectusDeliveryPreference = {}));
/**
 * Delivery method instruction for proxy voting for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestUpdateProxyDeliveryPreference;
(function (PartyRequestUpdateProxyDeliveryPreference) {
    PartyRequestUpdateProxyDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestUpdateProxyDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestUpdateProxyDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestUpdateProxyDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestUpdateProxyDeliveryPreference || (PartyRequestUpdateProxyDeliveryPreference = {}));
/**
 * Conveys how a person is related to account; Located on each account Party record; Examples are `PRIMARY_OWNER`, `JOINT_OWNER`, `EXECUTOR`, etc.
 */
export var PartyRequestUpdateRelationType;
(function (PartyRequestUpdateRelationType) {
    PartyRequestUpdateRelationType["PartyRelationTypeUnspecified"] = "PARTY_RELATION_TYPE_UNSPECIFIED";
    PartyRequestUpdateRelationType["PrimaryOwner"] = "PRIMARY_OWNER";
    PartyRequestUpdateRelationType["JointOwner"] = "JOINT_OWNER";
    PartyRequestUpdateRelationType["Custodian"] = "CUSTODIAN";
    PartyRequestUpdateRelationType["Executor"] = "EXECUTOR";
    PartyRequestUpdateRelationType["AuthorizedSigner"] = "AUTHORIZED_SIGNER";
    PartyRequestUpdateRelationType["BeneficialOwner"] = "BENEFICIAL_OWNER";
    PartyRequestUpdateRelationType["ControlPerson"] = "CONTROL_PERSON";
    PartyRequestUpdateRelationType["AuthorizedRepresentative"] = "AUTHORIZED_REPRESENTATIVE";
    PartyRequestUpdateRelationType["Trustee"] = "TRUSTEE";
    PartyRequestUpdateRelationType["AuthTrusteeRep"] = "AUTH_TRUSTEE_REP";
})(PartyRequestUpdateRelationType || (PartyRequestUpdateRelationType = {}));
/**
 * Delivery method instruction for account statements for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestUpdateStatementDeliveryPreference;
(function (PartyRequestUpdateStatementDeliveryPreference) {
    PartyRequestUpdateStatementDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestUpdateStatementDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestUpdateStatementDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestUpdateStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestUpdateStatementDeliveryPreference || (PartyRequestUpdateStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for tax documents for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated; Per regulation, selected tax forms will be mailed by regulation regardless of this setting
 */
export var PartyRequestUpdateTaxDocumentDeliveryPreference;
(function (PartyRequestUpdateTaxDocumentDeliveryPreference) {
    PartyRequestUpdateTaxDocumentDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestUpdateTaxDocumentDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestUpdateTaxDocumentDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestUpdateTaxDocumentDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestUpdateTaxDocumentDeliveryPreference || (PartyRequestUpdateTaxDocumentDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestUpdateTradeConfirmationDeliveryPreference;
(function (PartyRequestUpdateTradeConfirmationDeliveryPreference) {
    PartyRequestUpdateTradeConfirmationDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestUpdateTradeConfirmationDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestUpdateTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestUpdateTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestUpdateTradeConfirmationDeliveryPreference || (PartyRequestUpdateTradeConfirmationDeliveryPreference = {}));
/** @internal */
export const PartyRequestUpdateProspectusDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateProspectusDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateProspectusDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateProspectusDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateProspectusDeliveryPreference$;
(function (PartyRequestUpdateProspectusDeliveryPreference$) {
    /** @deprecated use `PartyRequestUpdateProspectusDeliveryPreference$inboundSchema` instead. */
    PartyRequestUpdateProspectusDeliveryPreference$.inboundSchema = PartyRequestUpdateProspectusDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestUpdateProspectusDeliveryPreference$outboundSchema` instead. */
    PartyRequestUpdateProspectusDeliveryPreference$.outboundSchema = PartyRequestUpdateProspectusDeliveryPreference$outboundSchema;
})(PartyRequestUpdateProspectusDeliveryPreference$ || (PartyRequestUpdateProspectusDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestUpdateProxyDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateProxyDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateProxyDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateProxyDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateProxyDeliveryPreference$;
(function (PartyRequestUpdateProxyDeliveryPreference$) {
    /** @deprecated use `PartyRequestUpdateProxyDeliveryPreference$inboundSchema` instead. */
    PartyRequestUpdateProxyDeliveryPreference$.inboundSchema = PartyRequestUpdateProxyDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestUpdateProxyDeliveryPreference$outboundSchema` instead. */
    PartyRequestUpdateProxyDeliveryPreference$.outboundSchema = PartyRequestUpdateProxyDeliveryPreference$outboundSchema;
})(PartyRequestUpdateProxyDeliveryPreference$ || (PartyRequestUpdateProxyDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestUpdateRelationType$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateRelationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateRelationType$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateRelationType$;
(function (PartyRequestUpdateRelationType$) {
    /** @deprecated use `PartyRequestUpdateRelationType$inboundSchema` instead. */
    PartyRequestUpdateRelationType$.inboundSchema = PartyRequestUpdateRelationType$inboundSchema;
    /** @deprecated use `PartyRequestUpdateRelationType$outboundSchema` instead. */
    PartyRequestUpdateRelationType$.outboundSchema = PartyRequestUpdateRelationType$outboundSchema;
})(PartyRequestUpdateRelationType$ || (PartyRequestUpdateRelationType$ = {}));
/** @internal */
export const PartyRequestUpdateStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateStatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateStatementDeliveryPreference$;
(function (PartyRequestUpdateStatementDeliveryPreference$) {
    /** @deprecated use `PartyRequestUpdateStatementDeliveryPreference$inboundSchema` instead. */
    PartyRequestUpdateStatementDeliveryPreference$.inboundSchema = PartyRequestUpdateStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestUpdateStatementDeliveryPreference$outboundSchema` instead. */
    PartyRequestUpdateStatementDeliveryPreference$.outboundSchema = PartyRequestUpdateStatementDeliveryPreference$outboundSchema;
})(PartyRequestUpdateStatementDeliveryPreference$ || (PartyRequestUpdateStatementDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestUpdateTaxDocumentDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateTaxDocumentDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateTaxDocumentDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateTaxDocumentDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateTaxDocumentDeliveryPreference$;
(function (PartyRequestUpdateTaxDocumentDeliveryPreference$) {
    /** @deprecated use `PartyRequestUpdateTaxDocumentDeliveryPreference$inboundSchema` instead. */
    PartyRequestUpdateTaxDocumentDeliveryPreference$.inboundSchema = PartyRequestUpdateTaxDocumentDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestUpdateTaxDocumentDeliveryPreference$outboundSchema` instead. */
    PartyRequestUpdateTaxDocumentDeliveryPreference$.outboundSchema = PartyRequestUpdateTaxDocumentDeliveryPreference$outboundSchema;
})(PartyRequestUpdateTaxDocumentDeliveryPreference$ || (PartyRequestUpdateTaxDocumentDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestUpdateTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestUpdateTradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestUpdateTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestUpdateTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdateTradeConfirmationDeliveryPreference$;
(function (PartyRequestUpdateTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `PartyRequestUpdateTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    PartyRequestUpdateTradeConfirmationDeliveryPreference$.inboundSchema = PartyRequestUpdateTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestUpdateTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    PartyRequestUpdateTradeConfirmationDeliveryPreference$.outboundSchema = PartyRequestUpdateTradeConfirmationDeliveryPreference$outboundSchema;
})(PartyRequestUpdateTradeConfirmationDeliveryPreference$ || (PartyRequestUpdateTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestUpdate$inboundSchema = z.object({
    email_address: z.string().optional(),
    legal_entity_id: z.string().optional(),
    legal_natural_person_id: z.string().optional(),
    mailing_address: PostalAddressUpdate$inboundSchema.optional(),
    phone_number: PhoneNumberUpdate$inboundSchema.optional(),
    prospectus_delivery_preference: PartyRequestUpdateProspectusDeliveryPreference$inboundSchema.optional(),
    proxy_delivery_preference: PartyRequestUpdateProxyDeliveryPreference$inboundSchema.optional(),
    relation_type: PartyRequestUpdateRelationType$inboundSchema.optional(),
    statement_delivery_preference: PartyRequestUpdateStatementDeliveryPreference$inboundSchema.optional(),
    tax_document_delivery_preference: PartyRequestUpdateTaxDocumentDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: PartyRequestUpdateTradeConfirmationDeliveryPreference$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "email_address": "emailAddress",
        "legal_entity_id": "legalEntityId",
        "legal_natural_person_id": "legalNaturalPersonId",
        "mailing_address": "mailingAddress",
        "phone_number": "phoneNumber",
        "prospectus_delivery_preference": "prospectusDeliveryPreference",
        "proxy_delivery_preference": "proxyDeliveryPreference",
        "relation_type": "relationType",
        "statement_delivery_preference": "statementDeliveryPreference",
        "tax_document_delivery_preference": "taxDocumentDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const PartyRequestUpdate$outboundSchema = z.object({
    emailAddress: z.string().optional(),
    legalEntityId: z.string().optional(),
    legalNaturalPersonId: z.string().optional(),
    mailingAddress: PostalAddressUpdate$outboundSchema.optional(),
    phoneNumber: PhoneNumberUpdate$outboundSchema.optional(),
    prospectusDeliveryPreference: PartyRequestUpdateProspectusDeliveryPreference$outboundSchema.optional(),
    proxyDeliveryPreference: PartyRequestUpdateProxyDeliveryPreference$outboundSchema.optional(),
    relationType: PartyRequestUpdateRelationType$outboundSchema.optional(),
    statementDeliveryPreference: PartyRequestUpdateStatementDeliveryPreference$outboundSchema.optional(),
    taxDocumentDeliveryPreference: PartyRequestUpdateTaxDocumentDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: PartyRequestUpdateTradeConfirmationDeliveryPreference$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        emailAddress: "email_address",
        legalEntityId: "legal_entity_id",
        legalNaturalPersonId: "legal_natural_person_id",
        mailingAddress: "mailing_address",
        phoneNumber: "phone_number",
        prospectusDeliveryPreference: "prospectus_delivery_preference",
        proxyDeliveryPreference: "proxy_delivery_preference",
        relationType: "relation_type",
        statementDeliveryPreference: "statement_delivery_preference",
        taxDocumentDeliveryPreference: "tax_document_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestUpdate$;
(function (PartyRequestUpdate$) {
    /** @deprecated use `PartyRequestUpdate$inboundSchema` instead. */
    PartyRequestUpdate$.inboundSchema = PartyRequestUpdate$inboundSchema;
    /** @deprecated use `PartyRequestUpdate$outboundSchema` instead. */
    PartyRequestUpdate$.outboundSchema = PartyRequestUpdate$outboundSchema;
})(PartyRequestUpdate$ || (PartyRequestUpdate$ = {}));
export function partyRequestUpdateToJSON(partyRequestUpdate) {
    return JSON.stringify(PartyRequestUpdate$outboundSchema.parse(partyRequestUpdate));
}
export function partyRequestUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyRequestUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyRequestUpdate' from JSON`);
}
//# sourceMappingURL=partyrequestupdate.js.map