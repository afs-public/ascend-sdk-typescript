/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of asset referenced by the security identifier
 */
export var OrderCostPreviewResponseAssetType;
(function (OrderCostPreviewResponseAssetType) {
    OrderCostPreviewResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    OrderCostPreviewResponseAssetType["Equity"] = "EQUITY";
    OrderCostPreviewResponseAssetType["FixedIncome"] = "FIXED_INCOME";
    OrderCostPreviewResponseAssetType["MutualFund"] = "MUTUAL_FUND";
    OrderCostPreviewResponseAssetType["Option"] = "OPTION";
})(OrderCostPreviewResponseAssetType || (OrderCostPreviewResponseAssetType = {}));
/**
 * Capacity used in determining the order cost. Defaults to "AGENCY" if no value specified.
 */
export var OrderCostPreviewResponseBrokerCapacity;
(function (OrderCostPreviewResponseBrokerCapacity) {
    OrderCostPreviewResponseBrokerCapacity["BrokerCapacityUnspecified"] = "BROKER_CAPACITY_UNSPECIFIED";
    OrderCostPreviewResponseBrokerCapacity["Agency"] = "AGENCY";
    OrderCostPreviewResponseBrokerCapacity["Principal"] = "PRINCIPAL";
})(OrderCostPreviewResponseBrokerCapacity || (OrderCostPreviewResponseBrokerCapacity = {}));
/**
 * The identifier type of the asset used for price calculations. This will be the same value as what was sent on the request.
 */
export var OrderCostPreviewResponseIdentifierType;
(function (OrderCostPreviewResponseIdentifierType) {
    OrderCostPreviewResponseIdentifierType["AssetId"] = "ASSET_ID";
    OrderCostPreviewResponseIdentifierType["Cusip"] = "CUSIP";
    OrderCostPreviewResponseIdentifierType["Isin"] = "ISIN";
})(OrderCostPreviewResponseIdentifierType || (OrderCostPreviewResponseIdentifierType = {}));
/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
 */
export var OrderCostPreviewResponseType;
(function (OrderCostPreviewResponseType) {
    OrderCostPreviewResponseType["LimitPriceTypeUnspecified"] = "LIMIT_PRICE_TYPE_UNSPECIFIED";
    OrderCostPreviewResponseType["PricePerUnit"] = "PRICE_PER_UNIT";
    OrderCostPreviewResponseType["PercentageOfPar"] = "PERCENTAGE_OF_PAR";
})(OrderCostPreviewResponseType || (OrderCostPreviewResponseType = {}));
/** @internal */
export const OrderCostPreviewResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(OrderCostPreviewResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OrderCostPreviewResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(OrderCostPreviewResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseAssetType$;
(function (OrderCostPreviewResponseAssetType$) {
    /** @deprecated use `OrderCostPreviewResponseAssetType$inboundSchema` instead. */
    OrderCostPreviewResponseAssetType$.inboundSchema = OrderCostPreviewResponseAssetType$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseAssetType$outboundSchema` instead. */
    OrderCostPreviewResponseAssetType$.outboundSchema = OrderCostPreviewResponseAssetType$outboundSchema;
})(OrderCostPreviewResponseAssetType$ || (OrderCostPreviewResponseAssetType$ = {}));
/** @internal */
export const OrderCostPreviewResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(OrderCostPreviewResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OrderCostPreviewResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(OrderCostPreviewResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseBrokerCapacity$;
(function (OrderCostPreviewResponseBrokerCapacity$) {
    /** @deprecated use `OrderCostPreviewResponseBrokerCapacity$inboundSchema` instead. */
    OrderCostPreviewResponseBrokerCapacity$.inboundSchema = OrderCostPreviewResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseBrokerCapacity$outboundSchema` instead. */
    OrderCostPreviewResponseBrokerCapacity$.outboundSchema = OrderCostPreviewResponseBrokerCapacity$outboundSchema;
})(OrderCostPreviewResponseBrokerCapacity$ || (OrderCostPreviewResponseBrokerCapacity$ = {}));
/** @internal */
export const EstimatedAccruedInterest$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EstimatedAccruedInterest$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EstimatedAccruedInterest$;
(function (EstimatedAccruedInterest$) {
    /** @deprecated use `EstimatedAccruedInterest$inboundSchema` instead. */
    EstimatedAccruedInterest$.inboundSchema = EstimatedAccruedInterest$inboundSchema;
    /** @deprecated use `EstimatedAccruedInterest$outboundSchema` instead. */
    EstimatedAccruedInterest$.outboundSchema = EstimatedAccruedInterest$outboundSchema;
})(EstimatedAccruedInterest$ || (EstimatedAccruedInterest$ = {}));
export function estimatedAccruedInterestToJSON(estimatedAccruedInterest) {
    return JSON.stringify(EstimatedAccruedInterest$outboundSchema.parse(estimatedAccruedInterest));
}
export function estimatedAccruedInterestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EstimatedAccruedInterest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EstimatedAccruedInterest' from JSON`);
}
/** @internal */
export const EstimatedGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EstimatedGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EstimatedGrossAmount$;
(function (EstimatedGrossAmount$) {
    /** @deprecated use `EstimatedGrossAmount$inboundSchema` instead. */
    EstimatedGrossAmount$.inboundSchema = EstimatedGrossAmount$inboundSchema;
    /** @deprecated use `EstimatedGrossAmount$outboundSchema` instead. */
    EstimatedGrossAmount$.outboundSchema = EstimatedGrossAmount$outboundSchema;
})(EstimatedGrossAmount$ || (EstimatedGrossAmount$ = {}));
export function estimatedGrossAmountToJSON(estimatedGrossAmount) {
    return JSON.stringify(EstimatedGrossAmount$outboundSchema.parse(estimatedGrossAmount));
}
export function estimatedGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EstimatedGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EstimatedGrossAmount' from JSON`);
}
/** @internal */
export const EstimatedGrossCreditAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EstimatedGrossCreditAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EstimatedGrossCreditAmount$;
(function (EstimatedGrossCreditAmount$) {
    /** @deprecated use `EstimatedGrossCreditAmount$inboundSchema` instead. */
    EstimatedGrossCreditAmount$.inboundSchema = EstimatedGrossCreditAmount$inboundSchema;
    /** @deprecated use `EstimatedGrossCreditAmount$outboundSchema` instead. */
    EstimatedGrossCreditAmount$.outboundSchema = EstimatedGrossCreditAmount$outboundSchema;
})(EstimatedGrossCreditAmount$ || (EstimatedGrossCreditAmount$ = {}));
export function estimatedGrossCreditAmountToJSON(estimatedGrossCreditAmount) {
    return JSON.stringify(EstimatedGrossCreditAmount$outboundSchema.parse(estimatedGrossCreditAmount));
}
export function estimatedGrossCreditAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EstimatedGrossCreditAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EstimatedGrossCreditAmount' from JSON`);
}
/** @internal */
export const EstimatedNetAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EstimatedNetAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EstimatedNetAmount$;
(function (EstimatedNetAmount$) {
    /** @deprecated use `EstimatedNetAmount$inboundSchema` instead. */
    EstimatedNetAmount$.inboundSchema = EstimatedNetAmount$inboundSchema;
    /** @deprecated use `EstimatedNetAmount$outboundSchema` instead. */
    EstimatedNetAmount$.outboundSchema = EstimatedNetAmount$outboundSchema;
})(EstimatedNetAmount$ || (EstimatedNetAmount$ = {}));
export function estimatedNetAmountToJSON(estimatedNetAmount) {
    return JSON.stringify(EstimatedNetAmount$outboundSchema.parse(estimatedNetAmount));
}
export function estimatedNetAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EstimatedNetAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EstimatedNetAmount' from JSON`);
}
/** @internal */
export const OrderCostPreviewResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(OrderCostPreviewResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OrderCostPreviewResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(OrderCostPreviewResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseIdentifierType$;
(function (OrderCostPreviewResponseIdentifierType$) {
    /** @deprecated use `OrderCostPreviewResponseIdentifierType$inboundSchema` instead. */
    OrderCostPreviewResponseIdentifierType$.inboundSchema = OrderCostPreviewResponseIdentifierType$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseIdentifierType$outboundSchema` instead. */
    OrderCostPreviewResponseIdentifierType$.outboundSchema = OrderCostPreviewResponseIdentifierType$outboundSchema;
})(OrderCostPreviewResponseIdentifierType$ || (OrderCostPreviewResponseIdentifierType$ = {}));
/** @internal */
export const OrderCostPreviewResponsePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const OrderCostPreviewResponsePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponsePrice$;
(function (OrderCostPreviewResponsePrice$) {
    /** @deprecated use `OrderCostPreviewResponsePrice$inboundSchema` instead. */
    OrderCostPreviewResponsePrice$.inboundSchema = OrderCostPreviewResponsePrice$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponsePrice$outboundSchema` instead. */
    OrderCostPreviewResponsePrice$.outboundSchema = OrderCostPreviewResponsePrice$outboundSchema;
})(OrderCostPreviewResponsePrice$ || (OrderCostPreviewResponsePrice$ = {}));
export function orderCostPreviewResponsePriceToJSON(orderCostPreviewResponsePrice) {
    return JSON.stringify(OrderCostPreviewResponsePrice$outboundSchema.parse(orderCostPreviewResponsePrice));
}
export function orderCostPreviewResponsePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCostPreviewResponsePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCostPreviewResponsePrice' from JSON`);
}
/** @internal */
export const OrderCostPreviewResponseType$inboundSchema = z
    .union([
    z.nativeEnum(OrderCostPreviewResponseType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OrderCostPreviewResponseType$outboundSchema = z.union([
    z.nativeEnum(OrderCostPreviewResponseType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseType$;
(function (OrderCostPreviewResponseType$) {
    /** @deprecated use `OrderCostPreviewResponseType$inboundSchema` instead. */
    OrderCostPreviewResponseType$.inboundSchema = OrderCostPreviewResponseType$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseType$outboundSchema` instead. */
    OrderCostPreviewResponseType$.outboundSchema = OrderCostPreviewResponseType$outboundSchema;
})(OrderCostPreviewResponseType$ || (OrderCostPreviewResponseType$ = {}));
/** @internal */
export const OrderCostPreviewResponseLimitPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => OrderCostPreviewResponsePrice$inboundSchema))
        .optional(),
    type: OrderCostPreviewResponseType$inboundSchema.optional(),
});
/** @internal */
export const OrderCostPreviewResponseLimitPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => OrderCostPreviewResponsePrice$outboundSchema))
        .optional(),
    type: OrderCostPreviewResponseType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseLimitPrice$;
(function (OrderCostPreviewResponseLimitPrice$) {
    /** @deprecated use `OrderCostPreviewResponseLimitPrice$inboundSchema` instead. */
    OrderCostPreviewResponseLimitPrice$.inboundSchema = OrderCostPreviewResponseLimitPrice$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseLimitPrice$outboundSchema` instead. */
    OrderCostPreviewResponseLimitPrice$.outboundSchema = OrderCostPreviewResponseLimitPrice$outboundSchema;
})(OrderCostPreviewResponseLimitPrice$ || (OrderCostPreviewResponseLimitPrice$ = {}));
export function orderCostPreviewResponseLimitPriceToJSON(orderCostPreviewResponseLimitPrice) {
    return JSON.stringify(OrderCostPreviewResponseLimitPrice$outboundSchema.parse(orderCostPreviewResponseLimitPrice));
}
export function orderCostPreviewResponseLimitPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCostPreviewResponseLimitPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCostPreviewResponseLimitPrice' from JSON`);
}
/** @internal */
export const OrderCostPreviewResponseQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const OrderCostPreviewResponseQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponseQuantity$;
(function (OrderCostPreviewResponseQuantity$) {
    /** @deprecated use `OrderCostPreviewResponseQuantity$inboundSchema` instead. */
    OrderCostPreviewResponseQuantity$.inboundSchema = OrderCostPreviewResponseQuantity$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponseQuantity$outboundSchema` instead. */
    OrderCostPreviewResponseQuantity$.outboundSchema = OrderCostPreviewResponseQuantity$outboundSchema;
})(OrderCostPreviewResponseQuantity$ || (OrderCostPreviewResponseQuantity$ = {}));
export function orderCostPreviewResponseQuantityToJSON(orderCostPreviewResponseQuantity) {
    return JSON.stringify(OrderCostPreviewResponseQuantity$outboundSchema.parse(orderCostPreviewResponseQuantity));
}
export function orderCostPreviewResponseQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCostPreviewResponseQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCostPreviewResponseQuantity' from JSON`);
}
/** @internal */
export const OrderCostPreviewResponse$inboundSchema = z.object({
    account_id: z.string().optional(),
    asset_id: z.string().optional(),
    asset_type: OrderCostPreviewResponseAssetType$inboundSchema.optional(),
    broker_capacity: OrderCostPreviewResponseBrokerCapacity$inboundSchema
        .optional(),
    estimated_accrued_interest: z.nullable(z.lazy(() => EstimatedAccruedInterest$inboundSchema)).optional(),
    estimated_gross_amount: z.nullable(z.lazy(() => EstimatedGrossAmount$inboundSchema)).optional(),
    estimated_gross_credit_amount: z.nullable(z.lazy(() => EstimatedGrossCreditAmount$inboundSchema)).optional(),
    estimated_net_amount: z.nullable(z.lazy(() => EstimatedNetAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: OrderCostPreviewResponseIdentifierType$inboundSchema
        .optional(),
    limit_price: z.nullable(z.lazy(() => OrderCostPreviewResponseLimitPrice$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => OrderCostPreviewResponseQuantity$inboundSchema)).optional(),
    response_generation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "asset_id": "assetId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "estimated_accrued_interest": "estimatedAccruedInterest",
        "estimated_gross_amount": "estimatedGrossAmount",
        "estimated_gross_credit_amount": "estimatedGrossCreditAmount",
        "estimated_net_amount": "estimatedNetAmount",
        "identifier_type": "identifierType",
        "limit_price": "limitPrice",
        "response_generation_time": "responseGenerationTime",
    });
});
/** @internal */
export const OrderCostPreviewResponse$outboundSchema = z.object({
    accountId: z.string().optional(),
    assetId: z.string().optional(),
    assetType: OrderCostPreviewResponseAssetType$outboundSchema.optional(),
    brokerCapacity: OrderCostPreviewResponseBrokerCapacity$outboundSchema
        .optional(),
    estimatedAccruedInterest: z.nullable(z.lazy(() => EstimatedAccruedInterest$outboundSchema)).optional(),
    estimatedGrossAmount: z.nullable(z.lazy(() => EstimatedGrossAmount$outboundSchema)).optional(),
    estimatedGrossCreditAmount: z.nullable(z.lazy(() => EstimatedGrossCreditAmount$outboundSchema)).optional(),
    estimatedNetAmount: z.nullable(z.lazy(() => EstimatedNetAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: OrderCostPreviewResponseIdentifierType$outboundSchema
        .optional(),
    limitPrice: z.nullable(z.lazy(() => OrderCostPreviewResponseLimitPrice$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => OrderCostPreviewResponseQuantity$outboundSchema)).optional(),
    responseGenerationTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        assetId: "asset_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        estimatedAccruedInterest: "estimated_accrued_interest",
        estimatedGrossAmount: "estimated_gross_amount",
        estimatedGrossCreditAmount: "estimated_gross_credit_amount",
        estimatedNetAmount: "estimated_net_amount",
        identifierType: "identifier_type",
        limitPrice: "limit_price",
        responseGenerationTime: "response_generation_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCostPreviewResponse$;
(function (OrderCostPreviewResponse$) {
    /** @deprecated use `OrderCostPreviewResponse$inboundSchema` instead. */
    OrderCostPreviewResponse$.inboundSchema = OrderCostPreviewResponse$inboundSchema;
    /** @deprecated use `OrderCostPreviewResponse$outboundSchema` instead. */
    OrderCostPreviewResponse$.outboundSchema = OrderCostPreviewResponse$outboundSchema;
})(OrderCostPreviewResponse$ || (OrderCostPreviewResponse$ = {}));
export function orderCostPreviewResponseToJSON(orderCostPreviewResponse) {
    return JSON.stringify(OrderCostPreviewResponse$outboundSchema.parse(orderCostPreviewResponse));
}
export function orderCostPreviewResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCostPreviewResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCostPreviewResponse' from JSON`);
}
//# sourceMappingURL=ordercostpreviewresponse.js.map