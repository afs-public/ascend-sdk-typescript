/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { EmploymentCreate$inboundSchema, EmploymentCreate$outboundSchema, } from "./employmentcreate.js";
import { ForeignIdentificationCreate$inboundSchema, ForeignIdentificationCreate$outboundSchema, } from "./foreignidentificationcreate.js";
import { IdentityVerificationResultCreate$inboundSchema, IdentityVerificationResultCreate$outboundSchema, } from "./identityverificationresultcreate.js";
import { LargeTraderCreate$inboundSchema, LargeTraderCreate$outboundSchema, } from "./largetradercreate.js";
import { NaturalPersonFddCreate$inboundSchema, NaturalPersonFddCreate$outboundSchema, } from "./naturalpersonfddcreate.js";
import { NonCitizenResidencyCreate$inboundSchema, NonCitizenResidencyCreate$outboundSchema, } from "./noncitizenresidencycreate.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
import { TaxProfileCreate$inboundSchema, TaxProfileCreate$outboundSchema, } from "./taxprofilecreate.js";
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
export var MaritalStatus;
(function (MaritalStatus) {
    MaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    MaritalStatus["Single"] = "SINGLE";
    MaritalStatus["Married"] = "MARRIED";
    MaritalStatus["Divorced"] = "DIVORCED";
    MaritalStatus["Widowed"] = "WIDOWED";
})(MaritalStatus || (MaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
export var NameSuffix;
(function (NameSuffix) {
    NameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    NameSuffix["Sr"] = "SR";
    NameSuffix["Jr"] = "JR";
    NameSuffix["Iii"] = "III";
    NameSuffix["Iv"] = "IV";
    NameSuffix["V"] = "V";
})(NameSuffix || (NameSuffix = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var TaxIdType;
(function (TaxIdType) {
    TaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    TaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    TaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    TaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(TaxIdType || (TaxIdType = {}));
/** @internal */
export const MaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(MaritalStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MaritalStatus$outboundSchema = z.union([
    z.nativeEnum(MaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaritalStatus$;
(function (MaritalStatus$) {
    /** @deprecated use `MaritalStatus$inboundSchema` instead. */
    MaritalStatus$.inboundSchema = MaritalStatus$inboundSchema;
    /** @deprecated use `MaritalStatus$outboundSchema` instead. */
    MaritalStatus$.outboundSchema = MaritalStatus$outboundSchema;
})(MaritalStatus$ || (MaritalStatus$ = {}));
/** @internal */
export const NameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(NameSuffix),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const NameSuffix$outboundSchema = z.union([
    z.nativeEnum(NameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NameSuffix$;
(function (NameSuffix$) {
    /** @deprecated use `NameSuffix$inboundSchema` instead. */
    NameSuffix$.inboundSchema = NameSuffix$inboundSchema;
    /** @deprecated use `NameSuffix$outboundSchema` instead. */
    NameSuffix$.outboundSchema = NameSuffix$outboundSchema;
})(NameSuffix$ || (NameSuffix$ = {}));
/** @internal */
export const TaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(TaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxIdType$outboundSchema = z.union([
    z.nativeEnum(TaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxIdType$;
(function (TaxIdType$) {
    /** @deprecated use `TaxIdType$inboundSchema` instead. */
    TaxIdType$.inboundSchema = TaxIdType$inboundSchema;
    /** @deprecated use `TaxIdType$outboundSchema` instead. */
    TaxIdType$.outboundSchema = TaxIdType$outboundSchema;
})(TaxIdType$ || (TaxIdType$ = {}));
/** @internal */
export const LegalNaturalPersonCreate$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: DateCreate$inboundSchema,
    citizenship_countries: z.array(z.string()),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string(),
    customer_identification_id: z.string().optional(),
    death_date: DateCreate$inboundSchema.optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: EmploymentCreate$inboundSchema,
    family_name: z.string(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: ForeignIdentificationCreate$inboundSchema.optional(),
    given_name: z.string(),
    identity_verification_result: IdentityVerificationResultCreate$inboundSchema
        .optional(),
    institutional_customer: z.boolean().optional(),
    large_trader: LargeTraderCreate$inboundSchema.optional(),
    marital_status: MaritalStatus$inboundSchema.optional(),
    middle_names: z.string().optional(),
    name_suffix: NameSuffix$inboundSchema.optional(),
    natural_person_fdd: NaturalPersonFddCreate$inboundSchema.optional(),
    non_citizen_residency: NonCitizenResidencyCreate$inboundSchema.optional(),
    personal_address: PostalAddressCreate$inboundSchema,
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    subject_to_backup_withholding: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_type: TaxIdType$inboundSchema.optional(),
    tax_profile: TaxProfileCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "customer_identification_id": "customerIdentificationId",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "large_trader": "largeTrader",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "subject_to_backup_withholding": "subjectToBackupWithholding",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const LegalNaturalPersonCreate$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: DateCreate$outboundSchema,
    citizenshipCountries: z.array(z.string()),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string(),
    customerIdentificationId: z.string().optional(),
    deathDate: DateCreate$outboundSchema.optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: EmploymentCreate$outboundSchema,
    familyName: z.string(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: ForeignIdentificationCreate$outboundSchema.optional(),
    givenName: z.string(),
    identityVerificationResult: IdentityVerificationResultCreate$outboundSchema
        .optional(),
    institutionalCustomer: z.boolean().optional(),
    largeTrader: LargeTraderCreate$outboundSchema.optional(),
    maritalStatus: MaritalStatus$outboundSchema.optional(),
    middleNames: z.string().optional(),
    nameSuffix: NameSuffix$outboundSchema.optional(),
    naturalPersonFdd: NaturalPersonFddCreate$outboundSchema.optional(),
    nonCitizenResidency: NonCitizenResidencyCreate$outboundSchema.optional(),
    personalAddress: PostalAddressCreate$outboundSchema,
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    subjectToBackupWithholding: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdType: TaxIdType$outboundSchema.optional(),
    taxProfile: TaxProfileCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        customerIdentificationId: "customer_identification_id",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        largeTrader: "large_trader",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        subjectToBackupWithholding: "subject_to_backup_withholding",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonCreate$;
(function (LegalNaturalPersonCreate$) {
    /** @deprecated use `LegalNaturalPersonCreate$inboundSchema` instead. */
    LegalNaturalPersonCreate$.inboundSchema = LegalNaturalPersonCreate$inboundSchema;
    /** @deprecated use `LegalNaturalPersonCreate$outboundSchema` instead. */
    LegalNaturalPersonCreate$.outboundSchema = LegalNaturalPersonCreate$outboundSchema;
})(LegalNaturalPersonCreate$ || (LegalNaturalPersonCreate$ = {}));
export function legalNaturalPersonCreateToJSON(legalNaturalPersonCreate) {
    return JSON.stringify(LegalNaturalPersonCreate$outboundSchema.parse(legalNaturalPersonCreate));
}
export function legalNaturalPersonCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPersonCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPersonCreate' from JSON`);
}
//# sourceMappingURL=legalnaturalpersoncreate.js.map