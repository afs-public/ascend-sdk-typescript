"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransfersFee$ = exports.TransfersFee$outboundSchema = exports.TransfersFee$inboundSchema = exports.TransfersFeeType$ = exports.TransfersFeeType$outboundSchema = exports.TransfersFeeType$inboundSchema = exports.TransfersFeeState$ = exports.TransfersFeeState$outboundSchema = exports.TransfersFeeState$inboundSchema = exports.TransfersFeeStateState$ = exports.TransfersFeeStateState$outboundSchema = exports.TransfersFeeStateState$inboundSchema = exports.TransfersFeeAmount$ = exports.TransfersFeeAmount$outboundSchema = exports.TransfersFeeAmount$inboundSchema = exports.TransfersFeeType = exports.TransfersFeeStateState = void 0;
exports.transfersFeeAmountToJSON = transfersFeeAmountToJSON;
exports.transfersFeeAmountFromJSON = transfersFeeAmountFromJSON;
exports.transfersFeeStateToJSON = transfersFeeStateToJSON;
exports.transfersFeeStateFromJSON = transfersFeeStateFromJSON;
exports.transfersFeeToJSON = transfersFeeToJSON;
exports.transfersFeeFromJSON = transfersFeeFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
var TransfersFeeStateState;
(function (TransfersFeeStateState) {
    TransfersFeeStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TransfersFeeStateState["Processing"] = "PROCESSING";
    TransfersFeeStateState["PendingReview"] = "PENDING_REVIEW";
    TransfersFeeStateState["Posted"] = "POSTED";
    TransfersFeeStateState["Completed"] = "COMPLETED";
    TransfersFeeStateState["Rejected"] = "REJECTED";
    TransfersFeeStateState["Canceled"] = "CANCELED";
    TransfersFeeStateState["Returned"] = "RETURNED";
    TransfersFeeStateState["Postponed"] = "POSTPONED";
})(TransfersFeeStateState || (exports.TransfersFeeStateState = TransfersFeeStateState = {}));
/**
 * The type of the fee being charged
 */
var TransfersFeeType;
(function (TransfersFeeType) {
    TransfersFeeType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransfersFeeType["Management"] = "MANAGEMENT";
    TransfersFeeType["Advisory"] = "ADVISORY";
    TransfersFeeType["Exchange"] = "EXCHANGE";
    TransfersFeeType["Platform"] = "PLATFORM";
    TransfersFeeType["Inactivity"] = "INACTIVITY";
})(TransfersFeeType || (exports.TransfersFeeType = TransfersFeeType = {}));
/** @internal */
exports.TransfersFeeAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TransfersFeeAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersFeeAmount$;
(function (TransfersFeeAmount$) {
    /** @deprecated use `TransfersFeeAmount$inboundSchema` instead. */
    TransfersFeeAmount$.inboundSchema = exports.TransfersFeeAmount$inboundSchema;
    /** @deprecated use `TransfersFeeAmount$outboundSchema` instead. */
    TransfersFeeAmount$.outboundSchema = exports.TransfersFeeAmount$outboundSchema;
})(TransfersFeeAmount$ || (exports.TransfersFeeAmount$ = TransfersFeeAmount$ = {}));
function transfersFeeAmountToJSON(transfersFeeAmount) {
    return JSON.stringify(exports.TransfersFeeAmount$outboundSchema.parse(transfersFeeAmount));
}
function transfersFeeAmountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TransfersFeeAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFeeAmount' from JSON`);
}
/** @internal */
exports.TransfersFeeStateState$inboundSchema = z
    .union([
    z.nativeEnum(TransfersFeeStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TransfersFeeStateState$outboundSchema = z.union([
    z.nativeEnum(TransfersFeeStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersFeeStateState$;
(function (TransfersFeeStateState$) {
    /** @deprecated use `TransfersFeeStateState$inboundSchema` instead. */
    TransfersFeeStateState$.inboundSchema = exports.TransfersFeeStateState$inboundSchema;
    /** @deprecated use `TransfersFeeStateState$outboundSchema` instead. */
    TransfersFeeStateState$.outboundSchema = exports.TransfersFeeStateState$outboundSchema;
})(TransfersFeeStateState$ || (exports.TransfersFeeStateState$ = TransfersFeeStateState$ = {}));
/** @internal */
exports.TransfersFeeState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.TransfersFeeStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.TransfersFeeState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.TransfersFeeStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersFeeState$;
(function (TransfersFeeState$) {
    /** @deprecated use `TransfersFeeState$inboundSchema` instead. */
    TransfersFeeState$.inboundSchema = exports.TransfersFeeState$inboundSchema;
    /** @deprecated use `TransfersFeeState$outboundSchema` instead. */
    TransfersFeeState$.outboundSchema = exports.TransfersFeeState$outboundSchema;
})(TransfersFeeState$ || (exports.TransfersFeeState$ = TransfersFeeState$ = {}));
function transfersFeeStateToJSON(transfersFeeState) {
    return JSON.stringify(exports.TransfersFeeState$outboundSchema.parse(transfersFeeState));
}
function transfersFeeStateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TransfersFeeState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFeeState' from JSON`);
}
/** @internal */
exports.TransfersFeeType$inboundSchema = z
    .union([
    z.nativeEnum(TransfersFeeType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TransfersFeeType$outboundSchema = z.union([
    z.nativeEnum(TransfersFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersFeeType$;
(function (TransfersFeeType$) {
    /** @deprecated use `TransfersFeeType$inboundSchema` instead. */
    TransfersFeeType$.inboundSchema = exports.TransfersFeeType$inboundSchema;
    /** @deprecated use `TransfersFeeType$outboundSchema` instead. */
    TransfersFeeType$.outboundSchema = exports.TransfersFeeType$outboundSchema;
})(TransfersFeeType$ || (exports.TransfersFeeType$ = TransfersFeeType$ = {}));
/** @internal */
exports.TransfersFee$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.TransfersFeeAmount$inboundSchema)).optional(),
    bulk_upload_id: z.string().optional(),
    client_transfer_id: z.string().optional(),
    description: z.string().optional(),
    fee_operating_account: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.TransfersFeeState$inboundSchema)).optional(),
    type: exports.TransfersFeeType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "bulk_upload_id": "bulkUploadId",
        "client_transfer_id": "clientTransferId",
        "fee_operating_account": "feeOperatingAccount",
    });
});
/** @internal */
exports.TransfersFee$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.TransfersFeeAmount$outboundSchema))
        .optional(),
    bulkUploadId: z.string().optional(),
    clientTransferId: z.string().optional(),
    description: z.string().optional(),
    feeOperatingAccount: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.TransfersFeeState$outboundSchema)).optional(),
    type: exports.TransfersFeeType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        bulkUploadId: "bulk_upload_id",
        clientTransferId: "client_transfer_id",
        feeOperatingAccount: "fee_operating_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersFee$;
(function (TransfersFee$) {
    /** @deprecated use `TransfersFee$inboundSchema` instead. */
    TransfersFee$.inboundSchema = exports.TransfersFee$inboundSchema;
    /** @deprecated use `TransfersFee$outboundSchema` instead. */
    TransfersFee$.outboundSchema = exports.TransfersFee$outboundSchema;
})(TransfersFee$ || (exports.TransfersFee$ = TransfersFee$ = {}));
function transfersFeeToJSON(transfersFee) {
    return JSON.stringify(exports.TransfersFee$outboundSchema.parse(transfersFee));
}
function transfersFeeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TransfersFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFee' from JSON`);
}
//# sourceMappingURL=transfersfee.js.map