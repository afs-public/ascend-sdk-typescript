/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var TransfersFeeStateState;
(function (TransfersFeeStateState) {
    TransfersFeeStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TransfersFeeStateState["Processing"] = "PROCESSING";
    TransfersFeeStateState["PendingReview"] = "PENDING_REVIEW";
    TransfersFeeStateState["Posted"] = "POSTED";
    TransfersFeeStateState["Completed"] = "COMPLETED";
    TransfersFeeStateState["Rejected"] = "REJECTED";
    TransfersFeeStateState["Canceled"] = "CANCELED";
    TransfersFeeStateState["Returned"] = "RETURNED";
    TransfersFeeStateState["Postponed"] = "POSTPONED";
})(TransfersFeeStateState || (TransfersFeeStateState = {}));
/**
 * The type of the fee being charged
 */
export var TransfersFeeType;
(function (TransfersFeeType) {
    TransfersFeeType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransfersFeeType["Management"] = "MANAGEMENT";
    TransfersFeeType["Advisory"] = "ADVISORY";
    TransfersFeeType["Exchange"] = "EXCHANGE";
    TransfersFeeType["Platform"] = "PLATFORM";
    TransfersFeeType["Inactivity"] = "INACTIVITY";
})(TransfersFeeType || (TransfersFeeType = {}));
/** @internal */
export const TransfersFeeAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransfersFeeAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeAmount$;
(function (TransfersFeeAmount$) {
    /** @deprecated use `TransfersFeeAmount$inboundSchema` instead. */
    TransfersFeeAmount$.inboundSchema = TransfersFeeAmount$inboundSchema;
    /** @deprecated use `TransfersFeeAmount$outboundSchema` instead. */
    TransfersFeeAmount$.outboundSchema = TransfersFeeAmount$outboundSchema;
})(TransfersFeeAmount$ || (TransfersFeeAmount$ = {}));
export function transfersFeeAmountToJSON(transfersFeeAmount) {
    return JSON.stringify(TransfersFeeAmount$outboundSchema.parse(transfersFeeAmount));
}
export function transfersFeeAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersFeeAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFeeAmount' from JSON`);
}
/** @internal */
export const TransfersFeeStateState$inboundSchema = z
    .union([
    z.nativeEnum(TransfersFeeStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransfersFeeStateState$outboundSchema = z.union([
    z.nativeEnum(TransfersFeeStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeStateState$;
(function (TransfersFeeStateState$) {
    /** @deprecated use `TransfersFeeStateState$inboundSchema` instead. */
    TransfersFeeStateState$.inboundSchema = TransfersFeeStateState$inboundSchema;
    /** @deprecated use `TransfersFeeStateState$outboundSchema` instead. */
    TransfersFeeStateState$.outboundSchema = TransfersFeeStateState$outboundSchema;
})(TransfersFeeStateState$ || (TransfersFeeStateState$ = {}));
/** @internal */
export const TransfersFeeState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: TransfersFeeStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const TransfersFeeState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: TransfersFeeStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeState$;
(function (TransfersFeeState$) {
    /** @deprecated use `TransfersFeeState$inboundSchema` instead. */
    TransfersFeeState$.inboundSchema = TransfersFeeState$inboundSchema;
    /** @deprecated use `TransfersFeeState$outboundSchema` instead. */
    TransfersFeeState$.outboundSchema = TransfersFeeState$outboundSchema;
})(TransfersFeeState$ || (TransfersFeeState$ = {}));
export function transfersFeeStateToJSON(transfersFeeState) {
    return JSON.stringify(TransfersFeeState$outboundSchema.parse(transfersFeeState));
}
export function transfersFeeStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersFeeState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFeeState' from JSON`);
}
/** @internal */
export const TransfersFeeType$inboundSchema = z
    .union([
    z.nativeEnum(TransfersFeeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransfersFeeType$outboundSchema = z.union([
    z.nativeEnum(TransfersFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeType$;
(function (TransfersFeeType$) {
    /** @deprecated use `TransfersFeeType$inboundSchema` instead. */
    TransfersFeeType$.inboundSchema = TransfersFeeType$inboundSchema;
    /** @deprecated use `TransfersFeeType$outboundSchema` instead. */
    TransfersFeeType$.outboundSchema = TransfersFeeType$outboundSchema;
})(TransfersFeeType$ || (TransfersFeeType$ = {}));
/** @internal */
export const TransfersFee$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransfersFeeAmount$inboundSchema)).optional(),
    bulk_upload_id: z.string().optional(),
    client_transfer_id: z.string().optional(),
    description: z.string().optional(),
    fee_operating_account: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => TransfersFeeState$inboundSchema)).optional(),
    type: TransfersFeeType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "bulk_upload_id": "bulkUploadId",
        "client_transfer_id": "clientTransferId",
        "fee_operating_account": "feeOperatingAccount",
    });
});
/** @internal */
export const TransfersFee$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransfersFeeAmount$outboundSchema))
        .optional(),
    bulkUploadId: z.string().optional(),
    clientTransferId: z.string().optional(),
    description: z.string().optional(),
    feeOperatingAccount: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => TransfersFeeState$outboundSchema)).optional(),
    type: TransfersFeeType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        bulkUploadId: "bulk_upload_id",
        clientTransferId: "client_transfer_id",
        feeOperatingAccount: "fee_operating_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFee$;
(function (TransfersFee$) {
    /** @deprecated use `TransfersFee$inboundSchema` instead. */
    TransfersFee$.inboundSchema = TransfersFee$inboundSchema;
    /** @deprecated use `TransfersFee$outboundSchema` instead. */
    TransfersFee$.outboundSchema = TransfersFee$outboundSchema;
})(TransfersFee$ || (TransfersFee$ = {}));
export function transfersFeeToJSON(transfersFee) {
    return JSON.stringify(TransfersFee$outboundSchema.parse(transfersFee));
}
export function transfersFeeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFee' from JSON`);
}
//# sourceMappingURL=transfersfee.js.map