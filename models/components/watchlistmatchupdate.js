/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The match state for a profile, one of:
 *
 * @remarks
 * - `MATCH_UNSPECIFIED` - Default/Null value.
 * - `CONFIRMED_MATCH` - Match is confirmed.
 * - `POTENTIAL_MATCH` - Match is a potential.
 * - `NO_MATCH` - Match is confirmed not to be a match.
 * - `INCONCLUSIVE` - Match is deemed to be inconclusive.
 */
export var WatchlistMatchUpdateMatchState;
(function (WatchlistMatchUpdateMatchState) {
    WatchlistMatchUpdateMatchState["MatchUnspecified"] = "MATCH_UNSPECIFIED";
    WatchlistMatchUpdateMatchState["ConfirmedMatch"] = "CONFIRMED_MATCH";
    WatchlistMatchUpdateMatchState["PotentialMatch"] = "POTENTIAL_MATCH";
    WatchlistMatchUpdateMatchState["NoMatch"] = "NO_MATCH";
    WatchlistMatchUpdateMatchState["Inconclusive"] = "INCONCLUSIVE";
})(WatchlistMatchUpdateMatchState || (WatchlistMatchUpdateMatchState = {}));
/** @internal */
export const WatchlistMatchUpdateMatchState$inboundSchema = z
    .union([
    z.nativeEnum(WatchlistMatchUpdateMatchState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WatchlistMatchUpdateMatchState$outboundSchema = z.union([
    z.nativeEnum(WatchlistMatchUpdateMatchState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistMatchUpdateMatchState$;
(function (WatchlistMatchUpdateMatchState$) {
    /** @deprecated use `WatchlistMatchUpdateMatchState$inboundSchema` instead. */
    WatchlistMatchUpdateMatchState$.inboundSchema = WatchlistMatchUpdateMatchState$inboundSchema;
    /** @deprecated use `WatchlistMatchUpdateMatchState$outboundSchema` instead. */
    WatchlistMatchUpdateMatchState$.outboundSchema = WatchlistMatchUpdateMatchState$outboundSchema;
})(WatchlistMatchUpdateMatchState$ || (WatchlistMatchUpdateMatchState$ = {}));
/** @internal */
export const WatchlistMatchUpdate$inboundSchema = z.object({
    exclude_from_screening: z.boolean().optional(),
    match_state: WatchlistMatchUpdateMatchState$inboundSchema.optional(),
    watchlist_id: z.string().optional(),
    watchlist_item_id: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "exclude_from_screening": "excludeFromScreening",
        "match_state": "matchState",
        "watchlist_id": "watchlistId",
        "watchlist_item_id": "watchlistItemId",
    });
});
/** @internal */
export const WatchlistMatchUpdate$outboundSchema = z.object({
    excludeFromScreening: z.boolean().optional(),
    matchState: WatchlistMatchUpdateMatchState$outboundSchema.optional(),
    watchlistId: z.string().optional(),
    watchlistItemId: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        excludeFromScreening: "exclude_from_screening",
        matchState: "match_state",
        watchlistId: "watchlist_id",
        watchlistItemId: "watchlist_item_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistMatchUpdate$;
(function (WatchlistMatchUpdate$) {
    /** @deprecated use `WatchlistMatchUpdate$inboundSchema` instead. */
    WatchlistMatchUpdate$.inboundSchema = WatchlistMatchUpdate$inboundSchema;
    /** @deprecated use `WatchlistMatchUpdate$outboundSchema` instead. */
    WatchlistMatchUpdate$.outboundSchema = WatchlistMatchUpdate$outboundSchema;
})(WatchlistMatchUpdate$ || (WatchlistMatchUpdate$ = {}));
export function watchlistMatchUpdateToJSON(watchlistMatchUpdate) {
    return JSON.stringify(WatchlistMatchUpdate$outboundSchema.parse(watchlistMatchUpdate));
}
export function watchlistMatchUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WatchlistMatchUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WatchlistMatchUpdate' from JSON`);
}
//# sourceMappingURL=watchlistmatchupdate.js.map