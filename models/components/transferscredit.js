/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var TransfersCreditStateState;
(function (TransfersCreditStateState) {
    TransfersCreditStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TransfersCreditStateState["Processing"] = "PROCESSING";
    TransfersCreditStateState["PendingReview"] = "PENDING_REVIEW";
    TransfersCreditStateState["Posted"] = "POSTED";
    TransfersCreditStateState["Completed"] = "COMPLETED";
    TransfersCreditStateState["Rejected"] = "REJECTED";
    TransfersCreditStateState["Canceled"] = "CANCELED";
    TransfersCreditStateState["Returned"] = "RETURNED";
    TransfersCreditStateState["Postponed"] = "POSTPONED";
})(TransfersCreditStateState || (TransfersCreditStateState = {}));
/**
 * The type of the credit being issued
 */
export var TransfersCreditType;
(function (TransfersCreditType) {
    TransfersCreditType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransfersCreditType["Promotional"] = "PROMOTIONAL";
    TransfersCreditType["WriteOff"] = "WRITE_OFF";
    TransfersCreditType["Reimbursement"] = "REIMBURSEMENT";
})(TransfersCreditType || (TransfersCreditType = {}));
/** @internal */
export const TransfersCreditAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransfersCreditAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersCreditAmount$;
(function (TransfersCreditAmount$) {
    /** @deprecated use `TransfersCreditAmount$inboundSchema` instead. */
    TransfersCreditAmount$.inboundSchema = TransfersCreditAmount$inboundSchema;
    /** @deprecated use `TransfersCreditAmount$outboundSchema` instead. */
    TransfersCreditAmount$.outboundSchema = TransfersCreditAmount$outboundSchema;
})(TransfersCreditAmount$ || (TransfersCreditAmount$ = {}));
export function transfersCreditAmountToJSON(transfersCreditAmount) {
    return JSON.stringify(TransfersCreditAmount$outboundSchema.parse(transfersCreditAmount));
}
export function transfersCreditAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersCreditAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersCreditAmount' from JSON`);
}
/** @internal */
export const TransfersCreditStateState$inboundSchema = z
    .union([
    z.nativeEnum(TransfersCreditStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransfersCreditStateState$outboundSchema = z.union([
    z.nativeEnum(TransfersCreditStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersCreditStateState$;
(function (TransfersCreditStateState$) {
    /** @deprecated use `TransfersCreditStateState$inboundSchema` instead. */
    TransfersCreditStateState$.inboundSchema = TransfersCreditStateState$inboundSchema;
    /** @deprecated use `TransfersCreditStateState$outboundSchema` instead. */
    TransfersCreditStateState$.outboundSchema = TransfersCreditStateState$outboundSchema;
})(TransfersCreditStateState$ || (TransfersCreditStateState$ = {}));
/** @internal */
export const TransfersCreditState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: TransfersCreditStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const TransfersCreditState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: TransfersCreditStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersCreditState$;
(function (TransfersCreditState$) {
    /** @deprecated use `TransfersCreditState$inboundSchema` instead. */
    TransfersCreditState$.inboundSchema = TransfersCreditState$inboundSchema;
    /** @deprecated use `TransfersCreditState$outboundSchema` instead. */
    TransfersCreditState$.outboundSchema = TransfersCreditState$outboundSchema;
})(TransfersCreditState$ || (TransfersCreditState$ = {}));
export function transfersCreditStateToJSON(transfersCreditState) {
    return JSON.stringify(TransfersCreditState$outboundSchema.parse(transfersCreditState));
}
export function transfersCreditStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersCreditState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersCreditState' from JSON`);
}
/** @internal */
export const TransfersCreditType$inboundSchema = z
    .union([
    z.nativeEnum(TransfersCreditType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransfersCreditType$outboundSchema = z.union([
    z.nativeEnum(TransfersCreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersCreditType$;
(function (TransfersCreditType$) {
    /** @deprecated use `TransfersCreditType$inboundSchema` instead. */
    TransfersCreditType$.inboundSchema = TransfersCreditType$inboundSchema;
    /** @deprecated use `TransfersCreditType$outboundSchema` instead. */
    TransfersCreditType$.outboundSchema = TransfersCreditType$outboundSchema;
})(TransfersCreditType$ || (TransfersCreditType$ = {}));
/** @internal */
export const TransfersCredit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransfersCreditAmount$inboundSchema))
        .optional(),
    bulk_upload_id: z.string().optional(),
    client_transfer_id: z.string().optional(),
    description: z.string().optional(),
    fee_operating_account: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => TransfersCreditState$inboundSchema))
        .optional(),
    type: TransfersCreditType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "bulk_upload_id": "bulkUploadId",
        "client_transfer_id": "clientTransferId",
        "fee_operating_account": "feeOperatingAccount",
    });
});
/** @internal */
export const TransfersCredit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransfersCreditAmount$outboundSchema))
        .optional(),
    bulkUploadId: z.string().optional(),
    clientTransferId: z.string().optional(),
    description: z.string().optional(),
    feeOperatingAccount: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => TransfersCreditState$outboundSchema))
        .optional(),
    type: TransfersCreditType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        bulkUploadId: "bulk_upload_id",
        clientTransferId: "client_transfer_id",
        feeOperatingAccount: "fee_operating_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersCredit$;
(function (TransfersCredit$) {
    /** @deprecated use `TransfersCredit$inboundSchema` instead. */
    TransfersCredit$.inboundSchema = TransfersCredit$inboundSchema;
    /** @deprecated use `TransfersCredit$outboundSchema` instead. */
    TransfersCredit$.outboundSchema = TransfersCredit$outboundSchema;
})(TransfersCredit$ || (TransfersCredit$ = {}));
export function transfersCreditToJSON(transfersCredit) {
    return JSON.stringify(TransfersCredit$outboundSchema.parse(transfersCredit));
}
export function transfersCreditFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersCredit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersCredit' from JSON`);
}
//# sourceMappingURL=transferscredit.js.map