/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const DescriptionDetail$inboundSchema = z.object({
    description_one: z.string().optional(),
    description_three: z.string().optional(),
    description_two: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "description_one": "descriptionOne",
        "description_three": "descriptionThree",
        "description_two": "descriptionTwo",
    });
});
/** @internal */
export const DescriptionDetail$outboundSchema = z.object({
    descriptionOne: z.string().optional(),
    descriptionThree: z.string().optional(),
    descriptionTwo: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        descriptionOne: "description_one",
        descriptionThree: "description_three",
        descriptionTwo: "description_two",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DescriptionDetail$;
(function (DescriptionDetail$) {
    /** @deprecated use `DescriptionDetail$inboundSchema` instead. */
    DescriptionDetail$.inboundSchema = DescriptionDetail$inboundSchema;
    /** @deprecated use `DescriptionDetail$outboundSchema` instead. */
    DescriptionDetail$.outboundSchema = DescriptionDetail$outboundSchema;
})(DescriptionDetail$ || (DescriptionDetail$ = {}));
export function descriptionDetailToJSON(descriptionDetail) {
    return JSON.stringify(DescriptionDetail$outboundSchema.parse(descriptionDetail));
}
export function descriptionDetailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DescriptionDetail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DescriptionDetail' from JSON`);
}
//# sourceMappingURL=descriptiondetail.js.map