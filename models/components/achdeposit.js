/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of retirement contribution.
 */
export var AchDepositType;
(function (AchDepositType) {
    AchDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    AchDepositType["Regular"] = "REGULAR";
    AchDepositType["Employee"] = "EMPLOYEE";
    AchDepositType["Employer"] = "EMPLOYER";
    AchDepositType["Recharacterization"] = "RECHARACTERIZATION";
    AchDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    AchDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    AchDepositType["Transfer"] = "TRANSFER";
    AchDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    AchDepositType["Conversion"] = "CONVERSION";
    AchDepositType["Repayment"] = "REPAYMENT";
    AchDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(AchDepositType || (AchDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var AchDepositStateState;
(function (AchDepositStateState) {
    AchDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AchDepositStateState["Processing"] = "PROCESSING";
    AchDepositStateState["PendingReview"] = "PENDING_REVIEW";
    AchDepositStateState["Posted"] = "POSTED";
    AchDepositStateState["Completed"] = "COMPLETED";
    AchDepositStateState["Rejected"] = "REJECTED";
    AchDepositStateState["Canceled"] = "CANCELED";
    AchDepositStateState["Returned"] = "RETURNED";
    AchDepositStateState["Postponed"] = "POSTPONED";
})(AchDepositStateState || (AchDepositStateState = {}));
/** @internal */
export const Amount$inboundSchema = z
    .object({
    value: z.string().optional(),
});
/** @internal */
export const Amount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Amount$;
(function (Amount$) {
    /** @deprecated use `Amount$inboundSchema` instead. */
    Amount$.inboundSchema = Amount$inboundSchema;
    /** @deprecated use `Amount$outboundSchema` instead. */
    Amount$.outboundSchema = Amount$outboundSchema;
})(Amount$ || (Amount$ = {}));
export function amountToJSON(amount) {
    return JSON.stringify(Amount$outboundSchema.parse(amount));
}
export function amountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Amount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Amount' from JSON`);
}
/** @internal */
export const AchDepositType$inboundSchema = z
    .union([
    z.nativeEnum(AchDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AchDepositType$outboundSchema = z.union([
    z.nativeEnum(AchDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchDepositType$;
(function (AchDepositType$) {
    /** @deprecated use `AchDepositType$inboundSchema` instead. */
    AchDepositType$.inboundSchema = AchDepositType$inboundSchema;
    /** @deprecated use `AchDepositType$outboundSchema` instead. */
    AchDepositType$.outboundSchema = AchDepositType$outboundSchema;
})(AchDepositType$ || (AchDepositType$ = {}));
/** @internal */
export const RetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: AchDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const RetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: AchDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetirementContribution$;
(function (RetirementContribution$) {
    /** @deprecated use `RetirementContribution$inboundSchema` instead. */
    RetirementContribution$.inboundSchema = RetirementContribution$inboundSchema;
    /** @deprecated use `RetirementContribution$outboundSchema` instead. */
    RetirementContribution$.outboundSchema = RetirementContribution$outboundSchema;
})(RetirementContribution$ || (RetirementContribution$ = {}));
export function retirementContributionToJSON(retirementContribution) {
    return JSON.stringify(RetirementContribution$outboundSchema.parse(retirementContribution));
}
export function retirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetirementContribution' from JSON`);
}
/** @internal */
export const AchDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(AchDepositStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AchDepositStateState$outboundSchema = z.union([
    z.nativeEnum(AchDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchDepositStateState$;
(function (AchDepositStateState$) {
    /** @deprecated use `AchDepositStateState$inboundSchema` instead. */
    AchDepositStateState$.inboundSchema = AchDepositStateState$inboundSchema;
    /** @deprecated use `AchDepositStateState$outboundSchema` instead. */
    AchDepositStateState$.outboundSchema = AchDepositStateState$outboundSchema;
})(AchDepositStateState$ || (AchDepositStateState$ = {}));
/** @internal */
export const AchDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: AchDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const AchDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: AchDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchDepositState$;
(function (AchDepositState$) {
    /** @deprecated use `AchDepositState$inboundSchema` instead. */
    AchDepositState$.inboundSchema = AchDepositState$inboundSchema;
    /** @deprecated use `AchDepositState$outboundSchema` instead. */
    AchDepositState$.outboundSchema = AchDepositState$outboundSchema;
})(AchDepositState$ || (AchDepositState$ = {}));
export function achDepositStateToJSON(achDepositState) {
    return JSON.stringify(AchDepositState$outboundSchema.parse(achDepositState));
}
export function achDepositStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchDepositState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchDepositState' from JSON`);
}
/** @internal */
export const AchDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => Amount$inboundSchema)).optional(),
    bank_relationship: z.string().optional(),
    client_transfer_id: z.string().optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    retirement_contribution: z.nullable(z.lazy(() => RetirementContribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => AchDepositState$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "bank_relationship": "bankRelationship",
        "client_transfer_id": "clientTransferId",
        "retirement_contribution": "retirementContribution",
    });
});
/** @internal */
export const AchDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => Amount$outboundSchema)).optional(),
    bankRelationship: z.string().optional(),
    clientTransferId: z.string().optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    retirementContribution: z.nullable(z.lazy(() => RetirementContribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => AchDepositState$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        bankRelationship: "bank_relationship",
        clientTransferId: "client_transfer_id",
        retirementContribution: "retirement_contribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchDeposit$;
(function (AchDeposit$) {
    /** @deprecated use `AchDeposit$inboundSchema` instead. */
    AchDeposit$.inboundSchema = AchDeposit$inboundSchema;
    /** @deprecated use `AchDeposit$outboundSchema` instead. */
    AchDeposit$.outboundSchema = AchDeposit$outboundSchema;
})(AchDeposit$ || (AchDeposit$ = {}));
export function achDepositToJSON(achDeposit) {
    return JSON.stringify(AchDeposit$outboundSchema.parse(achDeposit));
}
export function achDepositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchDeposit' from JSON`);
}
//# sourceMappingURL=achdeposit.js.map