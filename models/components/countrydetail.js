/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CountryDetail$inboundSchema = z.object({
    country_type: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "country_type": "countryType",
        "region_code": "regionCode",
    });
});
/** @internal */
export const CountryDetail$outboundSchema = z.object({
    countryType: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        countryType: "country_type",
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CountryDetail$;
(function (CountryDetail$) {
    /** @deprecated use `CountryDetail$inboundSchema` instead. */
    CountryDetail$.inboundSchema = CountryDetail$inboundSchema;
    /** @deprecated use `CountryDetail$outboundSchema` instead. */
    CountryDetail$.outboundSchema = CountryDetail$outboundSchema;
})(CountryDetail$ || (CountryDetail$ = {}));
export function countryDetailToJSON(countryDetail) {
    return JSON.stringify(CountryDetail$outboundSchema.parse(countryDetail));
}
export function countryDetailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CountryDetail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CountryDetail' from JSON`);
}
//# sourceMappingURL=countrydetail.js.map