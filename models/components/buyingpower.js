/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const AccountEquityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AccountEquityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountEquityAmount$;
(function (AccountEquityAmount$) {
    /** @deprecated use `AccountEquityAmount$inboundSchema` instead. */
    AccountEquityAmount$.inboundSchema = AccountEquityAmount$inboundSchema;
    /** @deprecated use `AccountEquityAmount$outboundSchema` instead. */
    AccountEquityAmount$.outboundSchema = AccountEquityAmount$outboundSchema;
})(AccountEquityAmount$ || (AccountEquityAmount$ = {}));
export function accountEquityAmountToJSON(accountEquityAmount) {
    return JSON.stringify(AccountEquityAmount$outboundSchema.parse(accountEquityAmount));
}
export function accountEquityAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountEquityAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountEquityAmount' from JSON`);
}
/** @internal */
export const BuyingPowerAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BuyingPowerAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyingPowerAmount$;
(function (BuyingPowerAmount$) {
    /** @deprecated use `BuyingPowerAmount$inboundSchema` instead. */
    BuyingPowerAmount$.inboundSchema = BuyingPowerAmount$inboundSchema;
    /** @deprecated use `BuyingPowerAmount$outboundSchema` instead. */
    BuyingPowerAmount$.outboundSchema = BuyingPowerAmount$outboundSchema;
})(BuyingPowerAmount$ || (BuyingPowerAmount$ = {}));
export function buyingPowerAmountToJSON(buyingPowerAmount) {
    return JSON.stringify(BuyingPowerAmount$outboundSchema.parse(buyingPowerAmount));
}
export function buyingPowerAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyingPowerAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyingPowerAmount' from JSON`);
}
/** @internal */
export const DayTradeBuyingPowerAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const DayTradeBuyingPowerAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DayTradeBuyingPowerAmount$;
(function (DayTradeBuyingPowerAmount$) {
    /** @deprecated use `DayTradeBuyingPowerAmount$inboundSchema` instead. */
    DayTradeBuyingPowerAmount$.inboundSchema = DayTradeBuyingPowerAmount$inboundSchema;
    /** @deprecated use `DayTradeBuyingPowerAmount$outboundSchema` instead. */
    DayTradeBuyingPowerAmount$.outboundSchema = DayTradeBuyingPowerAmount$outboundSchema;
})(DayTradeBuyingPowerAmount$ || (DayTradeBuyingPowerAmount$ = {}));
export function dayTradeBuyingPowerAmountToJSON(dayTradeBuyingPowerAmount) {
    return JSON.stringify(DayTradeBuyingPowerAmount$outboundSchema.parse(dayTradeBuyingPowerAmount));
}
export function dayTradeBuyingPowerAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DayTradeBuyingPowerAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DayTradeBuyingPowerAmount' from JSON`);
}
/** @internal */
export const PositionMarketValueAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PositionMarketValueAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PositionMarketValueAmount$;
(function (PositionMarketValueAmount$) {
    /** @deprecated use `PositionMarketValueAmount$inboundSchema` instead. */
    PositionMarketValueAmount$.inboundSchema = PositionMarketValueAmount$inboundSchema;
    /** @deprecated use `PositionMarketValueAmount$outboundSchema` instead. */
    PositionMarketValueAmount$.outboundSchema = PositionMarketValueAmount$outboundSchema;
})(PositionMarketValueAmount$ || (PositionMarketValueAmount$ = {}));
export function positionMarketValueAmountToJSON(positionMarketValueAmount) {
    return JSON.stringify(PositionMarketValueAmount$outboundSchema.parse(positionMarketValueAmount));
}
export function positionMarketValueAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PositionMarketValueAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PositionMarketValueAmount' from JSON`);
}
/** @internal */
export const TotalExcessAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TotalExcessAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TotalExcessAmount$;
(function (TotalExcessAmount$) {
    /** @deprecated use `TotalExcessAmount$inboundSchema` instead. */
    TotalExcessAmount$.inboundSchema = TotalExcessAmount$inboundSchema;
    /** @deprecated use `TotalExcessAmount$outboundSchema` instead. */
    TotalExcessAmount$.outboundSchema = TotalExcessAmount$outboundSchema;
})(TotalExcessAmount$ || (TotalExcessAmount$ = {}));
export function totalExcessAmountToJSON(totalExcessAmount) {
    return JSON.stringify(TotalExcessAmount$outboundSchema.parse(totalExcessAmount));
}
export function totalExcessAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TotalExcessAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TotalExcessAmount' from JSON`);
}
/** @internal */
export const TotalRequirementsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TotalRequirementsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TotalRequirementsAmount$;
(function (TotalRequirementsAmount$) {
    /** @deprecated use `TotalRequirementsAmount$inboundSchema` instead. */
    TotalRequirementsAmount$.inboundSchema = TotalRequirementsAmount$inboundSchema;
    /** @deprecated use `TotalRequirementsAmount$outboundSchema` instead. */
    TotalRequirementsAmount$.outboundSchema = TotalRequirementsAmount$outboundSchema;
})(TotalRequirementsAmount$ || (TotalRequirementsAmount$ = {}));
export function totalRequirementsAmountToJSON(totalRequirementsAmount) {
    return JSON.stringify(TotalRequirementsAmount$outboundSchema.parse(totalRequirementsAmount));
}
export function totalRequirementsAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TotalRequirementsAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TotalRequirementsAmount' from JSON`);
}
/** @internal */
export const Requirements$inboundSchema = z.object({
    total_excess_amount: z.nullable(z.lazy(() => TotalExcessAmount$inboundSchema))
        .optional(),
    total_requirements_amount: z.nullable(z.lazy(() => TotalRequirementsAmount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "total_excess_amount": "totalExcessAmount",
        "total_requirements_amount": "totalRequirementsAmount",
    });
});
/** @internal */
export const Requirements$outboundSchema = z.object({
    totalExcessAmount: z.nullable(z.lazy(() => TotalExcessAmount$outboundSchema))
        .optional(),
    totalRequirementsAmount: z.nullable(z.lazy(() => TotalRequirementsAmount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        totalExcessAmount: "total_excess_amount",
        totalRequirementsAmount: "total_requirements_amount",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Requirements$;
(function (Requirements$) {
    /** @deprecated use `Requirements$inboundSchema` instead. */
    Requirements$.inboundSchema = Requirements$inboundSchema;
    /** @deprecated use `Requirements$outboundSchema` instead. */
    Requirements$.outboundSchema = Requirements$outboundSchema;
})(Requirements$ || (Requirements$ = {}));
export function requirementsToJSON(requirements) {
    return JSON.stringify(Requirements$outboundSchema.parse(requirements));
}
export function requirementsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Requirements$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Requirements' from JSON`);
}
/** @internal */
export const SmaAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const SmaAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SmaAmount$;
(function (SmaAmount$) {
    /** @deprecated use `SmaAmount$inboundSchema` instead. */
    SmaAmount$.inboundSchema = SmaAmount$inboundSchema;
    /** @deprecated use `SmaAmount$outboundSchema` instead. */
    SmaAmount$.outboundSchema = SmaAmount$outboundSchema;
})(SmaAmount$ || (SmaAmount$ = {}));
export function smaAmountToJSON(smaAmount) {
    return JSON.stringify(SmaAmount$outboundSchema.parse(smaAmount));
}
export function smaAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SmaAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SmaAmount' from JSON`);
}
/** @internal */
export const BuyingPower$inboundSchema = z.object({
    account_equity_amount: z.nullable(z.lazy(() => AccountEquityAmount$inboundSchema)).optional(),
    account_id: z.string().optional(),
    buying_power_amount: z.nullable(z.lazy(() => BuyingPowerAmount$inboundSchema))
        .optional(),
    day_trade_buying_power_amount: z.nullable(z.lazy(() => DayTradeBuyingPowerAmount$inboundSchema)).optional(),
    is_day_trade_buying_power_allowed: z.boolean().optional(),
    name: z.string().optional(),
    position_market_value_amount: z.nullable(z.lazy(() => PositionMarketValueAmount$inboundSchema)).optional(),
    requirements: z.nullable(z.lazy(() => Requirements$inboundSchema)).optional(),
    sma_amount: z.nullable(z.lazy(() => SmaAmount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_equity_amount": "accountEquityAmount",
        "account_id": "accountId",
        "buying_power_amount": "buyingPowerAmount",
        "day_trade_buying_power_amount": "dayTradeBuyingPowerAmount",
        "is_day_trade_buying_power_allowed": "isDayTradeBuyingPowerAllowed",
        "position_market_value_amount": "positionMarketValueAmount",
        "sma_amount": "smaAmount",
    });
});
/** @internal */
export const BuyingPower$outboundSchema = z.object({
    accountEquityAmount: z.nullable(z.lazy(() => AccountEquityAmount$outboundSchema)).optional(),
    accountId: z.string().optional(),
    buyingPowerAmount: z.nullable(z.lazy(() => BuyingPowerAmount$outboundSchema))
        .optional(),
    dayTradeBuyingPowerAmount: z.nullable(z.lazy(() => DayTradeBuyingPowerAmount$outboundSchema)).optional(),
    isDayTradeBuyingPowerAllowed: z.boolean().optional(),
    name: z.string().optional(),
    positionMarketValueAmount: z.nullable(z.lazy(() => PositionMarketValueAmount$outboundSchema)).optional(),
    requirements: z.nullable(z.lazy(() => Requirements$outboundSchema))
        .optional(),
    smaAmount: z.nullable(z.lazy(() => SmaAmount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accountEquityAmount: "account_equity_amount",
        accountId: "account_id",
        buyingPowerAmount: "buying_power_amount",
        dayTradeBuyingPowerAmount: "day_trade_buying_power_amount",
        isDayTradeBuyingPowerAllowed: "is_day_trade_buying_power_allowed",
        positionMarketValueAmount: "position_market_value_amount",
        smaAmount: "sma_amount",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyingPower$;
(function (BuyingPower$) {
    /** @deprecated use `BuyingPower$inboundSchema` instead. */
    BuyingPower$.inboundSchema = BuyingPower$inboundSchema;
    /** @deprecated use `BuyingPower$outboundSchema` instead. */
    BuyingPower$.outboundSchema = BuyingPower$outboundSchema;
})(BuyingPower$ || (BuyingPower$ = {}));
export function buyingPowerToJSON(buyingPower) {
    return JSON.stringify(BuyingPower$outboundSchema.parse(buyingPower));
}
export function buyingPowerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyingPower$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyingPower' from JSON`);
}
//# sourceMappingURL=buyingpower.js.map