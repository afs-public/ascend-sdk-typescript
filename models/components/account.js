/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { Agreement$inboundSchema, Agreement$outboundSchema, } from "./agreement.js";
import { Enrollment$inboundSchema, Enrollment$outboundSchema, } from "./enrollment.js";
import { Identifier$inboundSchema, Identifier$outboundSchema, } from "./identifier.js";
import { InterestedParty$inboundSchema, InterestedParty$outboundSchema, } from "./interestedparty.js";
import { Party$inboundSchema, Party$outboundSchema, } from "./party.js";
import { TrustedContact$inboundSchema, TrustedContact$outboundSchema, } from "./trustedcontact.js";
/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
export var AccountCatAccountHolderType;
(function (AccountCatAccountHolderType) {
    AccountCatAccountHolderType["CatAccountHolderTypeUnspecified"] = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED";
    AccountCatAccountHolderType["AInstitutionalCustomer"] = "A_INSTITUTIONAL_CUSTOMER";
    AccountCatAccountHolderType["EEmployeeAccount"] = "E_EMPLOYEE_ACCOUNT";
    AccountCatAccountHolderType["FForeign"] = "F_FOREIGN";
    AccountCatAccountHolderType["IIndividual"] = "I_INDIVIDUAL";
    AccountCatAccountHolderType["OMarketMaking"] = "O_MARKET_MAKING";
    AccountCatAccountHolderType["VAgencyAveragePriceAccount"] = "V_AGENCY_AVERAGE_PRICE_ACCOUNT";
    AccountCatAccountHolderType["POtherProprietary"] = "P_OTHER_PROPRIETARY";
    AccountCatAccountHolderType["XErrorAccount"] = "X_ERROR_ACCOUNT";
})(AccountCatAccountHolderType || (AccountCatAccountHolderType = {}));
/**
 * Indicates if the account is `DOMESTIC` or `FOREIGN`
 */
export var Domicile;
(function (Domicile) {
    Domicile["DomicileUnspecified"] = "DOMICILE_UNSPECIFIED";
    Domicile["Domestic"] = "DOMESTIC";
    Domicile["Foreign"] = "FOREIGN";
})(Domicile || (Domicile = {}));
/**
 * The FINRA COA code associated with the account
 */
export var FinraCoaCode;
(function (FinraCoaCode) {
    FinraCoaCode["FinraCoaCodeUnspecified"] = "FINRA_COA_CODE_UNSPECIFIED";
    FinraCoaCode["Cat01CustomerDvpRvp"] = "CAT_01_CUSTOMER_DVP_RVP";
    FinraCoaCode["Cat02CustomerManagedAccounts"] = "CAT_02_CUSTOMER_MANAGED_ACCOUNTS";
    FinraCoaCode["Cat03CustomerIraAccounts"] = "CAT_03_CUSTOMER_IRA_ACCOUNTS";
    FinraCoaCode["Cat04CustomerEmployee"] = "CAT_04_CUSTOMER_EMPLOYEE";
    FinraCoaCode["Cat05CustomerPrimeBroker"] = "CAT_05_CUSTOMER_PRIME_BROKER";
    FinraCoaCode["Cat06CustomerAffiliateNonBd"] = "CAT_06_CUSTOMER_AFFILIATE_NON_BD";
    FinraCoaCode["Cat07CustomerOmnibus"] = "CAT_07_CUSTOMER_OMNIBUS";
    FinraCoaCode["Cat08Customer"] = "CAT_08_CUSTOMER";
    FinraCoaCode["Cat09NonCustomerOfficerDirector"] = "CAT_09_NON_CUSTOMER_OFFICER_DIRECTOR";
    FinraCoaCode["Cat10NonCustomerOfficerDirectorOrFamilyMembers"] = "CAT_10_NON_CUSTOMER_OFFICER_DIRECTOR_OR_FAMILY_MEMBERS";
    FinraCoaCode["Cat11NonCustomerAffiliateBd"] = "CAT_11_NON_CUSTOMER_AFFILIATE_BD";
    FinraCoaCode["Cat12NonCustomerOmnibus"] = "CAT_12_NON_CUSTOMER_OMNIBUS";
    FinraCoaCode["Cat13NonCustomer"] = "CAT_13_NON_CUSTOMER";
    FinraCoaCode["Cat14Paib"] = "CAT_14_PAIB";
    FinraCoaCode["Cat15FirmInventory"] = "CAT_15_FIRM_INVENTORY";
    FinraCoaCode["Cat16CnsFails"] = "CAT_16_CNS_FAILS";
    FinraCoaCode["Cat17OtherClearingCorpFails"] = "CAT_17_OTHER_CLEARING_CORP_FAILS";
    FinraCoaCode["Cat18ExecutingPrimeBroker"] = "CAT_18_EXECUTING_PRIME_BROKER";
    FinraCoaCode["Cat19BrokerFailsToReceive"] = "CAT_19_BROKER_FAILS_TO_RECEIVE";
    FinraCoaCode["Cat20BrokerFailsToDeliver"] = "CAT_20_BROKER_FAILS_TO_DELIVER";
    FinraCoaCode["Cat21BrokerFails"] = "CAT_21_BROKER_FAILS";
    FinraCoaCode["Cat22FailToDeliverGreaterThan30Days"] = "CAT_22_FAIL_TO_DELIVER_GREATER_THAN_30_DAYS";
    FinraCoaCode["Cat23SecuritiesBorrowed"] = "CAT_23_SECURITIES_BORROWED";
    FinraCoaCode["Cat24SecuritiesBorrowedNonCash"] = "CAT_24_SECURITIES_BORROWED_NON_CASH";
    FinraCoaCode["Cat25SecuritiesBorrowedConduit"] = "CAT_25_SECURITIES_BORROWED_CONDUIT";
    FinraCoaCode["Cat26SecuritiesLoaned"] = "CAT_26_SECURITIES_LOANED";
    FinraCoaCode["Cat27SecuritiesLoanedNonCash"] = "CAT_27_SECURITIES_LOANED_NON_CASH";
    FinraCoaCode["Cat28SecuritiesLoanedConduit"] = "CAT_28_SECURITIES_LOANED_CONDUIT";
    FinraCoaCode["Cat29SecuritiesLoanedCns"] = "CAT_29_SECURITIES_LOANED_CNS";
    FinraCoaCode["Cat30ReverseRepo"] = "CAT_30_REVERSE_REPO";
    FinraCoaCode["Cat31ReverseRepoTriParty"] = "CAT_31_REVERSE_REPO_TRI_PARTY";
    FinraCoaCode["Cat32Repo"] = "CAT_32_REPO";
    FinraCoaCode["Cat33RepoHoldInCustody"] = "CAT_33_REPO_HOLD_IN_CUSTODY";
    FinraCoaCode["Cat34RepoTriParty"] = "CAT_34_REPO_TRI_PARTY";
    FinraCoaCode["Cat35BankLoanFirm"] = "CAT_35_BANK_LOAN_FIRM";
    FinraCoaCode["Cat36BankLoanCustomer"] = "CAT_36_BANK_LOAN_CUSTOMER";
    FinraCoaCode["Cat37BankLoanNonCustomer"] = "CAT_37_BANK_LOAN_NON_CUSTOMER";
    FinraCoaCode["Cat38BankLoanPaib"] = "CAT_38_BANK_LOAN_PAIB";
    FinraCoaCode["Cat39Suspense"] = "CAT_39_SUSPENSE";
    FinraCoaCode["Cat40Reorganizations"] = "CAT_40_REORGANIZATIONS";
    FinraCoaCode["Cat41StockDividends"] = "CAT_41_STOCK_DIVIDENDS";
    FinraCoaCode["Cat42AbandonedProperty"] = "CAT_42_ABANDONED_PROPERTY";
    FinraCoaCode["Cat43PhysicalBox"] = "CAT_43_PHYSICAL_BOX";
    FinraCoaCode["Cat44LegalBox"] = "CAT_44_LEGAL_BOX";
    FinraCoaCode["Cat45Safekeeping"] = "CAT_45_SAFEKEEPING";
    FinraCoaCode["Cat4615C33Deposit"] = "CAT_46_15C3_3_DEPOSIT";
    FinraCoaCode["Cat47DomesticDepositoryControl"] = "CAT_47_DOMESTIC_DEPOSITORY_CONTROL";
    FinraCoaCode["Cat48ForeignDepositoryControl"] = "CAT_48_FOREIGN_DEPOSITORY_CONTROL";
    FinraCoaCode["Cat49DomesticDepositoryNonControl"] = "CAT_49_DOMESTIC_DEPOSITORY_NON_CONTROL";
    FinraCoaCode["Cat50ForeignDepositoryNonControl"] = "CAT_50_FOREIGN_DEPOSITORY_NON_CONTROL";
    FinraCoaCode["Cat51TransferControl"] = "CAT_51_TRANSFER_CONTROL";
    FinraCoaCode["Cat52TransferNonControl"] = "CAT_52_TRANSFER_NON_CONTROL";
    FinraCoaCode["Cat53TransferLegal"] = "CAT_53_TRANSFER_LEGAL";
    FinraCoaCode["Cat54InTransitControl"] = "CAT_54_IN_TRANSIT_CONTROL";
    FinraCoaCode["Cat55InTransitNonControl"] = "CAT_55_IN_TRANSIT_NON_CONTROL";
    FinraCoaCode["Cat56ClearingDomestic"] = "CAT_56_CLEARING_DOMESTIC";
    FinraCoaCode["Cat57ClearingForeign"] = "CAT_57_CLEARING_FOREIGN";
    FinraCoaCode["Cat58TestAccount"] = "CAT_58_TEST_ACCOUNT";
    FinraCoaCode["Cat59OutOfBalance"] = "CAT_59_OUT_OF_BALANCE";
    FinraCoaCode["Cat60Conversion"] = "CAT_60_CONVERSION";
    FinraCoaCode["Cat61DepositsOccMargin"] = "CAT_61_DEPOSITS_OCC_MARGIN";
    FinraCoaCode["Cat62DepositsOther"] = "CAT_62_DEPOSITS_OTHER";
    FinraCoaCode["Cat63Other"] = "CAT_63_OTHER";
})(FinraCoaCode || (FinraCoaCode = {}));
/**
 * Describes if the account is cash-only or has access to a form of margin
 */
export var FundingType;
(function (FundingType) {
    FundingType["FundingTypeUnspecified"] = "FUNDING_TYPE_UNSPECIFIED";
    FundingType["Cash"] = "CASH";
    FundingType["MarginLimitedPurpose"] = "MARGIN_LIMITED_PURPOSE";
    FundingType["MarginRegT"] = "MARGIN_REG_T";
    FundingType["MarginPortfolio"] = "MARGIN_PORTFOLIO";
})(FundingType || (FundingType = {}));
/**
 * The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
 */
export var AccountInvestmentObjective;
(function (AccountInvestmentObjective) {
    AccountInvestmentObjective["InvestmentObjectiveUnspecified"] = "INVESTMENT_OBJECTIVE_UNSPECIFIED";
    AccountInvestmentObjective["Balanced"] = "BALANCED";
    AccountInvestmentObjective["CapitalAppreciation"] = "CAPITAL_APPRECIATION";
    AccountInvestmentObjective["CapitalPreservation"] = "CAPITAL_PRESERVATION";
    AccountInvestmentObjective["Growth"] = "GROWTH";
    AccountInvestmentObjective["GrowthAndIncome"] = "GROWTH_AND_INCOME";
    AccountInvestmentObjective["GrowthIncome"] = "GROWTH_INCOME";
    AccountInvestmentObjective["Income"] = "INCOME";
    AccountInvestmentObjective["LongTermGrowthWithGreaterRisk"] = "LONG_TERM_GROWTH_WITH_GREATER_RISK";
    AccountInvestmentObjective["LongTermGrowthWithSafety"] = "LONG_TERM_GROWTH_WITH_SAFETY";
    AccountInvestmentObjective["MaximumGrowth"] = "MAXIMUM_GROWTH";
    AccountInvestmentObjective["ShortTermGrowthWithRisk"] = "SHORT_TERM_GROWTH_WITH_RISK";
    AccountInvestmentObjective["Speculation"] = "SPECULATION";
    AccountInvestmentObjective["Other"] = "OTHER";
})(AccountInvestmentObjective || (AccountInvestmentObjective = {}));
/**
 * An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
 */
export var AccountLiquidityNeeds;
(function (AccountLiquidityNeeds) {
    AccountLiquidityNeeds["LiquidityNeedsUnspecified"] = "LIQUIDITY_NEEDS_UNSPECIFIED";
    AccountLiquidityNeeds["VeryImportant"] = "VERY_IMPORTANT";
    AccountLiquidityNeeds["SomewhatImportant"] = "SOMEWHAT_IMPORTANT";
    AccountLiquidityNeeds["NotImportant"] = "NOT_IMPORTANT";
})(AccountLiquidityNeeds || (AccountLiquidityNeeds = {}));
/**
 * An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
 */
export var AccountRiskTolerance;
(function (AccountRiskTolerance) {
    AccountRiskTolerance["RiskToleranceUnspecified"] = "RISK_TOLERANCE_UNSPECIFIED";
    AccountRiskTolerance["Low"] = "LOW";
    AccountRiskTolerance["Medium"] = "MEDIUM";
    AccountRiskTolerance["High"] = "HIGH";
})(AccountRiskTolerance || (AccountRiskTolerance = {}));
/**
 * TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
 */
export var AccountTimeHorizon;
(function (AccountTimeHorizon) {
    AccountTimeHorizon["TimeHorizonUnspecified"] = "TIME_HORIZON_UNSPECIFIED";
    AccountTimeHorizon["Short"] = "SHORT";
    AccountTimeHorizon["Average"] = "AVERAGE";
    AccountTimeHorizon["Long"] = "LONG";
})(AccountTimeHorizon || (AccountTimeHorizon = {}));
/**
 * Annual income range; the low number is exclusive, the high number is inclusive
 */
export var AccountAnnualIncomeRangeUsd;
(function (AccountAnnualIncomeRangeUsd) {
    AccountAnnualIncomeRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountAnnualIncomeRangeUsd["Under25K"] = "UNDER_25K";
    AccountAnnualIncomeRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountAnnualIncomeRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountAnnualIncomeRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountAnnualIncomeRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountAnnualIncomeRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountAnnualIncomeRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountAnnualIncomeRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountAnnualIncomeRangeUsd["Over5M"] = "OVER_5M";
})(AccountAnnualIncomeRangeUsd || (AccountAnnualIncomeRangeUsd = {}));
/**
 * Investment experience.
 */
export var AccountInvestmentExperience;
(function (AccountInvestmentExperience) {
    AccountInvestmentExperience["InvestmentExperienceUnspecified"] = "INVESTMENT_EXPERIENCE_UNSPECIFIED";
    AccountInvestmentExperience["None"] = "NONE";
    AccountInvestmentExperience["Limited"] = "LIMITED";
    AccountInvestmentExperience["Good"] = "GOOD";
    AccountInvestmentExperience["Extensive"] = "EXTENSIVE";
})(AccountInvestmentExperience || (AccountInvestmentExperience = {}));
/**
 * Liquid net worth range; the low number is exclusive, the high number is inclusive
 */
export var AccountLiquidNetWorthRangeUsd;
(function (AccountLiquidNetWorthRangeUsd) {
    AccountLiquidNetWorthRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountLiquidNetWorthRangeUsd["Under25K"] = "UNDER_25K";
    AccountLiquidNetWorthRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountLiquidNetWorthRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountLiquidNetWorthRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountLiquidNetWorthRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountLiquidNetWorthRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountLiquidNetWorthRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountLiquidNetWorthRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountLiquidNetWorthRangeUsd["Over5M"] = "OVER_5M";
})(AccountLiquidNetWorthRangeUsd || (AccountLiquidNetWorthRangeUsd = {}));
/**
 * Total net worth range; the low number is exclusive, the high number is inclusive
 */
export var AccountTotalNetWorthRangeUsd;
(function (AccountTotalNetWorthRangeUsd) {
    AccountTotalNetWorthRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountTotalNetWorthRangeUsd["Under25K"] = "UNDER_25K";
    AccountTotalNetWorthRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountTotalNetWorthRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountTotalNetWorthRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountTotalNetWorthRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountTotalNetWorthRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountTotalNetWorthRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountTotalNetWorthRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountTotalNetWorthRangeUsd["Over5M"] = "OVER_5M";
})(AccountTotalNetWorthRangeUsd || (AccountTotalNetWorthRangeUsd = {}));
/**
 * A roll-up account classification based on the `registration_type`; Indicates what owns the account and/or if it is a special type (e.g., Joint, Estate, Retirement, etc.); Used primarily for reporting and high-level type identification
 */
export var OwnershipType;
(function (OwnershipType) {
    OwnershipType["OwnershipTypeUnspecified"] = "OWNERSHIP_TYPE_UNSPECIFIED";
    OwnershipType["Individual"] = "INDIVIDUAL";
    OwnershipType["Joint"] = "JOINT";
    OwnershipType["Estate"] = "ESTATE";
    OwnershipType["Retirement"] = "RETIREMENT";
    OwnershipType["Trust"] = "TRUST";
    OwnershipType["Entity"] = "ENTITY";
    OwnershipType["Minor"] = "MINOR";
})(OwnershipType || (OwnershipType = {}));
/**
 * The registration of the account (e.g. Individual, Joint, IRA, etc.)
 */
export var RegistrationType;
(function (RegistrationType) {
    RegistrationType["RegistrationTypeUnspecified"] = "REGISTRATION_TYPE_UNSPECIFIED";
    RegistrationType["IndividualRegistration"] = "INDIVIDUAL_REGISTRATION";
    RegistrationType["EstateRegistration"] = "ESTATE_REGISTRATION";
    RegistrationType["TraditionalIraRegistration"] = "TRADITIONAL_IRA_REGISTRATION";
    RegistrationType["SimpleIraRegistration"] = "SIMPLE_IRA_REGISTRATION";
    RegistrationType["SepIraRegistration"] = "SEP_IRA_REGISTRATION";
    RegistrationType["RothIraRegistration"] = "ROTH_IRA_REGISTRATION";
    RegistrationType["RolloverIraRegistration"] = "ROLLOVER_IRA_REGISTRATION";
    RegistrationType["JointWithRightsOfSurvivorshipRegistration"] = "JOINT_WITH_RIGHTS_OF_SURVIVORSHIP_REGISTRATION";
    RegistrationType["JointTenantsInCommonRegistration"] = "JOINT_TENANTS_IN_COMMON_REGISTRATION";
    RegistrationType["JointTenantsByEntiretyRegistration"] = "JOINT_TENANTS_BY_ENTIRETY_REGISTRATION";
    RegistrationType["JointCommunityPropertyRegistration"] = "JOINT_COMMUNITY_PROPERTY_REGISTRATION";
    RegistrationType["TrustRegistration"] = "TRUST_REGISTRATION";
    RegistrationType["CorporationRegistration"] = "CORPORATION_REGISTRATION";
    RegistrationType["LlcRegistration"] = "LLC_REGISTRATION";
    RegistrationType["PartnershipRegistration"] = "PARTNERSHIP_REGISTRATION";
    RegistrationType["OperatingRegistration"] = "OPERATING_REGISTRATION";
    RegistrationType["IraBeneficiaryTraditionalRegistration"] = "IRA_BENEFICIARY_TRADITIONAL_REGISTRATION";
    RegistrationType["IraBeneficiaryRothRegistration"] = "IRA_BENEFICIARY_ROTH_REGISTRATION";
    RegistrationType["ForeignIndividualRegistration"] = "FOREIGN_INDIVIDUAL_REGISTRATION";
    RegistrationType["CustodialRegistration"] = "CUSTODIAL_REGISTRATION";
})(RegistrationType || (RegistrationType = {}));
/**
 * The Reserve Class associated with the account
 */
export var ReserveClass;
(function (ReserveClass) {
    ReserveClass["ReserveClassUnspecified"] = "RESERVE_CLASS_UNSPECIFIED";
    ReserveClass["Customer"] = "CUSTOMER";
    ReserveClass["Pab"] = "PAB";
    ReserveClass["Firm"] = "FIRM";
    ReserveClass["Street"] = "STREET";
    ReserveClass["GL"] = "G_L";
})(ReserveClass || (ReserveClass = {}));
/**
 * Indicates if the account is `OPEN`, `PENDING`, or `CLOSED`
 */
export var AccountState;
(function (AccountState) {
    AccountState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AccountState["Pending"] = "PENDING";
    AccountState["Open"] = "OPEN";
    AccountState["Closed"] = "CLOSED";
})(AccountState || (AccountState = {}));
/**
 * A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
 */
export var AccountCostBasisLotDisposalMethod;
(function (AccountCostBasisLotDisposalMethod) {
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalMethodUnspecified"] = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalFifo"] = "COST_BASIS_LOT_DISPOSAL_FIFO";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLifo"] = "COST_BASIS_LOT_DISPOSAL_LIFO";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCost"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCost"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalMinTaxTerm"] = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM";
})(AccountCostBasisLotDisposalMethod || (AccountCostBasisLotDisposalMethod = {}));
/** @internal */
export const AccountCatAccountHolderType$inboundSchema = z
    .union([
    z.nativeEnum(AccountCatAccountHolderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountCatAccountHolderType$outboundSchema = z.union([
    z.nativeEnum(AccountCatAccountHolderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountCatAccountHolderType$;
(function (AccountCatAccountHolderType$) {
    /** @deprecated use `AccountCatAccountHolderType$inboundSchema` instead. */
    AccountCatAccountHolderType$.inboundSchema = AccountCatAccountHolderType$inboundSchema;
    /** @deprecated use `AccountCatAccountHolderType$outboundSchema` instead. */
    AccountCatAccountHolderType$.outboundSchema = AccountCatAccountHolderType$outboundSchema;
})(AccountCatAccountHolderType$ || (AccountCatAccountHolderType$ = {}));
/** @internal */
export const Domicile$inboundSchema = z
    .union([
    z.nativeEnum(Domicile),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Domicile$outboundSchema = z.union([
    z.nativeEnum(Domicile),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Domicile$;
(function (Domicile$) {
    /** @deprecated use `Domicile$inboundSchema` instead. */
    Domicile$.inboundSchema = Domicile$inboundSchema;
    /** @deprecated use `Domicile$outboundSchema` instead. */
    Domicile$.outboundSchema = Domicile$outboundSchema;
})(Domicile$ || (Domicile$ = {}));
/** @internal */
export const FinraCoaCode$inboundSchema = z
    .union([
    z.nativeEnum(FinraCoaCode),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FinraCoaCode$outboundSchema = z.union([
    z.nativeEnum(FinraCoaCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FinraCoaCode$;
(function (FinraCoaCode$) {
    /** @deprecated use `FinraCoaCode$inboundSchema` instead. */
    FinraCoaCode$.inboundSchema = FinraCoaCode$inboundSchema;
    /** @deprecated use `FinraCoaCode$outboundSchema` instead. */
    FinraCoaCode$.outboundSchema = FinraCoaCode$outboundSchema;
})(FinraCoaCode$ || (FinraCoaCode$ = {}));
/** @internal */
export const FundingType$inboundSchema = z
    .union([
    z.nativeEnum(FundingType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const FundingType$outboundSchema = z.union([
    z.nativeEnum(FundingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FundingType$;
(function (FundingType$) {
    /** @deprecated use `FundingType$inboundSchema` instead. */
    FundingType$.inboundSchema = FundingType$inboundSchema;
    /** @deprecated use `FundingType$outboundSchema` instead. */
    FundingType$.outboundSchema = FundingType$outboundSchema;
})(FundingType$ || (FundingType$ = {}));
/** @internal */
export const AccountInvestmentObjective$inboundSchema = z
    .union([
    z.nativeEnum(AccountInvestmentObjective),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountInvestmentObjective$outboundSchema = z.union([
    z.nativeEnum(AccountInvestmentObjective),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountInvestmentObjective$;
(function (AccountInvestmentObjective$) {
    /** @deprecated use `AccountInvestmentObjective$inboundSchema` instead. */
    AccountInvestmentObjective$.inboundSchema = AccountInvestmentObjective$inboundSchema;
    /** @deprecated use `AccountInvestmentObjective$outboundSchema` instead. */
    AccountInvestmentObjective$.outboundSchema = AccountInvestmentObjective$outboundSchema;
})(AccountInvestmentObjective$ || (AccountInvestmentObjective$ = {}));
/** @internal */
export const AccountLiquidityNeeds$inboundSchema = z
    .union([
    z.nativeEnum(AccountLiquidityNeeds),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountLiquidityNeeds$outboundSchema = z.union([
    z.nativeEnum(AccountLiquidityNeeds),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountLiquidityNeeds$;
(function (AccountLiquidityNeeds$) {
    /** @deprecated use `AccountLiquidityNeeds$inboundSchema` instead. */
    AccountLiquidityNeeds$.inboundSchema = AccountLiquidityNeeds$inboundSchema;
    /** @deprecated use `AccountLiquidityNeeds$outboundSchema` instead. */
    AccountLiquidityNeeds$.outboundSchema = AccountLiquidityNeeds$outboundSchema;
})(AccountLiquidityNeeds$ || (AccountLiquidityNeeds$ = {}));
/** @internal */
export const AccountRiskTolerance$inboundSchema = z
    .union([
    z.nativeEnum(AccountRiskTolerance),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountRiskTolerance$outboundSchema = z.union([
    z.nativeEnum(AccountRiskTolerance),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountRiskTolerance$;
(function (AccountRiskTolerance$) {
    /** @deprecated use `AccountRiskTolerance$inboundSchema` instead. */
    AccountRiskTolerance$.inboundSchema = AccountRiskTolerance$inboundSchema;
    /** @deprecated use `AccountRiskTolerance$outboundSchema` instead. */
    AccountRiskTolerance$.outboundSchema = AccountRiskTolerance$outboundSchema;
})(AccountRiskTolerance$ || (AccountRiskTolerance$ = {}));
/** @internal */
export const AccountTimeHorizon$inboundSchema = z
    .union([
    z.nativeEnum(AccountTimeHorizon),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountTimeHorizon$outboundSchema = z.union([
    z.nativeEnum(AccountTimeHorizon),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTimeHorizon$;
(function (AccountTimeHorizon$) {
    /** @deprecated use `AccountTimeHorizon$inboundSchema` instead. */
    AccountTimeHorizon$.inboundSchema = AccountTimeHorizon$inboundSchema;
    /** @deprecated use `AccountTimeHorizon$outboundSchema` instead. */
    AccountTimeHorizon$.outboundSchema = AccountTimeHorizon$outboundSchema;
})(AccountTimeHorizon$ || (AccountTimeHorizon$ = {}));
/** @internal */
export const AccountGoals$inboundSchema = z.object({
    investment_objective: AccountInvestmentObjective$inboundSchema.optional(),
    liquidity_needs: AccountLiquidityNeeds$inboundSchema.optional(),
    risk_tolerance: AccountRiskTolerance$inboundSchema.optional(),
    time_horizon: AccountTimeHorizon$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "investment_objective": "investmentObjective",
        "liquidity_needs": "liquidityNeeds",
        "risk_tolerance": "riskTolerance",
        "time_horizon": "timeHorizon",
    });
});
/** @internal */
export const AccountGoals$outboundSchema = z.object({
    investmentObjective: AccountInvestmentObjective$outboundSchema.optional(),
    liquidityNeeds: AccountLiquidityNeeds$outboundSchema.optional(),
    riskTolerance: AccountRiskTolerance$outboundSchema.optional(),
    timeHorizon: AccountTimeHorizon$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        investmentObjective: "investment_objective",
        liquidityNeeds: "liquidity_needs",
        riskTolerance: "risk_tolerance",
        timeHorizon: "time_horizon",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoals$;
(function (AccountGoals$) {
    /** @deprecated use `AccountGoals$inboundSchema` instead. */
    AccountGoals$.inboundSchema = AccountGoals$inboundSchema;
    /** @deprecated use `AccountGoals$outboundSchema` instead. */
    AccountGoals$.outboundSchema = AccountGoals$outboundSchema;
})(AccountGoals$ || (AccountGoals$ = {}));
export function accountGoalsToJSON(accountGoals) {
    return JSON.stringify(AccountGoals$outboundSchema.parse(accountGoals));
}
export function accountGoalsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountGoals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountGoals' from JSON`);
}
/** @internal */
export const AccountAnnualIncomeRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountAnnualIncomeRangeUsd),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountAnnualIncomeRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountAnnualIncomeRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountAnnualIncomeRangeUsd$;
(function (AccountAnnualIncomeRangeUsd$) {
    /** @deprecated use `AccountAnnualIncomeRangeUsd$inboundSchema` instead. */
    AccountAnnualIncomeRangeUsd$.inboundSchema = AccountAnnualIncomeRangeUsd$inboundSchema;
    /** @deprecated use `AccountAnnualIncomeRangeUsd$outboundSchema` instead. */
    AccountAnnualIncomeRangeUsd$.outboundSchema = AccountAnnualIncomeRangeUsd$outboundSchema;
})(AccountAnnualIncomeRangeUsd$ || (AccountAnnualIncomeRangeUsd$ = {}));
/** @internal */
export const AccountInvestmentExperience$inboundSchema = z
    .union([
    z.nativeEnum(AccountInvestmentExperience),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountInvestmentExperience$outboundSchema = z.union([
    z.nativeEnum(AccountInvestmentExperience),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountInvestmentExperience$;
(function (AccountInvestmentExperience$) {
    /** @deprecated use `AccountInvestmentExperience$inboundSchema` instead. */
    AccountInvestmentExperience$.inboundSchema = AccountInvestmentExperience$inboundSchema;
    /** @deprecated use `AccountInvestmentExperience$outboundSchema` instead. */
    AccountInvestmentExperience$.outboundSchema = AccountInvestmentExperience$outboundSchema;
})(AccountInvestmentExperience$ || (AccountInvestmentExperience$ = {}));
/** @internal */
export const AccountLiquidNetWorthRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountLiquidNetWorthRangeUsd),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountLiquidNetWorthRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountLiquidNetWorthRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountLiquidNetWorthRangeUsd$;
(function (AccountLiquidNetWorthRangeUsd$) {
    /** @deprecated use `AccountLiquidNetWorthRangeUsd$inboundSchema` instead. */
    AccountLiquidNetWorthRangeUsd$.inboundSchema = AccountLiquidNetWorthRangeUsd$inboundSchema;
    /** @deprecated use `AccountLiquidNetWorthRangeUsd$outboundSchema` instead. */
    AccountLiquidNetWorthRangeUsd$.outboundSchema = AccountLiquidNetWorthRangeUsd$outboundSchema;
})(AccountLiquidNetWorthRangeUsd$ || (AccountLiquidNetWorthRangeUsd$ = {}));
/** @internal */
export const AccountTotalNetWorthRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountTotalNetWorthRangeUsd),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountTotalNetWorthRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountTotalNetWorthRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTotalNetWorthRangeUsd$;
(function (AccountTotalNetWorthRangeUsd$) {
    /** @deprecated use `AccountTotalNetWorthRangeUsd$inboundSchema` instead. */
    AccountTotalNetWorthRangeUsd$.inboundSchema = AccountTotalNetWorthRangeUsd$inboundSchema;
    /** @deprecated use `AccountTotalNetWorthRangeUsd$outboundSchema` instead. */
    AccountTotalNetWorthRangeUsd$.outboundSchema = AccountTotalNetWorthRangeUsd$outboundSchema;
})(AccountTotalNetWorthRangeUsd$ || (AccountTotalNetWorthRangeUsd$ = {}));
/** @internal */
export const CustomerProfile$inboundSchema = z.object({
    annual_income_range_usd: AccountAnnualIncomeRangeUsd$inboundSchema.optional(),
    federal_tax_bracket: z.number().optional(),
    investment_experience: AccountInvestmentExperience$inboundSchema.optional(),
    liquid_net_worth_range_usd: AccountLiquidNetWorthRangeUsd$inboundSchema
        .optional(),
    total_net_worth_range_usd: AccountTotalNetWorthRangeUsd$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "annual_income_range_usd": "annualIncomeRangeUsd",
        "federal_tax_bracket": "federalTaxBracket",
        "investment_experience": "investmentExperience",
        "liquid_net_worth_range_usd": "liquidNetWorthRangeUsd",
        "total_net_worth_range_usd": "totalNetWorthRangeUsd",
    });
});
/** @internal */
export const CustomerProfile$outboundSchema = z.object({
    annualIncomeRangeUsd: AccountAnnualIncomeRangeUsd$outboundSchema.optional(),
    federalTaxBracket: z.number().optional(),
    investmentExperience: AccountInvestmentExperience$outboundSchema.optional(),
    liquidNetWorthRangeUsd: AccountLiquidNetWorthRangeUsd$outboundSchema
        .optional(),
    totalNetWorthRangeUsd: AccountTotalNetWorthRangeUsd$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        annualIncomeRangeUsd: "annual_income_range_usd",
        federalTaxBracket: "federal_tax_bracket",
        investmentExperience: "investment_experience",
        liquidNetWorthRangeUsd: "liquid_net_worth_range_usd",
        totalNetWorthRangeUsd: "total_net_worth_range_usd",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerProfile$;
(function (CustomerProfile$) {
    /** @deprecated use `CustomerProfile$inboundSchema` instead. */
    CustomerProfile$.inboundSchema = CustomerProfile$inboundSchema;
    /** @deprecated use `CustomerProfile$outboundSchema` instead. */
    CustomerProfile$.outboundSchema = CustomerProfile$outboundSchema;
})(CustomerProfile$ || (CustomerProfile$ = {}));
export function customerProfileToJSON(customerProfile) {
    return JSON.stringify(CustomerProfile$outboundSchema.parse(customerProfile));
}
export function customerProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerProfile' from JSON`);
}
/** @internal */
export const InvestmentProfile$inboundSchema = z.object({
    account_goals: z.nullable(z.lazy(() => AccountGoals$inboundSchema))
        .optional(),
    customer_profile: z.nullable(z.lazy(() => CustomerProfile$inboundSchema))
        .optional(),
    investment_profile_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_goals": "accountGoals",
        "customer_profile": "customerProfile",
        "investment_profile_id": "investmentProfileId",
    });
});
/** @internal */
export const InvestmentProfile$outboundSchema = z.object({
    accountGoals: z.nullable(z.lazy(() => AccountGoals$outboundSchema))
        .optional(),
    customerProfile: z.nullable(z.lazy(() => CustomerProfile$outboundSchema))
        .optional(),
    investmentProfileId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountGoals: "account_goals",
        customerProfile: "customer_profile",
        investmentProfileId: "investment_profile_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestmentProfile$;
(function (InvestmentProfile$) {
    /** @deprecated use `InvestmentProfile$inboundSchema` instead. */
    InvestmentProfile$.inboundSchema = InvestmentProfile$inboundSchema;
    /** @deprecated use `InvestmentProfile$outboundSchema` instead. */
    InvestmentProfile$.outboundSchema = InvestmentProfile$outboundSchema;
})(InvestmentProfile$ || (InvestmentProfile$ = {}));
export function investmentProfileToJSON(investmentProfile) {
    return JSON.stringify(InvestmentProfile$outboundSchema.parse(investmentProfile));
}
export function investmentProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestmentProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestmentProfile' from JSON`);
}
/** @internal */
export const OwnershipType$inboundSchema = z
    .union([
    z.nativeEnum(OwnershipType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OwnershipType$outboundSchema = z.union([
    z.nativeEnum(OwnershipType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OwnershipType$;
(function (OwnershipType$) {
    /** @deprecated use `OwnershipType$inboundSchema` instead. */
    OwnershipType$.inboundSchema = OwnershipType$inboundSchema;
    /** @deprecated use `OwnershipType$outboundSchema` instead. */
    OwnershipType$.outboundSchema = OwnershipType$outboundSchema;
})(OwnershipType$ || (OwnershipType$ = {}));
/** @internal */
export const RegistrationType$inboundSchema = z
    .union([
    z.nativeEnum(RegistrationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RegistrationType$outboundSchema = z.union([
    z.nativeEnum(RegistrationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RegistrationType$;
(function (RegistrationType$) {
    /** @deprecated use `RegistrationType$inboundSchema` instead. */
    RegistrationType$.inboundSchema = RegistrationType$inboundSchema;
    /** @deprecated use `RegistrationType$outboundSchema` instead. */
    RegistrationType$.outboundSchema = RegistrationType$outboundSchema;
})(RegistrationType$ || (RegistrationType$ = {}));
/** @internal */
export const ReserveClass$inboundSchema = z
    .union([
    z.nativeEnum(ReserveClass),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ReserveClass$outboundSchema = z.union([
    z.nativeEnum(ReserveClass),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReserveClass$;
(function (ReserveClass$) {
    /** @deprecated use `ReserveClass$inboundSchema` instead. */
    ReserveClass$.inboundSchema = ReserveClass$inboundSchema;
    /** @deprecated use `ReserveClass$outboundSchema` instead. */
    ReserveClass$.outboundSchema = ReserveClass$outboundSchema;
})(ReserveClass$ || (ReserveClass$ = {}));
/** @internal */
export const AccountState$inboundSchema = z
    .union([
    z.nativeEnum(AccountState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountState$outboundSchema = z.union([
    z.nativeEnum(AccountState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountState$;
(function (AccountState$) {
    /** @deprecated use `AccountState$inboundSchema` instead. */
    AccountState$.inboundSchema = AccountState$inboundSchema;
    /** @deprecated use `AccountState$outboundSchema` instead. */
    AccountState$.outboundSchema = AccountState$outboundSchema;
})(AccountState$ || (AccountState$ = {}));
/** @internal */
export const AccountCostBasisLotDisposalMethod$inboundSchema = z
    .union([
    z.nativeEnum(AccountCostBasisLotDisposalMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountCostBasisLotDisposalMethod$outboundSchema = z.union([
    z.nativeEnum(AccountCostBasisLotDisposalMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountCostBasisLotDisposalMethod$;
(function (AccountCostBasisLotDisposalMethod$) {
    /** @deprecated use `AccountCostBasisLotDisposalMethod$inboundSchema` instead. */
    AccountCostBasisLotDisposalMethod$.inboundSchema = AccountCostBasisLotDisposalMethod$inboundSchema;
    /** @deprecated use `AccountCostBasisLotDisposalMethod$outboundSchema` instead. */
    AccountCostBasisLotDisposalMethod$.outboundSchema = AccountCostBasisLotDisposalMethod$outboundSchema;
})(AccountCostBasisLotDisposalMethod$ || (AccountCostBasisLotDisposalMethod$ = {}));
/** @internal */
export const AccountTaxProfile$inboundSchema = z.object({
    cost_basis_lot_disposal_method: AccountCostBasisLotDisposalMethod$inboundSchema.optional(),
    section_475_election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "cost_basis_lot_disposal_method": "costBasisLotDisposalMethod",
        "section_475_election": "section475Election",
    });
});
/** @internal */
export const AccountTaxProfile$outboundSchema = z.object({
    costBasisLotDisposalMethod: AccountCostBasisLotDisposalMethod$outboundSchema
        .optional(),
    section475Election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        costBasisLotDisposalMethod: "cost_basis_lot_disposal_method",
        section475Election: "section_475_election",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTaxProfile$;
(function (AccountTaxProfile$) {
    /** @deprecated use `AccountTaxProfile$inboundSchema` instead. */
    AccountTaxProfile$.inboundSchema = AccountTaxProfile$inboundSchema;
    /** @deprecated use `AccountTaxProfile$outboundSchema` instead. */
    AccountTaxProfile$.outboundSchema = AccountTaxProfile$outboundSchema;
})(AccountTaxProfile$ || (AccountTaxProfile$ = {}));
export function accountTaxProfileToJSON(accountTaxProfile) {
    return JSON.stringify(AccountTaxProfile$outboundSchema.parse(accountTaxProfile));
}
export function accountTaxProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTaxProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTaxProfile' from JSON`);
}
/** @internal */
export const Account$inboundSchema = z.object({
    accepts_issuer_direct_communication: z.boolean().optional(),
    account_group_id: z.string().optional(),
    account_id: z.string().optional(),
    account_number: z.string().optional(),
    active_restrictions: z.array(z.string()).optional(),
    advised: z.boolean().optional(),
    agreements: z.array(Agreement$inboundSchema).optional(),
    cat_account_holder_type: AccountCatAccountHolderType$inboundSchema
        .optional(),
    close_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    domicile: Domicile$inboundSchema.optional(),
    enrollments: z.array(Enrollment$inboundSchema).optional(),
    fdid: z.string().optional(),
    finra_coa_code: FinraCoaCode$inboundSchema.optional(),
    funding_type: FundingType$inboundSchema.optional(),
    identifiers: z.array(Identifier$inboundSchema).optional(),
    interested_parties: z.array(InterestedParty$inboundSchema).optional(),
    investment_profile: z.nullable(z.lazy(() => InvestmentProfile$inboundSchema)).optional(),
    managed: z.boolean().optional(),
    margin_group_id: z.string().optional(),
    name: z.string().optional(),
    open_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ownership_type: OwnershipType$inboundSchema.optional(),
    parties: z.array(Party$inboundSchema).optional(),
    pattern_day_trader: z.boolean().optional(),
    primary_registered_rep_id: z.string().optional(),
    registration_type: RegistrationType$inboundSchema.optional(),
    reserve_class: ReserveClass$inboundSchema.optional(),
    state: AccountState$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => AccountTaxProfile$inboundSchema))
        .optional(),
    title: z.string().optional(),
    trusted_contacts: z.array(TrustedContact$inboundSchema).optional(),
    wrap_fee_billed: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "accepts_issuer_direct_communication": "acceptsIssuerDirectCommunication",
        "account_group_id": "accountGroupId",
        "account_id": "accountId",
        "account_number": "accountNumber",
        "active_restrictions": "activeRestrictions",
        "cat_account_holder_type": "catAccountHolderType",
        "close_time": "closeTime",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "finra_coa_code": "finraCoaCode",
        "funding_type": "fundingType",
        "interested_parties": "interestedParties",
        "investment_profile": "investmentProfile",
        "margin_group_id": "marginGroupId",
        "open_time": "openTime",
        "ownership_type": "ownershipType",
        "pattern_day_trader": "patternDayTrader",
        "primary_registered_rep_id": "primaryRegisteredRepId",
        "registration_type": "registrationType",
        "reserve_class": "reserveClass",
        "tax_profile": "taxProfile",
        "trusted_contacts": "trustedContacts",
        "wrap_fee_billed": "wrapFeeBilled",
    });
});
/** @internal */
export const Account$outboundSchema = z.object({
    acceptsIssuerDirectCommunication: z.boolean().optional(),
    accountGroupId: z.string().optional(),
    accountId: z.string().optional(),
    accountNumber: z.string().optional(),
    activeRestrictions: z.array(z.string()).optional(),
    advised: z.boolean().optional(),
    agreements: z.array(Agreement$outboundSchema).optional(),
    catAccountHolderType: AccountCatAccountHolderType$outboundSchema.optional(),
    closeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    domicile: Domicile$outboundSchema.optional(),
    enrollments: z.array(Enrollment$outboundSchema).optional(),
    fdid: z.string().optional(),
    finraCoaCode: FinraCoaCode$outboundSchema.optional(),
    fundingType: FundingType$outboundSchema.optional(),
    identifiers: z.array(Identifier$outboundSchema).optional(),
    interestedParties: z.array(InterestedParty$outboundSchema).optional(),
    investmentProfile: z.nullable(z.lazy(() => InvestmentProfile$outboundSchema))
        .optional(),
    managed: z.boolean().optional(),
    marginGroupId: z.string().optional(),
    name: z.string().optional(),
    openTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    ownershipType: OwnershipType$outboundSchema.optional(),
    parties: z.array(Party$outboundSchema).optional(),
    patternDayTrader: z.boolean().optional(),
    primaryRegisteredRepId: z.string().optional(),
    registrationType: RegistrationType$outboundSchema.optional(),
    reserveClass: ReserveClass$outboundSchema.optional(),
    state: AccountState$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => AccountTaxProfile$outboundSchema))
        .optional(),
    title: z.string().optional(),
    trustedContacts: z.array(TrustedContact$outboundSchema).optional(),
    wrapFeeBilled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        acceptsIssuerDirectCommunication: "accepts_issuer_direct_communication",
        accountGroupId: "account_group_id",
        accountId: "account_id",
        accountNumber: "account_number",
        activeRestrictions: "active_restrictions",
        catAccountHolderType: "cat_account_holder_type",
        closeTime: "close_time",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        finraCoaCode: "finra_coa_code",
        fundingType: "funding_type",
        interestedParties: "interested_parties",
        investmentProfile: "investment_profile",
        marginGroupId: "margin_group_id",
        openTime: "open_time",
        ownershipType: "ownership_type",
        patternDayTrader: "pattern_day_trader",
        primaryRegisteredRepId: "primary_registered_rep_id",
        registrationType: "registration_type",
        reserveClass: "reserve_class",
        taxProfile: "tax_profile",
        trustedContacts: "trusted_contacts",
        wrapFeeBilled: "wrap_fee_billed",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Account$;
(function (Account$) {
    /** @deprecated use `Account$inboundSchema` instead. */
    Account$.inboundSchema = Account$inboundSchema;
    /** @deprecated use `Account$outboundSchema` instead. */
    Account$.outboundSchema = Account$outboundSchema;
})(Account$ || (Account$ = {}));
export function accountToJSON(account) {
    return JSON.stringify(Account$outboundSchema.parse(account));
}
export function accountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Account$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Account' from JSON`);
}
//# sourceMappingURL=account.js.map