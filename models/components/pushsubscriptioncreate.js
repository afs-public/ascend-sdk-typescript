/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { HttpPushCallbackCreate$inboundSchema, HttpPushCallbackCreate$outboundSchema, } from "./httppushcallbackcreate.js";
/** @internal */
export const PushSubscriptionCreate$inboundSchema = z.object({
    client_id: z.string().optional(),
    correspondent_id: z.string().optional(),
    display_name: z.string(),
    event_types: z.array(z.string()),
    http_callback: HttpPushCallbackCreate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "correspondent_id": "correspondentId",
        "display_name": "displayName",
        "event_types": "eventTypes",
        "http_callback": "httpCallback",
    });
});
/** @internal */
export const PushSubscriptionCreate$outboundSchema = z.object({
    clientId: z.string().optional(),
    correspondentId: z.string().optional(),
    displayName: z.string(),
    eventTypes: z.array(z.string()),
    httpCallback: HttpPushCallbackCreate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        correspondentId: "correspondent_id",
        displayName: "display_name",
        eventTypes: "event_types",
        httpCallback: "http_callback",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PushSubscriptionCreate$;
(function (PushSubscriptionCreate$) {
    /** @deprecated use `PushSubscriptionCreate$inboundSchema` instead. */
    PushSubscriptionCreate$.inboundSchema = PushSubscriptionCreate$inboundSchema;
    /** @deprecated use `PushSubscriptionCreate$outboundSchema` instead. */
    PushSubscriptionCreate$.outboundSchema = PushSubscriptionCreate$outboundSchema;
})(PushSubscriptionCreate$ || (PushSubscriptionCreate$ = {}));
export function pushSubscriptionCreateToJSON(pushSubscriptionCreate) {
    return JSON.stringify(PushSubscriptionCreate$outboundSchema.parse(pushSubscriptionCreate));
}
export function pushSubscriptionCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PushSubscriptionCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PushSubscriptionCreate' from JSON`);
}
//# sourceMappingURL=pushsubscriptioncreate.js.map