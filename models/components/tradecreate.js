/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BookingFeeCreate$inboundSchema, BookingFeeCreate$outboundSchema, } from "./bookingfeecreate.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { ExecutionCreate$inboundSchema, ExecutionCreate$outboundSchema, } from "./executioncreate.js";
import { LotCreate$inboundSchema, LotCreate$outboundSchema, } from "./lotcreate.js";
/**
 * Type of the asset being traded.
 */
export var TradeCreateAssetType;
(function (TradeCreateAssetType) {
    TradeCreateAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeCreateAssetType["Equity"] = "EQUITY";
    TradeCreateAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeCreateAssetType || (TradeCreateAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var TradeCreateBrokerCapacity;
(function (TradeCreateBrokerCapacity) {
    TradeCreateBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeCreateBrokerCapacity["Agency"] = "AGENCY";
    TradeCreateBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeCreateBrokerCapacity["Mixed"] = "MIXED";
})(TradeCreateBrokerCapacity || (TradeCreateBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var TradeCreateIdentifierType;
(function (TradeCreateIdentifierType) {
    TradeCreateIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeCreateIdentifierType["AssetId"] = "ASSET_ID";
    TradeCreateIdentifierType["Symbol"] = "SYMBOL";
    TradeCreateIdentifierType["Cusip"] = "CUSIP";
    TradeCreateIdentifierType["Isin"] = "ISIN";
})(TradeCreateIdentifierType || (TradeCreateIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var RouteType;
(function (RouteType) {
    RouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RouteType["Dma"] = "DMA";
    RouteType["Mngd"] = "MNGD";
    RouteType["Quik"] = "QUIK";
    RouteType["Algo"] = "ALGO";
    RouteType["Away"] = "AWAY";
    RouteType["Corr"] = "CORR";
    RouteType["Boats"] = "BOATS";
})(RouteType || (RouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var TradeCreateSide;
(function (TradeCreateSide) {
    TradeCreateSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    TradeCreateSide["Buy"] = "BUY";
    TradeCreateSide["Sell"] = "SELL";
})(TradeCreateSide || (TradeCreateSide = {}));
/**
 * Side modifier for the trade.
 */
export var SideModifier;
(function (SideModifier) {
    SideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    SideModifier["Short"] = "SHORT";
    SideModifier["ShortExempt"] = "SHORT_EXEMPT";
    SideModifier["ShortCover"] = "SHORT_COVER";
    SideModifier["Open"] = "OPEN";
    SideModifier["Close"] = "CLOSE";
})(SideModifier || (SideModifier = {}));
export var SpecialInstructions;
(function (SpecialInstructions) {
    SpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    SpecialInstructions["Rule144"] = "RULE_144";
    SpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    SpecialInstructions["WithRights"] = "WITH_RIGHTS";
    SpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    SpecialInstructions["CoverShort"] = "COVER_SHORT";
    SpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    SpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    SpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    SpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    SpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    SpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    SpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    SpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    SpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    SpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    SpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    SpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    SpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    SpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    SpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    SpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    SpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    SpecialInstructions["Solicited"] = "SOLICITED";
    SpecialInstructions["Unsolicited"] = "UNSOLICITED";
    SpecialInstructions["XDividend"] = "X_DIVIDEND";
    SpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    SpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    SpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    SpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    SpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    SpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    SpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    SpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    SpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    SpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    SpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    SpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    SpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    SpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    SpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    SpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    SpecialInstructions["StockReward"] = "STOCK_REWARD";
    SpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    SpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    SpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    SpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(SpecialInstructions || (SpecialInstructions = {}));
/**
 * Exchange venue
 */
export var Venue;
(function (Venue) {
    Venue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    Venue["Amex"] = "AMEX";
    Venue["Arca"] = "ARCA";
    Venue["Bats"] = "BATS";
    Venue["BatsByx"] = "BATS_BYX";
    Venue["Boston"] = "BOSTON";
    Venue["Box"] = "BOX";
    Venue["Bzx"] = "BZX";
    Venue["C2"] = "C2";
    Venue["Cboe"] = "CBOE";
    Venue["Chicago"] = "CHICAGO";
    Venue["Cincinnati"] = "CINCINNATI";
    Venue["Edga"] = "EDGA";
    Venue["Edgx"] = "EDGX";
    Venue["Exclearing"] = "EXCLEARING";
    Venue["Iex"] = "IEX";
    Venue["Ise"] = "ISE";
    Venue["IseGemini"] = "ISE_GEMINI";
    Venue["Miax"] = "MIAX";
    Venue["Nasdaq"] = "NASDAQ";
    Venue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    Venue["Nyse"] = "NYSE";
    Venue["Phlx"] = "PHLX";
    Venue["Otc"] = "OTC";
    Venue["Qsr"] = "QSR";
})(Venue || (Venue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var WhenIssued;
(function (WhenIssued) {
    WhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    WhenIssued["WhenIssued"] = "WHEN_ISSUED";
    WhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(WhenIssued || (WhenIssued = {}));
/** @internal */
export const TradeCreateAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeCreateAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeCreateAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeCreateAssetType$;
(function (TradeCreateAssetType$) {
    /** @deprecated use `TradeCreateAssetType$inboundSchema` instead. */
    TradeCreateAssetType$.inboundSchema = TradeCreateAssetType$inboundSchema;
    /** @deprecated use `TradeCreateAssetType$outboundSchema` instead. */
    TradeCreateAssetType$.outboundSchema = TradeCreateAssetType$outboundSchema;
})(TradeCreateAssetType$ || (TradeCreateAssetType$ = {}));
/** @internal */
export const TradeCreateBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeCreateBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeCreateBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeCreateBrokerCapacity$;
(function (TradeCreateBrokerCapacity$) {
    /** @deprecated use `TradeCreateBrokerCapacity$inboundSchema` instead. */
    TradeCreateBrokerCapacity$.inboundSchema = TradeCreateBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeCreateBrokerCapacity$outboundSchema` instead. */
    TradeCreateBrokerCapacity$.outboundSchema = TradeCreateBrokerCapacity$outboundSchema;
})(TradeCreateBrokerCapacity$ || (TradeCreateBrokerCapacity$ = {}));
/** @internal */
export const TradeCreateIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeCreateIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeCreateIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeCreateIdentifierType$;
(function (TradeCreateIdentifierType$) {
    /** @deprecated use `TradeCreateIdentifierType$inboundSchema` instead. */
    TradeCreateIdentifierType$.inboundSchema = TradeCreateIdentifierType$inboundSchema;
    /** @deprecated use `TradeCreateIdentifierType$outboundSchema` instead. */
    TradeCreateIdentifierType$.outboundSchema = TradeCreateIdentifierType$outboundSchema;
})(TradeCreateIdentifierType$ || (TradeCreateIdentifierType$ = {}));
/** @internal */
export const RouteType$inboundSchema = z
    .union([
    z.nativeEnum(RouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RouteType$outboundSchema = z.union([
    z.nativeEnum(RouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RouteType$;
(function (RouteType$) {
    /** @deprecated use `RouteType$inboundSchema` instead. */
    RouteType$.inboundSchema = RouteType$inboundSchema;
    /** @deprecated use `RouteType$outboundSchema` instead. */
    RouteType$.outboundSchema = RouteType$outboundSchema;
})(RouteType$ || (RouteType$ = {}));
/** @internal */
export const TradeCreateSide$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeCreateSide$outboundSchema = z.union([
    z.nativeEnum(TradeCreateSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeCreateSide$;
(function (TradeCreateSide$) {
    /** @deprecated use `TradeCreateSide$inboundSchema` instead. */
    TradeCreateSide$.inboundSchema = TradeCreateSide$inboundSchema;
    /** @deprecated use `TradeCreateSide$outboundSchema` instead. */
    TradeCreateSide$.outboundSchema = TradeCreateSide$outboundSchema;
})(TradeCreateSide$ || (TradeCreateSide$ = {}));
/** @internal */
export const SideModifier$inboundSchema = z
    .union([
    z.nativeEnum(SideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SideModifier$outboundSchema = z.union([
    z.nativeEnum(SideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SideModifier$;
(function (SideModifier$) {
    /** @deprecated use `SideModifier$inboundSchema` instead. */
    SideModifier$.inboundSchema = SideModifier$inboundSchema;
    /** @deprecated use `SideModifier$outboundSchema` instead. */
    SideModifier$.outboundSchema = SideModifier$outboundSchema;
})(SideModifier$ || (SideModifier$ = {}));
/** @internal */
export const SpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(SpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(SpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SpecialInstructions$;
(function (SpecialInstructions$) {
    /** @deprecated use `SpecialInstructions$inboundSchema` instead. */
    SpecialInstructions$.inboundSchema = SpecialInstructions$inboundSchema;
    /** @deprecated use `SpecialInstructions$outboundSchema` instead. */
    SpecialInstructions$.outboundSchema = SpecialInstructions$outboundSchema;
})(SpecialInstructions$ || (SpecialInstructions$ = {}));
/** @internal */
export const Venue$inboundSchema = z
    .union([
    z.nativeEnum(Venue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Venue$outboundSchema = z.union([
    z.nativeEnum(Venue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Venue$;
(function (Venue$) {
    /** @deprecated use `Venue$inboundSchema` instead. */
    Venue$.inboundSchema = Venue$inboundSchema;
    /** @deprecated use `Venue$outboundSchema` instead. */
    Venue$.outboundSchema = Venue$outboundSchema;
})(Venue$ || (Venue$ = {}));
/** @internal */
export const WhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(WhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WhenIssued$outboundSchema = z.union([
    z.nativeEnum(WhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WhenIssued$;
(function (WhenIssued$) {
    /** @deprecated use `WhenIssued$inboundSchema` instead. */
    WhenIssued$.inboundSchema = WhenIssued$inboundSchema;
    /** @deprecated use `WhenIssued$outboundSchema` instead. */
    WhenIssued$.outboundSchema = WhenIssued$outboundSchema;
})(WhenIssued$ || (WhenIssued$ = {}));
/** @internal */
export const TradeCreate$inboundSchema = z.object({
    account_id: z.string(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: TradeCreateAssetType$inboundSchema,
    broker_capacity: TradeCreateBrokerCapacity$inboundSchema,
    client_order_id: z.string(),
    executing_broker: z.string().optional(),
    executions: z.array(ExecutionCreate$inboundSchema),
    fees: z.array(BookingFeeCreate$inboundSchema).optional(),
    identifier: z.string(),
    identifier_type: TradeCreateIdentifierType$inboundSchema,
    issuing_region_code: z.string().optional(),
    local_market_trade_date: DateCreate$inboundSchema.optional(),
    lot_matching_instructions: z.array(LotCreate$inboundSchema).optional(),
    mic_code: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: RouteType$inboundSchema,
    settlement_date: DateCreate$inboundSchema.optional(),
    side: TradeCreateSide$inboundSchema,
    side_modifier: SideModifier$inboundSchema.optional(),
    source_application: z.string(),
    special_instructions: z.array(SpecialInstructions$inboundSchema).optional(),
    venue: Venue$inboundSchema.optional(),
    when_issued: WhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const TradeCreate$outboundSchema = z.object({
    accountId: z.string(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: TradeCreateAssetType$outboundSchema,
    brokerCapacity: TradeCreateBrokerCapacity$outboundSchema,
    clientOrderId: z.string(),
    executingBroker: z.string().optional(),
    executions: z.array(ExecutionCreate$outboundSchema),
    fees: z.array(BookingFeeCreate$outboundSchema).optional(),
    identifier: z.string(),
    identifierType: TradeCreateIdentifierType$outboundSchema,
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: DateCreate$outboundSchema.optional(),
    lotMatchingInstructions: z.array(LotCreate$outboundSchema).optional(),
    micCode: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: RouteType$outboundSchema,
    settlementDate: DateCreate$outboundSchema.optional(),
    side: TradeCreateSide$outboundSchema,
    sideModifier: SideModifier$outboundSchema.optional(),
    sourceApplication: z.string(),
    specialInstructions: z.array(SpecialInstructions$outboundSchema).optional(),
    venue: Venue$outboundSchema.optional(),
    whenIssued: WhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeCreate$;
(function (TradeCreate$) {
    /** @deprecated use `TradeCreate$inboundSchema` instead. */
    TradeCreate$.inboundSchema = TradeCreate$inboundSchema;
    /** @deprecated use `TradeCreate$outboundSchema` instead. */
    TradeCreate$.outboundSchema = TradeCreate$outboundSchema;
})(TradeCreate$ || (TradeCreate$ = {}));
export function tradeCreateToJSON(tradeCreate) {
    return JSON.stringify(TradeCreate$outboundSchema.parse(tradeCreate));
}
export function tradeCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeCreate' from JSON`);
}
//# sourceMappingURL=tradecreate.js.map