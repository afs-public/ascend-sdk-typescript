/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
/**
 * Delivery method instruction for account statements for a given Interested Party; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var StatementDeliveryPreference;
(function (StatementDeliveryPreference) {
    StatementDeliveryPreference["Physical"] = "PHYSICAL";
    StatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(StatementDeliveryPreference || (StatementDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Interested Party record; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var TradeConfirmationDeliveryPreference;
(function (TradeConfirmationDeliveryPreference) {
    TradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    TradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(TradeConfirmationDeliveryPreference || (TradeConfirmationDeliveryPreference = {}));
/** @internal */
export const StatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(StatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const StatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(StatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StatementDeliveryPreference$;
(function (StatementDeliveryPreference$) {
    /** @deprecated use `StatementDeliveryPreference$inboundSchema` instead. */
    StatementDeliveryPreference$.inboundSchema = StatementDeliveryPreference$inboundSchema;
    /** @deprecated use `StatementDeliveryPreference$outboundSchema` instead. */
    StatementDeliveryPreference$.outboundSchema = StatementDeliveryPreference$outboundSchema;
})(StatementDeliveryPreference$ || (StatementDeliveryPreference$ = {}));
/** @internal */
export const TradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(TradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(TradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeConfirmationDeliveryPreference$;
(function (TradeConfirmationDeliveryPreference$) {
    /** @deprecated use `TradeConfirmationDeliveryPreference$inboundSchema` instead. */
    TradeConfirmationDeliveryPreference$.inboundSchema = TradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `TradeConfirmationDeliveryPreference$outboundSchema` instead. */
    TradeConfirmationDeliveryPreference$.outboundSchema = TradeConfirmationDeliveryPreference$outboundSchema;
})(TradeConfirmationDeliveryPreference$ || (TradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const InterestedPartyCreate$inboundSchema = z.object({
    mailing_address: PostalAddressCreate$inboundSchema,
    recipient: z.string(),
    statement_delivery_preference: StatementDeliveryPreference$inboundSchema
        .optional(),
    trade_confirmation_delivery_preference: TradeConfirmationDeliveryPreference$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "mailing_address": "mailingAddress",
        "statement_delivery_preference": "statementDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const InterestedPartyCreate$outboundSchema = z.object({
    mailingAddress: PostalAddressCreate$outboundSchema,
    recipient: z.string(),
    statementDeliveryPreference: StatementDeliveryPreference$outboundSchema
        .optional(),
    tradeConfirmationDeliveryPreference: TradeConfirmationDeliveryPreference$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        mailingAddress: "mailing_address",
        statementDeliveryPreference: "statement_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyCreate$;
(function (InterestedPartyCreate$) {
    /** @deprecated use `InterestedPartyCreate$inboundSchema` instead. */
    InterestedPartyCreate$.inboundSchema = InterestedPartyCreate$inboundSchema;
    /** @deprecated use `InterestedPartyCreate$outboundSchema` instead. */
    InterestedPartyCreate$.outboundSchema = InterestedPartyCreate$outboundSchema;
})(InterestedPartyCreate$ || (InterestedPartyCreate$ = {}));
export function interestedPartyCreateToJSON(interestedPartyCreate) {
    return JSON.stringify(InterestedPartyCreate$outboundSchema.parse(interestedPartyCreate));
}
export function interestedPartyCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestedPartyCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestedPartyCreate' from JSON`);
}
//# sourceMappingURL=interestedpartycreate.js.map