/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PostalAddressUpdate$inboundSchema, PostalAddressUpdate$outboundSchema, } from "./postaladdressupdate.js";
/**
 * Classifies in what capacity (or if) the underlying natural person holds a job
 */
export var EmploymentUpdateEmploymentStatus;
(function (EmploymentUpdateEmploymentStatus) {
    EmploymentUpdateEmploymentStatus["StatusUnspecified"] = "STATUS_UNSPECIFIED";
    EmploymentUpdateEmploymentStatus["Employed"] = "EMPLOYED";
    EmploymentUpdateEmploymentStatus["SelfEmployed"] = "SELF_EMPLOYED";
    EmploymentUpdateEmploymentStatus["Unemployed"] = "UNEMPLOYED";
    EmploymentUpdateEmploymentStatus["Retired"] = "RETIRED";
    EmploymentUpdateEmploymentStatus["Student"] = "STUDENT";
})(EmploymentUpdateEmploymentStatus || (EmploymentUpdateEmploymentStatus = {}));
/** @internal */
export const EmploymentUpdateEmploymentStatus$inboundSchema = z
    .union([
    z.nativeEnum(EmploymentUpdateEmploymentStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EmploymentUpdateEmploymentStatus$outboundSchema = z.union([
    z.nativeEnum(EmploymentUpdateEmploymentStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmploymentUpdateEmploymentStatus$;
(function (EmploymentUpdateEmploymentStatus$) {
    /** @deprecated use `EmploymentUpdateEmploymentStatus$inboundSchema` instead. */
    EmploymentUpdateEmploymentStatus$.inboundSchema = EmploymentUpdateEmploymentStatus$inboundSchema;
    /** @deprecated use `EmploymentUpdateEmploymentStatus$outboundSchema` instead. */
    EmploymentUpdateEmploymentStatus$.outboundSchema = EmploymentUpdateEmploymentStatus$outboundSchema;
})(EmploymentUpdateEmploymentStatus$ || (EmploymentUpdateEmploymentStatus$ = {}));
/** @internal */
export const EmploymentUpdate$inboundSchema = z.object({
    employer: z.string().optional(),
    employer_address: PostalAddressUpdate$inboundSchema.optional(),
    employment_status: EmploymentUpdateEmploymentStatus$inboundSchema.optional(),
    occupation: z.string().optional(),
    start_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "employer_address": "employerAddress",
        "employment_status": "employmentStatus",
        "start_year": "startYear",
    });
});
/** @internal */
export const EmploymentUpdate$outboundSchema = z.object({
    employer: z.string().optional(),
    employerAddress: PostalAddressUpdate$outboundSchema.optional(),
    employmentStatus: EmploymentUpdateEmploymentStatus$outboundSchema.optional(),
    occupation: z.string().optional(),
    startYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        employerAddress: "employer_address",
        employmentStatus: "employment_status",
        startYear: "start_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmploymentUpdate$;
(function (EmploymentUpdate$) {
    /** @deprecated use `EmploymentUpdate$inboundSchema` instead. */
    EmploymentUpdate$.inboundSchema = EmploymentUpdate$inboundSchema;
    /** @deprecated use `EmploymentUpdate$outboundSchema` instead. */
    EmploymentUpdate$.outboundSchema = EmploymentUpdate$outboundSchema;
})(EmploymentUpdate$ || (EmploymentUpdate$ = {}));
export function employmentUpdateToJSON(employmentUpdate) {
    return JSON.stringify(EmploymentUpdate$outboundSchema.parse(employmentUpdate));
}
export function employmentUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmploymentUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmploymentUpdate' from JSON`);
}
//# sourceMappingURL=employmentupdate.js.map