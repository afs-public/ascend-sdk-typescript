"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicroDepositAmounts$ = exports.MicroDepositAmounts$outboundSchema = exports.MicroDepositAmounts$inboundSchema = exports.Amount2$ = exports.Amount2$outboundSchema = exports.Amount2$inboundSchema = exports.Amount1$ = exports.Amount1$outboundSchema = exports.Amount1$inboundSchema = void 0;
exports.amount1ToJSON = amount1ToJSON;
exports.amount1FromJSON = amount1FromJSON;
exports.amount2ToJSON = amount2ToJSON;
exports.amount2FromJSON = amount2FromJSON;
exports.microDepositAmountsToJSON = microDepositAmountsToJSON;
exports.microDepositAmountsFromJSON = microDepositAmountsFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.Amount1$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.Amount1$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Amount1$;
(function (Amount1$) {
    /** @deprecated use `Amount1$inboundSchema` instead. */
    Amount1$.inboundSchema = exports.Amount1$inboundSchema;
    /** @deprecated use `Amount1$outboundSchema` instead. */
    Amount1$.outboundSchema = exports.Amount1$outboundSchema;
})(Amount1$ || (exports.Amount1$ = Amount1$ = {}));
function amount1ToJSON(amount1) {
    return JSON.stringify(exports.Amount1$outboundSchema.parse(amount1));
}
function amount1FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Amount1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Amount1' from JSON`);
}
/** @internal */
exports.Amount2$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.Amount2$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Amount2$;
(function (Amount2$) {
    /** @deprecated use `Amount2$inboundSchema` instead. */
    Amount2$.inboundSchema = exports.Amount2$inboundSchema;
    /** @deprecated use `Amount2$outboundSchema` instead. */
    Amount2$.outboundSchema = exports.Amount2$outboundSchema;
})(Amount2$ || (exports.Amount2$ = Amount2$ = {}));
function amount2ToJSON(amount2) {
    return JSON.stringify(exports.Amount2$outboundSchema.parse(amount2));
}
function amount2FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Amount2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Amount2' from JSON`);
}
/** @internal */
exports.MicroDepositAmounts$inboundSchema = z.object({
    amount1: z.nullable(z.lazy(() => exports.Amount1$inboundSchema)).optional(),
    amount2: z.nullable(z.lazy(() => exports.Amount2$inboundSchema)).optional(),
});
/** @internal */
exports.MicroDepositAmounts$outboundSchema = z.object({
    amount1: z.nullable(z.lazy(() => exports.Amount1$outboundSchema)).optional(),
    amount2: z.nullable(z.lazy(() => exports.Amount2$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MicroDepositAmounts$;
(function (MicroDepositAmounts$) {
    /** @deprecated use `MicroDepositAmounts$inboundSchema` instead. */
    MicroDepositAmounts$.inboundSchema = exports.MicroDepositAmounts$inboundSchema;
    /** @deprecated use `MicroDepositAmounts$outboundSchema` instead. */
    MicroDepositAmounts$.outboundSchema = exports.MicroDepositAmounts$outboundSchema;
})(MicroDepositAmounts$ || (exports.MicroDepositAmounts$ = MicroDepositAmounts$ = {}));
function microDepositAmountsToJSON(microDepositAmounts) {
    return JSON.stringify(exports.MicroDepositAmounts$outboundSchema.parse(microDepositAmounts));
}
function microDepositAmountsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MicroDepositAmounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MicroDepositAmounts' from JSON`);
}
//# sourceMappingURL=microdepositamounts.js.map