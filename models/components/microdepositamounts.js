/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Amount1$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const Amount1$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Amount1$;
(function (Amount1$) {
    /** @deprecated use `Amount1$inboundSchema` instead. */
    Amount1$.inboundSchema = Amount1$inboundSchema;
    /** @deprecated use `Amount1$outboundSchema` instead. */
    Amount1$.outboundSchema = Amount1$outboundSchema;
})(Amount1$ || (Amount1$ = {}));
export function amount1ToJSON(amount1) {
    return JSON.stringify(Amount1$outboundSchema.parse(amount1));
}
export function amount1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Amount1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Amount1' from JSON`);
}
/** @internal */
export const Amount2$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const Amount2$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Amount2$;
(function (Amount2$) {
    /** @deprecated use `Amount2$inboundSchema` instead. */
    Amount2$.inboundSchema = Amount2$inboundSchema;
    /** @deprecated use `Amount2$outboundSchema` instead. */
    Amount2$.outboundSchema = Amount2$outboundSchema;
})(Amount2$ || (Amount2$ = {}));
export function amount2ToJSON(amount2) {
    return JSON.stringify(Amount2$outboundSchema.parse(amount2));
}
export function amount2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Amount2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Amount2' from JSON`);
}
/** @internal */
export const MicroDepositAmounts$inboundSchema = z.object({
    amount1: z.nullable(z.lazy(() => Amount1$inboundSchema)).optional(),
    amount2: z.nullable(z.lazy(() => Amount2$inboundSchema)).optional(),
});
/** @internal */
export const MicroDepositAmounts$outboundSchema = z.object({
    amount1: z.nullable(z.lazy(() => Amount1$outboundSchema)).optional(),
    amount2: z.nullable(z.lazy(() => Amount2$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MicroDepositAmounts$;
(function (MicroDepositAmounts$) {
    /** @deprecated use `MicroDepositAmounts$inboundSchema` instead. */
    MicroDepositAmounts$.inboundSchema = MicroDepositAmounts$inboundSchema;
    /** @deprecated use `MicroDepositAmounts$outboundSchema` instead. */
    MicroDepositAmounts$.outboundSchema = MicroDepositAmounts$outboundSchema;
})(MicroDepositAmounts$ || (MicroDepositAmounts$ = {}));
export function microDepositAmountsToJSON(microDepositAmounts) {
    return JSON.stringify(MicroDepositAmounts$outboundSchema.parse(microDepositAmounts));
}
export function microDepositAmountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MicroDepositAmounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MicroDepositAmounts' from JSON`);
}
//# sourceMappingURL=microdepositamounts.js.map