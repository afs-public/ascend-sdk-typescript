/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The end reason of the LTID.
 */
export var EndReason;
(function (EndReason) {
    EndReason["ReportableAccountEventReasonUnspecified"] = "REPORTABLE_ACCOUNT_EVENT_REASON_UNSPECIFIED";
    EndReason["EventReasonCreated"] = "EVENT_REASON_CREATED";
    EndReason["EventReasonCorrection"] = "EVENT_REASON_CORRECTION";
    EndReason["EventReasonEnded"] = "EVENT_REASON_ENDED";
    EndReason["EventReasonReplaced"] = "EVENT_REASON_REPLACED";
    EndReason["EventReasonTransfer"] = "EVENT_REASON_TRANSFER";
    EndReason["EventReasonOther"] = "EVENT_REASON_OTHER";
})(EndReason || (EndReason = {}));
/** @internal */
export const EndReason$inboundSchema = z
    .union([
    z.nativeEnum(EndReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EndReason$outboundSchema = z.union([
    z.nativeEnum(EndReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EndReason$;
(function (EndReason$) {
    /** @deprecated use `EndReason$inboundSchema` instead. */
    EndReason$.inboundSchema = EndReason$inboundSchema;
    /** @deprecated use `EndReason$outboundSchema` instead. */
    EndReason$.outboundSchema = EndReason$outboundSchema;
})(EndReason$ || (EndReason$ = {}));
/** @internal */
export const EndLargeTraderRequestCreate$inboundSchema = z.object({
    end_reason: EndReason$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "end_reason": "endReason",
    });
});
/** @internal */
export const EndLargeTraderRequestCreate$outboundSchema = z.object({
    endReason: EndReason$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        endReason: "end_reason",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EndLargeTraderRequestCreate$;
(function (EndLargeTraderRequestCreate$) {
    /** @deprecated use `EndLargeTraderRequestCreate$inboundSchema` instead. */
    EndLargeTraderRequestCreate$.inboundSchema = EndLargeTraderRequestCreate$inboundSchema;
    /** @deprecated use `EndLargeTraderRequestCreate$outboundSchema` instead. */
    EndLargeTraderRequestCreate$.outboundSchema = EndLargeTraderRequestCreate$outboundSchema;
})(EndLargeTraderRequestCreate$ || (EndLargeTraderRequestCreate$ = {}));
export function endLargeTraderRequestCreateToJSON(endLargeTraderRequestCreate) {
    return JSON.stringify(EndLargeTraderRequestCreate$outboundSchema.parse(endLargeTraderRequestCreate));
}
export function endLargeTraderRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EndLargeTraderRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EndLargeTraderRequestCreate' from JSON`);
}
//# sourceMappingURL=endlargetraderrequestcreate.js.map