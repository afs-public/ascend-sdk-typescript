/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
/** @internal */
export const Money$inboundSchema = z
    .object({
    currency_code: z.string().optional(),
    price: DecimalCreate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "currency_code": "currencyCode",
    });
});
/** @internal */
export const Money$outboundSchema = z.object({
    currencyCode: z.string().optional(),
    price: DecimalCreate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        currencyCode: "currency_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Money$;
(function (Money$) {
    /** @deprecated use `Money$inboundSchema` instead. */
    Money$.inboundSchema = Money$inboundSchema;
    /** @deprecated use `Money$outboundSchema` instead. */
    Money$.outboundSchema = Money$outboundSchema;
})(Money$ || (Money$ = {}));
export function moneyToJSON(money) {
    return JSON.stringify(Money$outboundSchema.parse(money));
}
export function moneyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Money$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Money' from JSON`);
}
/** @internal */
export const LotCreate$inboundSchema = z.object({
    id: z.string().optional(),
    money: z.lazy(() => Money$inboundSchema).optional(),
    price: DecimalCreate$inboundSchema.optional(),
    quantity: DecimalCreate$inboundSchema.optional(),
    trade_date: DateCreate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "trade_date": "tradeDate",
    });
});
/** @internal */
export const LotCreate$outboundSchema = z.object({
    id: z.string().optional(),
    money: z.lazy(() => Money$outboundSchema).optional(),
    price: DecimalCreate$outboundSchema.optional(),
    quantity: DecimalCreate$outboundSchema.optional(),
    tradeDate: DateCreate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        tradeDate: "trade_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LotCreate$;
(function (LotCreate$) {
    /** @deprecated use `LotCreate$inboundSchema` instead. */
    LotCreate$.inboundSchema = LotCreate$inboundSchema;
    /** @deprecated use `LotCreate$outboundSchema` instead. */
    LotCreate$.outboundSchema = LotCreate$outboundSchema;
})(LotCreate$ || (LotCreate$ = {}));
export function lotCreateToJSON(lotCreate) {
    return JSON.stringify(LotCreate$outboundSchema.parse(lotCreate));
}
export function lotCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LotCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LotCreate' from JSON`);
}
//# sourceMappingURL=lotcreate.js.map