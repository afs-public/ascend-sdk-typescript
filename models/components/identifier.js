/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of identifier
 */
export var IdentifierType1;
(function (IdentifierType1) {
    IdentifierType1["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    IdentifierType1["OriginatingAccountId"] = "ORIGINATING_ACCOUNT_ID";
    IdentifierType1["OriginatingFdid"] = "ORIGINATING_FDID";
    IdentifierType1["OriginatingCatReporterCrd"] = "ORIGINATING_CAT_REPORTER_CRD";
    IdentifierType1["ClientAccountId"] = "CLIENT_ACCOUNT_ID";
})(IdentifierType1 || (IdentifierType1 = {}));
/** @internal */
export const IdentifierType1$inboundSchema = z
    .union([
    z.nativeEnum(IdentifierType1),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentifierType1$outboundSchema = z.union([
    z.nativeEnum(IdentifierType1),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentifierType1$;
(function (IdentifierType1$) {
    /** @deprecated use `IdentifierType1$inboundSchema` instead. */
    IdentifierType1$.inboundSchema = IdentifierType1$inboundSchema;
    /** @deprecated use `IdentifierType1$outboundSchema` instead. */
    IdentifierType1$.outboundSchema = IdentifierType1$outboundSchema;
})(IdentifierType1$ || (IdentifierType1$ = {}));
/** @internal */
export const Identifier$inboundSchema = z.object({
    type: IdentifierType1$inboundSchema.optional(),
    value: z.string().optional(),
});
/** @internal */
export const Identifier$outboundSchema = z.object({
    type: IdentifierType1$outboundSchema.optional(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Identifier$;
(function (Identifier$) {
    /** @deprecated use `Identifier$inboundSchema` instead. */
    Identifier$.inboundSchema = Identifier$inboundSchema;
    /** @deprecated use `Identifier$outboundSchema` instead. */
    Identifier$.outboundSchema = Identifier$outboundSchema;
})(Identifier$ || (Identifier$ = {}));
export function identifierToJSON(identifier) {
    return JSON.stringify(Identifier$outboundSchema.parse(identifier));
}
export function identifierFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Identifier$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Identifier' from JSON`);
}
//# sourceMappingURL=identifier.js.map