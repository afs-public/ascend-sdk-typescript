/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
 */
export var TradingExecutedPriceType;
(function (TradingExecutedPriceType) {
    TradingExecutedPriceType["PricePerUnit"] = "PRICE_PER_UNIT";
    TradingExecutedPriceType["PercentageOfPar"] = "PERCENTAGE_OF_PAR";
    TradingExecutedPriceType["YieldToWorst"] = "YIELD_TO_WORST";
    TradingExecutedPriceType["YieldToMaturity"] = "YIELD_TO_MATURITY";
})(TradingExecutedPriceType || (TradingExecutedPriceType = {}));
/** @internal */
export const Price$inboundSchema = z
    .object({
    value: z.string().optional(),
});
/** @internal */
export const Price$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Price$;
(function (Price$) {
    /** @deprecated use `Price$inboundSchema` instead. */
    Price$.inboundSchema = Price$inboundSchema;
    /** @deprecated use `Price$outboundSchema` instead. */
    Price$.outboundSchema = Price$outboundSchema;
})(Price$ || (Price$ = {}));
export function priceToJSON(price) {
    return JSON.stringify(Price$outboundSchema.parse(price));
}
export function priceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Price$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Price' from JSON`);
}
/** @internal */
export const TradingExecutedPriceType$inboundSchema = z
    .union([
    z.nativeEnum(TradingExecutedPriceType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradingExecutedPriceType$outboundSchema = z.union([
    z.nativeEnum(TradingExecutedPriceType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingExecutedPriceType$;
(function (TradingExecutedPriceType$) {
    /** @deprecated use `TradingExecutedPriceType$inboundSchema` instead. */
    TradingExecutedPriceType$.inboundSchema = TradingExecutedPriceType$inboundSchema;
    /** @deprecated use `TradingExecutedPriceType$outboundSchema` instead. */
    TradingExecutedPriceType$.outboundSchema = TradingExecutedPriceType$outboundSchema;
})(TradingExecutedPriceType$ || (TradingExecutedPriceType$ = {}));
/** @internal */
export const TradingExecutedPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => Price$inboundSchema)).optional(),
    type: TradingExecutedPriceType$inboundSchema.optional(),
});
/** @internal */
export const TradingExecutedPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => Price$outboundSchema)).optional(),
    type: TradingExecutedPriceType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingExecutedPrice$;
(function (TradingExecutedPrice$) {
    /** @deprecated use `TradingExecutedPrice$inboundSchema` instead. */
    TradingExecutedPrice$.inboundSchema = TradingExecutedPrice$inboundSchema;
    /** @deprecated use `TradingExecutedPrice$outboundSchema` instead. */
    TradingExecutedPrice$.outboundSchema = TradingExecutedPrice$outboundSchema;
})(TradingExecutedPrice$ || (TradingExecutedPrice$ = {}));
export function tradingExecutedPriceToJSON(tradingExecutedPrice) {
    return JSON.stringify(TradingExecutedPrice$outboundSchema.parse(tradingExecutedPrice));
}
export function tradingExecutedPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradingExecutedPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradingExecutedPrice' from JSON`);
}
//# sourceMappingURL=tradingexecutedprice.js.map