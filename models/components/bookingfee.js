/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of fee
 */
export var BookingFeeType;
(function (BookingFeeType) {
    BookingFeeType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    BookingFeeType["ClientClearing"] = "CLIENT_CLEARING";
    BookingFeeType["Liquidity"] = "LIQUIDITY";
    BookingFeeType["TradeActivity"] = "TRADE_ACTIVITY";
    BookingFeeType["FinancialTransactionTax"] = "FINANCIAL_TRANSACTION_TAX";
    BookingFeeType["IndexOptionFee"] = "INDEX_OPTION_FEE";
    BookingFeeType["SecFee"] = "SEC_FEE";
    BookingFeeType["OptionsRegulatory"] = "OPTIONS_REGULATORY";
    BookingFeeType["GeneralPurposeFee"] = "GENERAL_PURPOSE_FEE";
    BookingFeeType["BrokerFee"] = "BROKER_FEE";
    BookingFeeType["ContractFee"] = "CONTRACT_FEE";
    BookingFeeType["OccFee"] = "OCC_FEE";
})(BookingFeeType || (BookingFeeType = {}));
/** @internal */
export const BookingFeeAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BookingFeeAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingFeeAmount$;
(function (BookingFeeAmount$) {
    /** @deprecated use `BookingFeeAmount$inboundSchema` instead. */
    BookingFeeAmount$.inboundSchema = BookingFeeAmount$inboundSchema;
    /** @deprecated use `BookingFeeAmount$outboundSchema` instead. */
    BookingFeeAmount$.outboundSchema = BookingFeeAmount$outboundSchema;
})(BookingFeeAmount$ || (BookingFeeAmount$ = {}));
export function bookingFeeAmountToJSON(bookingFeeAmount) {
    return JSON.stringify(BookingFeeAmount$outboundSchema.parse(bookingFeeAmount));
}
export function bookingFeeAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingFeeAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingFeeAmount' from JSON`);
}
/** @internal */
export const BookingFeeType$inboundSchema = z
    .union([
    z.nativeEnum(BookingFeeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingFeeType$outboundSchema = z.union([
    z.nativeEnum(BookingFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingFeeType$;
(function (BookingFeeType$) {
    /** @deprecated use `BookingFeeType$inboundSchema` instead. */
    BookingFeeType$.inboundSchema = BookingFeeType$inboundSchema;
    /** @deprecated use `BookingFeeType$outboundSchema` instead. */
    BookingFeeType$.outboundSchema = BookingFeeType$outboundSchema;
})(BookingFeeType$ || (BookingFeeType$ = {}));
/** @internal */
export const BookingFee$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => BookingFeeAmount$inboundSchema)).optional(),
    suppress_fee: z.boolean().optional(),
    type: BookingFeeType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "suppress_fee": "suppressFee",
    });
});
/** @internal */
export const BookingFee$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => BookingFeeAmount$outboundSchema)).optional(),
    suppressFee: z.boolean().optional(),
    type: BookingFeeType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        suppressFee: "suppress_fee",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingFee$;
(function (BookingFee$) {
    /** @deprecated use `BookingFee$inboundSchema` instead. */
    BookingFee$.inboundSchema = BookingFee$inboundSchema;
    /** @deprecated use `BookingFee$outboundSchema` instead. */
    BookingFee$.outboundSchema = BookingFee$outboundSchema;
})(BookingFee$ || (BookingFee$ = {}));
export function bookingFeeToJSON(bookingFee) {
    return JSON.stringify(BookingFee$outboundSchema.parse(bookingFee));
}
export function bookingFeeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingFee' from JSON`);
}
//# sourceMappingURL=bookingfee.js.map