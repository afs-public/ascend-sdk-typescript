/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Classifies in what capacity (or if) the underlying natural person holds a job
 */
export var LegalNaturalPersonEmploymentStatus;
(function (LegalNaturalPersonEmploymentStatus) {
    LegalNaturalPersonEmploymentStatus["StatusUnspecified"] = "STATUS_UNSPECIFIED";
    LegalNaturalPersonEmploymentStatus["Employed"] = "EMPLOYED";
    LegalNaturalPersonEmploymentStatus["SelfEmployed"] = "SELF_EMPLOYED";
    LegalNaturalPersonEmploymentStatus["Unemployed"] = "UNEMPLOYED";
    LegalNaturalPersonEmploymentStatus["Retired"] = "RETIRED";
    LegalNaturalPersonEmploymentStatus["Student"] = "STUDENT";
})(LegalNaturalPersonEmploymentStatus || (LegalNaturalPersonEmploymentStatus = {}));
/**
 * Identification type
 */
export var LegalNaturalPersonType;
(function (LegalNaturalPersonType) {
    LegalNaturalPersonType["IdentificationTypeUnspecified"] = "IDENTIFICATION_TYPE_UNSPECIFIED";
    LegalNaturalPersonType["Passport"] = "PASSPORT";
    LegalNaturalPersonType["NationalId"] = "NATIONAL_ID";
    LegalNaturalPersonType["DriversLicense"] = "DRIVERS_LICENSE";
})(LegalNaturalPersonType || (LegalNaturalPersonType = {}));
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
export var LegalNaturalPersonMaritalStatus;
(function (LegalNaturalPersonMaritalStatus) {
    LegalNaturalPersonMaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    LegalNaturalPersonMaritalStatus["Single"] = "SINGLE";
    LegalNaturalPersonMaritalStatus["Married"] = "MARRIED";
    LegalNaturalPersonMaritalStatus["Divorced"] = "DIVORCED";
    LegalNaturalPersonMaritalStatus["Widowed"] = "WIDOWED";
})(LegalNaturalPersonMaritalStatus || (LegalNaturalPersonMaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
export var LegalNaturalPersonNameSuffix;
(function (LegalNaturalPersonNameSuffix) {
    LegalNaturalPersonNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    LegalNaturalPersonNameSuffix["Sr"] = "SR";
    LegalNaturalPersonNameSuffix["Jr"] = "JR";
    LegalNaturalPersonNameSuffix["Iii"] = "III";
    LegalNaturalPersonNameSuffix["Iv"] = "IV";
    LegalNaturalPersonNameSuffix["V"] = "V";
})(LegalNaturalPersonNameSuffix || (LegalNaturalPersonNameSuffix = {}));
export var LegalNaturalPersonResidencyStatus;
(function (LegalNaturalPersonResidencyStatus) {
    LegalNaturalPersonResidencyStatus["ResidencyStatusUnspecified"] = "RESIDENCY_STATUS_UNSPECIFIED";
    LegalNaturalPersonResidencyStatus["UsPermanentResident"] = "US_PERMANENT_RESIDENT";
    LegalNaturalPersonResidencyStatus["UsTemporaryResident"] = "US_TEMPORARY_RESIDENT";
    LegalNaturalPersonResidencyStatus["UsNonResident"] = "US_NON_RESIDENT";
})(LegalNaturalPersonResidencyStatus || (LegalNaturalPersonResidencyStatus = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var LegalNaturalPersonTaxIdType;
(function (LegalNaturalPersonTaxIdType) {
    LegalNaturalPersonTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalNaturalPersonTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalNaturalPersonTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalNaturalPersonTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalNaturalPersonTaxIdType || (LegalNaturalPersonTaxIdType = {}));
/**
 * Federal tax classification.
 */
export var LegalNaturalPersonFederalTaxClassification;
(function (LegalNaturalPersonFederalTaxClassification) {
    LegalNaturalPersonFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    LegalNaturalPersonFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    LegalNaturalPersonFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    LegalNaturalPersonFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    LegalNaturalPersonFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    LegalNaturalPersonFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    LegalNaturalPersonFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    LegalNaturalPersonFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    LegalNaturalPersonFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    LegalNaturalPersonFederalTaxClassification["Other"] = "OTHER";
})(LegalNaturalPersonFederalTaxClassification || (LegalNaturalPersonFederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var LegalNaturalPersonIrsFormType;
(function (LegalNaturalPersonIrsFormType) {
    LegalNaturalPersonIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    LegalNaturalPersonIrsFormType["W9"] = "W_9";
    LegalNaturalPersonIrsFormType["W8Ben"] = "W_8BEN";
})(LegalNaturalPersonIrsFormType || (LegalNaturalPersonIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
export var ReportingEligibility;
(function (ReportingEligibility) {
    ReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    ReportingEligibility["Eligible"] = "ELIGIBLE";
    ReportingEligibility["Ineligible"] = "INELIGIBLE";
})(ReportingEligibility || (ReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
export var TaxpayerCertificationState;
(function (TaxpayerCertificationState) {
    TaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    TaxpayerCertificationState["Certified"] = "CERTIFIED";
    TaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(TaxpayerCertificationState || (TaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var LegalNaturalPersonUsTinStatus;
(function (LegalNaturalPersonUsTinStatus) {
    LegalNaturalPersonUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    LegalNaturalPersonUsTinStatus["Passing"] = "PASSING";
    LegalNaturalPersonUsTinStatus["Failing"] = "FAILING";
})(LegalNaturalPersonUsTinStatus || (LegalNaturalPersonUsTinStatus = {}));
/**
 * B/C Notice status.
 */
export var LegalNaturalPersonWithholdingState;
(function (LegalNaturalPersonWithholdingState) {
    LegalNaturalPersonWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    LegalNaturalPersonWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    LegalNaturalPersonWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    LegalNaturalPersonWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    LegalNaturalPersonWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(LegalNaturalPersonWithholdingState || (LegalNaturalPersonWithholdingState = {}));
/** @internal */
export const BirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const BirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BirthDate$;
(function (BirthDate$) {
    /** @deprecated use `BirthDate$inboundSchema` instead. */
    BirthDate$.inboundSchema = BirthDate$inboundSchema;
    /** @deprecated use `BirthDate$outboundSchema` instead. */
    BirthDate$.outboundSchema = BirthDate$outboundSchema;
})(BirthDate$ || (BirthDate$ = {}));
export function birthDateToJSON(birthDate) {
    return JSON.stringify(BirthDate$outboundSchema.parse(birthDate));
}
export function birthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BirthDate' from JSON`);
}
/** @internal */
export const DeathDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const DeathDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeathDate$;
(function (DeathDate$) {
    /** @deprecated use `DeathDate$inboundSchema` instead. */
    DeathDate$.inboundSchema = DeathDate$inboundSchema;
    /** @deprecated use `DeathDate$outboundSchema` instead. */
    DeathDate$.outboundSchema = DeathDate$outboundSchema;
})(DeathDate$ || (DeathDate$ = {}));
export function deathDateToJSON(deathDate) {
    return JSON.stringify(DeathDate$outboundSchema.parse(deathDate));
}
export function deathDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeathDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeathDate' from JSON`);
}
/** @internal */
export const EmployerAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const EmployerAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmployerAddress$;
(function (EmployerAddress$) {
    /** @deprecated use `EmployerAddress$inboundSchema` instead. */
    EmployerAddress$.inboundSchema = EmployerAddress$inboundSchema;
    /** @deprecated use `EmployerAddress$outboundSchema` instead. */
    EmployerAddress$.outboundSchema = EmployerAddress$outboundSchema;
})(EmployerAddress$ || (EmployerAddress$ = {}));
export function employerAddressToJSON(employerAddress) {
    return JSON.stringify(EmployerAddress$outboundSchema.parse(employerAddress));
}
export function employerAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmployerAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmployerAddress' from JSON`);
}
/** @internal */
export const LegalNaturalPersonEmploymentStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonEmploymentStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonEmploymentStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonEmploymentStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonEmploymentStatus$;
(function (LegalNaturalPersonEmploymentStatus$) {
    /** @deprecated use `LegalNaturalPersonEmploymentStatus$inboundSchema` instead. */
    LegalNaturalPersonEmploymentStatus$.inboundSchema = LegalNaturalPersonEmploymentStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonEmploymentStatus$outboundSchema` instead. */
    LegalNaturalPersonEmploymentStatus$.outboundSchema = LegalNaturalPersonEmploymentStatus$outboundSchema;
})(LegalNaturalPersonEmploymentStatus$ || (LegalNaturalPersonEmploymentStatus$ = {}));
/** @internal */
export const Employment$inboundSchema = z.object({
    employer: z.string().optional(),
    employer_address: z.nullable(z.lazy(() => EmployerAddress$inboundSchema))
        .optional(),
    employment_id: z.string().optional(),
    employment_status: LegalNaturalPersonEmploymentStatus$inboundSchema
        .optional(),
    occupation: z.string().optional(),
    start_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "employer_address": "employerAddress",
        "employment_id": "employmentId",
        "employment_status": "employmentStatus",
        "start_year": "startYear",
    });
});
/** @internal */
export const Employment$outboundSchema = z.object({
    employer: z.string().optional(),
    employerAddress: z.nullable(z.lazy(() => EmployerAddress$outboundSchema))
        .optional(),
    employmentId: z.string().optional(),
    employmentStatus: LegalNaturalPersonEmploymentStatus$outboundSchema
        .optional(),
    occupation: z.string().optional(),
    startYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        employerAddress: "employer_address",
        employmentId: "employment_id",
        employmentStatus: "employment_status",
        startYear: "start_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Employment$;
(function (Employment$) {
    /** @deprecated use `Employment$inboundSchema` instead. */
    Employment$.inboundSchema = Employment$inboundSchema;
    /** @deprecated use `Employment$outboundSchema` instead. */
    Employment$.outboundSchema = Employment$outboundSchema;
})(Employment$ || (Employment$ = {}));
export function employmentToJSON(employment) {
    return JSON.stringify(Employment$outboundSchema.parse(employment));
}
export function employmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Employment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Employment' from JSON`);
}
/** @internal */
export const ExpirationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ExpirationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpirationDate$;
(function (ExpirationDate$) {
    /** @deprecated use `ExpirationDate$inboundSchema` instead. */
    ExpirationDate$.inboundSchema = ExpirationDate$inboundSchema;
    /** @deprecated use `ExpirationDate$outboundSchema` instead. */
    ExpirationDate$.outboundSchema = ExpirationDate$outboundSchema;
})(ExpirationDate$ || (ExpirationDate$ = {}));
export function expirationDateToJSON(expirationDate) {
    return JSON.stringify(ExpirationDate$outboundSchema.parse(expirationDate));
}
export function expirationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExpirationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExpirationDate' from JSON`);
}
/** @internal */
export const IssueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const IssueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IssueDate$;
(function (IssueDate$) {
    /** @deprecated use `IssueDate$inboundSchema` instead. */
    IssueDate$.inboundSchema = IssueDate$inboundSchema;
    /** @deprecated use `IssueDate$outboundSchema` instead. */
    IssueDate$.outboundSchema = IssueDate$outboundSchema;
})(IssueDate$ || (IssueDate$ = {}));
export function issueDateToJSON(issueDate) {
    return JSON.stringify(IssueDate$outboundSchema.parse(issueDate));
}
export function issueDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IssueDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IssueDate' from JSON`);
}
/** @internal */
export const LegalNaturalPersonType$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonType$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonType$;
(function (LegalNaturalPersonType$) {
    /** @deprecated use `LegalNaturalPersonType$inboundSchema` instead. */
    LegalNaturalPersonType$.inboundSchema = LegalNaturalPersonType$inboundSchema;
    /** @deprecated use `LegalNaturalPersonType$outboundSchema` instead. */
    LegalNaturalPersonType$.outboundSchema = LegalNaturalPersonType$outboundSchema;
})(LegalNaturalPersonType$ || (LegalNaturalPersonType$ = {}));
/** @internal */
export const ForeignIdentification$inboundSchema = z.object({
    expiration_date: z.nullable(z.lazy(() => ExpirationDate$inboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identification_number: z.string().optional(),
    issue_date: z.nullable(z.lazy(() => IssueDate$inboundSchema)).optional(),
    issuing_region_code: z.string().optional(),
    type: LegalNaturalPersonType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "expiration_date": "expirationDate",
        "identification_number": "identificationNumber",
        "issue_date": "issueDate",
        "issuing_region_code": "issuingRegionCode",
    });
});
/** @internal */
export const ForeignIdentification$outboundSchema = z.object({
    expirationDate: z.nullable(z.lazy(() => ExpirationDate$outboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identificationNumber: z.string().optional(),
    issueDate: z.nullable(z.lazy(() => IssueDate$outboundSchema)).optional(),
    issuingRegionCode: z.string().optional(),
    type: LegalNaturalPersonType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        expirationDate: "expiration_date",
        identificationNumber: "identification_number",
        issueDate: "issue_date",
        issuingRegionCode: "issuing_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignIdentification$;
(function (ForeignIdentification$) {
    /** @deprecated use `ForeignIdentification$inboundSchema` instead. */
    ForeignIdentification$.inboundSchema = ForeignIdentification$inboundSchema;
    /** @deprecated use `ForeignIdentification$outboundSchema` instead. */
    ForeignIdentification$.outboundSchema = ForeignIdentification$outboundSchema;
})(ForeignIdentification$ || (ForeignIdentification$ = {}));
export function foreignIdentificationToJSON(foreignIdentification) {
    return JSON.stringify(ForeignIdentification$outboundSchema.parse(foreignIdentification));
}
export function foreignIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignIdentification' from JSON`);
}
/** @internal */
export const ExecutionDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ExecutionDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExecutionDate$;
(function (ExecutionDate$) {
    /** @deprecated use `ExecutionDate$inboundSchema` instead. */
    ExecutionDate$.inboundSchema = ExecutionDate$inboundSchema;
    /** @deprecated use `ExecutionDate$outboundSchema` instead. */
    ExecutionDate$.outboundSchema = ExecutionDate$outboundSchema;
})(ExecutionDate$ || (ExecutionDate$ = {}));
export function executionDateToJSON(executionDate) {
    return JSON.stringify(ExecutionDate$outboundSchema.parse(executionDate));
}
export function executionDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExecutionDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExecutionDate' from JSON`);
}
/** @internal */
export const LegalNaturalPersonIdentityVerificationResult$inboundSchema = z.object({
    address_verified: z.boolean().optional(),
    birth_date_verified: z.boolean().optional(),
    execution_date: z.nullable(z.lazy(() => ExecutionDate$inboundSchema))
        .optional(),
    external_case_id: z.string().optional(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    identity_verification_result_id: z.string().optional(),
    name_verified: z.boolean().optional(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "identity_verification_result_id": "identityVerificationResultId",
        "name_verified": "nameVerified",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
export const LegalNaturalPersonIdentityVerificationResult$outboundSchema = z.object({
    addressVerified: z.boolean().optional(),
    birthDateVerified: z.boolean().optional(),
    executionDate: z.nullable(z.lazy(() => ExecutionDate$outboundSchema))
        .optional(),
    externalCaseId: z.string().optional(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    identityVerificationResultId: z.string().optional(),
    nameVerified: z.boolean().optional(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        identityVerificationResultId: "identity_verification_result_id",
        nameVerified: "name_verified",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonIdentityVerificationResult$;
(function (LegalNaturalPersonIdentityVerificationResult$) {
    /** @deprecated use `LegalNaturalPersonIdentityVerificationResult$inboundSchema` instead. */
    LegalNaturalPersonIdentityVerificationResult$.inboundSchema = LegalNaturalPersonIdentityVerificationResult$inboundSchema;
    /** @deprecated use `LegalNaturalPersonIdentityVerificationResult$outboundSchema` instead. */
    LegalNaturalPersonIdentityVerificationResult$.outboundSchema = LegalNaturalPersonIdentityVerificationResult$outboundSchema;
})(LegalNaturalPersonIdentityVerificationResult$ || (LegalNaturalPersonIdentityVerificationResult$ = {}));
export function legalNaturalPersonIdentityVerificationResultToJSON(legalNaturalPersonIdentityVerificationResult) {
    return JSON.stringify(LegalNaturalPersonIdentityVerificationResult$outboundSchema.parse(legalNaturalPersonIdentityVerificationResult));
}
export function legalNaturalPersonIdentityVerificationResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPersonIdentityVerificationResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPersonIdentityVerificationResult' from JSON`);
}
/** @internal */
export const LegalNaturalPersonEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LegalNaturalPersonEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonEffectiveDate$;
(function (LegalNaturalPersonEffectiveDate$) {
    /** @deprecated use `LegalNaturalPersonEffectiveDate$inboundSchema` instead. */
    LegalNaturalPersonEffectiveDate$.inboundSchema = LegalNaturalPersonEffectiveDate$inboundSchema;
    /** @deprecated use `LegalNaturalPersonEffectiveDate$outboundSchema` instead. */
    LegalNaturalPersonEffectiveDate$.outboundSchema = LegalNaturalPersonEffectiveDate$outboundSchema;
})(LegalNaturalPersonEffectiveDate$ || (LegalNaturalPersonEffectiveDate$ = {}));
export function legalNaturalPersonEffectiveDateToJSON(legalNaturalPersonEffectiveDate) {
    return JSON.stringify(LegalNaturalPersonEffectiveDate$outboundSchema.parse(legalNaturalPersonEffectiveDate));
}
export function legalNaturalPersonEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPersonEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPersonEffectiveDate' from JSON`);
}
/** @internal */
export const LegalNaturalPersonLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => LegalNaturalPersonEffectiveDate$inboundSchema)).optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const LegalNaturalPersonLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => LegalNaturalPersonEffectiveDate$outboundSchema)).optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonLargeTrader$;
(function (LegalNaturalPersonLargeTrader$) {
    /** @deprecated use `LegalNaturalPersonLargeTrader$inboundSchema` instead. */
    LegalNaturalPersonLargeTrader$.inboundSchema = LegalNaturalPersonLargeTrader$inboundSchema;
    /** @deprecated use `LegalNaturalPersonLargeTrader$outboundSchema` instead. */
    LegalNaturalPersonLargeTrader$.outboundSchema = LegalNaturalPersonLargeTrader$outboundSchema;
})(LegalNaturalPersonLargeTrader$ || (LegalNaturalPersonLargeTrader$ = {}));
export function legalNaturalPersonLargeTraderToJSON(legalNaturalPersonLargeTrader) {
    return JSON.stringify(LegalNaturalPersonLargeTrader$outboundSchema.parse(legalNaturalPersonLargeTrader));
}
export function legalNaturalPersonLargeTraderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPersonLargeTrader$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPersonLargeTrader' from JSON`);
}
/** @internal */
export const LegalNaturalPersonMaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonMaritalStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonMaritalStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonMaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonMaritalStatus$;
(function (LegalNaturalPersonMaritalStatus$) {
    /** @deprecated use `LegalNaturalPersonMaritalStatus$inboundSchema` instead. */
    LegalNaturalPersonMaritalStatus$.inboundSchema = LegalNaturalPersonMaritalStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonMaritalStatus$outboundSchema` instead. */
    LegalNaturalPersonMaritalStatus$.outboundSchema = LegalNaturalPersonMaritalStatus$outboundSchema;
})(LegalNaturalPersonMaritalStatus$ || (LegalNaturalPersonMaritalStatus$ = {}));
/** @internal */
export const LegalNaturalPersonNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonNameSuffix),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonNameSuffix$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonNameSuffix$;
(function (LegalNaturalPersonNameSuffix$) {
    /** @deprecated use `LegalNaturalPersonNameSuffix$inboundSchema` instead. */
    LegalNaturalPersonNameSuffix$.inboundSchema = LegalNaturalPersonNameSuffix$inboundSchema;
    /** @deprecated use `LegalNaturalPersonNameSuffix$outboundSchema` instead. */
    LegalNaturalPersonNameSuffix$.outboundSchema = LegalNaturalPersonNameSuffix$outboundSchema;
})(LegalNaturalPersonNameSuffix$ || (LegalNaturalPersonNameSuffix$ = {}));
/** @internal */
export const CustomerReferralSource$inboundSchema = z.object({
    name: z.string().optional(),
    relationship_to_applicant: z.string().optional(),
    relationship_years_with_applicant: z.number().int().optional(),
    relationship_years_with_broker: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "relationship_to_applicant": "relationshipToApplicant",
        "relationship_years_with_applicant": "relationshipYearsWithApplicant",
        "relationship_years_with_broker": "relationshipYearsWithBroker",
    });
});
/** @internal */
export const CustomerReferralSource$outboundSchema = z.object({
    name: z.string().optional(),
    relationshipToApplicant: z.string().optional(),
    relationshipYearsWithApplicant: z.number().int().optional(),
    relationshipYearsWithBroker: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        relationshipToApplicant: "relationship_to_applicant",
        relationshipYearsWithApplicant: "relationship_years_with_applicant",
        relationshipYearsWithBroker: "relationship_years_with_broker",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerReferralSource$;
(function (CustomerReferralSource$) {
    /** @deprecated use `CustomerReferralSource$inboundSchema` instead. */
    CustomerReferralSource$.inboundSchema = CustomerReferralSource$inboundSchema;
    /** @deprecated use `CustomerReferralSource$outboundSchema` instead. */
    CustomerReferralSource$.outboundSchema = CustomerReferralSource$outboundSchema;
})(CustomerReferralSource$ || (CustomerReferralSource$ = {}));
export function customerReferralSourceToJSON(customerReferralSource) {
    return JSON.stringify(CustomerReferralSource$outboundSchema.parse(customerReferralSource));
}
export function customerReferralSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerReferralSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerReferralSource' from JSON`);
}
/** @internal */
export const NegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
export const NegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NegativeNews$;
(function (NegativeNews$) {
    /** @deprecated use `NegativeNews$inboundSchema` instead. */
    NegativeNews$.inboundSchema = NegativeNews$inboundSchema;
    /** @deprecated use `NegativeNews$outboundSchema` instead. */
    NegativeNews$.outboundSchema = NegativeNews$outboundSchema;
})(NegativeNews$ || (NegativeNews$ = {}));
export function negativeNewsToJSON(negativeNews) {
    return JSON.stringify(NegativeNews$outboundSchema.parse(negativeNews));
}
export function negativeNewsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NegativeNews$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NegativeNews' from JSON`);
}
/** @internal */
export const OtherSourcesOfWealth$inboundSchema = z.object({
    applicant_has_other_sources_of_wealth: z.boolean().optional(),
    other_sources_of_wealth: z.string().optional(),
    other_sources_of_wealth_verification: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "applicant_has_other_sources_of_wealth": "applicantHasOtherSourcesOfWealth",
        "other_sources_of_wealth": "otherSourcesOfWealth",
        "other_sources_of_wealth_verification": "otherSourcesOfWealthVerification",
    });
});
/** @internal */
export const OtherSourcesOfWealth$outboundSchema = z.object({
    applicantHasOtherSourcesOfWealth: z.boolean().optional(),
    otherSourcesOfWealth: z.string().optional(),
    otherSourcesOfWealthVerification: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        applicantHasOtherSourcesOfWealth: "applicant_has_other_sources_of_wealth",
        otherSourcesOfWealth: "other_sources_of_wealth",
        otherSourcesOfWealthVerification: "other_sources_of_wealth_verification",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OtherSourcesOfWealth$;
(function (OtherSourcesOfWealth$) {
    /** @deprecated use `OtherSourcesOfWealth$inboundSchema` instead. */
    OtherSourcesOfWealth$.inboundSchema = OtherSourcesOfWealth$inboundSchema;
    /** @deprecated use `OtherSourcesOfWealth$outboundSchema` instead. */
    OtherSourcesOfWealth$.outboundSchema = OtherSourcesOfWealth$outboundSchema;
})(OtherSourcesOfWealth$ || (OtherSourcesOfWealth$ = {}));
export function otherSourcesOfWealthToJSON(otherSourcesOfWealth) {
    return JSON.stringify(OtherSourcesOfWealth$outboundSchema.parse(otherSourcesOfWealth));
}
export function otherSourcesOfWealthFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OtherSourcesOfWealth$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OtherSourcesOfWealth' from JSON`);
}
/** @internal */
export const NaturalPersonFdd$inboundSchema = z.object({
    customer_non_referral_source: z.string().optional(),
    customer_referral_source: z.nullable(z.lazy(() => CustomerReferralSource$inboundSchema)).optional(),
    employment_and_employer_description: z.string().optional(),
    negative_news: z.nullable(z.lazy(() => NegativeNews$inboundSchema))
        .optional(),
    other_sources_of_wealth: z.nullable(z.lazy(() => OtherSourcesOfWealth$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "customer_non_referral_source": "customerNonReferralSource",
        "customer_referral_source": "customerReferralSource",
        "employment_and_employer_description": "employmentAndEmployerDescription",
        "negative_news": "negativeNews",
        "other_sources_of_wealth": "otherSourcesOfWealth",
    });
});
/** @internal */
export const NaturalPersonFdd$outboundSchema = z.object({
    customerNonReferralSource: z.string().optional(),
    customerReferralSource: z.nullable(z.lazy(() => CustomerReferralSource$outboundSchema)).optional(),
    employmentAndEmployerDescription: z.string().optional(),
    negativeNews: z.nullable(z.lazy(() => NegativeNews$outboundSchema))
        .optional(),
    otherSourcesOfWealth: z.nullable(z.lazy(() => OtherSourcesOfWealth$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        customerNonReferralSource: "customer_non_referral_source",
        customerReferralSource: "customer_referral_source",
        employmentAndEmployerDescription: "employment_and_employer_description",
        negativeNews: "negative_news",
        otherSourcesOfWealth: "other_sources_of_wealth",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NaturalPersonFdd$;
(function (NaturalPersonFdd$) {
    /** @deprecated use `NaturalPersonFdd$inboundSchema` instead. */
    NaturalPersonFdd$.inboundSchema = NaturalPersonFdd$inboundSchema;
    /** @deprecated use `NaturalPersonFdd$outboundSchema` instead. */
    NaturalPersonFdd$.outboundSchema = NaturalPersonFdd$outboundSchema;
})(NaturalPersonFdd$ || (NaturalPersonFdd$ = {}));
export function naturalPersonFddToJSON(naturalPersonFdd) {
    return JSON.stringify(NaturalPersonFdd$outboundSchema.parse(naturalPersonFdd));
}
export function naturalPersonFddFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NaturalPersonFdd$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NaturalPersonFdd' from JSON`);
}
/** @internal */
export const LegalNaturalPersonResidencyStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonResidencyStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonResidencyStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonResidencyStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonResidencyStatus$;
(function (LegalNaturalPersonResidencyStatus$) {
    /** @deprecated use `LegalNaturalPersonResidencyStatus$inboundSchema` instead. */
    LegalNaturalPersonResidencyStatus$.inboundSchema = LegalNaturalPersonResidencyStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonResidencyStatus$outboundSchema` instead. */
    LegalNaturalPersonResidencyStatus$.outboundSchema = LegalNaturalPersonResidencyStatus$outboundSchema;
})(LegalNaturalPersonResidencyStatus$ || (LegalNaturalPersonResidencyStatus$ = {}));
/** @internal */
export const NonCitizenResidency$inboundSchema = z.object({
    residency_status: LegalNaturalPersonResidencyStatus$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "residency_status": "residencyStatus",
    });
});
/** @internal */
export const NonCitizenResidency$outboundSchema = z.object({
    residencyStatus: LegalNaturalPersonResidencyStatus$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        residencyStatus: "residency_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NonCitizenResidency$;
(function (NonCitizenResidency$) {
    /** @deprecated use `NonCitizenResidency$inboundSchema` instead. */
    NonCitizenResidency$.inboundSchema = NonCitizenResidency$inboundSchema;
    /** @deprecated use `NonCitizenResidency$outboundSchema` instead. */
    NonCitizenResidency$.outboundSchema = NonCitizenResidency$outboundSchema;
})(NonCitizenResidency$ || (NonCitizenResidency$ = {}));
export function nonCitizenResidencyToJSON(nonCitizenResidency) {
    return JSON.stringify(NonCitizenResidency$outboundSchema.parse(nonCitizenResidency));
}
export function nonCitizenResidencyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NonCitizenResidency$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NonCitizenResidency' from JSON`);
}
/** @internal */
export const PersonalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const PersonalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PersonalAddress$;
(function (PersonalAddress$) {
    /** @deprecated use `PersonalAddress$inboundSchema` instead. */
    PersonalAddress$.inboundSchema = PersonalAddress$inboundSchema;
    /** @deprecated use `PersonalAddress$outboundSchema` instead. */
    PersonalAddress$.outboundSchema = PersonalAddress$outboundSchema;
})(PersonalAddress$ || (PersonalAddress$ = {}));
export function personalAddressToJSON(personalAddress) {
    return JSON.stringify(PersonalAddress$outboundSchema.parse(personalAddress));
}
export function personalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PersonalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PersonalAddress' from JSON`);
}
/** @internal */
export const LegalNaturalPersonTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonTaxIdType$;
(function (LegalNaturalPersonTaxIdType$) {
    /** @deprecated use `LegalNaturalPersonTaxIdType$inboundSchema` instead. */
    LegalNaturalPersonTaxIdType$.inboundSchema = LegalNaturalPersonTaxIdType$inboundSchema;
    /** @deprecated use `LegalNaturalPersonTaxIdType$outboundSchema` instead. */
    LegalNaturalPersonTaxIdType$.outboundSchema = LegalNaturalPersonTaxIdType$outboundSchema;
})(LegalNaturalPersonTaxIdType$ || (LegalNaturalPersonTaxIdType$ = {}));
/** @internal */
export const CNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CNoticeDate$;
(function (CNoticeDate$) {
    /** @deprecated use `CNoticeDate$inboundSchema` instead. */
    CNoticeDate$.inboundSchema = CNoticeDate$inboundSchema;
    /** @deprecated use `CNoticeDate$outboundSchema` instead. */
    CNoticeDate$.outboundSchema = CNoticeDate$outboundSchema;
})(CNoticeDate$ || (CNoticeDate$ = {}));
export function cNoticeDateToJSON(cNoticeDate) {
    return JSON.stringify(CNoticeDate$outboundSchema.parse(cNoticeDate));
}
export function cNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CNoticeDate' from JSON`);
}
/** @internal */
export const LegalNaturalPersonFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonFederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonFederalTaxClassification$;
(function (LegalNaturalPersonFederalTaxClassification$) {
    /** @deprecated use `LegalNaturalPersonFederalTaxClassification$inboundSchema` instead. */
    LegalNaturalPersonFederalTaxClassification$.inboundSchema = LegalNaturalPersonFederalTaxClassification$inboundSchema;
    /** @deprecated use `LegalNaturalPersonFederalTaxClassification$outboundSchema` instead. */
    LegalNaturalPersonFederalTaxClassification$.outboundSchema = LegalNaturalPersonFederalTaxClassification$outboundSchema;
})(LegalNaturalPersonFederalTaxClassification$ || (LegalNaturalPersonFederalTaxClassification$ = {}));
/** @internal */
export const FirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const FirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FirstBNoticeDate$;
(function (FirstBNoticeDate$) {
    /** @deprecated use `FirstBNoticeDate$inboundSchema` instead. */
    FirstBNoticeDate$.inboundSchema = FirstBNoticeDate$inboundSchema;
    /** @deprecated use `FirstBNoticeDate$outboundSchema` instead. */
    FirstBNoticeDate$.outboundSchema = FirstBNoticeDate$outboundSchema;
})(FirstBNoticeDate$ || (FirstBNoticeDate$ = {}));
export function firstBNoticeDateToJSON(firstBNoticeDate) {
    return JSON.stringify(FirstBNoticeDate$outboundSchema.parse(firstBNoticeDate));
}
export function firstBNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FirstBNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FirstBNoticeDate' from JSON`);
}
/** @internal */
export const LegalNaturalPersonIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonIrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonIrsFormType$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonIrsFormType$;
(function (LegalNaturalPersonIrsFormType$) {
    /** @deprecated use `LegalNaturalPersonIrsFormType$inboundSchema` instead. */
    LegalNaturalPersonIrsFormType$.inboundSchema = LegalNaturalPersonIrsFormType$inboundSchema;
    /** @deprecated use `LegalNaturalPersonIrsFormType$outboundSchema` instead. */
    LegalNaturalPersonIrsFormType$.outboundSchema = LegalNaturalPersonIrsFormType$outboundSchema;
})(LegalNaturalPersonIrsFormType$ || (LegalNaturalPersonIrsFormType$ = {}));
/** @internal */
export const ReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(ReportingEligibility),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(ReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReportingEligibility$;
(function (ReportingEligibility$) {
    /** @deprecated use `ReportingEligibility$inboundSchema` instead. */
    ReportingEligibility$.inboundSchema = ReportingEligibility$inboundSchema;
    /** @deprecated use `ReportingEligibility$outboundSchema` instead. */
    ReportingEligibility$.outboundSchema = ReportingEligibility$outboundSchema;
})(ReportingEligibility$ || (ReportingEligibility$ = {}));
/** @internal */
export const TaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const TaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxCertificationDate$;
(function (TaxCertificationDate$) {
    /** @deprecated use `TaxCertificationDate$inboundSchema` instead. */
    TaxCertificationDate$.inboundSchema = TaxCertificationDate$inboundSchema;
    /** @deprecated use `TaxCertificationDate$outboundSchema` instead. */
    TaxCertificationDate$.outboundSchema = TaxCertificationDate$outboundSchema;
})(TaxCertificationDate$ || (TaxCertificationDate$ = {}));
export function taxCertificationDateToJSON(taxCertificationDate) {
    return JSON.stringify(TaxCertificationDate$outboundSchema.parse(taxCertificationDate));
}
export function taxCertificationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxCertificationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxCertificationDate' from JSON`);
}
/** @internal */
export const TaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(TaxpayerCertificationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(TaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxpayerCertificationState$;
(function (TaxpayerCertificationState$) {
    /** @deprecated use `TaxpayerCertificationState$inboundSchema` instead. */
    TaxpayerCertificationState$.inboundSchema = TaxpayerCertificationState$inboundSchema;
    /** @deprecated use `TaxpayerCertificationState$outboundSchema` instead. */
    TaxpayerCertificationState$.outboundSchema = TaxpayerCertificationState$outboundSchema;
})(TaxpayerCertificationState$ || (TaxpayerCertificationState$ = {}));
/** @internal */
export const LegalNaturalPersonUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonUsTinStatus$;
(function (LegalNaturalPersonUsTinStatus$) {
    /** @deprecated use `LegalNaturalPersonUsTinStatus$inboundSchema` instead. */
    LegalNaturalPersonUsTinStatus$.inboundSchema = LegalNaturalPersonUsTinStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUsTinStatus$outboundSchema` instead. */
    LegalNaturalPersonUsTinStatus$.outboundSchema = LegalNaturalPersonUsTinStatus$outboundSchema;
})(LegalNaturalPersonUsTinStatus$ || (LegalNaturalPersonUsTinStatus$ = {}));
/** @internal */
export const LegalNaturalPersonWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonWithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonWithholdingState$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonWithholdingState$;
(function (LegalNaturalPersonWithholdingState$) {
    /** @deprecated use `LegalNaturalPersonWithholdingState$inboundSchema` instead. */
    LegalNaturalPersonWithholdingState$.inboundSchema = LegalNaturalPersonWithholdingState$inboundSchema;
    /** @deprecated use `LegalNaturalPersonWithholdingState$outboundSchema` instead. */
    LegalNaturalPersonWithholdingState$.outboundSchema = LegalNaturalPersonWithholdingState$outboundSchema;
})(LegalNaturalPersonWithholdingState$ || (LegalNaturalPersonWithholdingState$ = {}));
/** @internal */
export const TaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => CNoticeDate$inboundSchema)).optional(),
    federal_tax_classification: LegalNaturalPersonFederalTaxClassification$inboundSchema.optional(),
    first_b_notice_date: z.nullable(z.lazy(() => FirstBNoticeDate$inboundSchema))
        .optional(),
    irs_form_type: LegalNaturalPersonIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: ReportingEligibility$inboundSchema.optional(),
    tax_certification_date: z.nullable(z.lazy(() => TaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: TaxpayerCertificationState$inboundSchema
        .optional(),
    us_tin_status: LegalNaturalPersonUsTinStatus$inboundSchema.optional(),
    withholding_state: LegalNaturalPersonWithholdingState$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
export const TaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => CNoticeDate$outboundSchema)).optional(),
    federalTaxClassification: LegalNaturalPersonFederalTaxClassification$outboundSchema.optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => FirstBNoticeDate$outboundSchema))
        .optional(),
    irsFormType: LegalNaturalPersonIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: ReportingEligibility$outboundSchema.optional(),
    taxCertificationDate: z.nullable(z.lazy(() => TaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: TaxpayerCertificationState$outboundSchema
        .optional(),
    usTinStatus: LegalNaturalPersonUsTinStatus$outboundSchema.optional(),
    withholdingState: LegalNaturalPersonWithholdingState$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxProfile$;
(function (TaxProfile$) {
    /** @deprecated use `TaxProfile$inboundSchema` instead. */
    TaxProfile$.inboundSchema = TaxProfile$inboundSchema;
    /** @deprecated use `TaxProfile$outboundSchema` instead. */
    TaxProfile$.outboundSchema = TaxProfile$outboundSchema;
})(TaxProfile$ || (TaxProfile$ = {}));
export function taxProfileToJSON(taxProfile) {
    return JSON.stringify(TaxProfile$outboundSchema.parse(taxProfile));
}
export function taxProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxProfile' from JSON`);
}
/** @internal */
export const LegalNaturalPerson$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: z.nullable(z.lazy(() => BirthDate$inboundSchema)).optional(),
    citizenship_countries: z.array(z.string()).optional(),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string().optional(),
    custodian_employee: z.boolean().optional(),
    customer_identification_id: z.string().optional(),
    death_date: z.nullable(z.lazy(() => DeathDate$inboundSchema)).optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => Employment$inboundSchema)).optional(),
    family_name: z.string().optional(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: z.nullable(z.lazy(() => ForeignIdentification$inboundSchema)).optional(),
    given_name: z.string().optional(),
    global_person_id: z.string().optional(),
    identity_verification_result: z.nullable(z.lazy(() => LegalNaturalPersonIdentityVerificationResult$inboundSchema)).optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => LegalNaturalPersonLargeTrader$inboundSchema)).optional(),
    legal_natural_person_id: z.string().optional(),
    marital_status: LegalNaturalPersonMaritalStatus$inboundSchema.optional(),
    middle_names: z.string().optional(),
    name: z.string().optional(),
    name_suffix: LegalNaturalPersonNameSuffix$inboundSchema.optional(),
    natural_person_fdd: z.nullable(z.lazy(() => NaturalPersonFdd$inboundSchema))
        .optional(),
    non_citizen_residency: z.nullable(z.lazy(() => NonCitizenResidency$inboundSchema)).optional(),
    personal_address: z.nullable(z.lazy(() => PersonalAddress$inboundSchema))
        .optional(),
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: LegalNaturalPersonTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => TaxProfile$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "custodian_employee": "custodianEmployee",
        "customer_identification_id": "customerIdentificationId",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "global_person_id": "globalPersonId",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_natural_person_id": "legalNaturalPersonId",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const LegalNaturalPerson$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: z.nullable(z.lazy(() => BirthDate$outboundSchema)).optional(),
    citizenshipCountries: z.array(z.string()).optional(),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string().optional(),
    custodianEmployee: z.boolean().optional(),
    customerIdentificationId: z.string().optional(),
    deathDate: z.nullable(z.lazy(() => DeathDate$outboundSchema)).optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => Employment$outboundSchema)).optional(),
    familyName: z.string().optional(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: z.nullable(z.lazy(() => ForeignIdentification$outboundSchema)).optional(),
    givenName: z.string().optional(),
    globalPersonId: z.string().optional(),
    identityVerificationResult: z.nullable(z.lazy(() => LegalNaturalPersonIdentityVerificationResult$outboundSchema)).optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => LegalNaturalPersonLargeTrader$outboundSchema)).optional(),
    legalNaturalPersonId: z.string().optional(),
    maritalStatus: LegalNaturalPersonMaritalStatus$outboundSchema.optional(),
    middleNames: z.string().optional(),
    name: z.string().optional(),
    nameSuffix: LegalNaturalPersonNameSuffix$outboundSchema.optional(),
    naturalPersonFdd: z.nullable(z.lazy(() => NaturalPersonFdd$outboundSchema))
        .optional(),
    nonCitizenResidency: z.nullable(z.lazy(() => NonCitizenResidency$outboundSchema)).optional(),
    personalAddress: z.nullable(z.lazy(() => PersonalAddress$outboundSchema))
        .optional(),
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: LegalNaturalPersonTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => TaxProfile$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        custodianEmployee: "custodian_employee",
        customerIdentificationId: "customer_identification_id",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        globalPersonId: "global_person_id",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalNaturalPersonId: "legal_natural_person_id",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPerson$;
(function (LegalNaturalPerson$) {
    /** @deprecated use `LegalNaturalPerson$inboundSchema` instead. */
    LegalNaturalPerson$.inboundSchema = LegalNaturalPerson$inboundSchema;
    /** @deprecated use `LegalNaturalPerson$outboundSchema` instead. */
    LegalNaturalPerson$.outboundSchema = LegalNaturalPerson$outboundSchema;
})(LegalNaturalPerson$ || (LegalNaturalPerson$ = {}));
export function legalNaturalPersonToJSON(legalNaturalPerson) {
    return JSON.stringify(LegalNaturalPerson$outboundSchema.parse(legalNaturalPerson));
}
export function legalNaturalPersonFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPerson$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPerson' from JSON`);
}
//# sourceMappingURL=legalnaturalperson.js.map