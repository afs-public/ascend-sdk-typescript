/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateUpdate$inboundSchema, DateUpdate$outboundSchema, } from "./dateupdate.js";
/**
 * Identification type
 */
export var ForeignIdentificationUpdateType;
(function (ForeignIdentificationUpdateType) {
    ForeignIdentificationUpdateType["IdentificationTypeUnspecified"] = "IDENTIFICATION_TYPE_UNSPECIFIED";
    ForeignIdentificationUpdateType["Passport"] = "PASSPORT";
    ForeignIdentificationUpdateType["NationalId"] = "NATIONAL_ID";
    ForeignIdentificationUpdateType["DriversLicense"] = "DRIVERS_LICENSE";
})(ForeignIdentificationUpdateType || (ForeignIdentificationUpdateType = {}));
/** @internal */
export const ForeignIdentificationUpdateType$inboundSchema = z
    .union([
    z.nativeEnum(ForeignIdentificationUpdateType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ForeignIdentificationUpdateType$outboundSchema = z.union([
    z.nativeEnum(ForeignIdentificationUpdateType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignIdentificationUpdateType$;
(function (ForeignIdentificationUpdateType$) {
    /** @deprecated use `ForeignIdentificationUpdateType$inboundSchema` instead. */
    ForeignIdentificationUpdateType$.inboundSchema = ForeignIdentificationUpdateType$inboundSchema;
    /** @deprecated use `ForeignIdentificationUpdateType$outboundSchema` instead. */
    ForeignIdentificationUpdateType$.outboundSchema = ForeignIdentificationUpdateType$outboundSchema;
})(ForeignIdentificationUpdateType$ || (ForeignIdentificationUpdateType$ = {}));
/** @internal */
export const ForeignIdentificationUpdate$inboundSchema = z.object({
    expiration_date: DateUpdate$inboundSchema.optional(),
    ftin: z.boolean().optional(),
    identification_number: z.string().optional(),
    issue_date: DateUpdate$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    type: ForeignIdentificationUpdateType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "expiration_date": "expirationDate",
        "identification_number": "identificationNumber",
        "issue_date": "issueDate",
        "issuing_region_code": "issuingRegionCode",
    });
});
/** @internal */
export const ForeignIdentificationUpdate$outboundSchema = z.object({
    expirationDate: DateUpdate$outboundSchema.optional(),
    ftin: z.boolean().optional(),
    identificationNumber: z.string().optional(),
    issueDate: DateUpdate$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    type: ForeignIdentificationUpdateType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        expirationDate: "expiration_date",
        identificationNumber: "identification_number",
        issueDate: "issue_date",
        issuingRegionCode: "issuing_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignIdentificationUpdate$;
(function (ForeignIdentificationUpdate$) {
    /** @deprecated use `ForeignIdentificationUpdate$inboundSchema` instead. */
    ForeignIdentificationUpdate$.inboundSchema = ForeignIdentificationUpdate$inboundSchema;
    /** @deprecated use `ForeignIdentificationUpdate$outboundSchema` instead. */
    ForeignIdentificationUpdate$.outboundSchema = ForeignIdentificationUpdate$outboundSchema;
})(ForeignIdentificationUpdate$ || (ForeignIdentificationUpdate$ = {}));
export function foreignIdentificationUpdateToJSON(foreignIdentificationUpdate) {
    return JSON.stringify(ForeignIdentificationUpdate$outboundSchema.parse(foreignIdentificationUpdate));
}
export function foreignIdentificationUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignIdentificationUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignIdentificationUpdate' from JSON`);
}
//# sourceMappingURL=foreignidentificationupdate.js.map