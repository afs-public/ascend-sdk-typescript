/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const BasketCreate$inboundSchema = z.object({
    client_basket_id: z.string(),
    correspondent_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "client_basket_id": "clientBasketId",
        "correspondent_id": "correspondentId",
    });
});
/** @internal */
export const BasketCreate$outboundSchema = z.object({
    clientBasketId: z.string(),
    correspondentId: z.string(),
}).transform((v) => {
    return remap$(v, {
        clientBasketId: "client_basket_id",
        correspondentId: "correspondent_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketCreate$;
(function (BasketCreate$) {
    /** @deprecated use `BasketCreate$inboundSchema` instead. */
    BasketCreate$.inboundSchema = BasketCreate$inboundSchema;
    /** @deprecated use `BasketCreate$outboundSchema` instead. */
    BasketCreate$.outboundSchema = BasketCreate$outboundSchema;
})(BasketCreate$ || (BasketCreate$ = {}));
export function basketCreateToJSON(basketCreate) {
    return JSON.stringify(BasketCreate$outboundSchema.parse(basketCreate));
}
export function basketCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketCreate' from JSON`);
}
//# sourceMappingURL=basketcreate.js.map