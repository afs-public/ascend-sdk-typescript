/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AcatsAsset$inboundSchema, AcatsAsset$outboundSchema, } from "./acatsasset.js";
/**
 * The direction of the transfer
 */
export var AcatsTransferDirection;
(function (AcatsTransferDirection) {
    AcatsTransferDirection["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    AcatsTransferDirection["Outgoing"] = "OUTGOING";
    AcatsTransferDirection["Incoming"] = "INCOMING";
})(AcatsTransferDirection || (AcatsTransferDirection = {}));
/**
 * The NSCC transfer status
 */
export var NsccStatus;
(function (NsccStatus) {
    NsccStatus["NsccStatusUnspecified"] = "NSCC_STATUS_UNSPECIFIED";
    NsccStatus["Request"] = "REQUEST";
    NsccStatus["RequestAdjust"] = "REQUEST_ADJUST";
    NsccStatus["RequestAdjustPast"] = "REQUEST_ADJUST_PAST";
    NsccStatus["RequestPast"] = "REQUEST_PAST";
    NsccStatus["RequestReject"] = "REQUEST_REJECT";
    NsccStatus["Review"] = "REVIEW";
    NsccStatus["ReviewAdjustDeliverer"] = "REVIEW_ADJUST_DELIVERER";
    NsccStatus["ReviewError"] = "REVIEW_ERROR";
    NsccStatus["ReviewAccelerate"] = "REVIEW_ACCELERATE";
    NsccStatus["ReviewAdjustReceiverAccelerate"] = "REVIEW_ADJUST_RECEIVER_ACCELERATE";
    NsccStatus["SettlePrep"] = "SETTLE_PREP";
    NsccStatus["SettleClose"] = "SETTLE_CLOSE";
    NsccStatus["ClosePurge"] = "CLOSE_PURGE";
    NsccStatus["PartialRequest"] = "PARTIAL_REQUEST";
    NsccStatus["MemoPurgePartialTransferRequestReceiver"] = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER";
    NsccStatus["Reject"] = "REJECT";
    NsccStatus["SystemPurge"] = "SYSTEM_PURGE";
})(NsccStatus || (NsccStatus = {}));
/**
 * The reject code
 */
export var RejectCode;
(function (RejectCode) {
    RejectCode["RejectCodeUnspecified"] = "REJECT_CODE_UNSPECIFIED";
    RejectCode["RejectCodeSsnTaxIdMismatch"] = "REJECT_CODE_SSN_TAX_ID_MISMATCH";
    RejectCode["RejectCodeAccountTitleMismatch"] = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH";
    RejectCode["RejectCodeDocumentationNeeded"] = "REJECT_CODE_DOCUMENTATION_NEEDED";
    RejectCode["RejectCodeAccountFlat"] = "REJECT_CODE_ACCOUNT_FLAT";
    RejectCode["RejectCodeInvalidAccountNumber"] = "REJECT_CODE_INVALID_ACCOUNT_NUMBER";
    RejectCode["RejectCodeDuplicate"] = "REJECT_CODE_DUPLICATE";
    RejectCode["RejectCodeAccountInDistributionOrTransfer"] = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER";
    RejectCode["RejectCodeClientRescinded"] = "REJECT_CODE_CLIENT_RESCINDED";
    RejectCode["RejectCodeMissingAuthorizationSignature"] = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE";
    RejectCode["RejectCodeAccountViolatesCreditPolicyOfReceivingFirm"] = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM";
    RejectCode["RejectCodeUnrecognizedForResidualCreditBalance"] = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE";
    RejectCode["RejectCodePartialTransferDeliverer"] = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER";
    RejectCode["RejectCodeFailReversal"] = "REJECT_CODE_FAIL_REVERSAL";
    RejectCode["RejectCodeReclaim"] = "REJECT_CODE_RECLAIM";
    RejectCode["RejectCodeMutualFundCleanup"] = "REJECT_CODE_MUTUAL_FUND_CLEANUP";
})(RejectCode || (RejectCode = {}));
/**
 * The transfer state
 */
export var AcatsTransferState;
(function (AcatsTransferState) {
    AcatsTransferState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AcatsTransferState["Received"] = "RECEIVED";
    AcatsTransferState["Submitted"] = "SUBMITTED";
    AcatsTransferState["Rejected"] = "REJECTED";
    AcatsTransferState["PendingContraResponse"] = "PENDING_CONTRA_RESPONSE";
    AcatsTransferState["Error"] = "ERROR";
    AcatsTransferState["Accepted"] = "ACCEPTED";
    AcatsTransferState["PendingReview"] = "PENDING_REVIEW";
    AcatsTransferState["PendingRejection"] = "PENDING_REJECTION";
    AcatsTransferState["PendingSettlement"] = "PENDING_SETTLEMENT";
    AcatsTransferState["PendingBookkeeping"] = "PENDING_BOOKKEEPING";
    AcatsTransferState["Completed"] = "COMPLETED";
    AcatsTransferState["Purged"] = "PURGED";
})(AcatsTransferState || (AcatsTransferState = {}));
/**
 * The type of transfer
 */
export var TransferType;
(function (TransferType) {
    TransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    TransferType["FailReversalBrokerToBrokerOnly"] = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY";
    TransferType["FullTransfer"] = "FULL_TRANSFER";
    TransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    TransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    TransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    TransferType["PositionTransferFundFirmToMutualFundCompanyOnly"] = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY";
    TransferType["Reclaim"] = "RECLAIM";
    TransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
})(TransferType || (TransferType = {}));
/** @internal */
export const ExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const ExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalAccount$;
(function (ExternalAccount$) {
    /** @deprecated use `ExternalAccount$inboundSchema` instead. */
    ExternalAccount$.inboundSchema = ExternalAccount$inboundSchema;
    /** @deprecated use `ExternalAccount$outboundSchema` instead. */
    ExternalAccount$.outboundSchema = ExternalAccount$outboundSchema;
})(ExternalAccount$ || (ExternalAccount$ = {}));
export function externalAccountToJSON(externalAccount) {
    return JSON.stringify(ExternalAccount$outboundSchema.parse(externalAccount));
}
export function externalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExternalAccount' from JSON`);
}
/** @internal */
export const Deliverer$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => ExternalAccount$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const Deliverer$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => ExternalAccount$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Deliverer$;
(function (Deliverer$) {
    /** @deprecated use `Deliverer$inboundSchema` instead. */
    Deliverer$.inboundSchema = Deliverer$inboundSchema;
    /** @deprecated use `Deliverer$outboundSchema` instead. */
    Deliverer$.outboundSchema = Deliverer$outboundSchema;
})(Deliverer$ || (Deliverer$ = {}));
export function delivererToJSON(deliverer) {
    return JSON.stringify(Deliverer$outboundSchema.parse(deliverer));
}
export function delivererFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Deliverer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Deliverer' from JSON`);
}
/** @internal */
export const AcatsTransferDirection$inboundSchema = z
    .union([
    z.nativeEnum(AcatsTransferDirection),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcatsTransferDirection$outboundSchema = z.union([
    z.nativeEnum(AcatsTransferDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsTransferDirection$;
(function (AcatsTransferDirection$) {
    /** @deprecated use `AcatsTransferDirection$inboundSchema` instead. */
    AcatsTransferDirection$.inboundSchema = AcatsTransferDirection$inboundSchema;
    /** @deprecated use `AcatsTransferDirection$outboundSchema` instead. */
    AcatsTransferDirection$.outboundSchema = AcatsTransferDirection$outboundSchema;
})(AcatsTransferDirection$ || (AcatsTransferDirection$ = {}));
/** @internal */
export const NsccStatus$inboundSchema = z
    .union([
    z.nativeEnum(NsccStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const NsccStatus$outboundSchema = z.union([
    z.nativeEnum(NsccStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NsccStatus$;
(function (NsccStatus$) {
    /** @deprecated use `NsccStatus$inboundSchema` instead. */
    NsccStatus$.inboundSchema = NsccStatus$inboundSchema;
    /** @deprecated use `NsccStatus$outboundSchema` instead. */
    NsccStatus$.outboundSchema = NsccStatus$outboundSchema;
})(NsccStatus$ || (NsccStatus$ = {}));
/** @internal */
export const AcatsTransferExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const AcatsTransferExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsTransferExternalAccount$;
(function (AcatsTransferExternalAccount$) {
    /** @deprecated use `AcatsTransferExternalAccount$inboundSchema` instead. */
    AcatsTransferExternalAccount$.inboundSchema = AcatsTransferExternalAccount$inboundSchema;
    /** @deprecated use `AcatsTransferExternalAccount$outboundSchema` instead. */
    AcatsTransferExternalAccount$.outboundSchema = AcatsTransferExternalAccount$outboundSchema;
})(AcatsTransferExternalAccount$ || (AcatsTransferExternalAccount$ = {}));
export function acatsTransferExternalAccountToJSON(acatsTransferExternalAccount) {
    return JSON.stringify(AcatsTransferExternalAccount$outboundSchema.parse(acatsTransferExternalAccount));
}
export function acatsTransferExternalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsTransferExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsTransferExternalAccount' from JSON`);
}
/** @internal */
export const Receiver$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => AcatsTransferExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const Receiver$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => AcatsTransferExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Receiver$;
(function (Receiver$) {
    /** @deprecated use `Receiver$inboundSchema` instead. */
    Receiver$.inboundSchema = Receiver$inboundSchema;
    /** @deprecated use `Receiver$outboundSchema` instead. */
    Receiver$.outboundSchema = Receiver$outboundSchema;
})(Receiver$ || (Receiver$ = {}));
export function receiverToJSON(receiver) {
    return JSON.stringify(Receiver$outboundSchema.parse(receiver));
}
export function receiverFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Receiver$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Receiver' from JSON`);
}
/** @internal */
export const RejectCode$inboundSchema = z
    .union([
    z.nativeEnum(RejectCode),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectCode$outboundSchema = z.union([
    z.nativeEnum(RejectCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectCode$;
(function (RejectCode$) {
    /** @deprecated use `RejectCode$inboundSchema` instead. */
    RejectCode$.inboundSchema = RejectCode$inboundSchema;
    /** @deprecated use `RejectCode$outboundSchema` instead. */
    RejectCode$.outboundSchema = RejectCode$outboundSchema;
})(RejectCode$ || (RejectCode$ = {}));
/** @internal */
export const AcatsTransferState$inboundSchema = z
    .union([
    z.nativeEnum(AcatsTransferState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcatsTransferState$outboundSchema = z.union([
    z.nativeEnum(AcatsTransferState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsTransferState$;
(function (AcatsTransferState$) {
    /** @deprecated use `AcatsTransferState$inboundSchema` instead. */
    AcatsTransferState$.inboundSchema = AcatsTransferState$inboundSchema;
    /** @deprecated use `AcatsTransferState$outboundSchema` instead. */
    AcatsTransferState$.outboundSchema = AcatsTransferState$outboundSchema;
})(AcatsTransferState$ || (AcatsTransferState$ = {}));
/** @internal */
export const TransferType$inboundSchema = z
    .union([
    z.nativeEnum(TransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferType$outboundSchema = z.union([
    z.nativeEnum(TransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferType$;
(function (TransferType$) {
    /** @deprecated use `TransferType$inboundSchema` instead. */
    TransferType$.inboundSchema = TransferType$inboundSchema;
    /** @deprecated use `TransferType$outboundSchema` instead. */
    TransferType$.outboundSchema = TransferType$outboundSchema;
})(TransferType$ || (TransferType$ = {}));
/** @internal */
export const AcatsTransfer$inboundSchema = z.object({
    acat_control_number: z.string().optional(),
    assets: z.array(AcatsAsset$inboundSchema).optional(),
    comment: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deliverer: z.nullable(z.lazy(() => Deliverer$inboundSchema)).optional(),
    direction: AcatsTransferDirection$inboundSchema.optional(),
    name: z.string().optional(),
    nscc_status: NsccStatus$inboundSchema.optional(),
    original_control_number: z.string().optional(),
    receiver: z.nullable(z.lazy(() => Receiver$inboundSchema)).optional(),
    reject_code: RejectCode$inboundSchema.optional(),
    state: AcatsTransferState$inboundSchema.optional(),
    state_reason: z.string().optional(),
    transfer_type: TransferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "acat_control_number": "acatControlNumber",
        "create_time": "createTime",
        "nscc_status": "nsccStatus",
        "original_control_number": "originalControlNumber",
        "reject_code": "rejectCode",
        "state_reason": "stateReason",
        "transfer_type": "transferType",
    });
});
/** @internal */
export const AcatsTransfer$outboundSchema = z.object({
    acatControlNumber: z.string().optional(),
    assets: z.array(AcatsAsset$outboundSchema).optional(),
    comment: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deliverer: z.nullable(z.lazy(() => Deliverer$outboundSchema)).optional(),
    direction: AcatsTransferDirection$outboundSchema.optional(),
    name: z.string().optional(),
    nsccStatus: NsccStatus$outboundSchema.optional(),
    originalControlNumber: z.string().optional(),
    receiver: z.nullable(z.lazy(() => Receiver$outboundSchema)).optional(),
    rejectCode: RejectCode$outboundSchema.optional(),
    state: AcatsTransferState$outboundSchema.optional(),
    stateReason: z.string().optional(),
    transferType: TransferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        acatControlNumber: "acat_control_number",
        createTime: "create_time",
        nsccStatus: "nscc_status",
        originalControlNumber: "original_control_number",
        rejectCode: "reject_code",
        stateReason: "state_reason",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsTransfer$;
(function (AcatsTransfer$) {
    /** @deprecated use `AcatsTransfer$inboundSchema` instead. */
    AcatsTransfer$.inboundSchema = AcatsTransfer$inboundSchema;
    /** @deprecated use `AcatsTransfer$outboundSchema` instead. */
    AcatsTransfer$.outboundSchema = AcatsTransfer$outboundSchema;
})(AcatsTransfer$ || (AcatsTransfer$ = {}));
export function acatsTransferToJSON(acatsTransfer) {
    return JSON.stringify(AcatsTransfer$outboundSchema.parse(acatsTransfer));
}
export function acatsTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsTransfer' from JSON`);
}
//# sourceMappingURL=acatstransfer.js.map