/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
import { Execution$inboundSchema, Execution$outboundSchema, } from "./execution.js";
/**
 * Type of the asset being traded.
 */
export var CancelTradeResponseAssetType;
(function (CancelTradeResponseAssetType) {
    CancelTradeResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    CancelTradeResponseAssetType["Equity"] = "EQUITY";
    CancelTradeResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(CancelTradeResponseAssetType || (CancelTradeResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var CancelTradeResponseBrokerCapacity;
(function (CancelTradeResponseBrokerCapacity) {
    CancelTradeResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    CancelTradeResponseBrokerCapacity["Agency"] = "AGENCY";
    CancelTradeResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    CancelTradeResponseBrokerCapacity["Mixed"] = "MIXED";
})(CancelTradeResponseBrokerCapacity || (CancelTradeResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var CancelTradeResponseIdentifierType;
(function (CancelTradeResponseIdentifierType) {
    CancelTradeResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    CancelTradeResponseIdentifierType["AssetId"] = "ASSET_ID";
    CancelTradeResponseIdentifierType["Symbol"] = "SYMBOL";
    CancelTradeResponseIdentifierType["Cusip"] = "CUSIP";
    CancelTradeResponseIdentifierType["Isin"] = "ISIN";
})(CancelTradeResponseIdentifierType || (CancelTradeResponseIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var CancelTradeResponseRouteType;
(function (CancelTradeResponseRouteType) {
    CancelTradeResponseRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    CancelTradeResponseRouteType["Dma"] = "DMA";
    CancelTradeResponseRouteType["Mngd"] = "MNGD";
    CancelTradeResponseRouteType["Quik"] = "QUIK";
    CancelTradeResponseRouteType["Algo"] = "ALGO";
    CancelTradeResponseRouteType["Away"] = "AWAY";
    CancelTradeResponseRouteType["Corr"] = "CORR";
    CancelTradeResponseRouteType["Boats"] = "BOATS";
})(CancelTradeResponseRouteType || (CancelTradeResponseRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var CancelTradeResponseSide;
(function (CancelTradeResponseSide) {
    CancelTradeResponseSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    CancelTradeResponseSide["Buy"] = "BUY";
    CancelTradeResponseSide["Sell"] = "SELL";
})(CancelTradeResponseSide || (CancelTradeResponseSide = {}));
/**
 * Side modifier for the trade.
 */
export var CancelTradeResponseSideModifier;
(function (CancelTradeResponseSideModifier) {
    CancelTradeResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    CancelTradeResponseSideModifier["Short"] = "SHORT";
    CancelTradeResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    CancelTradeResponseSideModifier["ShortCover"] = "SHORT_COVER";
    CancelTradeResponseSideModifier["Open"] = "OPEN";
    CancelTradeResponseSideModifier["Close"] = "CLOSE";
})(CancelTradeResponseSideModifier || (CancelTradeResponseSideModifier = {}));
export var CancelTradeResponseSpecialInstructions;
(function (CancelTradeResponseSpecialInstructions) {
    CancelTradeResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    CancelTradeResponseSpecialInstructions["Rule144"] = "RULE_144";
    CancelTradeResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    CancelTradeResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    CancelTradeResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    CancelTradeResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    CancelTradeResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    CancelTradeResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    CancelTradeResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    CancelTradeResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    CancelTradeResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    CancelTradeResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    CancelTradeResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    CancelTradeResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    CancelTradeResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    CancelTradeResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    CancelTradeResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    CancelTradeResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    CancelTradeResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    CancelTradeResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    CancelTradeResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    CancelTradeResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    CancelTradeResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    CancelTradeResponseSpecialInstructions["Solicited"] = "SOLICITED";
    CancelTradeResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    CancelTradeResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    CancelTradeResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    CancelTradeResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    CancelTradeResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    CancelTradeResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    CancelTradeResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    CancelTradeResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    CancelTradeResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    CancelTradeResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    CancelTradeResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    CancelTradeResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    CancelTradeResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    CancelTradeResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    CancelTradeResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    CancelTradeResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    CancelTradeResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    CancelTradeResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    CancelTradeResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    CancelTradeResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    CancelTradeResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    CancelTradeResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    CancelTradeResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(CancelTradeResponseSpecialInstructions || (CancelTradeResponseSpecialInstructions = {}));
/**
 * Exchange venue
 */
export var CancelTradeResponseVenue;
(function (CancelTradeResponseVenue) {
    CancelTradeResponseVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    CancelTradeResponseVenue["Amex"] = "AMEX";
    CancelTradeResponseVenue["Arca"] = "ARCA";
    CancelTradeResponseVenue["Bats"] = "BATS";
    CancelTradeResponseVenue["BatsByx"] = "BATS_BYX";
    CancelTradeResponseVenue["Boston"] = "BOSTON";
    CancelTradeResponseVenue["Box"] = "BOX";
    CancelTradeResponseVenue["Bzx"] = "BZX";
    CancelTradeResponseVenue["C2"] = "C2";
    CancelTradeResponseVenue["Cboe"] = "CBOE";
    CancelTradeResponseVenue["Chicago"] = "CHICAGO";
    CancelTradeResponseVenue["Cincinnati"] = "CINCINNATI";
    CancelTradeResponseVenue["Edga"] = "EDGA";
    CancelTradeResponseVenue["Edgx"] = "EDGX";
    CancelTradeResponseVenue["Exclearing"] = "EXCLEARING";
    CancelTradeResponseVenue["Iex"] = "IEX";
    CancelTradeResponseVenue["Ise"] = "ISE";
    CancelTradeResponseVenue["IseGemini"] = "ISE_GEMINI";
    CancelTradeResponseVenue["Miax"] = "MIAX";
    CancelTradeResponseVenue["Nasdaq"] = "NASDAQ";
    CancelTradeResponseVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    CancelTradeResponseVenue["Nyse"] = "NYSE";
    CancelTradeResponseVenue["Phlx"] = "PHLX";
    CancelTradeResponseVenue["Otc"] = "OTC";
    CancelTradeResponseVenue["Qsr"] = "QSR";
})(CancelTradeResponseVenue || (CancelTradeResponseVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var CancelTradeResponseWhenIssued;
(function (CancelTradeResponseWhenIssued) {
    CancelTradeResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    CancelTradeResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    CancelTradeResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(CancelTradeResponseWhenIssued || (CancelTradeResponseWhenIssued = {}));
/** @internal */
export const CancelTradeResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseAssetType$;
(function (CancelTradeResponseAssetType$) {
    /** @deprecated use `CancelTradeResponseAssetType$inboundSchema` instead. */
    CancelTradeResponseAssetType$.inboundSchema = CancelTradeResponseAssetType$inboundSchema;
    /** @deprecated use `CancelTradeResponseAssetType$outboundSchema` instead. */
    CancelTradeResponseAssetType$.outboundSchema = CancelTradeResponseAssetType$outboundSchema;
})(CancelTradeResponseAssetType$ || (CancelTradeResponseAssetType$ = {}));
/** @internal */
export const CancelTradeResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseBrokerCapacity$;
(function (CancelTradeResponseBrokerCapacity$) {
    /** @deprecated use `CancelTradeResponseBrokerCapacity$inboundSchema` instead. */
    CancelTradeResponseBrokerCapacity$.inboundSchema = CancelTradeResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `CancelTradeResponseBrokerCapacity$outboundSchema` instead. */
    CancelTradeResponseBrokerCapacity$.outboundSchema = CancelTradeResponseBrokerCapacity$outboundSchema;
})(CancelTradeResponseBrokerCapacity$ || (CancelTradeResponseBrokerCapacity$ = {}));
/** @internal */
export const CancelTradeResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseIdentifierType$;
(function (CancelTradeResponseIdentifierType$) {
    /** @deprecated use `CancelTradeResponseIdentifierType$inboundSchema` instead. */
    CancelTradeResponseIdentifierType$.inboundSchema = CancelTradeResponseIdentifierType$inboundSchema;
    /** @deprecated use `CancelTradeResponseIdentifierType$outboundSchema` instead. */
    CancelTradeResponseIdentifierType$.outboundSchema = CancelTradeResponseIdentifierType$outboundSchema;
})(CancelTradeResponseIdentifierType$ || (CancelTradeResponseIdentifierType$ = {}));
/** @internal */
export const CancelTradeResponseLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CancelTradeResponseLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseLocalMarketTradeDate$;
(function (CancelTradeResponseLocalMarketTradeDate$) {
    /** @deprecated use `CancelTradeResponseLocalMarketTradeDate$inboundSchema` instead. */
    CancelTradeResponseLocalMarketTradeDate$.inboundSchema = CancelTradeResponseLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `CancelTradeResponseLocalMarketTradeDate$outboundSchema` instead. */
    CancelTradeResponseLocalMarketTradeDate$.outboundSchema = CancelTradeResponseLocalMarketTradeDate$outboundSchema;
})(CancelTradeResponseLocalMarketTradeDate$ || (CancelTradeResponseLocalMarketTradeDate$ = {}));
export function cancelTradeResponseLocalMarketTradeDateToJSON(cancelTradeResponseLocalMarketTradeDate) {
    return JSON.stringify(CancelTradeResponseLocalMarketTradeDate$outboundSchema.parse(cancelTradeResponseLocalMarketTradeDate));
}
export function cancelTradeResponseLocalMarketTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelTradeResponseLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseLocalMarketTradeDate' from JSON`);
}
/** @internal */
export const CancelTradeResponseRouteType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseRouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseRouteType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseRouteType$;
(function (CancelTradeResponseRouteType$) {
    /** @deprecated use `CancelTradeResponseRouteType$inboundSchema` instead. */
    CancelTradeResponseRouteType$.inboundSchema = CancelTradeResponseRouteType$inboundSchema;
    /** @deprecated use `CancelTradeResponseRouteType$outboundSchema` instead. */
    CancelTradeResponseRouteType$.outboundSchema = CancelTradeResponseRouteType$outboundSchema;
})(CancelTradeResponseRouteType$ || (CancelTradeResponseRouteType$ = {}));
/** @internal */
export const CancelTradeResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CancelTradeResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseSettlementDate$;
(function (CancelTradeResponseSettlementDate$) {
    /** @deprecated use `CancelTradeResponseSettlementDate$inboundSchema` instead. */
    CancelTradeResponseSettlementDate$.inboundSchema = CancelTradeResponseSettlementDate$inboundSchema;
    /** @deprecated use `CancelTradeResponseSettlementDate$outboundSchema` instead. */
    CancelTradeResponseSettlementDate$.outboundSchema = CancelTradeResponseSettlementDate$outboundSchema;
})(CancelTradeResponseSettlementDate$ || (CancelTradeResponseSettlementDate$ = {}));
export function cancelTradeResponseSettlementDateToJSON(cancelTradeResponseSettlementDate) {
    return JSON.stringify(CancelTradeResponseSettlementDate$outboundSchema.parse(cancelTradeResponseSettlementDate));
}
export function cancelTradeResponseSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelTradeResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseSettlementDate' from JSON`);
}
/** @internal */
export const CancelTradeResponseSide$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseSide$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseSide$;
(function (CancelTradeResponseSide$) {
    /** @deprecated use `CancelTradeResponseSide$inboundSchema` instead. */
    CancelTradeResponseSide$.inboundSchema = CancelTradeResponseSide$inboundSchema;
    /** @deprecated use `CancelTradeResponseSide$outboundSchema` instead. */
    CancelTradeResponseSide$.outboundSchema = CancelTradeResponseSide$outboundSchema;
})(CancelTradeResponseSide$ || (CancelTradeResponseSide$ = {}));
/** @internal */
export const CancelTradeResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseSideModifier$;
(function (CancelTradeResponseSideModifier$) {
    /** @deprecated use `CancelTradeResponseSideModifier$inboundSchema` instead. */
    CancelTradeResponseSideModifier$.inboundSchema = CancelTradeResponseSideModifier$inboundSchema;
    /** @deprecated use `CancelTradeResponseSideModifier$outboundSchema` instead. */
    CancelTradeResponseSideModifier$.outboundSchema = CancelTradeResponseSideModifier$outboundSchema;
})(CancelTradeResponseSideModifier$ || (CancelTradeResponseSideModifier$ = {}));
/** @internal */
export const CancelTradeResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseSpecialInstructions$;
(function (CancelTradeResponseSpecialInstructions$) {
    /** @deprecated use `CancelTradeResponseSpecialInstructions$inboundSchema` instead. */
    CancelTradeResponseSpecialInstructions$.inboundSchema = CancelTradeResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `CancelTradeResponseSpecialInstructions$outboundSchema` instead. */
    CancelTradeResponseSpecialInstructions$.outboundSchema = CancelTradeResponseSpecialInstructions$outboundSchema;
})(CancelTradeResponseSpecialInstructions$ || (CancelTradeResponseSpecialInstructions$ = {}));
/** @internal */
export const CancelTradeResponseVenue$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseVenue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseVenue$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseVenue$;
(function (CancelTradeResponseVenue$) {
    /** @deprecated use `CancelTradeResponseVenue$inboundSchema` instead. */
    CancelTradeResponseVenue$.inboundSchema = CancelTradeResponseVenue$inboundSchema;
    /** @deprecated use `CancelTradeResponseVenue$outboundSchema` instead. */
    CancelTradeResponseVenue$.outboundSchema = CancelTradeResponseVenue$outboundSchema;
})(CancelTradeResponseVenue$ || (CancelTradeResponseVenue$ = {}));
/** @internal */
export const CancelTradeResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelTradeResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseWhenIssued$;
(function (CancelTradeResponseWhenIssued$) {
    /** @deprecated use `CancelTradeResponseWhenIssued$inboundSchema` instead. */
    CancelTradeResponseWhenIssued$.inboundSchema = CancelTradeResponseWhenIssued$inboundSchema;
    /** @deprecated use `CancelTradeResponseWhenIssued$outboundSchema` instead. */
    CancelTradeResponseWhenIssued$.outboundSchema = CancelTradeResponseWhenIssued$outboundSchema;
})(CancelTradeResponseWhenIssued$ || (CancelTradeResponseWhenIssued$ = {}));
/** @internal */
export const CancelTradeResponseTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: CancelTradeResponseAssetType$inboundSchema.optional(),
    broker_capacity: CancelTradeResponseBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(Execution$inboundSchema).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: CancelTradeResponseIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => CancelTradeResponseLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: CancelTradeResponseRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => CancelTradeResponseSettlementDate$inboundSchema)).optional(),
    side: CancelTradeResponseSide$inboundSchema.optional(),
    side_modifier: CancelTradeResponseSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(CancelTradeResponseSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: CancelTradeResponseVenue$inboundSchema.optional(),
    when_issued: CancelTradeResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const CancelTradeResponseTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: CancelTradeResponseAssetType$outboundSchema.optional(),
    brokerCapacity: CancelTradeResponseBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(Execution$outboundSchema).optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: CancelTradeResponseIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => CancelTradeResponseLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: CancelTradeResponseRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => CancelTradeResponseSettlementDate$outboundSchema)).optional(),
    side: CancelTradeResponseSide$outboundSchema.optional(),
    sideModifier: CancelTradeResponseSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(CancelTradeResponseSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: CancelTradeResponseVenue$outboundSchema.optional(),
    whenIssued: CancelTradeResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponseTrade$;
(function (CancelTradeResponseTrade$) {
    /** @deprecated use `CancelTradeResponseTrade$inboundSchema` instead. */
    CancelTradeResponseTrade$.inboundSchema = CancelTradeResponseTrade$inboundSchema;
    /** @deprecated use `CancelTradeResponseTrade$outboundSchema` instead. */
    CancelTradeResponseTrade$.outboundSchema = CancelTradeResponseTrade$outboundSchema;
})(CancelTradeResponseTrade$ || (CancelTradeResponseTrade$ = {}));
export function cancelTradeResponseTradeToJSON(cancelTradeResponseTrade) {
    return JSON.stringify(CancelTradeResponseTrade$outboundSchema.parse(cancelTradeResponseTrade));
}
export function cancelTradeResponseTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelTradeResponseTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseTrade' from JSON`);
}
/** @internal */
export const CancelTradeResponse$inboundSchema = z.object({
    trade: z.nullable(z.lazy(() => CancelTradeResponseTrade$inboundSchema))
        .optional(),
});
/** @internal */
export const CancelTradeResponse$outboundSchema = z.object({
    trade: z.nullable(z.lazy(() => CancelTradeResponseTrade$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelTradeResponse$;
(function (CancelTradeResponse$) {
    /** @deprecated use `CancelTradeResponse$inboundSchema` instead. */
    CancelTradeResponse$.inboundSchema = CancelTradeResponse$inboundSchema;
    /** @deprecated use `CancelTradeResponse$outboundSchema` instead. */
    CancelTradeResponse$.outboundSchema = CancelTradeResponse$outboundSchema;
})(CancelTradeResponse$ || (CancelTradeResponse$ = {}));
export function cancelTradeResponseToJSON(cancelTradeResponse) {
    return JSON.stringify(CancelTradeResponse$outboundSchema.parse(cancelTradeResponse));
}
export function cancelTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponse' from JSON`);
}
//# sourceMappingURL=canceltraderesponse.js.map