"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelTradeResponse$ = exports.CancelTradeResponse$outboundSchema = exports.CancelTradeResponse$inboundSchema = exports.CancelTradeResponseTrade$ = exports.CancelTradeResponseTrade$outboundSchema = exports.CancelTradeResponseTrade$inboundSchema = exports.CancelTradeResponseWhenIssued$ = exports.CancelTradeResponseWhenIssued$outboundSchema = exports.CancelTradeResponseWhenIssued$inboundSchema = exports.CancelTradeResponseVenue$ = exports.CancelTradeResponseVenue$outboundSchema = exports.CancelTradeResponseVenue$inboundSchema = exports.CancelTradeResponseSpecialInstructions$ = exports.CancelTradeResponseSpecialInstructions$outboundSchema = exports.CancelTradeResponseSpecialInstructions$inboundSchema = exports.CancelTradeResponseSideModifier$ = exports.CancelTradeResponseSideModifier$outboundSchema = exports.CancelTradeResponseSideModifier$inboundSchema = exports.CancelTradeResponseSide$ = exports.CancelTradeResponseSide$outboundSchema = exports.CancelTradeResponseSide$inboundSchema = exports.CancelTradeResponseSettlementDate$ = exports.CancelTradeResponseSettlementDate$outboundSchema = exports.CancelTradeResponseSettlementDate$inboundSchema = exports.CancelTradeResponseRouteType$ = exports.CancelTradeResponseRouteType$outboundSchema = exports.CancelTradeResponseRouteType$inboundSchema = exports.CancelTradeResponseLocalMarketTradeDate$ = exports.CancelTradeResponseLocalMarketTradeDate$outboundSchema = exports.CancelTradeResponseLocalMarketTradeDate$inboundSchema = exports.CancelTradeResponseIdentifierType$ = exports.CancelTradeResponseIdentifierType$outboundSchema = exports.CancelTradeResponseIdentifierType$inboundSchema = exports.CancelTradeResponseBrokerCapacity$ = exports.CancelTradeResponseBrokerCapacity$outboundSchema = exports.CancelTradeResponseBrokerCapacity$inboundSchema = exports.CancelTradeResponseAssetType$ = exports.CancelTradeResponseAssetType$outboundSchema = exports.CancelTradeResponseAssetType$inboundSchema = exports.CancelTradeResponseWhenIssued = exports.CancelTradeResponseVenue = exports.CancelTradeResponseSpecialInstructions = exports.CancelTradeResponseSideModifier = exports.CancelTradeResponseSide = exports.CancelTradeResponseRouteType = exports.CancelTradeResponseIdentifierType = exports.CancelTradeResponseBrokerCapacity = exports.CancelTradeResponseAssetType = void 0;
exports.cancelTradeResponseLocalMarketTradeDateToJSON = cancelTradeResponseLocalMarketTradeDateToJSON;
exports.cancelTradeResponseLocalMarketTradeDateFromJSON = cancelTradeResponseLocalMarketTradeDateFromJSON;
exports.cancelTradeResponseSettlementDateToJSON = cancelTradeResponseSettlementDateToJSON;
exports.cancelTradeResponseSettlementDateFromJSON = cancelTradeResponseSettlementDateFromJSON;
exports.cancelTradeResponseTradeToJSON = cancelTradeResponseTradeToJSON;
exports.cancelTradeResponseTradeFromJSON = cancelTradeResponseTradeFromJSON;
exports.cancelTradeResponseToJSON = cancelTradeResponseToJSON;
exports.cancelTradeResponseFromJSON = cancelTradeResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
const bookingfee_js_1 = require("./bookingfee.js");
const bookinglot_js_1 = require("./bookinglot.js");
const execution_js_1 = require("./execution.js");
/**
 * Type of the asset being traded. Required for SYMBOL and CUSIP.
 */
var CancelTradeResponseAssetType;
(function (CancelTradeResponseAssetType) {
    CancelTradeResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    CancelTradeResponseAssetType["Equity"] = "EQUITY";
    CancelTradeResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(CancelTradeResponseAssetType || (exports.CancelTradeResponseAssetType = CancelTradeResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var CancelTradeResponseBrokerCapacity;
(function (CancelTradeResponseBrokerCapacity) {
    CancelTradeResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    CancelTradeResponseBrokerCapacity["Agency"] = "AGENCY";
    CancelTradeResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    CancelTradeResponseBrokerCapacity["Mixed"] = "MIXED";
})(CancelTradeResponseBrokerCapacity || (exports.CancelTradeResponseBrokerCapacity = CancelTradeResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var CancelTradeResponseIdentifierType;
(function (CancelTradeResponseIdentifierType) {
    CancelTradeResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    CancelTradeResponseIdentifierType["AssetId"] = "ASSET_ID";
    CancelTradeResponseIdentifierType["Symbol"] = "SYMBOL";
    CancelTradeResponseIdentifierType["Cusip"] = "CUSIP";
    CancelTradeResponseIdentifierType["Isin"] = "ISIN";
})(CancelTradeResponseIdentifierType || (exports.CancelTradeResponseIdentifierType = CancelTradeResponseIdentifierType = {}));
/**
 * Route type for the trade.
 */
var CancelTradeResponseRouteType;
(function (CancelTradeResponseRouteType) {
    CancelTradeResponseRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    CancelTradeResponseRouteType["Dma"] = "DMA";
    CancelTradeResponseRouteType["Mngd"] = "MNGD";
    CancelTradeResponseRouteType["Quik"] = "QUIK";
    CancelTradeResponseRouteType["Algo"] = "ALGO";
    CancelTradeResponseRouteType["Away"] = "AWAY";
    CancelTradeResponseRouteType["Corr"] = "CORR";
    CancelTradeResponseRouteType["Boats"] = "BOATS";
})(CancelTradeResponseRouteType || (exports.CancelTradeResponseRouteType = CancelTradeResponseRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
var CancelTradeResponseSide;
(function (CancelTradeResponseSide) {
    CancelTradeResponseSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    CancelTradeResponseSide["Buy"] = "BUY";
    CancelTradeResponseSide["Sell"] = "SELL";
})(CancelTradeResponseSide || (exports.CancelTradeResponseSide = CancelTradeResponseSide = {}));
/**
 * Side modifier for the trade.
 */
var CancelTradeResponseSideModifier;
(function (CancelTradeResponseSideModifier) {
    CancelTradeResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    CancelTradeResponseSideModifier["Short"] = "SHORT";
    CancelTradeResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    CancelTradeResponseSideModifier["ShortCover"] = "SHORT_COVER";
    CancelTradeResponseSideModifier["Open"] = "OPEN";
    CancelTradeResponseSideModifier["Close"] = "CLOSE";
})(CancelTradeResponseSideModifier || (exports.CancelTradeResponseSideModifier = CancelTradeResponseSideModifier = {}));
var CancelTradeResponseSpecialInstructions;
(function (CancelTradeResponseSpecialInstructions) {
    CancelTradeResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    CancelTradeResponseSpecialInstructions["Rule144"] = "RULE_144";
    CancelTradeResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    CancelTradeResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    CancelTradeResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    CancelTradeResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    CancelTradeResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    CancelTradeResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    CancelTradeResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    CancelTradeResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    CancelTradeResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    CancelTradeResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    CancelTradeResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    CancelTradeResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    CancelTradeResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    CancelTradeResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    CancelTradeResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    CancelTradeResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    CancelTradeResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    CancelTradeResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    CancelTradeResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    CancelTradeResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    CancelTradeResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    CancelTradeResponseSpecialInstructions["Solicited"] = "SOLICITED";
    CancelTradeResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    CancelTradeResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    CancelTradeResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    CancelTradeResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    CancelTradeResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    CancelTradeResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    CancelTradeResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    CancelTradeResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    CancelTradeResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    CancelTradeResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    CancelTradeResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    CancelTradeResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    CancelTradeResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    CancelTradeResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    CancelTradeResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    CancelTradeResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    CancelTradeResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    CancelTradeResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    CancelTradeResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    CancelTradeResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    CancelTradeResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    CancelTradeResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    CancelTradeResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(CancelTradeResponseSpecialInstructions || (exports.CancelTradeResponseSpecialInstructions = CancelTradeResponseSpecialInstructions = {}));
/**
 * Exchange venue
 */
var CancelTradeResponseVenue;
(function (CancelTradeResponseVenue) {
    CancelTradeResponseVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    CancelTradeResponseVenue["Amex"] = "AMEX";
    CancelTradeResponseVenue["Arca"] = "ARCA";
    CancelTradeResponseVenue["Bats"] = "BATS";
    CancelTradeResponseVenue["BatsByx"] = "BATS_BYX";
    CancelTradeResponseVenue["Boston"] = "BOSTON";
    CancelTradeResponseVenue["Box"] = "BOX";
    CancelTradeResponseVenue["Bzx"] = "BZX";
    CancelTradeResponseVenue["C2"] = "C2";
    CancelTradeResponseVenue["Cboe"] = "CBOE";
    CancelTradeResponseVenue["Chicago"] = "CHICAGO";
    CancelTradeResponseVenue["Cincinnati"] = "CINCINNATI";
    CancelTradeResponseVenue["Edga"] = "EDGA";
    CancelTradeResponseVenue["Edgx"] = "EDGX";
    CancelTradeResponseVenue["Exclearing"] = "EXCLEARING";
    CancelTradeResponseVenue["Iex"] = "IEX";
    CancelTradeResponseVenue["Ise"] = "ISE";
    CancelTradeResponseVenue["IseGemini"] = "ISE_GEMINI";
    CancelTradeResponseVenue["Miax"] = "MIAX";
    CancelTradeResponseVenue["Nasdaq"] = "NASDAQ";
    CancelTradeResponseVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    CancelTradeResponseVenue["Nyse"] = "NYSE";
    CancelTradeResponseVenue["Phlx"] = "PHLX";
    CancelTradeResponseVenue["Otc"] = "OTC";
    CancelTradeResponseVenue["Qsr"] = "QSR";
})(CancelTradeResponseVenue || (exports.CancelTradeResponseVenue = CancelTradeResponseVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
var CancelTradeResponseWhenIssued;
(function (CancelTradeResponseWhenIssued) {
    CancelTradeResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    CancelTradeResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    CancelTradeResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(CancelTradeResponseWhenIssued || (exports.CancelTradeResponseWhenIssued = CancelTradeResponseWhenIssued = {}));
/** @internal */
exports.CancelTradeResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseAssetType$;
(function (CancelTradeResponseAssetType$) {
    /** @deprecated use `CancelTradeResponseAssetType$inboundSchema` instead. */
    CancelTradeResponseAssetType$.inboundSchema = exports.CancelTradeResponseAssetType$inboundSchema;
    /** @deprecated use `CancelTradeResponseAssetType$outboundSchema` instead. */
    CancelTradeResponseAssetType$.outboundSchema = exports.CancelTradeResponseAssetType$outboundSchema;
})(CancelTradeResponseAssetType$ || (exports.CancelTradeResponseAssetType$ = CancelTradeResponseAssetType$ = {}));
/** @internal */
exports.CancelTradeResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseBrokerCapacity$;
(function (CancelTradeResponseBrokerCapacity$) {
    /** @deprecated use `CancelTradeResponseBrokerCapacity$inboundSchema` instead. */
    CancelTradeResponseBrokerCapacity$.inboundSchema = exports.CancelTradeResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `CancelTradeResponseBrokerCapacity$outboundSchema` instead. */
    CancelTradeResponseBrokerCapacity$.outboundSchema = exports.CancelTradeResponseBrokerCapacity$outboundSchema;
})(CancelTradeResponseBrokerCapacity$ || (exports.CancelTradeResponseBrokerCapacity$ = CancelTradeResponseBrokerCapacity$ = {}));
/** @internal */
exports.CancelTradeResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseIdentifierType$;
(function (CancelTradeResponseIdentifierType$) {
    /** @deprecated use `CancelTradeResponseIdentifierType$inboundSchema` instead. */
    CancelTradeResponseIdentifierType$.inboundSchema = exports.CancelTradeResponseIdentifierType$inboundSchema;
    /** @deprecated use `CancelTradeResponseIdentifierType$outboundSchema` instead. */
    CancelTradeResponseIdentifierType$.outboundSchema = exports.CancelTradeResponseIdentifierType$outboundSchema;
})(CancelTradeResponseIdentifierType$ || (exports.CancelTradeResponseIdentifierType$ = CancelTradeResponseIdentifierType$ = {}));
/** @internal */
exports.CancelTradeResponseLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.CancelTradeResponseLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseLocalMarketTradeDate$;
(function (CancelTradeResponseLocalMarketTradeDate$) {
    /** @deprecated use `CancelTradeResponseLocalMarketTradeDate$inboundSchema` instead. */
    CancelTradeResponseLocalMarketTradeDate$.inboundSchema = exports.CancelTradeResponseLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `CancelTradeResponseLocalMarketTradeDate$outboundSchema` instead. */
    CancelTradeResponseLocalMarketTradeDate$.outboundSchema = exports.CancelTradeResponseLocalMarketTradeDate$outboundSchema;
})(CancelTradeResponseLocalMarketTradeDate$ || (exports.CancelTradeResponseLocalMarketTradeDate$ = CancelTradeResponseLocalMarketTradeDate$ = {}));
function cancelTradeResponseLocalMarketTradeDateToJSON(cancelTradeResponseLocalMarketTradeDate) {
    return JSON.stringify(exports.CancelTradeResponseLocalMarketTradeDate$outboundSchema.parse(cancelTradeResponseLocalMarketTradeDate));
}
function cancelTradeResponseLocalMarketTradeDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CancelTradeResponseLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseLocalMarketTradeDate' from JSON`);
}
/** @internal */
exports.CancelTradeResponseRouteType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseRouteType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseRouteType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseRouteType$;
(function (CancelTradeResponseRouteType$) {
    /** @deprecated use `CancelTradeResponseRouteType$inboundSchema` instead. */
    CancelTradeResponseRouteType$.inboundSchema = exports.CancelTradeResponseRouteType$inboundSchema;
    /** @deprecated use `CancelTradeResponseRouteType$outboundSchema` instead. */
    CancelTradeResponseRouteType$.outboundSchema = exports.CancelTradeResponseRouteType$outboundSchema;
})(CancelTradeResponseRouteType$ || (exports.CancelTradeResponseRouteType$ = CancelTradeResponseRouteType$ = {}));
/** @internal */
exports.CancelTradeResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.CancelTradeResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseSettlementDate$;
(function (CancelTradeResponseSettlementDate$) {
    /** @deprecated use `CancelTradeResponseSettlementDate$inboundSchema` instead. */
    CancelTradeResponseSettlementDate$.inboundSchema = exports.CancelTradeResponseSettlementDate$inboundSchema;
    /** @deprecated use `CancelTradeResponseSettlementDate$outboundSchema` instead. */
    CancelTradeResponseSettlementDate$.outboundSchema = exports.CancelTradeResponseSettlementDate$outboundSchema;
})(CancelTradeResponseSettlementDate$ || (exports.CancelTradeResponseSettlementDate$ = CancelTradeResponseSettlementDate$ = {}));
function cancelTradeResponseSettlementDateToJSON(cancelTradeResponseSettlementDate) {
    return JSON.stringify(exports.CancelTradeResponseSettlementDate$outboundSchema.parse(cancelTradeResponseSettlementDate));
}
function cancelTradeResponseSettlementDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CancelTradeResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseSettlementDate' from JSON`);
}
/** @internal */
exports.CancelTradeResponseSide$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseSide$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseSide$;
(function (CancelTradeResponseSide$) {
    /** @deprecated use `CancelTradeResponseSide$inboundSchema` instead. */
    CancelTradeResponseSide$.inboundSchema = exports.CancelTradeResponseSide$inboundSchema;
    /** @deprecated use `CancelTradeResponseSide$outboundSchema` instead. */
    CancelTradeResponseSide$.outboundSchema = exports.CancelTradeResponseSide$outboundSchema;
})(CancelTradeResponseSide$ || (exports.CancelTradeResponseSide$ = CancelTradeResponseSide$ = {}));
/** @internal */
exports.CancelTradeResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseSideModifier$;
(function (CancelTradeResponseSideModifier$) {
    /** @deprecated use `CancelTradeResponseSideModifier$inboundSchema` instead. */
    CancelTradeResponseSideModifier$.inboundSchema = exports.CancelTradeResponseSideModifier$inboundSchema;
    /** @deprecated use `CancelTradeResponseSideModifier$outboundSchema` instead. */
    CancelTradeResponseSideModifier$.outboundSchema = exports.CancelTradeResponseSideModifier$outboundSchema;
})(CancelTradeResponseSideModifier$ || (exports.CancelTradeResponseSideModifier$ = CancelTradeResponseSideModifier$ = {}));
/** @internal */
exports.CancelTradeResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseSpecialInstructions$;
(function (CancelTradeResponseSpecialInstructions$) {
    /** @deprecated use `CancelTradeResponseSpecialInstructions$inboundSchema` instead. */
    CancelTradeResponseSpecialInstructions$.inboundSchema = exports.CancelTradeResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `CancelTradeResponseSpecialInstructions$outboundSchema` instead. */
    CancelTradeResponseSpecialInstructions$.outboundSchema = exports.CancelTradeResponseSpecialInstructions$outboundSchema;
})(CancelTradeResponseSpecialInstructions$ || (exports.CancelTradeResponseSpecialInstructions$ = CancelTradeResponseSpecialInstructions$ = {}));
/** @internal */
exports.CancelTradeResponseVenue$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseVenue),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseVenue$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseVenue$;
(function (CancelTradeResponseVenue$) {
    /** @deprecated use `CancelTradeResponseVenue$inboundSchema` instead. */
    CancelTradeResponseVenue$.inboundSchema = exports.CancelTradeResponseVenue$inboundSchema;
    /** @deprecated use `CancelTradeResponseVenue$outboundSchema` instead. */
    CancelTradeResponseVenue$.outboundSchema = exports.CancelTradeResponseVenue$outboundSchema;
})(CancelTradeResponseVenue$ || (exports.CancelTradeResponseVenue$ = CancelTradeResponseVenue$ = {}));
/** @internal */
exports.CancelTradeResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeResponseWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(CancelTradeResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseWhenIssued$;
(function (CancelTradeResponseWhenIssued$) {
    /** @deprecated use `CancelTradeResponseWhenIssued$inboundSchema` instead. */
    CancelTradeResponseWhenIssued$.inboundSchema = exports.CancelTradeResponseWhenIssued$inboundSchema;
    /** @deprecated use `CancelTradeResponseWhenIssued$outboundSchema` instead. */
    CancelTradeResponseWhenIssued$.outboundSchema = exports.CancelTradeResponseWhenIssued$outboundSchema;
})(CancelTradeResponseWhenIssued$ || (exports.CancelTradeResponseWhenIssued$ = CancelTradeResponseWhenIssued$ = {}));
/** @internal */
exports.CancelTradeResponseTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: exports.CancelTradeResponseAssetType$inboundSchema.optional(),
    broker_capacity: exports.CancelTradeResponseBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$inboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.CancelTradeResponseIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => exports.CancelTradeResponseLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(bookinglot_js_1.BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: exports.CancelTradeResponseRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => exports.CancelTradeResponseSettlementDate$inboundSchema)).optional(),
    side: exports.CancelTradeResponseSide$inboundSchema.optional(),
    side_modifier: exports.CancelTradeResponseSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(exports.CancelTradeResponseSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: exports.CancelTradeResponseVenue$inboundSchema.optional(),
    when_issued: exports.CancelTradeResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.CancelTradeResponseTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: exports.CancelTradeResponseAssetType$outboundSchema.optional(),
    brokerCapacity: exports.CancelTradeResponseBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$outboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: exports.CancelTradeResponseIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => exports.CancelTradeResponseLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(bookinglot_js_1.BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: exports.CancelTradeResponseRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => exports.CancelTradeResponseSettlementDate$outboundSchema)).optional(),
    side: exports.CancelTradeResponseSide$outboundSchema.optional(),
    sideModifier: exports.CancelTradeResponseSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(exports.CancelTradeResponseSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: exports.CancelTradeResponseVenue$outboundSchema.optional(),
    whenIssued: exports.CancelTradeResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponseTrade$;
(function (CancelTradeResponseTrade$) {
    /** @deprecated use `CancelTradeResponseTrade$inboundSchema` instead. */
    CancelTradeResponseTrade$.inboundSchema = exports.CancelTradeResponseTrade$inboundSchema;
    /** @deprecated use `CancelTradeResponseTrade$outboundSchema` instead. */
    CancelTradeResponseTrade$.outboundSchema = exports.CancelTradeResponseTrade$outboundSchema;
})(CancelTradeResponseTrade$ || (exports.CancelTradeResponseTrade$ = CancelTradeResponseTrade$ = {}));
function cancelTradeResponseTradeToJSON(cancelTradeResponseTrade) {
    return JSON.stringify(exports.CancelTradeResponseTrade$outboundSchema.parse(cancelTradeResponseTrade));
}
function cancelTradeResponseTradeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CancelTradeResponseTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponseTrade' from JSON`);
}
/** @internal */
exports.CancelTradeResponse$inboundSchema = z.object({
    trade: z.nullable(z.lazy(() => exports.CancelTradeResponseTrade$inboundSchema))
        .optional(),
});
/** @internal */
exports.CancelTradeResponse$outboundSchema = z.object({
    trade: z.nullable(z.lazy(() => exports.CancelTradeResponseTrade$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeResponse$;
(function (CancelTradeResponse$) {
    /** @deprecated use `CancelTradeResponse$inboundSchema` instead. */
    CancelTradeResponse$.inboundSchema = exports.CancelTradeResponse$inboundSchema;
    /** @deprecated use `CancelTradeResponse$outboundSchema` instead. */
    CancelTradeResponse$.outboundSchema = exports.CancelTradeResponse$outboundSchema;
})(CancelTradeResponse$ || (exports.CancelTradeResponse$ = CancelTradeResponse$ = {}));
function cancelTradeResponseToJSON(cancelTradeResponse) {
    return JSON.stringify(exports.CancelTradeResponse$outboundSchema.parse(cancelTradeResponse));
}
function cancelTradeResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CancelTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelTradeResponse' from JSON`);
}
//# sourceMappingURL=canceltraderesponse.js.map