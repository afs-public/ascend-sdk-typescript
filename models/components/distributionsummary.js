/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const DistributionSummaryRegularAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const DistributionSummaryRegularAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionSummaryRegularAmount$;
(function (DistributionSummaryRegularAmount$) {
    /** @deprecated use `DistributionSummaryRegularAmount$inboundSchema` instead. */
    DistributionSummaryRegularAmount$.inboundSchema = DistributionSummaryRegularAmount$inboundSchema;
    /** @deprecated use `DistributionSummaryRegularAmount$outboundSchema` instead. */
    DistributionSummaryRegularAmount$.outboundSchema = DistributionSummaryRegularAmount$outboundSchema;
})(DistributionSummaryRegularAmount$ || (DistributionSummaryRegularAmount$ = {}));
export function distributionSummaryRegularAmountToJSON(distributionSummaryRegularAmount) {
    return JSON.stringify(DistributionSummaryRegularAmount$outboundSchema.parse(distributionSummaryRegularAmount));
}
export function distributionSummaryRegularAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionSummaryRegularAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionSummaryRegularAmount' from JSON`);
}
/** @internal */
export const DistributionSummaryAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const DistributionSummaryAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionSummaryAmount$;
(function (DistributionSummaryAmount$) {
    /** @deprecated use `DistributionSummaryAmount$inboundSchema` instead. */
    DistributionSummaryAmount$.inboundSchema = DistributionSummaryAmount$inboundSchema;
    /** @deprecated use `DistributionSummaryAmount$outboundSchema` instead. */
    DistributionSummaryAmount$.outboundSchema = DistributionSummaryAmount$outboundSchema;
})(DistributionSummaryAmount$ || (DistributionSummaryAmount$ = {}));
export function distributionSummaryAmountToJSON(distributionSummaryAmount) {
    return JSON.stringify(DistributionSummaryAmount$outboundSchema.parse(distributionSummaryAmount));
}
export function distributionSummaryAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionSummaryAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionSummaryAmount' from JSON`);
}
/** @internal */
export const LifeExpectancyFactor$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const LifeExpectancyFactor$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LifeExpectancyFactor$;
(function (LifeExpectancyFactor$) {
    /** @deprecated use `LifeExpectancyFactor$inboundSchema` instead. */
    LifeExpectancyFactor$.inboundSchema = LifeExpectancyFactor$inboundSchema;
    /** @deprecated use `LifeExpectancyFactor$outboundSchema` instead. */
    LifeExpectancyFactor$.outboundSchema = LifeExpectancyFactor$outboundSchema;
})(LifeExpectancyFactor$ || (LifeExpectancyFactor$ = {}));
export function lifeExpectancyFactorToJSON(lifeExpectancyFactor) {
    return JSON.stringify(LifeExpectancyFactor$outboundSchema.parse(lifeExpectancyFactor));
}
export function lifeExpectancyFactorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LifeExpectancyFactor$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LifeExpectancyFactor' from JSON`);
}
/** @internal */
export const PriorYearEndAccountBalance$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PriorYearEndAccountBalance$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PriorYearEndAccountBalance$;
(function (PriorYearEndAccountBalance$) {
    /** @deprecated use `PriorYearEndAccountBalance$inboundSchema` instead. */
    PriorYearEndAccountBalance$.inboundSchema = PriorYearEndAccountBalance$inboundSchema;
    /** @deprecated use `PriorYearEndAccountBalance$outboundSchema` instead. */
    PriorYearEndAccountBalance$.outboundSchema = PriorYearEndAccountBalance$outboundSchema;
})(PriorYearEndAccountBalance$ || (PriorYearEndAccountBalance$ = {}));
export function priorYearEndAccountBalanceToJSON(priorYearEndAccountBalance) {
    return JSON.stringify(PriorYearEndAccountBalance$outboundSchema.parse(priorYearEndAccountBalance));
}
export function priorYearEndAccountBalanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PriorYearEndAccountBalance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PriorYearEndAccountBalance' from JSON`);
}
/** @internal */
export const RemainingDistributionRequired$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RemainingDistributionRequired$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemainingDistributionRequired$;
(function (RemainingDistributionRequired$) {
    /** @deprecated use `RemainingDistributionRequired$inboundSchema` instead. */
    RemainingDistributionRequired$.inboundSchema = RemainingDistributionRequired$inboundSchema;
    /** @deprecated use `RemainingDistributionRequired$outboundSchema` instead. */
    RemainingDistributionRequired$.outboundSchema = RemainingDistributionRequired$outboundSchema;
})(RemainingDistributionRequired$ || (RemainingDistributionRequired$ = {}));
export function remainingDistributionRequiredToJSON(remainingDistributionRequired) {
    return JSON.stringify(RemainingDistributionRequired$outboundSchema.parse(remainingDistributionRequired));
}
export function remainingDistributionRequiredFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemainingDistributionRequired$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemainingDistributionRequired' from JSON`);
}
/** @internal */
export const RequiredMinimumDistribution$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => DistributionSummaryAmount$inboundSchema))
        .optional(),
    life_expectancy_factor: z.nullable(z.lazy(() => LifeExpectancyFactor$inboundSchema)).optional(),
    prior_year_end_account_balance: z.nullable(z.lazy(() => PriorYearEndAccountBalance$inboundSchema)).optional(),
    remaining_distribution_required: z.nullable(z.lazy(() => RemainingDistributionRequired$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "life_expectancy_factor": "lifeExpectancyFactor",
        "prior_year_end_account_balance": "priorYearEndAccountBalance",
        "remaining_distribution_required": "remainingDistributionRequired",
    });
});
/** @internal */
export const RequiredMinimumDistribution$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => DistributionSummaryAmount$outboundSchema))
        .optional(),
    lifeExpectancyFactor: z.nullable(z.lazy(() => LifeExpectancyFactor$outboundSchema)).optional(),
    priorYearEndAccountBalance: z.nullable(z.lazy(() => PriorYearEndAccountBalance$outboundSchema)).optional(),
    remainingDistributionRequired: z.nullable(z.lazy(() => RemainingDistributionRequired$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        lifeExpectancyFactor: "life_expectancy_factor",
        priorYearEndAccountBalance: "prior_year_end_account_balance",
        remainingDistributionRequired: "remaining_distribution_required",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequiredMinimumDistribution$;
(function (RequiredMinimumDistribution$) {
    /** @deprecated use `RequiredMinimumDistribution$inboundSchema` instead. */
    RequiredMinimumDistribution$.inboundSchema = RequiredMinimumDistribution$inboundSchema;
    /** @deprecated use `RequiredMinimumDistribution$outboundSchema` instead. */
    RequiredMinimumDistribution$.outboundSchema = RequiredMinimumDistribution$outboundSchema;
})(RequiredMinimumDistribution$ || (RequiredMinimumDistribution$ = {}));
export function requiredMinimumDistributionToJSON(requiredMinimumDistribution) {
    return JSON.stringify(RequiredMinimumDistribution$outboundSchema.parse(requiredMinimumDistribution));
}
export function requiredMinimumDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequiredMinimumDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequiredMinimumDistribution' from JSON`);
}
/** @internal */
export const DistributionSummaryRolloverAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const DistributionSummaryRolloverAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionSummaryRolloverAmount$;
(function (DistributionSummaryRolloverAmount$) {
    /** @deprecated use `DistributionSummaryRolloverAmount$inboundSchema` instead. */
    DistributionSummaryRolloverAmount$.inboundSchema = DistributionSummaryRolloverAmount$inboundSchema;
    /** @deprecated use `DistributionSummaryRolloverAmount$outboundSchema` instead. */
    DistributionSummaryRolloverAmount$.outboundSchema = DistributionSummaryRolloverAmount$outboundSchema;
})(DistributionSummaryRolloverAmount$ || (DistributionSummaryRolloverAmount$ = {}));
export function distributionSummaryRolloverAmountToJSON(distributionSummaryRolloverAmount) {
    return JSON.stringify(DistributionSummaryRolloverAmount$outboundSchema.parse(distributionSummaryRolloverAmount));
}
export function distributionSummaryRolloverAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionSummaryRolloverAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionSummaryRolloverAmount' from JSON`);
}
/** @internal */
export const DistributionSummary$inboundSchema = z.object({
    name: z.string().optional(),
    regular_amount: z.nullable(z.lazy(() => DistributionSummaryRegularAmount$inboundSchema)).optional(),
    required_minimum_distribution: z.nullable(z.lazy(() => RequiredMinimumDistribution$inboundSchema)).optional(),
    rollover_amount: z.nullable(z.lazy(() => DistributionSummaryRolloverAmount$inboundSchema)).optional(),
    tax_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "regular_amount": "regularAmount",
        "required_minimum_distribution": "requiredMinimumDistribution",
        "rollover_amount": "rolloverAmount",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const DistributionSummary$outboundSchema = z.object({
    name: z.string().optional(),
    regularAmount: z.nullable(z.lazy(() => DistributionSummaryRegularAmount$outboundSchema)).optional(),
    requiredMinimumDistribution: z.nullable(z.lazy(() => RequiredMinimumDistribution$outboundSchema)).optional(),
    rolloverAmount: z.nullable(z.lazy(() => DistributionSummaryRolloverAmount$outboundSchema)).optional(),
    taxYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        regularAmount: "regular_amount",
        requiredMinimumDistribution: "required_minimum_distribution",
        rolloverAmount: "rollover_amount",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DistributionSummary$;
(function (DistributionSummary$) {
    /** @deprecated use `DistributionSummary$inboundSchema` instead. */
    DistributionSummary$.inboundSchema = DistributionSummary$inboundSchema;
    /** @deprecated use `DistributionSummary$outboundSchema` instead. */
    DistributionSummary$.outboundSchema = DistributionSummary$outboundSchema;
})(DistributionSummary$ || (DistributionSummary$ = {}));
export function distributionSummaryToJSON(distributionSummary) {
    return JSON.stringify(DistributionSummary$outboundSchema.parse(distributionSummary));
}
export function distributionSummaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DistributionSummary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DistributionSummary' from JSON`);
}
//# sourceMappingURL=distributionsummary.js.map