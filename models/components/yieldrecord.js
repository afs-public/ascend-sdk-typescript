/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Characterization of a yield percentage
 */
export var YieldRecordYieldType;
(function (YieldRecordYieldType) {
    YieldRecordYieldType["YieldTypeUnspecified"] = "YIELD_TYPE_UNSPECIFIED";
    YieldRecordYieldType["YieldToCall"] = "YIELD_TO_CALL";
    YieldRecordYieldType["YieldToMaturity"] = "YIELD_TO_MATURITY";
    YieldRecordYieldType["YieldToPut"] = "YIELD_TO_PUT";
    YieldRecordYieldType["YieldToWorst"] = "YIELD_TO_WORST";
})(YieldRecordYieldType || (YieldRecordYieldType = {}));
/** @internal */
export const YieldPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const YieldPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var YieldPercent$;
(function (YieldPercent$) {
    /** @deprecated use `YieldPercent$inboundSchema` instead. */
    YieldPercent$.inboundSchema = YieldPercent$inboundSchema;
    /** @deprecated use `YieldPercent$outboundSchema` instead. */
    YieldPercent$.outboundSchema = YieldPercent$outboundSchema;
})(YieldPercent$ || (YieldPercent$ = {}));
export function yieldPercentToJSON(yieldPercent) {
    return JSON.stringify(YieldPercent$outboundSchema.parse(yieldPercent));
}
export function yieldPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => YieldPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'YieldPercent' from JSON`);
}
/** @internal */
export const YieldRecordYieldType$inboundSchema = z
    .union([
    z.nativeEnum(YieldRecordYieldType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const YieldRecordYieldType$outboundSchema = z.union([
    z.nativeEnum(YieldRecordYieldType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var YieldRecordYieldType$;
(function (YieldRecordYieldType$) {
    /** @deprecated use `YieldRecordYieldType$inboundSchema` instead. */
    YieldRecordYieldType$.inboundSchema = YieldRecordYieldType$inboundSchema;
    /** @deprecated use `YieldRecordYieldType$outboundSchema` instead. */
    YieldRecordYieldType$.outboundSchema = YieldRecordYieldType$outboundSchema;
})(YieldRecordYieldType$ || (YieldRecordYieldType$ = {}));
/** @internal */
export const YieldRecord$inboundSchema = z.object({
    yield_percent: z.nullable(z.lazy(() => YieldPercent$inboundSchema))
        .optional(),
    yield_type: YieldRecordYieldType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "yield_percent": "yieldPercent",
        "yield_type": "yieldType",
    });
});
/** @internal */
export const YieldRecord$outboundSchema = z.object({
    yieldPercent: z.nullable(z.lazy(() => YieldPercent$outboundSchema))
        .optional(),
    yieldType: YieldRecordYieldType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        yieldPercent: "yield_percent",
        yieldType: "yield_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var YieldRecord$;
(function (YieldRecord$) {
    /** @deprecated use `YieldRecord$inboundSchema` instead. */
    YieldRecord$.inboundSchema = YieldRecord$inboundSchema;
    /** @deprecated use `YieldRecord$outboundSchema` instead. */
    YieldRecord$.outboundSchema = YieldRecord$outboundSchema;
})(YieldRecord$ || (YieldRecord$ = {}));
export function yieldRecordToJSON(yieldRecord) {
    return JSON.stringify(YieldRecord$outboundSchema.parse(yieldRecord));
}
export function yieldRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => YieldRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'YieldRecord' from JSON`);
}
//# sourceMappingURL=yieldrecord.js.map