/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CommissionAmount1$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CommissionAmount1$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CommissionAmount1$;
(function (CommissionAmount1$) {
    /** @deprecated use `CommissionAmount1$inboundSchema` instead. */
    CommissionAmount1$.inboundSchema = CommissionAmount1$inboundSchema;
    /** @deprecated use `CommissionAmount1$outboundSchema` instead. */
    CommissionAmount1$.outboundSchema = CommissionAmount1$outboundSchema;
})(CommissionAmount1$ || (CommissionAmount1$ = {}));
export function commissionAmount1ToJSON(commissionAmount1) {
    return JSON.stringify(CommissionAmount1$outboundSchema.parse(commissionAmount1));
}
export function commissionAmount1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CommissionAmount1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CommissionAmount1' from JSON`);
}
/** @internal */
export const Commission$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CommissionAmount1$inboundSchema)).optional(),
});
/** @internal */
export const Commission$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CommissionAmount1$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Commission$;
(function (Commission$) {
    /** @deprecated use `Commission$inboundSchema` instead. */
    Commission$.inboundSchema = Commission$inboundSchema;
    /** @deprecated use `Commission$outboundSchema` instead. */
    Commission$.outboundSchema = Commission$outboundSchema;
})(Commission$ || (Commission$ = {}));
export function commissionToJSON(commission) {
    return JSON.stringify(Commission$outboundSchema.parse(commission));
}
export function commissionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Commission$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Commission' from JSON`);
}
//# sourceMappingURL=commission.js.map