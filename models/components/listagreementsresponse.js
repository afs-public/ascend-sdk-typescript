/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Agreement$inboundSchema, Agreement$outboundSchema, } from "./agreement.js";
/** @internal */
export const ListAgreementsResponse$inboundSchema = z.object({
    agreements: z.array(Agreement$inboundSchema).optional(),
    next_page_token: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "next_page_token": "nextPageToken",
    });
});
/** @internal */
export const ListAgreementsResponse$outboundSchema = z.object({
    agreements: z.array(Agreement$outboundSchema).optional(),
    nextPageToken: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        nextPageToken: "next_page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAgreementsResponse$;
(function (ListAgreementsResponse$) {
    /** @deprecated use `ListAgreementsResponse$inboundSchema` instead. */
    ListAgreementsResponse$.inboundSchema = ListAgreementsResponse$inboundSchema;
    /** @deprecated use `ListAgreementsResponse$outboundSchema` instead. */
    ListAgreementsResponse$.outboundSchema = ListAgreementsResponse$outboundSchema;
})(ListAgreementsResponse$ || (ListAgreementsResponse$ = {}));
export function listAgreementsResponseToJSON(listAgreementsResponse) {
    return JSON.stringify(ListAgreementsResponse$outboundSchema.parse(listAgreementsResponse));
}
export function listAgreementsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAgreementsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAgreementsResponse' from JSON`);
}
//# sourceMappingURL=listagreementsresponse.js.map