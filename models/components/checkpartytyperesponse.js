/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Whether the cash journal is considered first party or third party
 */
export var CheckPartyTypeResponsePartyType;
(function (CheckPartyTypeResponsePartyType) {
    CheckPartyTypeResponsePartyType["PartyTypeUnspecified"] = "PARTY_TYPE_UNSPECIFIED";
    CheckPartyTypeResponsePartyType["FirstParty"] = "FIRST_PARTY";
    CheckPartyTypeResponsePartyType["ThirdParty"] = "THIRD_PARTY";
})(CheckPartyTypeResponsePartyType || (CheckPartyTypeResponsePartyType = {}));
/** @internal */
export const CheckPartyTypeResponsePartyType$inboundSchema = z
    .union([
    z.nativeEnum(CheckPartyTypeResponsePartyType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CheckPartyTypeResponsePartyType$outboundSchema = z.union([
    z.nativeEnum(CheckPartyTypeResponsePartyType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckPartyTypeResponsePartyType$;
(function (CheckPartyTypeResponsePartyType$) {
    /** @deprecated use `CheckPartyTypeResponsePartyType$inboundSchema` instead. */
    CheckPartyTypeResponsePartyType$.inboundSchema = CheckPartyTypeResponsePartyType$inboundSchema;
    /** @deprecated use `CheckPartyTypeResponsePartyType$outboundSchema` instead. */
    CheckPartyTypeResponsePartyType$.outboundSchema = CheckPartyTypeResponsePartyType$outboundSchema;
})(CheckPartyTypeResponsePartyType$ || (CheckPartyTypeResponsePartyType$ = {}));
/** @internal */
export const CheckPartyTypeResponse$inboundSchema = z.object({
    party_type: CheckPartyTypeResponsePartyType$inboundSchema.optional(),
    reason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "party_type": "partyType",
    });
});
/** @internal */
export const CheckPartyTypeResponse$outboundSchema = z.object({
    partyType: CheckPartyTypeResponsePartyType$outboundSchema.optional(),
    reason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        partyType: "party_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckPartyTypeResponse$;
(function (CheckPartyTypeResponse$) {
    /** @deprecated use `CheckPartyTypeResponse$inboundSchema` instead. */
    CheckPartyTypeResponse$.inboundSchema = CheckPartyTypeResponse$inboundSchema;
    /** @deprecated use `CheckPartyTypeResponse$outboundSchema` instead. */
    CheckPartyTypeResponse$.outboundSchema = CheckPartyTypeResponse$outboundSchema;
})(CheckPartyTypeResponse$ || (CheckPartyTypeResponse$ = {}));
export function checkPartyTypeResponseToJSON(checkPartyTypeResponse) {
    return JSON.stringify(CheckPartyTypeResponse$outboundSchema.parse(checkPartyTypeResponse));
}
export function checkPartyTypeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckPartyTypeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckPartyTypeResponse' from JSON`);
}
//# sourceMappingURL=checkpartytyperesponse.js.map