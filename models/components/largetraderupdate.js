/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DateUpdate$inboundSchema, DateUpdate$outboundSchema, } from "./dateupdate.js";
/** @internal */
export const LargeTraderUpdate$inboundSchema = z.object({
    effective_date: DateUpdate$inboundSchema.optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const LargeTraderUpdate$outboundSchema = z.object({
    effectiveDate: DateUpdate$outboundSchema.optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LargeTraderUpdate$;
(function (LargeTraderUpdate$) {
    /** @deprecated use `LargeTraderUpdate$inboundSchema` instead. */
    LargeTraderUpdate$.inboundSchema = LargeTraderUpdate$inboundSchema;
    /** @deprecated use `LargeTraderUpdate$outboundSchema` instead. */
    LargeTraderUpdate$.outboundSchema = LargeTraderUpdate$outboundSchema;
})(LargeTraderUpdate$ || (LargeTraderUpdate$ = {}));
export function largeTraderUpdateToJSON(largeTraderUpdate) {
    return JSON.stringify(LargeTraderUpdate$outboundSchema.parse(largeTraderUpdate));
}
export function largeTraderUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LargeTraderUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LargeTraderUpdate' from JSON`);
}
//# sourceMappingURL=largetraderupdate.js.map