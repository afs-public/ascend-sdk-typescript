/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AccruedInterest$inboundSchema, AccruedInterest$outboundSchema, } from "./accruedinterest.js";
import { Commission$inboundSchema, Commission$outboundSchema, } from "./commission.js";
import { Fee$inboundSchema, Fee$outboundSchema, } from "./fee.js";
import { Lot$inboundSchema, Lot$outboundSchema, } from "./lot.js";
import { Withholding$inboundSchema, Withholding$outboundSchema, } from "./withholding.js";
import { WithholdingData$inboundSchema, WithholdingData$outboundSchema, } from "./withholdingdata.js";
import { YieldRecord$inboundSchema, YieldRecord$outboundSchema, } from "./yieldrecord.js";
/**
 * Indicates the memo location impacted by an entry
 */
export var ActivityAccountMemo;
(function (ActivityAccountMemo) {
    ActivityAccountMemo["MemoTypeUnspecified"] = "MEMO_TYPE_UNSPECIFIED";
    ActivityAccountMemo["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    ActivityAccountMemo["Free"] = "FREE";
    ActivityAccountMemo["PendingOutgoingAcat"] = "PENDING_OUTGOING_ACAT";
    ActivityAccountMemo["PendingDrip"] = "PENDING_DRIP";
    ActivityAccountMemo["PendingWithdrawal"] = "PENDING_WITHDRAWAL";
})(ActivityAccountMemo || (ActivityAccountMemo = {}));
/**
 * The type of asset movement being performed within the lifecycle of an account transfer process
 */
export var ActivityAccountTransferType;
(function (ActivityAccountTransferType) {
    ActivityAccountTransferType["AccountTransferTypeUnspecified"] = "ACCOUNT_TRANSFER_TYPE_UNSPECIFIED";
    ActivityAccountTransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    ActivityAccountTransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    ActivityAccountTransferType["FullAccountTransfer"] = "FULL_ACCOUNT_TRANSFER";
    ActivityAccountTransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
    ActivityAccountTransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    ActivityAccountTransferType["FailReversal"] = "FAIL_REVERSAL";
    ActivityAccountTransferType["Reclaim"] = "RECLAIM";
    ActivityAccountTransferType["PositionTransferFund"] = "POSITION_TRANSFER_FUND";
    ActivityAccountTransferType["SponsoredTransfer"] = "SPONSORED_TRANSFER";
})(ActivityAccountTransferType || (ActivityAccountTransferType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityAction;
(function (ActivityAction) {
    ActivityAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityAction["Incoming"] = "INCOMING";
    ActivityAction["Outgoing"] = "OUTGOING";
    ActivityAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityAction || (ActivityAction = {}));
/**
 * The method used for the account transfer
 */
export var ActivityMethod;
(function (ActivityMethod) {
    ActivityMethod["AccountTransferMethodUnspecified"] = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED";
    ActivityMethod["Acats"] = "ACATS";
    ActivityMethod["Internal"] = "INTERNAL";
    ActivityMethod["Manual"] = "MANUAL";
})(ActivityMethod || (ActivityMethod = {}));
/**
 * The execution route Apex used for this trade
 */
export var ActivityBrokerCapacity;
(function (ActivityBrokerCapacity) {
    ActivityBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    ActivityBrokerCapacity["Agency"] = "AGENCY";
    ActivityBrokerCapacity["Principal"] = "PRINCIPAL";
    ActivityBrokerCapacity["Mixed"] = "MIXED";
})(ActivityBrokerCapacity || (ActivityBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export var ActivityPriceAdjustmentType;
(function (ActivityPriceAdjustmentType) {
    ActivityPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    ActivityPriceAdjustmentType["Markup"] = "MARKUP";
    ActivityPriceAdjustmentType["Markdown"] = "MARKDOWN";
    ActivityPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(ActivityPriceAdjustmentType || (ActivityPriceAdjustmentType = {}));
/**
 * The subtype for the corporate action event
 */
export var ActivitySubtype;
(function (ActivitySubtype) {
    ActivitySubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivitySubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivitySubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivitySubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivitySubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivitySubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivitySubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivitySubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivitySubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivitySubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivitySubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivitySubtype["GrossRate"] = "GROSS_RATE";
    ActivitySubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivitySubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivitySubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivitySubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivitySubtype["Liquidation"] = "LIQUIDATION";
    ActivitySubtype["NetRate"] = "NET_RATE";
    ActivitySubtype["Other"] = "OTHER";
    ActivitySubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivitySubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivitySubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivitySubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivitySubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivitySubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivitySubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["Partial"] = "PARTIAL";
    ActivitySubtype["Full"] = "FULL";
    ActivitySubtype["Maturity"] = "MATURITY";
    ActivitySubtype["Termination"] = "TERMINATION";
    ActivitySubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    ActivitySubtype["InterimPayment"] = "INTERIM_PAYMENT";
    ActivitySubtype["FinalPayment"] = "FINAL_PAYMENT";
})(ActivitySubtype || (ActivitySubtype = {}));
/**
 * The subtype for the corporate action event
 */
export var ActivityConversionType;
(function (ActivityConversionType) {
    ActivityConversionType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityConversionType["Cash"] = "CASH";
    ActivityConversionType["Stock"] = "STOCK";
    ActivityConversionType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityConversionType || (ActivityConversionType = {}));
/**
 * Further detail describing the type of credit
 */
export var ActivityCreditType;
(function (ActivityCreditType) {
    ActivityCreditType["CreditTypeUnspecified"] = "CREDIT_TYPE_UNSPECIFIED";
    ActivityCreditType["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    ActivityCreditType["WriteOff"] = "WRITE_OFF";
    ActivityCreditType["Reimbursement"] = "REIMBURSEMENT";
    ActivityCreditType["Promotional"] = "PROMOTIONAL";
    ActivityCreditType["FdicInsuredDepositProgram"] = "FDIC_INSURED_DEPOSIT_PROGRAM";
    ActivityCreditType["AccountTransferAdjustment"] = "ACCOUNT_TRANSFER_ADJUSTMENT";
})(ActivityCreditType || (ActivityCreditType = {}));
/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
export var ActivityContributionType;
(function (ActivityContributionType) {
    ActivityContributionType["ContributionTypeUnspecified"] = "CONTRIBUTION_TYPE_UNSPECIFIED";
    ActivityContributionType["Regular"] = "REGULAR";
    ActivityContributionType["Employee"] = "EMPLOYEE";
    ActivityContributionType["Employer"] = "EMPLOYER";
    ActivityContributionType["Recharacterization"] = "RECHARACTERIZATION";
    ActivityContributionType["Rollover60Day"] = "ROLLOVER_60_DAY";
    ActivityContributionType["RolloverDirect"] = "ROLLOVER_DIRECT";
    ActivityContributionType["Transfer"] = "TRANSFER";
    ActivityContributionType["TrusteeFee"] = "TRUSTEE_FEE";
    ActivityContributionType["Conversion"] = "CONVERSION";
    ActivityContributionType["Repayment"] = "REPAYMENT";
    ActivityContributionType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(ActivityContributionType || (ActivityContributionType = {}));
/**
 * The mechanism by which funds were deposited
 */
export var ActivityDepositType;
(function (ActivityDepositType) {
    ActivityDepositType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    ActivityDepositType["Ach"] = "ACH";
    ActivityDepositType["Check"] = "CHECK";
    ActivityDepositType["Wire"] = "WIRE";
    ActivityDepositType["Paypal"] = "PAYPAL";
    ActivityDepositType["Rtp"] = "RTP";
    ActivityDepositType["Ict"] = "ICT";
    ActivityDepositType["Journal"] = "JOURNAL";
    ActivityDepositType["ExternalAch"] = "EXTERNAL_ACH";
})(ActivityDepositType || (ActivityDepositType = {}));
/**
 * Denotes whether the reinvestment is pending or complete
 */
export var ActivityDripAction;
(function (ActivityDripAction) {
    ActivityDripAction["DripActionUnspecified"] = "DRIP_ACTION_UNSPECIFIED";
    ActivityDripAction["DripPending"] = "DRIP_PENDING";
    ActivityDripAction["DripComplete"] = "DRIP_COMPLETE";
})(ActivityDripAction || (ActivityDripAction = {}));
/**
 * Indicates whether the merger was for cash, stock, or both
 */
export var ActivityExchangeType;
(function (ActivityExchangeType) {
    ActivityExchangeType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityExchangeType["Cash"] = "CASH";
    ActivityExchangeType["Stock"] = "STOCK";
    ActivityExchangeType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityExchangeType || (ActivityExchangeType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityFpslAction;
(function (ActivityFpslAction) {
    ActivityFpslAction["FpslActionUnspecified"] = "FPSL_ACTION_UNSPECIFIED";
    ActivityFpslAction["Allocate"] = "ALLOCATE";
    ActivityFpslAction["Deallocate"] = "DEALLOCATE";
})(ActivityFpslAction || (ActivityFpslAction = {}));
export var ActivityInterestType;
(function (ActivityInterestType) {
    ActivityInterestType["InterestTypeUnspecified"] = "INTEREST_TYPE_UNSPECIFIED";
    ActivityInterestType["Credit"] = "CREDIT";
    ActivityInterestType["Debit"] = "DEBIT";
})(ActivityInterestType || (ActivityInterestType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityLiquidationAction;
(function (ActivityLiquidationAction) {
    ActivityLiquidationAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityLiquidationAction["Incoming"] = "INCOMING";
    ActivityLiquidationAction["Outgoing"] = "OUTGOING";
    ActivityLiquidationAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityLiquidationAction || (ActivityLiquidationAction = {}));
/**
 * The subtype for the corporate action event
 */
export var ActivityLiquidationSubtype;
(function (ActivityLiquidationSubtype) {
    ActivityLiquidationSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivityLiquidationSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivityLiquidationSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivityLiquidationSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivityLiquidationSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivityLiquidationSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivityLiquidationSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivityLiquidationSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivityLiquidationSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityLiquidationSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivityLiquidationSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivityLiquidationSubtype["GrossRate"] = "GROSS_RATE";
    ActivityLiquidationSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivityLiquidationSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivityLiquidationSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivityLiquidationSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivityLiquidationSubtype["Liquidation"] = "LIQUIDATION";
    ActivityLiquidationSubtype["NetRate"] = "NET_RATE";
    ActivityLiquidationSubtype["Other"] = "OTHER";
    ActivityLiquidationSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivityLiquidationSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivityLiquidationSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivityLiquidationSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityLiquidationSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivityLiquidationSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivityLiquidationSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["Partial"] = "PARTIAL";
    ActivityLiquidationSubtype["Full"] = "FULL";
    ActivityLiquidationSubtype["Maturity"] = "MATURITY";
    ActivityLiquidationSubtype["Termination"] = "TERMINATION";
    ActivityLiquidationSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    ActivityLiquidationSubtype["InterimPayment"] = "INTERIM_PAYMENT";
    ActivityLiquidationSubtype["FinalPayment"] = "FINAL_PAYMENT";
})(ActivityLiquidationSubtype || (ActivityLiquidationSubtype = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityMergerAction;
(function (ActivityMergerAction) {
    ActivityMergerAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityMergerAction["Incoming"] = "INCOMING";
    ActivityMergerAction["Outgoing"] = "OUTGOING";
    ActivityMergerAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityMergerAction || (ActivityMergerAction = {}));
/**
 * The subtype for the corporate action event
 */
export var ActivityMergerType;
(function (ActivityMergerType) {
    ActivityMergerType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityMergerType["Cash"] = "CASH";
    ActivityMergerType["Stock"] = "STOCK";
    ActivityMergerType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityMergerType || (ActivityMergerType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityNameChangeAction;
(function (ActivityNameChangeAction) {
    ActivityNameChangeAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityNameChangeAction["Incoming"] = "INCOMING";
    ActivityNameChangeAction["Outgoing"] = "OUTGOING";
    ActivityNameChangeAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityNameChangeAction || (ActivityNameChangeAction = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityRedemptionFullAction;
(function (ActivityRedemptionFullAction) {
    ActivityRedemptionFullAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityRedemptionFullAction["Incoming"] = "INCOMING";
    ActivityRedemptionFullAction["Outgoing"] = "OUTGOING";
    ActivityRedemptionFullAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityRedemptionFullAction || (ActivityRedemptionFullAction = {}));
/**
 * The subtype for the corporate action event
 */
export var ActivityRedemptionFullSubtype;
(function (ActivityRedemptionFullSubtype) {
    ActivityRedemptionFullSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivityRedemptionFullSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivityRedemptionFullSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivityRedemptionFullSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivityRedemptionFullSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivityRedemptionFullSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivityRedemptionFullSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivityRedemptionFullSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivityRedemptionFullSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityRedemptionFullSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivityRedemptionFullSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivityRedemptionFullSubtype["GrossRate"] = "GROSS_RATE";
    ActivityRedemptionFullSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivityRedemptionFullSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivityRedemptionFullSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivityRedemptionFullSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivityRedemptionFullSubtype["Liquidation"] = "LIQUIDATION";
    ActivityRedemptionFullSubtype["NetRate"] = "NET_RATE";
    ActivityRedemptionFullSubtype["Other"] = "OTHER";
    ActivityRedemptionFullSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivityRedemptionFullSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivityRedemptionFullSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivityRedemptionFullSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityRedemptionFullSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivityRedemptionFullSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivityRedemptionFullSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["Partial"] = "PARTIAL";
    ActivityRedemptionFullSubtype["Full"] = "FULL";
    ActivityRedemptionFullSubtype["Maturity"] = "MATURITY";
    ActivityRedemptionFullSubtype["Termination"] = "TERMINATION";
    ActivityRedemptionFullSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
    ActivityRedemptionFullSubtype["InterimPayment"] = "INTERIM_PAYMENT";
    ActivityRedemptionFullSubtype["FinalPayment"] = "FINAL_PAYMENT";
})(ActivityRedemptionFullSubtype || (ActivityRedemptionFullSubtype = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export var ActivityRedemptionPartialAction;
(function (ActivityRedemptionPartialAction) {
    ActivityRedemptionPartialAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityRedemptionPartialAction["Incoming"] = "INCOMING";
    ActivityRedemptionPartialAction["Outgoing"] = "OUTGOING";
    ActivityRedemptionPartialAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityRedemptionPartialAction || (ActivityRedemptionPartialAction = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
export var ActivityReverseStockSplitAction;
(function (ActivityReverseStockSplitAction) {
    ActivityReverseStockSplitAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityReverseStockSplitAction["Incoming"] = "INCOMING";
    ActivityReverseStockSplitAction["Outgoing"] = "OUTGOING";
    ActivityReverseStockSplitAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityReverseStockSplitAction || (ActivityReverseStockSplitAction = {}));
/**
 * Denotes whether the trade is a buy or sell
 */
export var ActivitySide;
(function (ActivitySide) {
    ActivitySide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    ActivitySide["Buy"] = "BUY";
    ActivitySide["Sell"] = "SELL";
})(ActivitySide || (ActivitySide = {}));
/**
 * Indicates whether the trade is opening a new position or closing an existing position
 */
export var ActivitySideModifier;
(function (ActivitySideModifier) {
    ActivitySideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    ActivitySideModifier["Short"] = "SHORT";
    ActivitySideModifier["ShortExempt"] = "SHORT_EXEMPT";
    ActivitySideModifier["ShortCover"] = "SHORT_COVER";
    ActivitySideModifier["Open"] = "OPEN";
    ActivitySideModifier["Close"] = "CLOSE";
})(ActivitySideModifier || (ActivitySideModifier = {}));
/**
 * The state of the activity
 */
export var ActivityState;
(function (ActivityState) {
    ActivityState["ActivityStateUnspecified"] = "ACTIVITY_STATE_UNSPECIFIED";
    ActivityState["Pending"] = "PENDING";
    ActivityState["Current"] = "CURRENT";
    ActivityState["Canceled"] = "CANCELED";
    ActivityState["Rebooked"] = "REBOOKED";
    ActivityState["Rebook"] = "REBOOK";
    ActivityState["Cancel"] = "CANCEL";
})(ActivityState || (ActivityState = {}));
/**
 * Indicates purchase or redemption of the sweep asset
 */
export var ActivitySweepAction;
(function (ActivitySweepAction) {
    ActivitySweepAction["SweepActionUnspecified"] = "SWEEP_ACTION_UNSPECIFIED";
    ActivitySweepAction["Purchase"] = "PURCHASE";
    ActivitySweepAction["Redemption"] = "REDEMPTION";
})(ActivitySweepAction || (ActivitySweepAction = {}));
/**
 * Sweep program that cash is being swept to/ from
 */
export var ActivitySweepType;
(function (ActivitySweepType) {
    ActivitySweepType["SweepTypeUnspecified"] = "SWEEP_TYPE_UNSPECIFIED";
    ActivitySweepType["Fdic"] = "FDIC";
    ActivitySweepType["MoneyMarket"] = "MONEY_MARKET";
})(ActivitySweepType || (ActivitySweepType = {}));
/**
 * the type of tender offer
 */
export var ActivityTenderOfferType;
(function (ActivityTenderOfferType) {
    ActivityTenderOfferType["TenderOfferTypeUnspecified"] = "TENDER_OFFER_TYPE_UNSPECIFIED";
    ActivityTenderOfferType["OddLotTender"] = "ODD_LOT_TENDER";
    ActivityTenderOfferType["DutchAuction"] = "DUTCH_AUCTION";
})(ActivityTenderOfferType || (ActivityTenderOfferType = {}));
/**
 * Used to calculate broadridge blotter code
 */
export var ActivityTradeBrokerCapacity;
(function (ActivityTradeBrokerCapacity) {
    ActivityTradeBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    ActivityTradeBrokerCapacity["Agency"] = "AGENCY";
    ActivityTradeBrokerCapacity["Principal"] = "PRINCIPAL";
    ActivityTradeBrokerCapacity["Mixed"] = "MIXED";
})(ActivityTradeBrokerCapacity || (ActivityTradeBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export var ActivityTradePriceAdjustmentType;
(function (ActivityTradePriceAdjustmentType) {
    ActivityTradePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    ActivityTradePriceAdjustmentType["Markup"] = "MARKUP";
    ActivityTradePriceAdjustmentType["Markdown"] = "MARKDOWN";
    ActivityTradePriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(ActivityTradePriceAdjustmentType || (ActivityTradePriceAdjustmentType = {}));
/**
 * Provides more granular detail on the purpose of transfer
 */
export var ActivityTransferType;
(function (ActivityTransferType) {
    ActivityTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    ActivityTransferType["TransferConversion"] = "TRANSFER_CONVERSION";
    ActivityTransferType["Deconversion"] = "DECONVERSION";
    ActivityTransferType["Migration"] = "MIGRATION";
    ActivityTransferType["ManualAdjustment"] = "MANUAL_ADJUSTMENT";
    ActivityTransferType["InternalConversion"] = "INTERNAL_CONVERSION";
})(ActivityTransferType || (ActivityTransferType = {}));
/**
 * The type of activity this is
 */
export var ActivityType;
(function (ActivityType) {
    ActivityType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    ActivityType["Trade"] = "TRADE";
    ActivityType["Movement"] = "MOVEMENT";
    ActivityType["Memo"] = "MEMO";
    ActivityType["CorporateAction"] = "CORPORATE_ACTION";
})(ActivityType || (ActivityType = {}));
/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
export var ActivityDistributionType;
(function (ActivityDistributionType) {
    ActivityDistributionType["DistributionTypeUnspecified"] = "DISTRIBUTION_TYPE_UNSPECIFIED";
    ActivityDistributionType["Premature"] = "PREMATURE";
    ActivityDistributionType["Disability"] = "DISABILITY";
    ActivityDistributionType["Death"] = "DEATH";
    ActivityDistributionType["Normal"] = "NORMAL";
    ActivityDistributionType["Sosepp"] = "SOSEPP";
    ActivityDistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    ActivityDistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    ActivityDistributionType["DistTransfer"] = "DIST_TRANSFER";
    ActivityDistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    ActivityDistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    ActivityDistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    ActivityDistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    ActivityDistributionType["DistConversion"] = "DIST_CONVERSION";
    ActivityDistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    ActivityDistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    ActivityDistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    ActivityDistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    ActivityDistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    ActivityDistributionType["Revocation"] = "REVOCATION";
    ActivityDistributionType["NonReportable"] = "NON_REPORTABLE";
})(ActivityDistributionType || (ActivityDistributionType = {}));
/**
 * The type of retirement account the withdrawal is being made from
 */
export var ActivityRetirementType;
(function (ActivityRetirementType) {
    ActivityRetirementType["RetirementTypeUnspecified"] = "RETIREMENT_TYPE_UNSPECIFIED";
    ActivityRetirementType["Ira"] = "IRA";
    ActivityRetirementType["Sep"] = "SEP";
    ActivityRetirementType["Simple"] = "SIMPLE";
    ActivityRetirementType["Keogh"] = "KEOGH";
    ActivityRetirementType["Roth"] = "ROTH";
    ActivityRetirementType["Qp"] = "QP";
    ActivityRetirementType["RolloverIra"] = "ROLLOVER_IRA";
})(ActivityRetirementType || (ActivityRetirementType = {}));
/**
 * The mechanism by which the funds will be withdrawn
 */
export var ActivityWithdrawalType;
(function (ActivityWithdrawalType) {
    ActivityWithdrawalType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    ActivityWithdrawalType["Ach"] = "ACH";
    ActivityWithdrawalType["Check"] = "CHECK";
    ActivityWithdrawalType["Wire"] = "WIRE";
    ActivityWithdrawalType["Paypal"] = "PAYPAL";
    ActivityWithdrawalType["Rtp"] = "RTP";
    ActivityWithdrawalType["Ict"] = "ICT";
    ActivityWithdrawalType["Journal"] = "JOURNAL";
    ActivityWithdrawalType["ExternalAch"] = "EXTERNAL_ACH";
})(ActivityWithdrawalType || (ActivityWithdrawalType = {}));
/**
 * Denotes whether the withdrawal is pending or complete
 */
export var ActivityReview;
(function (ActivityReview) {
    ActivityReview["ReviewStateUnspecified"] = "REVIEW_STATE_UNSPECIFIED";
    ActivityReview["ReviewStatePending"] = "REVIEW_STATE_PENDING";
    ActivityReview["ReviewStateComplete"] = "REVIEW_STATE_COMPLETE";
})(ActivityReview || (ActivityReview = {}));
/** @internal */
export const ActivityAcatsPendingOut$inboundSchema = z.object({
    acats_control_number: z.string().optional(),
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
export const ActivityAcatsPendingOut$outboundSchema = z.object({
    acatsControlNumber: z.string().optional(),
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAcatsPendingOut$;
(function (ActivityAcatsPendingOut$) {
    /** @deprecated use `ActivityAcatsPendingOut$inboundSchema` instead. */
    ActivityAcatsPendingOut$.inboundSchema = ActivityAcatsPendingOut$inboundSchema;
    /** @deprecated use `ActivityAcatsPendingOut$outboundSchema` instead. */
    ActivityAcatsPendingOut$.outboundSchema = ActivityAcatsPendingOut$outboundSchema;
})(ActivityAcatsPendingOut$ || (ActivityAcatsPendingOut$ = {}));
export function activityAcatsPendingOutToJSON(activityAcatsPendingOut) {
    return JSON.stringify(ActivityAcatsPendingOut$outboundSchema.parse(activityAcatsPendingOut));
}
export function activityAcatsPendingOutFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityAcatsPendingOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityAcatsPendingOut' from JSON`);
}
/** @internal */
export const ActivityAccountMemo$inboundSchema = z
    .union([
    z.nativeEnum(ActivityAccountMemo),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityAccountMemo$outboundSchema = z.union([
    z.nativeEnum(ActivityAccountMemo),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAccountMemo$;
(function (ActivityAccountMemo$) {
    /** @deprecated use `ActivityAccountMemo$inboundSchema` instead. */
    ActivityAccountMemo$.inboundSchema = ActivityAccountMemo$inboundSchema;
    /** @deprecated use `ActivityAccountMemo$outboundSchema` instead. */
    ActivityAccountMemo$.outboundSchema = ActivityAccountMemo$outboundSchema;
})(ActivityAccountMemo$ || (ActivityAccountMemo$ = {}));
/** @internal */
export const ActivityAccountTransferType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityAccountTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityAccountTransferType$outboundSchema = z.union([
    z.nativeEnum(ActivityAccountTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAccountTransferType$;
(function (ActivityAccountTransferType$) {
    /** @deprecated use `ActivityAccountTransferType$inboundSchema` instead. */
    ActivityAccountTransferType$.inboundSchema = ActivityAccountTransferType$inboundSchema;
    /** @deprecated use `ActivityAccountTransferType$outboundSchema` instead. */
    ActivityAccountTransferType$.outboundSchema = ActivityAccountTransferType$outboundSchema;
})(ActivityAccountTransferType$ || (ActivityAccountTransferType$ = {}));
/** @internal */
export const ActivityAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityAction$outboundSchema = z.union([
    z.nativeEnum(ActivityAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAction$;
(function (ActivityAction$) {
    /** @deprecated use `ActivityAction$inboundSchema` instead. */
    ActivityAction$.inboundSchema = ActivityAction$inboundSchema;
    /** @deprecated use `ActivityAction$outboundSchema` instead. */
    ActivityAction$.outboundSchema = ActivityAction$outboundSchema;
})(ActivityAction$ || (ActivityAction$ = {}));
/** @internal */
export const ActivityFairMarketValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityFairMarketValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFairMarketValue$;
(function (ActivityFairMarketValue$) {
    /** @deprecated use `ActivityFairMarketValue$inboundSchema` instead. */
    ActivityFairMarketValue$.inboundSchema = ActivityFairMarketValue$inboundSchema;
    /** @deprecated use `ActivityFairMarketValue$outboundSchema` instead. */
    ActivityFairMarketValue$.outboundSchema = ActivityFairMarketValue$outboundSchema;
})(ActivityFairMarketValue$ || (ActivityFairMarketValue$ = {}));
export function activityFairMarketValueToJSON(activityFairMarketValue) {
    return JSON.stringify(ActivityFairMarketValue$outboundSchema.parse(activityFairMarketValue));
}
export function activityFairMarketValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFairMarketValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFairMarketValue' from JSON`);
}
/** @internal */
export const ActivityFairMarketValueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityFairMarketValueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFairMarketValueDate$;
(function (ActivityFairMarketValueDate$) {
    /** @deprecated use `ActivityFairMarketValueDate$inboundSchema` instead. */
    ActivityFairMarketValueDate$.inboundSchema = ActivityFairMarketValueDate$inboundSchema;
    /** @deprecated use `ActivityFairMarketValueDate$outboundSchema` instead. */
    ActivityFairMarketValueDate$.outboundSchema = ActivityFairMarketValueDate$outboundSchema;
})(ActivityFairMarketValueDate$ || (ActivityFairMarketValueDate$ = {}));
export function activityFairMarketValueDateToJSON(activityFairMarketValueDate) {
    return JSON.stringify(ActivityFairMarketValueDate$outboundSchema.parse(activityFairMarketValueDate));
}
export function activityFairMarketValueDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFairMarketValueDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFairMarketValueDate' from JSON`);
}
/** @internal */
export const ActivityMethod$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityMethod$outboundSchema = z.union([
    z.nativeEnum(ActivityMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMethod$;
(function (ActivityMethod$) {
    /** @deprecated use `ActivityMethod$inboundSchema` instead. */
    ActivityMethod$.inboundSchema = ActivityMethod$inboundSchema;
    /** @deprecated use `ActivityMethod$outboundSchema` instead. */
    ActivityMethod$.outboundSchema = ActivityMethod$outboundSchema;
})(ActivityMethod$ || (ActivityMethod$ = {}));
/** @internal */
export const ActivityAccountTransfer$inboundSchema = z.object({
    acats_asset_sequence_number: z.string().optional(),
    acats_control_number: z.string().optional(),
    account_transfer_type: ActivityAccountTransferType$inboundSchema.optional(),
    action: ActivityAction$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    contra_party_account_number: z.string().optional(),
    contra_party_id: z.string().optional(),
    fair_market_value: z.nullable(z.lazy(() => ActivityFairMarketValue$inboundSchema)).optional(),
    fair_market_value_date: z.nullable(z.lazy(() => ActivityFairMarketValueDate$inboundSchema)).optional(),
    institution: z.string().optional(),
    method: ActivityMethod$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_asset_sequence_number": "acatsAssetSequenceNumber",
        "acats_control_number": "acatsControlNumber",
        "account_transfer_type": "accountTransferType",
        "additional_instructions": "additionalInstructions",
        "contra_party_account_number": "contraPartyAccountNumber",
        "contra_party_id": "contraPartyId",
        "fair_market_value": "fairMarketValue",
        "fair_market_value_date": "fairMarketValueDate",
    });
});
/** @internal */
export const ActivityAccountTransfer$outboundSchema = z.object({
    acatsAssetSequenceNumber: z.string().optional(),
    acatsControlNumber: z.string().optional(),
    accountTransferType: ActivityAccountTransferType$outboundSchema.optional(),
    action: ActivityAction$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    contraPartyAccountNumber: z.string().optional(),
    contraPartyId: z.string().optional(),
    fairMarketValue: z.nullable(z.lazy(() => ActivityFairMarketValue$outboundSchema)).optional(),
    fairMarketValueDate: z.nullable(z.lazy(() => ActivityFairMarketValueDate$outboundSchema)).optional(),
    institution: z.string().optional(),
    method: ActivityMethod$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        acatsAssetSequenceNumber: "acats_asset_sequence_number",
        acatsControlNumber: "acats_control_number",
        accountTransferType: "account_transfer_type",
        additionalInstructions: "additional_instructions",
        contraPartyAccountNumber: "contra_party_account_number",
        contraPartyId: "contra_party_id",
        fairMarketValue: "fair_market_value",
        fairMarketValueDate: "fair_market_value_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAccountTransfer$;
(function (ActivityAccountTransfer$) {
    /** @deprecated use `ActivityAccountTransfer$inboundSchema` instead. */
    ActivityAccountTransfer$.inboundSchema = ActivityAccountTransfer$inboundSchema;
    /** @deprecated use `ActivityAccountTransfer$outboundSchema` instead. */
    ActivityAccountTransfer$.outboundSchema = ActivityAccountTransfer$outboundSchema;
})(ActivityAccountTransfer$ || (ActivityAccountTransfer$ = {}));
export function activityAccountTransferToJSON(activityAccountTransfer) {
    return JSON.stringify(ActivityAccountTransfer$outboundSchema.parse(activityAccountTransfer));
}
export function activityAccountTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityAccountTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityAccountTransfer' from JSON`);
}
/** @internal */
export const AccruedInterestDesc$inboundSchema = z.object({});
/** @internal */
export const AccruedInterestDesc$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccruedInterestDesc$;
(function (AccruedInterestDesc$) {
    /** @deprecated use `AccruedInterestDesc$inboundSchema` instead. */
    AccruedInterestDesc$.inboundSchema = AccruedInterestDesc$inboundSchema;
    /** @deprecated use `AccruedInterestDesc$outboundSchema` instead. */
    AccruedInterestDesc$.outboundSchema = AccruedInterestDesc$outboundSchema;
})(AccruedInterestDesc$ || (AccruedInterestDesc$ = {}));
export function accruedInterestDescToJSON(accruedInterestDesc) {
    return JSON.stringify(AccruedInterestDesc$outboundSchema.parse(accruedInterestDesc));
}
export function accruedInterestDescFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccruedInterestDesc$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccruedInterestDesc' from JSON`);
}
/** @internal */
export const ActivityActivityDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityActivityDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityActivityDate$;
(function (ActivityActivityDate$) {
    /** @deprecated use `ActivityActivityDate$inboundSchema` instead. */
    ActivityActivityDate$.inboundSchema = ActivityActivityDate$inboundSchema;
    /** @deprecated use `ActivityActivityDate$outboundSchema` instead. */
    ActivityActivityDate$.outboundSchema = ActivityActivityDate$outboundSchema;
})(ActivityActivityDate$ || (ActivityActivityDate$ = {}));
export function activityActivityDateToJSON(activityActivityDate) {
    return JSON.stringify(ActivityActivityDate$outboundSchema.parse(activityActivityDate));
}
export function activityActivityDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityActivityDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityActivityDate' from JSON`);
}
/** @internal */
export const ActivityBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(ActivityBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(ActivityBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityBrokerCapacity$;
(function (ActivityBrokerCapacity$) {
    /** @deprecated use `ActivityBrokerCapacity$inboundSchema` instead. */
    ActivityBrokerCapacity$.inboundSchema = ActivityBrokerCapacity$inboundSchema;
    /** @deprecated use `ActivityBrokerCapacity$outboundSchema` instead. */
    ActivityBrokerCapacity$.outboundSchema = ActivityBrokerCapacity$outboundSchema;
})(ActivityBrokerCapacity$ || (ActivityBrokerCapacity$ = {}));
/** @internal */
export const ActivityPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPrevailingMarketPrice$;
(function (ActivityPrevailingMarketPrice$) {
    /** @deprecated use `ActivityPrevailingMarketPrice$inboundSchema` instead. */
    ActivityPrevailingMarketPrice$.inboundSchema = ActivityPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `ActivityPrevailingMarketPrice$outboundSchema` instead. */
    ActivityPrevailingMarketPrice$.outboundSchema = ActivityPrevailingMarketPrice$outboundSchema;
})(ActivityPrevailingMarketPrice$ || (ActivityPrevailingMarketPrice$ = {}));
export function activityPrevailingMarketPriceToJSON(activityPrevailingMarketPrice) {
    return JSON.stringify(ActivityPrevailingMarketPrice$outboundSchema.parse(activityPrevailingMarketPrice));
}
export function activityPrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPrevailingMarketPrice' from JSON`);
}
/** @internal */
export const ActivityPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPriceAdjustmentAmount$;
(function (ActivityPriceAdjustmentAmount$) {
    /** @deprecated use `ActivityPriceAdjustmentAmount$inboundSchema` instead. */
    ActivityPriceAdjustmentAmount$.inboundSchema = ActivityPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentAmount$outboundSchema` instead. */
    ActivityPriceAdjustmentAmount$.outboundSchema = ActivityPriceAdjustmentAmount$outboundSchema;
})(ActivityPriceAdjustmentAmount$ || (ActivityPriceAdjustmentAmount$ = {}));
export function activityPriceAdjustmentAmountToJSON(activityPriceAdjustmentAmount) {
    return JSON.stringify(ActivityPriceAdjustmentAmount$outboundSchema.parse(activityPriceAdjustmentAmount));
}
export function activityPriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const ActivityPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPriceAdjustmentPercent$;
(function (ActivityPriceAdjustmentPercent$) {
    /** @deprecated use `ActivityPriceAdjustmentPercent$inboundSchema` instead. */
    ActivityPriceAdjustmentPercent$.inboundSchema = ActivityPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentPercent$outboundSchema` instead. */
    ActivityPriceAdjustmentPercent$.outboundSchema = ActivityPriceAdjustmentPercent$outboundSchema;
})(ActivityPriceAdjustmentPercent$ || (ActivityPriceAdjustmentPercent$ = {}));
export function activityPriceAdjustmentPercentToJSON(activityPriceAdjustmentPercent) {
    return JSON.stringify(ActivityPriceAdjustmentPercent$outboundSchema.parse(activityPriceAdjustmentPercent));
}
export function activityPriceAdjustmentPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPriceAdjustmentPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPriceAdjustmentPercent' from JSON`);
}
/** @internal */
export const ActivityPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(ActivityPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPriceAdjustmentType$;
(function (ActivityPriceAdjustmentType$) {
    /** @deprecated use `ActivityPriceAdjustmentType$inboundSchema` instead. */
    ActivityPriceAdjustmentType$.inboundSchema = ActivityPriceAdjustmentType$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentType$outboundSchema` instead. */
    ActivityPriceAdjustmentType$.outboundSchema = ActivityPriceAdjustmentType$outboundSchema;
})(ActivityPriceAdjustmentType$ || (ActivityPriceAdjustmentType$ = {}));
/** @internal */
export const ActivityPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => ActivityPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => ActivityPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: ActivityPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const ActivityPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => ActivityPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => ActivityPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: ActivityPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPriceAdjustmentRecord$;
(function (ActivityPriceAdjustmentRecord$) {
    /** @deprecated use `ActivityPriceAdjustmentRecord$inboundSchema` instead. */
    ActivityPriceAdjustmentRecord$.inboundSchema = ActivityPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentRecord$outboundSchema` instead. */
    ActivityPriceAdjustmentRecord$.outboundSchema = ActivityPriceAdjustmentRecord$outboundSchema;
})(ActivityPriceAdjustmentRecord$ || (ActivityPriceAdjustmentRecord$ = {}));
export function activityPriceAdjustmentRecordToJSON(activityPriceAdjustmentRecord) {
    return JSON.stringify(ActivityPriceAdjustmentRecord$outboundSchema.parse(activityPriceAdjustmentRecord));
}
export function activityPriceAdjustmentRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPriceAdjustmentRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPriceAdjustmentRecord' from JSON`);
}
/** @internal */
export const ActivityAllocation$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    broker_capacity: ActivityBrokerCapacity$inboundSchema.optional(),
    client_memos: z.array(z.string()).optional(),
    client_order_id: z.string().optional(),
    external_id: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    lots: z.array(Lot$inboundSchema).optional(),
    prevailing_market_price: z.nullable(z.lazy(() => ActivityPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => ActivityPriceAdjustmentRecord$inboundSchema)).optional(),
    special_instructions: z.array(z.string()).optional(),
    yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "broker_capacity": "brokerCapacity",
        "client_memos": "clientMemos",
        "client_order_id": "clientOrderId",
        "external_id": "externalId",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
export const ActivityAllocation$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    brokerCapacity: ActivityBrokerCapacity$outboundSchema.optional(),
    clientMemos: z.array(z.string()).optional(),
    clientOrderId: z.string().optional(),
    externalId: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    lots: z.array(Lot$outboundSchema).optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => ActivityPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => ActivityPriceAdjustmentRecord$outboundSchema)).optional(),
    specialInstructions: z.array(z.string()).optional(),
    yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        brokerCapacity: "broker_capacity",
        clientMemos: "client_memos",
        clientOrderId: "client_order_id",
        externalId: "external_id",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityAllocation$;
(function (ActivityAllocation$) {
    /** @deprecated use `ActivityAllocation$inboundSchema` instead. */
    ActivityAllocation$.inboundSchema = ActivityAllocation$inboundSchema;
    /** @deprecated use `ActivityAllocation$outboundSchema` instead. */
    ActivityAllocation$.outboundSchema = ActivityAllocation$outboundSchema;
})(ActivityAllocation$ || (ActivityAllocation$ = {}));
export function activityAllocationToJSON(activityAllocation) {
    return JSON.stringify(ActivityAllocation$outboundSchema.parse(activityAllocation));
}
export function activityAllocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityAllocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityAllocation' from JSON`);
}
/** @internal */
export const ActivityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashRate$;
(function (ActivityCashRate$) {
    /** @deprecated use `ActivityCashRate$inboundSchema` instead. */
    ActivityCashRate$.inboundSchema = ActivityCashRate$inboundSchema;
    /** @deprecated use `ActivityCashRate$outboundSchema` instead. */
    ActivityCashRate$.outboundSchema = ActivityCashRate$outboundSchema;
})(ActivityCashRate$ || (ActivityCashRate$ = {}));
export function activityCashRateToJSON(activityCashRate) {
    return JSON.stringify(ActivityCashRate$outboundSchema.parse(activityCashRate));
}
export function activityCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashRate' from JSON`);
}
/** @internal */
export const ActivityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCorporateActionGeneralInformation$;
(function (ActivityCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCorporateActionGeneralInformation$.inboundSchema = ActivityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCorporateActionGeneralInformation$.outboundSchema = ActivityCorporateActionGeneralInformation$outboundSchema;
})(ActivityCorporateActionGeneralInformation$ || (ActivityCorporateActionGeneralInformation$ = {}));
export function activityCorporateActionGeneralInformationToJSON(activityCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityCorporateActionGeneralInformation$outboundSchema.parse(activityCorporateActionGeneralInformation));
}
export function activityCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentDate$;
(function (ActivityPaymentDate$) {
    /** @deprecated use `ActivityPaymentDate$inboundSchema` instead. */
    ActivityPaymentDate$.inboundSchema = ActivityPaymentDate$inboundSchema;
    /** @deprecated use `ActivityPaymentDate$outboundSchema` instead. */
    ActivityPaymentDate$.outboundSchema = ActivityPaymentDate$outboundSchema;
})(ActivityPaymentDate$ || (ActivityPaymentDate$ = {}));
export function activityPaymentDateToJSON(activityPaymentDate) {
    return JSON.stringify(ActivityPaymentDate$outboundSchema.parse(activityPaymentDate));
}
export function activityPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentDate' from JSON`);
}
/** @internal */
export const ActivityBondDefaultQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityBondDefaultQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityBondDefaultQuantity$;
(function (ActivityBondDefaultQuantity$) {
    /** @deprecated use `ActivityBondDefaultQuantity$inboundSchema` instead. */
    ActivityBondDefaultQuantity$.inboundSchema = ActivityBondDefaultQuantity$inboundSchema;
    /** @deprecated use `ActivityBondDefaultQuantity$outboundSchema` instead. */
    ActivityBondDefaultQuantity$.outboundSchema = ActivityBondDefaultQuantity$outboundSchema;
})(ActivityBondDefaultQuantity$ || (ActivityBondDefaultQuantity$ = {}));
export function activityBondDefaultQuantityToJSON(activityBondDefaultQuantity) {
    return JSON.stringify(ActivityBondDefaultQuantity$outboundSchema.parse(activityBondDefaultQuantity));
}
export function activityBondDefaultQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityBondDefaultQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityBondDefaultQuantity' from JSON`);
}
/** @internal */
export const ActivityBondDefault$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityPaymentDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityBondDefaultQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const ActivityBondDefault$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityPaymentDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityBondDefaultQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityBondDefault$;
(function (ActivityBondDefault$) {
    /** @deprecated use `ActivityBondDefault$inboundSchema` instead. */
    ActivityBondDefault$.inboundSchema = ActivityBondDefault$inboundSchema;
    /** @deprecated use `ActivityBondDefault$outboundSchema` instead. */
    ActivityBondDefault$.outboundSchema = ActivityBondDefault$outboundSchema;
})(ActivityBondDefault$ || (ActivityBondDefault$ = {}));
export function activityBondDefaultToJSON(activityBondDefault) {
    return JSON.stringify(ActivityBondDefault$outboundSchema.parse(activityBondDefault));
}
export function activityBondDefaultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityBondDefault$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityBondDefault' from JSON`);
}
/** @internal */
export const ActivityCapitalGainsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityCapitalGainsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCapitalGainsCorporateActionGeneralInformation$;
(function (ActivityCapitalGainsCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCapitalGainsCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCapitalGainsCorporateActionGeneralInformation$.inboundSchema = ActivityCapitalGainsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCapitalGainsCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCapitalGainsCorporateActionGeneralInformation$.outboundSchema = ActivityCapitalGainsCorporateActionGeneralInformation$outboundSchema;
})(ActivityCapitalGainsCorporateActionGeneralInformation$ || (ActivityCapitalGainsCorporateActionGeneralInformation$ = {}));
export function activityCapitalGainsCorporateActionGeneralInformationToJSON(activityCapitalGainsCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityCapitalGainsCorporateActionGeneralInformation$outboundSchema.parse(activityCapitalGainsCorporateActionGeneralInformation));
}
export function activityCapitalGainsCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCapitalGainsCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCapitalGainsCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityCapitalGainsPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityCapitalGainsPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCapitalGainsPaymentDate$;
(function (ActivityCapitalGainsPaymentDate$) {
    /** @deprecated use `ActivityCapitalGainsPaymentDate$inboundSchema` instead. */
    ActivityCapitalGainsPaymentDate$.inboundSchema = ActivityCapitalGainsPaymentDate$inboundSchema;
    /** @deprecated use `ActivityCapitalGainsPaymentDate$outboundSchema` instead. */
    ActivityCapitalGainsPaymentDate$.outboundSchema = ActivityCapitalGainsPaymentDate$outboundSchema;
})(ActivityCapitalGainsPaymentDate$ || (ActivityCapitalGainsPaymentDate$ = {}));
export function activityCapitalGainsPaymentDateToJSON(activityCapitalGainsPaymentDate) {
    return JSON.stringify(ActivityCapitalGainsPaymentDate$outboundSchema.parse(activityCapitalGainsPaymentDate));
}
export function activityCapitalGainsPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCapitalGainsPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCapitalGainsPaymentDate' from JSON`);
}
/** @internal */
export const ActivityCapitalGainsQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityCapitalGainsQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCapitalGainsQuantity$;
(function (ActivityCapitalGainsQuantity$) {
    /** @deprecated use `ActivityCapitalGainsQuantity$inboundSchema` instead. */
    ActivityCapitalGainsQuantity$.inboundSchema = ActivityCapitalGainsQuantity$inboundSchema;
    /** @deprecated use `ActivityCapitalGainsQuantity$outboundSchema` instead. */
    ActivityCapitalGainsQuantity$.outboundSchema = ActivityCapitalGainsQuantity$outboundSchema;
})(ActivityCapitalGainsQuantity$ || (ActivityCapitalGainsQuantity$ = {}));
export function activityCapitalGainsQuantityToJSON(activityCapitalGainsQuantity) {
    return JSON.stringify(ActivityCapitalGainsQuantity$outboundSchema.parse(activityCapitalGainsQuantity));
}
export function activityCapitalGainsQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCapitalGainsQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCapitalGainsQuantity' from JSON`);
}
/** @internal */
export const ActivityRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRecordDate$;
(function (ActivityRecordDate$) {
    /** @deprecated use `ActivityRecordDate$inboundSchema` instead. */
    ActivityRecordDate$.inboundSchema = ActivityRecordDate$inboundSchema;
    /** @deprecated use `ActivityRecordDate$outboundSchema` instead. */
    ActivityRecordDate$.outboundSchema = ActivityRecordDate$outboundSchema;
})(ActivityRecordDate$ || (ActivityRecordDate$ = {}));
export function activityRecordDateToJSON(activityRecordDate) {
    return JSON.stringify(ActivityRecordDate$outboundSchema.parse(activityRecordDate));
}
export function activityRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRecordDate' from JSON`);
}
/** @internal */
export const ActivityCapitalGains$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityCapitalGainsCorporateActionGeneralInformation$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => ActivityCapitalGainsPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityCapitalGainsQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => ActivityRecordDate$inboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityCapitalGains$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityCapitalGainsCorporateActionGeneralInformation$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityCapitalGainsPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityCapitalGainsQuantity$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityRecordDate$outboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCapitalGains$;
(function (ActivityCapitalGains$) {
    /** @deprecated use `ActivityCapitalGains$inboundSchema` instead. */
    ActivityCapitalGains$.inboundSchema = ActivityCapitalGains$inboundSchema;
    /** @deprecated use `ActivityCapitalGains$outboundSchema` instead. */
    ActivityCapitalGains$.outboundSchema = ActivityCapitalGains$outboundSchema;
})(ActivityCapitalGains$ || (ActivityCapitalGains$ = {}));
export function activityCapitalGainsToJSON(activityCapitalGains) {
    return JSON.stringify(ActivityCapitalGains$outboundSchema.parse(activityCapitalGains));
}
export function activityCapitalGainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCapitalGains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCapitalGains' from JSON`);
}
/** @internal */
export const ActivityCashDividendCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityCashDividendCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendCashRate$;
(function (ActivityCashDividendCashRate$) {
    /** @deprecated use `ActivityCashDividendCashRate$inboundSchema` instead. */
    ActivityCashDividendCashRate$.inboundSchema = ActivityCashDividendCashRate$inboundSchema;
    /** @deprecated use `ActivityCashDividendCashRate$outboundSchema` instead. */
    ActivityCashDividendCashRate$.outboundSchema = ActivityCashDividendCashRate$outboundSchema;
})(ActivityCashDividendCashRate$ || (ActivityCashDividendCashRate$ = {}));
export function activityCashDividendCashRateToJSON(activityCashDividendCashRate) {
    return JSON.stringify(ActivityCashDividendCashRate$outboundSchema.parse(activityCashDividendCashRate));
}
export function activityCashDividendCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendCashRate' from JSON`);
}
/** @internal */
export const ActivityCashDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityCashDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendCorporateActionGeneralInformation$;
(function (ActivityCashDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCashDividendCorporateActionGeneralInformation$.inboundSchema = ActivityCashDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCashDividendCorporateActionGeneralInformation$.outboundSchema = ActivityCashDividendCorporateActionGeneralInformation$outboundSchema;
})(ActivityCashDividendCorporateActionGeneralInformation$ || (ActivityCashDividendCorporateActionGeneralInformation$ = {}));
export function activityCashDividendCorporateActionGeneralInformationToJSON(activityCashDividendCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityCashDividendCorporateActionGeneralInformation$outboundSchema.parse(activityCashDividendCorporateActionGeneralInformation));
}
export function activityCashDividendCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityCashDividendFpsl$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityCashDividendFpsl$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendFpsl$;
(function (ActivityCashDividendFpsl$) {
    /** @deprecated use `ActivityCashDividendFpsl$inboundSchema` instead. */
    ActivityCashDividendFpsl$.inboundSchema = ActivityCashDividendFpsl$inboundSchema;
    /** @deprecated use `ActivityCashDividendFpsl$outboundSchema` instead. */
    ActivityCashDividendFpsl$.outboundSchema = ActivityCashDividendFpsl$outboundSchema;
})(ActivityCashDividendFpsl$ || (ActivityCashDividendFpsl$ = {}));
export function activityCashDividendFpslToJSON(activityCashDividendFpsl) {
    return JSON.stringify(ActivityCashDividendFpsl$outboundSchema.parse(activityCashDividendFpsl));
}
export function activityCashDividendFpslFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendFpsl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendFpsl' from JSON`);
}
/** @internal */
export const ActivityFree$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityFree$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFree$;
(function (ActivityFree$) {
    /** @deprecated use `ActivityFree$inboundSchema` instead. */
    ActivityFree$.inboundSchema = ActivityFree$inboundSchema;
    /** @deprecated use `ActivityFree$outboundSchema` instead. */
    ActivityFree$.outboundSchema = ActivityFree$outboundSchema;
})(ActivityFree$ || (ActivityFree$ = {}));
export function activityFreeToJSON(activityFree) {
    return JSON.stringify(ActivityFree$outboundSchema.parse(activityFree));
}
export function activityFreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFree' from JSON`);
}
/** @internal */
export const ActivityCashDividendPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityCashDividendPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendPaymentDate$;
(function (ActivityCashDividendPaymentDate$) {
    /** @deprecated use `ActivityCashDividendPaymentDate$inboundSchema` instead. */
    ActivityCashDividendPaymentDate$.inboundSchema = ActivityCashDividendPaymentDate$inboundSchema;
    /** @deprecated use `ActivityCashDividendPaymentDate$outboundSchema` instead. */
    ActivityCashDividendPaymentDate$.outboundSchema = ActivityCashDividendPaymentDate$outboundSchema;
})(ActivityCashDividendPaymentDate$ || (ActivityCashDividendPaymentDate$ = {}));
export function activityCashDividendPaymentDateToJSON(activityCashDividendPaymentDate) {
    return JSON.stringify(ActivityCashDividendPaymentDate$outboundSchema.parse(activityCashDividendPaymentDate));
}
export function activityCashDividendPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendPaymentDate' from JSON`);
}
/** @internal */
export const ActivityCashDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityCashDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendQuantity$;
(function (ActivityCashDividendQuantity$) {
    /** @deprecated use `ActivityCashDividendQuantity$inboundSchema` instead. */
    ActivityCashDividendQuantity$.inboundSchema = ActivityCashDividendQuantity$inboundSchema;
    /** @deprecated use `ActivityCashDividendQuantity$outboundSchema` instead. */
    ActivityCashDividendQuantity$.outboundSchema = ActivityCashDividendQuantity$outboundSchema;
})(ActivityCashDividendQuantity$ || (ActivityCashDividendQuantity$ = {}));
export function activityCashDividendQuantityToJSON(activityCashDividendQuantity) {
    return JSON.stringify(ActivityCashDividendQuantity$outboundSchema.parse(activityCashDividendQuantity));
}
export function activityCashDividendQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendQuantity' from JSON`);
}
/** @internal */
export const ActivityCashDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityCashDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividendRecordDate$;
(function (ActivityCashDividendRecordDate$) {
    /** @deprecated use `ActivityCashDividendRecordDate$inboundSchema` instead. */
    ActivityCashDividendRecordDate$.inboundSchema = ActivityCashDividendRecordDate$inboundSchema;
    /** @deprecated use `ActivityCashDividendRecordDate$outboundSchema` instead. */
    ActivityCashDividendRecordDate$.outboundSchema = ActivityCashDividendRecordDate$outboundSchema;
})(ActivityCashDividendRecordDate$ || (ActivityCashDividendRecordDate$ = {}));
export function activityCashDividendRecordDateToJSON(activityCashDividendRecordDate) {
    return JSON.stringify(ActivityCashDividendRecordDate$outboundSchema.parse(activityCashDividendRecordDate));
}
export function activityCashDividendRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividendRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividendRecordDate' from JSON`);
}
/** @internal */
export const ActivitySettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivitySettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySettled$;
(function (ActivitySettled$) {
    /** @deprecated use `ActivitySettled$inboundSchema` instead. */
    ActivitySettled$.inboundSchema = ActivitySettled$inboundSchema;
    /** @deprecated use `ActivitySettled$outboundSchema` instead. */
    ActivitySettled$.outboundSchema = ActivitySettled$outboundSchema;
})(ActivitySettled$ || (ActivitySettled$ = {}));
export function activitySettledToJSON(activitySettled) {
    return JSON.stringify(ActivitySettled$outboundSchema.parse(activitySettled));
}
export function activitySettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySettled' from JSON`);
}
/** @internal */
export const ActivitySubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySubtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivitySubtype$outboundSchema = z.union([
    z.nativeEnum(ActivitySubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySubtype$;
(function (ActivitySubtype$) {
    /** @deprecated use `ActivitySubtype$inboundSchema` instead. */
    ActivitySubtype$.inboundSchema = ActivitySubtype$inboundSchema;
    /** @deprecated use `ActivitySubtype$outboundSchema` instead. */
    ActivitySubtype$.outboundSchema = ActivitySubtype$outboundSchema;
})(ActivitySubtype$ || (ActivitySubtype$ = {}));
/** @internal */
export const ActivityCashDividend$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityCashDividendCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityCashDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => ActivityCashDividendFpsl$inboundSchema))
        .optional(),
    free: z.nullable(z.lazy(() => ActivityFree$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => ActivityCashDividendPaymentDate$inboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => ActivityCashDividendQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => ActivityCashDividendRecordDate$inboundSchema)).optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => ActivitySettled$inboundSchema)).optional(),
    substitute_payment: z.boolean().optional(),
    subtype: ActivitySubtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "substitute_payment": "substitutePayment",
    });
});
/** @internal */
export const ActivityCashDividend$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityCashDividendCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityCashDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => ActivityCashDividendFpsl$outboundSchema))
        .optional(),
    free: z.nullable(z.lazy(() => ActivityFree$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityCashDividendPaymentDate$outboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => ActivityCashDividendQuantity$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityCashDividendRecordDate$outboundSchema)).optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => ActivitySettled$outboundSchema)).optional(),
    substitutePayment: z.boolean().optional(),
    subtype: ActivitySubtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
        substitutePayment: "substitute_payment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashDividend$;
(function (ActivityCashDividend$) {
    /** @deprecated use `ActivityCashDividend$inboundSchema` instead. */
    ActivityCashDividend$.inboundSchema = ActivityCashDividend$inboundSchema;
    /** @deprecated use `ActivityCashDividend$outboundSchema` instead. */
    ActivityCashDividend$.outboundSchema = ActivityCashDividend$outboundSchema;
})(ActivityCashDividend$ || (ActivityCashDividend$ = {}));
export function activityCashDividendToJSON(activityCashDividend) {
    return JSON.stringify(ActivityCashDividend$outboundSchema.parse(activityCashDividend));
}
export function activityCashDividendFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashDividend$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashDividend' from JSON`);
}
/** @internal */
export const ActivityCashInLieuCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityCashInLieuCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashInLieuCorporateActionGeneralInformation$;
(function (ActivityCashInLieuCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCashInLieuCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCashInLieuCorporateActionGeneralInformation$.inboundSchema = ActivityCashInLieuCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCashInLieuCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCashInLieuCorporateActionGeneralInformation$.outboundSchema = ActivityCashInLieuCorporateActionGeneralInformation$outboundSchema;
})(ActivityCashInLieuCorporateActionGeneralInformation$ || (ActivityCashInLieuCorporateActionGeneralInformation$ = {}));
export function activityCashInLieuCorporateActionGeneralInformationToJSON(activityCashInLieuCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityCashInLieuCorporateActionGeneralInformation$outboundSchema.parse(activityCashInLieuCorporateActionGeneralInformation));
}
export function activityCashInLieuCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashInLieuCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashInLieuCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityCashInLieu$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityCashInLieuCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const ActivityCashInLieu$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityCashInLieuCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCashInLieu$;
(function (ActivityCashInLieu$) {
    /** @deprecated use `ActivityCashInLieu$inboundSchema` instead. */
    ActivityCashInLieu$.inboundSchema = ActivityCashInLieu$inboundSchema;
    /** @deprecated use `ActivityCashInLieu$outboundSchema` instead. */
    ActivityCashInLieu$.outboundSchema = ActivityCashInLieu$outboundSchema;
})(ActivityCashInLieu$ || (ActivityCashInLieu$ = {}));
export function activityCashInLieuToJSON(activityCashInLieu) {
    return JSON.stringify(ActivityCashInLieu$outboundSchema.parse(activityCashInLieu));
}
export function activityCashInLieuFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCashInLieu$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCashInLieu' from JSON`);
}
/** @internal */
export const ActivityCommission$inboundSchema = z.object({});
/** @internal */
export const ActivityCommission$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCommission$;
(function (ActivityCommission$) {
    /** @deprecated use `ActivityCommission$inboundSchema` instead. */
    ActivityCommission$.inboundSchema = ActivityCommission$inboundSchema;
    /** @deprecated use `ActivityCommission$outboundSchema` instead. */
    ActivityCommission$.outboundSchema = ActivityCommission$outboundSchema;
})(ActivityCommission$ || (ActivityCommission$ = {}));
export function activityCommissionToJSON(activityCommission) {
    return JSON.stringify(ActivityCommission$outboundSchema.parse(activityCommission));
}
export function activityCommissionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCommission$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCommission' from JSON`);
}
/** @internal */
export const ActivityConversionCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityConversionCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityConversionCashRate$;
(function (ActivityConversionCashRate$) {
    /** @deprecated use `ActivityConversionCashRate$inboundSchema` instead. */
    ActivityConversionCashRate$.inboundSchema = ActivityConversionCashRate$inboundSchema;
    /** @deprecated use `ActivityConversionCashRate$outboundSchema` instead. */
    ActivityConversionCashRate$.outboundSchema = ActivityConversionCashRate$outboundSchema;
})(ActivityConversionCashRate$ || (ActivityConversionCashRate$ = {}));
export function activityConversionCashRateToJSON(activityConversionCashRate) {
    return JSON.stringify(ActivityConversionCashRate$outboundSchema.parse(activityConversionCashRate));
}
export function activityConversionCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityConversionCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityConversionCashRate' from JSON`);
}
/** @internal */
export const ActivityConversionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityConversionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityConversionCorporateActionGeneralInformation$;
(function (ActivityConversionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityConversionCorporateActionGeneralInformation$.inboundSchema = ActivityConversionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityConversionCorporateActionGeneralInformation$.outboundSchema = ActivityConversionCorporateActionGeneralInformation$outboundSchema;
})(ActivityConversionCorporateActionGeneralInformation$ || (ActivityConversionCorporateActionGeneralInformation$ = {}));
export function activityConversionCorporateActionGeneralInformationToJSON(activityConversionCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityConversionCorporateActionGeneralInformation$outboundSchema.parse(activityConversionCorporateActionGeneralInformation));
}
export function activityConversionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityConversionCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityConversionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockRate$;
(function (ActivityStockRate$) {
    /** @deprecated use `ActivityStockRate$inboundSchema` instead. */
    ActivityStockRate$.inboundSchema = ActivityStockRate$inboundSchema;
    /** @deprecated use `ActivityStockRate$outboundSchema` instead. */
    ActivityStockRate$.outboundSchema = ActivityStockRate$outboundSchema;
})(ActivityStockRate$ || (ActivityStockRate$ = {}));
export function activityStockRateToJSON(activityStockRate) {
    return JSON.stringify(ActivityStockRate$outboundSchema.parse(activityStockRate));
}
export function activityStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockRate' from JSON`);
}
/** @internal */
export const ActivityConversionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityConversionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityConversionType$outboundSchema = z.union([
    z.nativeEnum(ActivityConversionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityConversionType$;
(function (ActivityConversionType$) {
    /** @deprecated use `ActivityConversionType$inboundSchema` instead. */
    ActivityConversionType$.inboundSchema = ActivityConversionType$inboundSchema;
    /** @deprecated use `ActivityConversionType$outboundSchema` instead. */
    ActivityConversionType$.outboundSchema = ActivityConversionType$outboundSchema;
})(ActivityConversionType$ || (ActivityConversionType$ = {}));
/** @internal */
export const ActivityConversion$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityConversionCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityConversionCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => ActivityStockRate$inboundSchema))
        .optional(),
    type: ActivityConversionType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ActivityConversion$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityConversionCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityConversionCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => ActivityStockRate$outboundSchema))
        .optional(),
    type: ActivityConversionType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityConversion$;
(function (ActivityConversion$) {
    /** @deprecated use `ActivityConversion$inboundSchema` instead. */
    ActivityConversion$.inboundSchema = ActivityConversion$inboundSchema;
    /** @deprecated use `ActivityConversion$outboundSchema` instead. */
    ActivityConversion$.outboundSchema = ActivityConversion$outboundSchema;
})(ActivityConversion$ || (ActivityConversion$ = {}));
export function activityConversionToJSON(activityConversion) {
    return JSON.stringify(ActivityConversion$outboundSchema.parse(activityConversion));
}
export function activityConversionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityConversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityConversion' from JSON`);
}
/** @internal */
export const ActivityCorporateActionMemoAdjustment$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    corporate_action_type: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "corporate_action_type": "corporateActionType",
    });
});
/** @internal */
export const ActivityCorporateActionMemoAdjustment$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    corporateActionType: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        corporateActionType: "corporate_action_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCorporateActionMemoAdjustment$;
(function (ActivityCorporateActionMemoAdjustment$) {
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$inboundSchema` instead. */
    ActivityCorporateActionMemoAdjustment$.inboundSchema = ActivityCorporateActionMemoAdjustment$inboundSchema;
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$outboundSchema` instead. */
    ActivityCorporateActionMemoAdjustment$.outboundSchema = ActivityCorporateActionMemoAdjustment$outboundSchema;
})(ActivityCorporateActionMemoAdjustment$ || (ActivityCorporateActionMemoAdjustment$ = {}));
export function activityCorporateActionMemoAdjustmentToJSON(activityCorporateActionMemoAdjustment) {
    return JSON.stringify(ActivityCorporateActionMemoAdjustment$outboundSchema.parse(activityCorporateActionMemoAdjustment));
}
export function activityCorporateActionMemoAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCorporateActionMemoAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCorporateActionMemoAdjustment' from JSON`);
}
/** @internal */
export const ActivityCreditType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityCreditType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityCreditType$outboundSchema = z.union([
    z.nativeEnum(ActivityCreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCreditType$;
(function (ActivityCreditType$) {
    /** @deprecated use `ActivityCreditType$inboundSchema` instead. */
    ActivityCreditType$.inboundSchema = ActivityCreditType$inboundSchema;
    /** @deprecated use `ActivityCreditType$outboundSchema` instead. */
    ActivityCreditType$.outboundSchema = ActivityCreditType$outboundSchema;
})(ActivityCreditType$ || (ActivityCreditType$ = {}));
/** @internal */
export const ActivityCredit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    credit_type: ActivityCreditType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "credit_type": "creditType",
    });
});
/** @internal */
export const ActivityCredit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    creditType: ActivityCreditType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        creditType: "credit_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityCredit$;
(function (ActivityCredit$) {
    /** @deprecated use `ActivityCredit$inboundSchema` instead. */
    ActivityCredit$.inboundSchema = ActivityCredit$inboundSchema;
    /** @deprecated use `ActivityCredit$outboundSchema` instead. */
    ActivityCredit$.outboundSchema = ActivityCredit$outboundSchema;
})(ActivityCredit$ || (ActivityCredit$ = {}));
export function activityCreditToJSON(activityCredit) {
    return JSON.stringify(ActivityCredit$outboundSchema.parse(activityCredit));
}
export function activityCreditFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityCredit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityCredit' from JSON`);
}
/** @internal */
export const ActivityContributionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityContributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityContributionType$outboundSchema = z.union([
    z.nativeEnum(ActivityContributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityContributionType$;
(function (ActivityContributionType$) {
    /** @deprecated use `ActivityContributionType$inboundSchema` instead. */
    ActivityContributionType$.inboundSchema = ActivityContributionType$inboundSchema;
    /** @deprecated use `ActivityContributionType$outboundSchema` instead. */
    ActivityContributionType$.outboundSchema = ActivityContributionType$outboundSchema;
})(ActivityContributionType$ || (ActivityContributionType$ = {}));
/** @internal */
export const ActivityDepositType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityDepositType$outboundSchema = z.union([
    z.nativeEnum(ActivityDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDepositType$;
(function (ActivityDepositType$) {
    /** @deprecated use `ActivityDepositType$inboundSchema` instead. */
    ActivityDepositType$.inboundSchema = ActivityDepositType$inboundSchema;
    /** @deprecated use `ActivityDepositType$outboundSchema` instead. */
    ActivityDepositType$.outboundSchema = ActivityDepositType$outboundSchema;
})(ActivityDepositType$ || (ActivityDepositType$ = {}));
/** @internal */
export const ActivityDeposit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    contribution_type: ActivityContributionType$inboundSchema.optional(),
    contribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_account_number: z.string().optional(),
    type: ActivityDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "contribution_type": "contributionType",
        "contribution_year": "contributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_account_number": "originatingAccountNumber",
    });
});
/** @internal */
export const ActivityDeposit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    contributionType: ActivityContributionType$outboundSchema.optional(),
    contributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingAccountNumber: z.string().optional(),
    type: ActivityDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        contributionType: "contribution_type",
        contributionYear: "contribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingAccountNumber: "originating_account_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDeposit$;
(function (ActivityDeposit$) {
    /** @deprecated use `ActivityDeposit$inboundSchema` instead. */
    ActivityDeposit$.inboundSchema = ActivityDeposit$inboundSchema;
    /** @deprecated use `ActivityDeposit$outboundSchema` instead. */
    ActivityDeposit$.outboundSchema = ActivityDeposit$outboundSchema;
})(ActivityDeposit$ || (ActivityDeposit$ = {}));
export function activityDepositToJSON(activityDeposit) {
    return JSON.stringify(ActivityDeposit$outboundSchema.parse(activityDeposit));
}
export function activityDepositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityDeposit' from JSON`);
}
/** @internal */
export const ActivityDripAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDripAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityDripAction$outboundSchema = z.union([
    z.nativeEnum(ActivityDripAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDripAction$;
(function (ActivityDripAction$) {
    /** @deprecated use `ActivityDripAction$inboundSchema` instead. */
    ActivityDripAction$.inboundSchema = ActivityDripAction$inboundSchema;
    /** @deprecated use `ActivityDripAction$outboundSchema` instead. */
    ActivityDripAction$.outboundSchema = ActivityDripAction$outboundSchema;
})(ActivityDripAction$ || (ActivityDripAction$ = {}));
/** @internal */
export const ActivityDrip$inboundSchema = z.object({
    action: ActivityDripAction$inboundSchema.optional(),
});
/** @internal */
export const ActivityDrip$outboundSchema = z.object({
    action: ActivityDripAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDrip$;
(function (ActivityDrip$) {
    /** @deprecated use `ActivityDrip$inboundSchema` instead. */
    ActivityDrip$.inboundSchema = ActivityDrip$inboundSchema;
    /** @deprecated use `ActivityDrip$outboundSchema` instead. */
    ActivityDrip$.outboundSchema = ActivityDrip$outboundSchema;
})(ActivityDrip$ || (ActivityDrip$ = {}));
export function activityDripToJSON(activityDrip) {
    return JSON.stringify(ActivityDrip$outboundSchema.parse(activityDrip));
}
export function activityDripFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityDrip$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityDrip' from JSON`);
}
/** @internal */
export const ActivityExchangeCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityExchangeCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityExchangeCashRate$;
(function (ActivityExchangeCashRate$) {
    /** @deprecated use `ActivityExchangeCashRate$inboundSchema` instead. */
    ActivityExchangeCashRate$.inboundSchema = ActivityExchangeCashRate$inboundSchema;
    /** @deprecated use `ActivityExchangeCashRate$outboundSchema` instead. */
    ActivityExchangeCashRate$.outboundSchema = ActivityExchangeCashRate$outboundSchema;
})(ActivityExchangeCashRate$ || (ActivityExchangeCashRate$ = {}));
export function activityExchangeCashRateToJSON(activityExchangeCashRate) {
    return JSON.stringify(ActivityExchangeCashRate$outboundSchema.parse(activityExchangeCashRate));
}
export function activityExchangeCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityExchangeCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityExchangeCashRate' from JSON`);
}
/** @internal */
export const ActivityExchangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityExchangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityExchangeCorporateActionGeneralInformation$;
(function (ActivityExchangeCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityExchangeCorporateActionGeneralInformation$.inboundSchema = ActivityExchangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityExchangeCorporateActionGeneralInformation$.outboundSchema = ActivityExchangeCorporateActionGeneralInformation$outboundSchema;
})(ActivityExchangeCorporateActionGeneralInformation$ || (ActivityExchangeCorporateActionGeneralInformation$ = {}));
export function activityExchangeCorporateActionGeneralInformationToJSON(activityExchangeCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityExchangeCorporateActionGeneralInformation$outboundSchema.parse(activityExchangeCorporateActionGeneralInformation));
}
export function activityExchangeCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityExchangeCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityExchangeCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityExchangeStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityExchangeStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityExchangeStockRate$;
(function (ActivityExchangeStockRate$) {
    /** @deprecated use `ActivityExchangeStockRate$inboundSchema` instead. */
    ActivityExchangeStockRate$.inboundSchema = ActivityExchangeStockRate$inboundSchema;
    /** @deprecated use `ActivityExchangeStockRate$outboundSchema` instead. */
    ActivityExchangeStockRate$.outboundSchema = ActivityExchangeStockRate$outboundSchema;
})(ActivityExchangeStockRate$ || (ActivityExchangeStockRate$ = {}));
export function activityExchangeStockRateToJSON(activityExchangeStockRate) {
    return JSON.stringify(ActivityExchangeStockRate$outboundSchema.parse(activityExchangeStockRate));
}
export function activityExchangeStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityExchangeStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityExchangeStockRate' from JSON`);
}
/** @internal */
export const ActivityExchangeType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityExchangeType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityExchangeType$outboundSchema = z.union([
    z.nativeEnum(ActivityExchangeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityExchangeType$;
(function (ActivityExchangeType$) {
    /** @deprecated use `ActivityExchangeType$inboundSchema` instead. */
    ActivityExchangeType$.inboundSchema = ActivityExchangeType$inboundSchema;
    /** @deprecated use `ActivityExchangeType$outboundSchema` instead. */
    ActivityExchangeType$.outboundSchema = ActivityExchangeType$outboundSchema;
})(ActivityExchangeType$ || (ActivityExchangeType$ = {}));
/** @internal */
export const ActivityExchange$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityExchangeCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityExchangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => ActivityExchangeStockRate$inboundSchema))
        .optional(),
    type: ActivityExchangeType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ActivityExchange$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityExchangeCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityExchangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => ActivityExchangeStockRate$outboundSchema))
        .optional(),
    type: ActivityExchangeType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityExchange$;
(function (ActivityExchange$) {
    /** @deprecated use `ActivityExchange$inboundSchema` instead. */
    ActivityExchange$.inboundSchema = ActivityExchange$inboundSchema;
    /** @deprecated use `ActivityExchange$outboundSchema` instead. */
    ActivityExchange$.outboundSchema = ActivityExchange$outboundSchema;
})(ActivityExchange$ || (ActivityExchange$ = {}));
export function activityExchangeToJSON(activityExchange) {
    return JSON.stringify(ActivityExchange$outboundSchema.parse(activityExchange));
}
export function activityExchangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityExchange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityExchange' from JSON`);
}
/** @internal */
export const ActivityFee$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
export const ActivityFee$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFee$;
(function (ActivityFee$) {
    /** @deprecated use `ActivityFee$inboundSchema` instead. */
    ActivityFee$.inboundSchema = ActivityFee$inboundSchema;
    /** @deprecated use `ActivityFee$outboundSchema` instead. */
    ActivityFee$.outboundSchema = ActivityFee$outboundSchema;
})(ActivityFee$ || (ActivityFee$ = {}));
export function activityFeeToJSON(activityFee) {
    return JSON.stringify(ActivityFee$outboundSchema.parse(activityFee));
}
export function activityFeeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFee$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFee' from JSON`);
}
/** @internal */
export const ActivityFpslAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityFpslAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityFpslAction$outboundSchema = z.union([
    z.nativeEnum(ActivityFpslAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFpslAction$;
(function (ActivityFpslAction$) {
    /** @deprecated use `ActivityFpslAction$inboundSchema` instead. */
    ActivityFpslAction$.inboundSchema = ActivityFpslAction$inboundSchema;
    /** @deprecated use `ActivityFpslAction$outboundSchema` instead. */
    ActivityFpslAction$.outboundSchema = ActivityFpslAction$outboundSchema;
})(ActivityFpslAction$ || (ActivityFpslAction$ = {}));
/** @internal */
export const ActivityFpsl$inboundSchema = z.object({
    action: ActivityFpslAction$inboundSchema.optional(),
});
/** @internal */
export const ActivityFpsl$outboundSchema = z.object({
    action: ActivityFpslAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFpsl$;
(function (ActivityFpsl$) {
    /** @deprecated use `ActivityFpsl$inboundSchema` instead. */
    ActivityFpsl$.inboundSchema = ActivityFpsl$inboundSchema;
    /** @deprecated use `ActivityFpsl$outboundSchema` instead. */
    ActivityFpsl$.outboundSchema = ActivityFpsl$outboundSchema;
})(ActivityFpsl$ || (ActivityFpsl$ = {}));
export function activityFpslToJSON(activityFpsl) {
    return JSON.stringify(ActivityFpsl$outboundSchema.parse(activityFpsl));
}
export function activityFpslFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFpsl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFpsl' from JSON`);
}
/** @internal */
export const ActivityGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityGrossAmount$;
(function (ActivityGrossAmount$) {
    /** @deprecated use `ActivityGrossAmount$inboundSchema` instead. */
    ActivityGrossAmount$.inboundSchema = ActivityGrossAmount$inboundSchema;
    /** @deprecated use `ActivityGrossAmount$outboundSchema` instead. */
    ActivityGrossAmount$.outboundSchema = ActivityGrossAmount$outboundSchema;
})(ActivityGrossAmount$ || (ActivityGrossAmount$ = {}));
export function activityGrossAmountToJSON(activityGrossAmount) {
    return JSON.stringify(ActivityGrossAmount$outboundSchema.parse(activityGrossAmount));
}
export function activityGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityGrossAmount' from JSON`);
}
/** @internal */
export const ActivityInterestAccrualEndDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityInterestAccrualEndDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestAccrualEndDate$;
(function (ActivityInterestAccrualEndDate$) {
    /** @deprecated use `ActivityInterestAccrualEndDate$inboundSchema` instead. */
    ActivityInterestAccrualEndDate$.inboundSchema = ActivityInterestAccrualEndDate$inboundSchema;
    /** @deprecated use `ActivityInterestAccrualEndDate$outboundSchema` instead. */
    ActivityInterestAccrualEndDate$.outboundSchema = ActivityInterestAccrualEndDate$outboundSchema;
})(ActivityInterestAccrualEndDate$ || (ActivityInterestAccrualEndDate$ = {}));
export function activityInterestAccrualEndDateToJSON(activityInterestAccrualEndDate) {
    return JSON.stringify(ActivityInterestAccrualEndDate$outboundSchema.parse(activityInterestAccrualEndDate));
}
export function activityInterestAccrualEndDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestAccrualEndDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestAccrualEndDate' from JSON`);
}
/** @internal */
export const ActivityInterestAccrualStartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityInterestAccrualStartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestAccrualStartDate$;
(function (ActivityInterestAccrualStartDate$) {
    /** @deprecated use `ActivityInterestAccrualStartDate$inboundSchema` instead. */
    ActivityInterestAccrualStartDate$.inboundSchema = ActivityInterestAccrualStartDate$inboundSchema;
    /** @deprecated use `ActivityInterestAccrualStartDate$outboundSchema` instead. */
    ActivityInterestAccrualStartDate$.outboundSchema = ActivityInterestAccrualStartDate$outboundSchema;
})(ActivityInterestAccrualStartDate$ || (ActivityInterestAccrualStartDate$ = {}));
export function activityInterestAccrualStartDateToJSON(activityInterestAccrualStartDate) {
    return JSON.stringify(ActivityInterestAccrualStartDate$outboundSchema.parse(activityInterestAccrualStartDate));
}
export function activityInterestAccrualStartDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestAccrualStartDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestAccrualStartDate' from JSON`);
}
/** @internal */
export const ActivityInterestType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityInterestType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityInterestType$outboundSchema = z.union([
    z.nativeEnum(ActivityInterestType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestType$;
(function (ActivityInterestType$) {
    /** @deprecated use `ActivityInterestType$inboundSchema` instead. */
    ActivityInterestType$.inboundSchema = ActivityInterestType$inboundSchema;
    /** @deprecated use `ActivityInterestType$outboundSchema` instead. */
    ActivityInterestType$.outboundSchema = ActivityInterestType$outboundSchema;
})(ActivityInterestType$ || (ActivityInterestType$ = {}));
/** @internal */
export const ActivityInterest$inboundSchema = z.object({
    interest_accrual_end_date: z.nullable(z.lazy(() => ActivityInterestAccrualEndDate$inboundSchema)).optional(),
    interest_accrual_start_date: z.nullable(z.lazy(() => ActivityInterestAccrualStartDate$inboundSchema)).optional(),
    interest_type: ActivityInterestType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "interest_accrual_end_date": "interestAccrualEndDate",
        "interest_accrual_start_date": "interestAccrualStartDate",
        "interest_type": "interestType",
    });
});
/** @internal */
export const ActivityInterest$outboundSchema = z.object({
    interestAccrualEndDate: z.nullable(z.lazy(() => ActivityInterestAccrualEndDate$outboundSchema)).optional(),
    interestAccrualStartDate: z.nullable(z.lazy(() => ActivityInterestAccrualStartDate$outboundSchema)).optional(),
    interestType: ActivityInterestType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        interestAccrualEndDate: "interest_accrual_end_date",
        interestAccrualStartDate: "interest_accrual_start_date",
        interestType: "interest_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterest$;
(function (ActivityInterest$) {
    /** @deprecated use `ActivityInterest$inboundSchema` instead. */
    ActivityInterest$.inboundSchema = ActivityInterest$inboundSchema;
    /** @deprecated use `ActivityInterest$outboundSchema` instead. */
    ActivityInterest$.outboundSchema = ActivityInterest$outboundSchema;
})(ActivityInterest$ || (ActivityInterest$ = {}));
export function activityInterestToJSON(activityInterest) {
    return JSON.stringify(ActivityInterest$outboundSchema.parse(activityInterest));
}
export function activityInterestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterest' from JSON`);
}
/** @internal */
export const ActivityInterestPaymentCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityInterestPaymentCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPaymentCashRate$;
(function (ActivityInterestPaymentCashRate$) {
    /** @deprecated use `ActivityInterestPaymentCashRate$inboundSchema` instead. */
    ActivityInterestPaymentCashRate$.inboundSchema = ActivityInterestPaymentCashRate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentCashRate$outboundSchema` instead. */
    ActivityInterestPaymentCashRate$.outboundSchema = ActivityInterestPaymentCashRate$outboundSchema;
})(ActivityInterestPaymentCashRate$ || (ActivityInterestPaymentCashRate$ = {}));
export function activityInterestPaymentCashRateToJSON(activityInterestPaymentCashRate) {
    return JSON.stringify(ActivityInterestPaymentCashRate$outboundSchema.parse(activityInterestPaymentCashRate));
}
export function activityInterestPaymentCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPaymentCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPaymentCashRate' from JSON`);
}
/** @internal */
export const ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPaymentCorporateActionGeneralInformation$;
(function (ActivityInterestPaymentCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityInterestPaymentCorporateActionGeneralInformation$.inboundSchema = ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityInterestPaymentCorporateActionGeneralInformation$.outboundSchema = ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema;
})(ActivityInterestPaymentCorporateActionGeneralInformation$ || (ActivityInterestPaymentCorporateActionGeneralInformation$ = {}));
export function activityInterestPaymentCorporateActionGeneralInformationToJSON(activityInterestPaymentCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema
        .parse(activityInterestPaymentCorporateActionGeneralInformation));
}
export function activityInterestPaymentCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPaymentCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityInterestPaymentPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityInterestPaymentPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPaymentPaymentDate$;
(function (ActivityInterestPaymentPaymentDate$) {
    /** @deprecated use `ActivityInterestPaymentPaymentDate$inboundSchema` instead. */
    ActivityInterestPaymentPaymentDate$.inboundSchema = ActivityInterestPaymentPaymentDate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentPaymentDate$outboundSchema` instead. */
    ActivityInterestPaymentPaymentDate$.outboundSchema = ActivityInterestPaymentPaymentDate$outboundSchema;
})(ActivityInterestPaymentPaymentDate$ || (ActivityInterestPaymentPaymentDate$ = {}));
export function activityInterestPaymentPaymentDateToJSON(activityInterestPaymentPaymentDate) {
    return JSON.stringify(ActivityInterestPaymentPaymentDate$outboundSchema.parse(activityInterestPaymentPaymentDate));
}
export function activityInterestPaymentPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPaymentPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPaymentPaymentDate' from JSON`);
}
/** @internal */
export const ActivityInterestPaymentRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityInterestPaymentRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPaymentRecordDate$;
(function (ActivityInterestPaymentRecordDate$) {
    /** @deprecated use `ActivityInterestPaymentRecordDate$inboundSchema` instead. */
    ActivityInterestPaymentRecordDate$.inboundSchema = ActivityInterestPaymentRecordDate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentRecordDate$outboundSchema` instead. */
    ActivityInterestPaymentRecordDate$.outboundSchema = ActivityInterestPaymentRecordDate$outboundSchema;
})(ActivityInterestPaymentRecordDate$ || (ActivityInterestPaymentRecordDate$ = {}));
export function activityInterestPaymentRecordDateToJSON(activityInterestPaymentRecordDate) {
    return JSON.stringify(ActivityInterestPaymentRecordDate$outboundSchema.parse(activityInterestPaymentRecordDate));
}
export function activityInterestPaymentRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPaymentRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPaymentRecordDate' from JSON`);
}
/** @internal */
export const ActivityInterestPaymentSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityInterestPaymentSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPaymentSettled$;
(function (ActivityInterestPaymentSettled$) {
    /** @deprecated use `ActivityInterestPaymentSettled$inboundSchema` instead. */
    ActivityInterestPaymentSettled$.inboundSchema = ActivityInterestPaymentSettled$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentSettled$outboundSchema` instead. */
    ActivityInterestPaymentSettled$.outboundSchema = ActivityInterestPaymentSettled$outboundSchema;
})(ActivityInterestPaymentSettled$ || (ActivityInterestPaymentSettled$ = {}));
export function activityInterestPaymentSettledToJSON(activityInterestPaymentSettled) {
    return JSON.stringify(ActivityInterestPaymentSettled$outboundSchema.parse(activityInterestPaymentSettled));
}
export function activityInterestPaymentSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPaymentSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPaymentSettled' from JSON`);
}
/** @internal */
export const ActivityInterestPayment$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityInterestPaymentCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityInterestPaymentPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => ActivityInterestPaymentRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityInterestPaymentSettled$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityInterestPayment$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityInterestPaymentCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityInterestPaymentPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityInterestPaymentRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityInterestPaymentSettled$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityInterestPayment$;
(function (ActivityInterestPayment$) {
    /** @deprecated use `ActivityInterestPayment$inboundSchema` instead. */
    ActivityInterestPayment$.inboundSchema = ActivityInterestPayment$inboundSchema;
    /** @deprecated use `ActivityInterestPayment$outboundSchema` instead. */
    ActivityInterestPayment$.outboundSchema = ActivityInterestPayment$outboundSchema;
})(ActivityInterestPayment$ || (ActivityInterestPayment$ = {}));
export function activityInterestPaymentToJSON(activityInterestPayment) {
    return JSON.stringify(ActivityInterestPayment$outboundSchema.parse(activityInterestPayment));
}
export function activityInterestPaymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityInterestPayment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityInterestPayment' from JSON`);
}
/** @internal */
export const ActivityLiquidationAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityLiquidationAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityLiquidationAction$outboundSchema = z.union([
    z.nativeEnum(ActivityLiquidationAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationAction$;
(function (ActivityLiquidationAction$) {
    /** @deprecated use `ActivityLiquidationAction$inboundSchema` instead. */
    ActivityLiquidationAction$.inboundSchema = ActivityLiquidationAction$inboundSchema;
    /** @deprecated use `ActivityLiquidationAction$outboundSchema` instead. */
    ActivityLiquidationAction$.outboundSchema = ActivityLiquidationAction$outboundSchema;
})(ActivityLiquidationAction$ || (ActivityLiquidationAction$ = {}));
/** @internal */
export const ActivityLiquidationCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityLiquidationCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationCashRate$;
(function (ActivityLiquidationCashRate$) {
    /** @deprecated use `ActivityLiquidationCashRate$inboundSchema` instead. */
    ActivityLiquidationCashRate$.inboundSchema = ActivityLiquidationCashRate$inboundSchema;
    /** @deprecated use `ActivityLiquidationCashRate$outboundSchema` instead. */
    ActivityLiquidationCashRate$.outboundSchema = ActivityLiquidationCashRate$outboundSchema;
})(ActivityLiquidationCashRate$ || (ActivityLiquidationCashRate$ = {}));
export function activityLiquidationCashRateToJSON(activityLiquidationCashRate) {
    return JSON.stringify(ActivityLiquidationCashRate$outboundSchema.parse(activityLiquidationCashRate));
}
export function activityLiquidationCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationCashRate' from JSON`);
}
/** @internal */
export const ActivityLiquidationCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityLiquidationCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationCorporateActionGeneralInformation$;
(function (ActivityLiquidationCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityLiquidationCorporateActionGeneralInformation$.inboundSchema = ActivityLiquidationCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityLiquidationCorporateActionGeneralInformation$.outboundSchema = ActivityLiquidationCorporateActionGeneralInformation$outboundSchema;
})(ActivityLiquidationCorporateActionGeneralInformation$ || (ActivityLiquidationCorporateActionGeneralInformation$ = {}));
export function activityLiquidationCorporateActionGeneralInformationToJSON(activityLiquidationCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityLiquidationCorporateActionGeneralInformation$outboundSchema.parse(activityLiquidationCorporateActionGeneralInformation));
}
export function activityLiquidationCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityEffectiveDate$;
(function (ActivityEffectiveDate$) {
    /** @deprecated use `ActivityEffectiveDate$inboundSchema` instead. */
    ActivityEffectiveDate$.inboundSchema = ActivityEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityEffectiveDate$outboundSchema` instead. */
    ActivityEffectiveDate$.outboundSchema = ActivityEffectiveDate$outboundSchema;
})(ActivityEffectiveDate$ || (ActivityEffectiveDate$ = {}));
export function activityEffectiveDateToJSON(activityEffectiveDate) {
    return JSON.stringify(ActivityEffectiveDate$outboundSchema.parse(activityEffectiveDate));
}
export function activityEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityEffectiveDate' from JSON`);
}
/** @internal */
export const ActivityLiquidationPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityLiquidationPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationPaymentDate$;
(function (ActivityLiquidationPaymentDate$) {
    /** @deprecated use `ActivityLiquidationPaymentDate$inboundSchema` instead. */
    ActivityLiquidationPaymentDate$.inboundSchema = ActivityLiquidationPaymentDate$inboundSchema;
    /** @deprecated use `ActivityLiquidationPaymentDate$outboundSchema` instead. */
    ActivityLiquidationPaymentDate$.outboundSchema = ActivityLiquidationPaymentDate$outboundSchema;
})(ActivityLiquidationPaymentDate$ || (ActivityLiquidationPaymentDate$ = {}));
export function activityLiquidationPaymentDateToJSON(activityLiquidationPaymentDate) {
    return JSON.stringify(ActivityLiquidationPaymentDate$outboundSchema.parse(activityLiquidationPaymentDate));
}
export function activityLiquidationPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationPaymentDate' from JSON`);
}
/** @internal */
export const ActivityLiquidationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityLiquidationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationQuantity$;
(function (ActivityLiquidationQuantity$) {
    /** @deprecated use `ActivityLiquidationQuantity$inboundSchema` instead. */
    ActivityLiquidationQuantity$.inboundSchema = ActivityLiquidationQuantity$inboundSchema;
    /** @deprecated use `ActivityLiquidationQuantity$outboundSchema` instead. */
    ActivityLiquidationQuantity$.outboundSchema = ActivityLiquidationQuantity$outboundSchema;
})(ActivityLiquidationQuantity$ || (ActivityLiquidationQuantity$ = {}));
export function activityLiquidationQuantityToJSON(activityLiquidationQuantity) {
    return JSON.stringify(ActivityLiquidationQuantity$outboundSchema.parse(activityLiquidationQuantity));
}
export function activityLiquidationQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationQuantity' from JSON`);
}
/** @internal */
export const ActivityLiquidationRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityLiquidationRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationRecordDate$;
(function (ActivityLiquidationRecordDate$) {
    /** @deprecated use `ActivityLiquidationRecordDate$inboundSchema` instead. */
    ActivityLiquidationRecordDate$.inboundSchema = ActivityLiquidationRecordDate$inboundSchema;
    /** @deprecated use `ActivityLiquidationRecordDate$outboundSchema` instead. */
    ActivityLiquidationRecordDate$.outboundSchema = ActivityLiquidationRecordDate$outboundSchema;
})(ActivityLiquidationRecordDate$ || (ActivityLiquidationRecordDate$ = {}));
export function activityLiquidationRecordDateToJSON(activityLiquidationRecordDate) {
    return JSON.stringify(ActivityLiquidationRecordDate$outboundSchema.parse(activityLiquidationRecordDate));
}
export function activityLiquidationRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationRecordDate' from JSON`);
}
/** @internal */
export const ActivityLiquidationSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityLiquidationSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationSettled$;
(function (ActivityLiquidationSettled$) {
    /** @deprecated use `ActivityLiquidationSettled$inboundSchema` instead. */
    ActivityLiquidationSettled$.inboundSchema = ActivityLiquidationSettled$inboundSchema;
    /** @deprecated use `ActivityLiquidationSettled$outboundSchema` instead. */
    ActivityLiquidationSettled$.outboundSchema = ActivityLiquidationSettled$outboundSchema;
})(ActivityLiquidationSettled$ || (ActivityLiquidationSettled$ = {}));
export function activityLiquidationSettledToJSON(activityLiquidationSettled) {
    return JSON.stringify(ActivityLiquidationSettled$outboundSchema.parse(activityLiquidationSettled));
}
export function activityLiquidationSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidationSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidationSettled' from JSON`);
}
/** @internal */
export const ActivityLiquidationSubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivityLiquidationSubtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityLiquidationSubtype$outboundSchema = z.union([
    z.nativeEnum(ActivityLiquidationSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidationSubtype$;
(function (ActivityLiquidationSubtype$) {
    /** @deprecated use `ActivityLiquidationSubtype$inboundSchema` instead. */
    ActivityLiquidationSubtype$.inboundSchema = ActivityLiquidationSubtype$inboundSchema;
    /** @deprecated use `ActivityLiquidationSubtype$outboundSchema` instead. */
    ActivityLiquidationSubtype$.outboundSchema = ActivityLiquidationSubtype$outboundSchema;
})(ActivityLiquidationSubtype$ || (ActivityLiquidationSubtype$ = {}));
/** @internal */
export const ActivityLiquidation$inboundSchema = z.object({
    action: ActivityLiquidationAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => ActivityLiquidationCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityLiquidationCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => ActivityEffectiveDate$inboundSchema))
        .optional(),
    payment_date: z.nullable(z.lazy(() => ActivityLiquidationPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityLiquidationQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => ActivityLiquidationRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityLiquidationSettled$inboundSchema))
        .optional(),
    subtype: ActivityLiquidationSubtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityLiquidation$outboundSchema = z.object({
    action: ActivityLiquidationAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => ActivityLiquidationCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityLiquidationCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => ActivityEffectiveDate$outboundSchema))
        .optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityLiquidationPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityLiquidationQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => ActivityLiquidationRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityLiquidationSettled$outboundSchema))
        .optional(),
    subtype: ActivityLiquidationSubtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityLiquidation$;
(function (ActivityLiquidation$) {
    /** @deprecated use `ActivityLiquidation$inboundSchema` instead. */
    ActivityLiquidation$.inboundSchema = ActivityLiquidation$inboundSchema;
    /** @deprecated use `ActivityLiquidation$outboundSchema` instead. */
    ActivityLiquidation$.outboundSchema = ActivityLiquidation$outboundSchema;
})(ActivityLiquidation$ || (ActivityLiquidation$ = {}));
export function activityLiquidationToJSON(activityLiquidation) {
    return JSON.stringify(ActivityLiquidation$outboundSchema.parse(activityLiquidation));
}
export function activityLiquidationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityLiquidation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityLiquidation' from JSON`);
}
/** @internal */
export const ActivityMaturityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityMaturityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMaturityCashRate$;
(function (ActivityMaturityCashRate$) {
    /** @deprecated use `ActivityMaturityCashRate$inboundSchema` instead. */
    ActivityMaturityCashRate$.inboundSchema = ActivityMaturityCashRate$inboundSchema;
    /** @deprecated use `ActivityMaturityCashRate$outboundSchema` instead. */
    ActivityMaturityCashRate$.outboundSchema = ActivityMaturityCashRate$outboundSchema;
})(ActivityMaturityCashRate$ || (ActivityMaturityCashRate$ = {}));
export function activityMaturityCashRateToJSON(activityMaturityCashRate) {
    return JSON.stringify(ActivityMaturityCashRate$outboundSchema.parse(activityMaturityCashRate));
}
export function activityMaturityCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMaturityCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMaturityCashRate' from JSON`);
}
/** @internal */
export const ActivityMaturityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityMaturityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMaturityCorporateActionGeneralInformation$;
(function (ActivityMaturityCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityMaturityCorporateActionGeneralInformation$.inboundSchema = ActivityMaturityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityMaturityCorporateActionGeneralInformation$.outboundSchema = ActivityMaturityCorporateActionGeneralInformation$outboundSchema;
})(ActivityMaturityCorporateActionGeneralInformation$ || (ActivityMaturityCorporateActionGeneralInformation$ = {}));
export function activityMaturityCorporateActionGeneralInformationToJSON(activityMaturityCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityMaturityCorporateActionGeneralInformation$outboundSchema.parse(activityMaturityCorporateActionGeneralInformation));
}
export function activityMaturityCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMaturityCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMaturityCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityMaturityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityMaturityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMaturityPaymentDate$;
(function (ActivityMaturityPaymentDate$) {
    /** @deprecated use `ActivityMaturityPaymentDate$inboundSchema` instead. */
    ActivityMaturityPaymentDate$.inboundSchema = ActivityMaturityPaymentDate$inboundSchema;
    /** @deprecated use `ActivityMaturityPaymentDate$outboundSchema` instead. */
    ActivityMaturityPaymentDate$.outboundSchema = ActivityMaturityPaymentDate$outboundSchema;
})(ActivityMaturityPaymentDate$ || (ActivityMaturityPaymentDate$ = {}));
export function activityMaturityPaymentDateToJSON(activityMaturityPaymentDate) {
    return JSON.stringify(ActivityMaturityPaymentDate$outboundSchema.parse(activityMaturityPaymentDate));
}
export function activityMaturityPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMaturityPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMaturityPaymentDate' from JSON`);
}
/** @internal */
export const ActivityMaturityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityMaturityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMaturityQuantity$;
(function (ActivityMaturityQuantity$) {
    /** @deprecated use `ActivityMaturityQuantity$inboundSchema` instead. */
    ActivityMaturityQuantity$.inboundSchema = ActivityMaturityQuantity$inboundSchema;
    /** @deprecated use `ActivityMaturityQuantity$outboundSchema` instead. */
    ActivityMaturityQuantity$.outboundSchema = ActivityMaturityQuantity$outboundSchema;
})(ActivityMaturityQuantity$ || (ActivityMaturityQuantity$ = {}));
export function activityMaturityQuantityToJSON(activityMaturityQuantity) {
    return JSON.stringify(ActivityMaturityQuantity$outboundSchema.parse(activityMaturityQuantity));
}
export function activityMaturityQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMaturityQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMaturityQuantity' from JSON`);
}
/** @internal */
export const ActivityMaturity$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityMaturityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityMaturityCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityMaturityPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityMaturityQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const ActivityMaturity$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityMaturityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityMaturityCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityMaturityPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityMaturityQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMaturity$;
(function (ActivityMaturity$) {
    /** @deprecated use `ActivityMaturity$inboundSchema` instead. */
    ActivityMaturity$.inboundSchema = ActivityMaturity$inboundSchema;
    /** @deprecated use `ActivityMaturity$outboundSchema` instead. */
    ActivityMaturity$.outboundSchema = ActivityMaturity$outboundSchema;
})(ActivityMaturity$ || (ActivityMaturity$ = {}));
export function activityMaturityToJSON(activityMaturity) {
    return JSON.stringify(ActivityMaturity$outboundSchema.parse(activityMaturity));
}
export function activityMaturityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMaturity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMaturity' from JSON`);
}
/** @internal */
export const ActivityMergerAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMergerAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityMergerAction$outboundSchema = z.union([
    z.nativeEnum(ActivityMergerAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerAction$;
(function (ActivityMergerAction$) {
    /** @deprecated use `ActivityMergerAction$inboundSchema` instead. */
    ActivityMergerAction$.inboundSchema = ActivityMergerAction$inboundSchema;
    /** @deprecated use `ActivityMergerAction$outboundSchema` instead. */
    ActivityMergerAction$.outboundSchema = ActivityMergerAction$outboundSchema;
})(ActivityMergerAction$ || (ActivityMergerAction$ = {}));
/** @internal */
export const ActivityMergerCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityMergerCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerCashRate$;
(function (ActivityMergerCashRate$) {
    /** @deprecated use `ActivityMergerCashRate$inboundSchema` instead. */
    ActivityMergerCashRate$.inboundSchema = ActivityMergerCashRate$inboundSchema;
    /** @deprecated use `ActivityMergerCashRate$outboundSchema` instead. */
    ActivityMergerCashRate$.outboundSchema = ActivityMergerCashRate$outboundSchema;
})(ActivityMergerCashRate$ || (ActivityMergerCashRate$ = {}));
export function activityMergerCashRateToJSON(activityMergerCashRate) {
    return JSON.stringify(ActivityMergerCashRate$outboundSchema.parse(activityMergerCashRate));
}
export function activityMergerCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMergerCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMergerCashRate' from JSON`);
}
/** @internal */
export const ActivityMergerCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityMergerCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerCorporateActionGeneralInformation$;
(function (ActivityMergerCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityMergerCorporateActionGeneralInformation$.inboundSchema = ActivityMergerCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityMergerCorporateActionGeneralInformation$.outboundSchema = ActivityMergerCorporateActionGeneralInformation$outboundSchema;
})(ActivityMergerCorporateActionGeneralInformation$ || (ActivityMergerCorporateActionGeneralInformation$ = {}));
export function activityMergerCorporateActionGeneralInformationToJSON(activityMergerCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityMergerCorporateActionGeneralInformation$outboundSchema.parse(activityMergerCorporateActionGeneralInformation));
}
export function activityMergerCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMergerCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMergerCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityMergerEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityMergerEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerEffectiveDate$;
(function (ActivityMergerEffectiveDate$) {
    /** @deprecated use `ActivityMergerEffectiveDate$inboundSchema` instead. */
    ActivityMergerEffectiveDate$.inboundSchema = ActivityMergerEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityMergerEffectiveDate$outboundSchema` instead. */
    ActivityMergerEffectiveDate$.outboundSchema = ActivityMergerEffectiveDate$outboundSchema;
})(ActivityMergerEffectiveDate$ || (ActivityMergerEffectiveDate$ = {}));
export function activityMergerEffectiveDateToJSON(activityMergerEffectiveDate) {
    return JSON.stringify(ActivityMergerEffectiveDate$outboundSchema.parse(activityMergerEffectiveDate));
}
export function activityMergerEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMergerEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMergerEffectiveDate' from JSON`);
}
/** @internal */
export const ActivityMergerQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityMergerQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerQuantity$;
(function (ActivityMergerQuantity$) {
    /** @deprecated use `ActivityMergerQuantity$inboundSchema` instead. */
    ActivityMergerQuantity$.inboundSchema = ActivityMergerQuantity$inboundSchema;
    /** @deprecated use `ActivityMergerQuantity$outboundSchema` instead. */
    ActivityMergerQuantity$.outboundSchema = ActivityMergerQuantity$outboundSchema;
})(ActivityMergerQuantity$ || (ActivityMergerQuantity$ = {}));
export function activityMergerQuantityToJSON(activityMergerQuantity) {
    return JSON.stringify(ActivityMergerQuantity$outboundSchema.parse(activityMergerQuantity));
}
export function activityMergerQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMergerQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMergerQuantity' from JSON`);
}
/** @internal */
export const ActivityMergerStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityMergerStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerStockRate$;
(function (ActivityMergerStockRate$) {
    /** @deprecated use `ActivityMergerStockRate$inboundSchema` instead. */
    ActivityMergerStockRate$.inboundSchema = ActivityMergerStockRate$inboundSchema;
    /** @deprecated use `ActivityMergerStockRate$outboundSchema` instead. */
    ActivityMergerStockRate$.outboundSchema = ActivityMergerStockRate$outboundSchema;
})(ActivityMergerStockRate$ || (ActivityMergerStockRate$ = {}));
export function activityMergerStockRateToJSON(activityMergerStockRate) {
    return JSON.stringify(ActivityMergerStockRate$outboundSchema.parse(activityMergerStockRate));
}
export function activityMergerStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMergerStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMergerStockRate' from JSON`);
}
/** @internal */
export const ActivityMergerType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMergerType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityMergerType$outboundSchema = z.union([
    z.nativeEnum(ActivityMergerType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMergerType$;
(function (ActivityMergerType$) {
    /** @deprecated use `ActivityMergerType$inboundSchema` instead. */
    ActivityMergerType$.inboundSchema = ActivityMergerType$inboundSchema;
    /** @deprecated use `ActivityMergerType$outboundSchema` instead. */
    ActivityMergerType$.outboundSchema = ActivityMergerType$outboundSchema;
})(ActivityMergerType$ || (ActivityMergerType$ = {}));
/** @internal */
export const ActivityMerger$inboundSchema = z.object({
    action: ActivityMergerAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => ActivityMergerCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityMergerCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => ActivityMergerEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityMergerQuantity$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => ActivityMergerStockRate$inboundSchema))
        .optional(),
    type: ActivityMergerType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ActivityMerger$outboundSchema = z.object({
    action: ActivityMergerAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => ActivityMergerCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityMergerCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => ActivityMergerEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityMergerQuantity$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => ActivityMergerStockRate$outboundSchema))
        .optional(),
    type: ActivityMergerType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityMerger$;
(function (ActivityMerger$) {
    /** @deprecated use `ActivityMerger$inboundSchema` instead. */
    ActivityMerger$.inboundSchema = ActivityMerger$inboundSchema;
    /** @deprecated use `ActivityMerger$outboundSchema` instead. */
    ActivityMerger$.outboundSchema = ActivityMerger$outboundSchema;
})(ActivityMerger$ || (ActivityMerger$ = {}));
export function activityMergerToJSON(activityMerger) {
    return JSON.stringify(ActivityMerger$outboundSchema.parse(activityMerger));
}
export function activityMergerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityMerger$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityMerger' from JSON`);
}
/** @internal */
export const ActivityNameChangeAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityNameChangeAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityNameChangeAction$outboundSchema = z.union([
    z.nativeEnum(ActivityNameChangeAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNameChangeAction$;
(function (ActivityNameChangeAction$) {
    /** @deprecated use `ActivityNameChangeAction$inboundSchema` instead. */
    ActivityNameChangeAction$.inboundSchema = ActivityNameChangeAction$inboundSchema;
    /** @deprecated use `ActivityNameChangeAction$outboundSchema` instead. */
    ActivityNameChangeAction$.outboundSchema = ActivityNameChangeAction$outboundSchema;
})(ActivityNameChangeAction$ || (ActivityNameChangeAction$ = {}));
/** @internal */
export const ActivityNameChangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityNameChangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNameChangeCorporateActionGeneralInformation$;
(function (ActivityNameChangeCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityNameChangeCorporateActionGeneralInformation$.inboundSchema = ActivityNameChangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityNameChangeCorporateActionGeneralInformation$.outboundSchema = ActivityNameChangeCorporateActionGeneralInformation$outboundSchema;
})(ActivityNameChangeCorporateActionGeneralInformation$ || (ActivityNameChangeCorporateActionGeneralInformation$ = {}));
export function activityNameChangeCorporateActionGeneralInformationToJSON(activityNameChangeCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityNameChangeCorporateActionGeneralInformation$outboundSchema.parse(activityNameChangeCorporateActionGeneralInformation));
}
export function activityNameChangeCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityNameChangeCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityNameChangeCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityNameChangeEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityNameChangeEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNameChangeEffectiveDate$;
(function (ActivityNameChangeEffectiveDate$) {
    /** @deprecated use `ActivityNameChangeEffectiveDate$inboundSchema` instead. */
    ActivityNameChangeEffectiveDate$.inboundSchema = ActivityNameChangeEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityNameChangeEffectiveDate$outboundSchema` instead. */
    ActivityNameChangeEffectiveDate$.outboundSchema = ActivityNameChangeEffectiveDate$outboundSchema;
})(ActivityNameChangeEffectiveDate$ || (ActivityNameChangeEffectiveDate$ = {}));
export function activityNameChangeEffectiveDateToJSON(activityNameChangeEffectiveDate) {
    return JSON.stringify(ActivityNameChangeEffectiveDate$outboundSchema.parse(activityNameChangeEffectiveDate));
}
export function activityNameChangeEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityNameChangeEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityNameChangeEffectiveDate' from JSON`);
}
/** @internal */
export const ActivityNameChangeQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityNameChangeQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNameChangeQuantity$;
(function (ActivityNameChangeQuantity$) {
    /** @deprecated use `ActivityNameChangeQuantity$inboundSchema` instead. */
    ActivityNameChangeQuantity$.inboundSchema = ActivityNameChangeQuantity$inboundSchema;
    /** @deprecated use `ActivityNameChangeQuantity$outboundSchema` instead. */
    ActivityNameChangeQuantity$.outboundSchema = ActivityNameChangeQuantity$outboundSchema;
})(ActivityNameChangeQuantity$ || (ActivityNameChangeQuantity$ = {}));
export function activityNameChangeQuantityToJSON(activityNameChangeQuantity) {
    return JSON.stringify(ActivityNameChangeQuantity$outboundSchema.parse(activityNameChangeQuantity));
}
export function activityNameChangeQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityNameChangeQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityNameChangeQuantity' from JSON`);
}
/** @internal */
export const ActivityNameChange$inboundSchema = z.object({
    action: ActivityNameChangeAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityNameChangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => ActivityNameChangeEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityNameChangeQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
    });
});
/** @internal */
export const ActivityNameChange$outboundSchema = z.object({
    action: ActivityNameChangeAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityNameChangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => ActivityNameChangeEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityNameChangeQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNameChange$;
(function (ActivityNameChange$) {
    /** @deprecated use `ActivityNameChange$inboundSchema` instead. */
    ActivityNameChange$.inboundSchema = ActivityNameChange$inboundSchema;
    /** @deprecated use `ActivityNameChange$outboundSchema` instead. */
    ActivityNameChange$.outboundSchema = ActivityNameChange$outboundSchema;
})(ActivityNameChange$ || (ActivityNameChange$ = {}));
export function activityNameChangeToJSON(activityNameChange) {
    return JSON.stringify(ActivityNameChange$outboundSchema.parse(activityNameChange));
}
export function activityNameChangeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityNameChange$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityNameChange' from JSON`);
}
/** @internal */
export const ActivityNetAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityNetAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityNetAmount$;
(function (ActivityNetAmount$) {
    /** @deprecated use `ActivityNetAmount$inboundSchema` instead. */
    ActivityNetAmount$.inboundSchema = ActivityNetAmount$inboundSchema;
    /** @deprecated use `ActivityNetAmount$outboundSchema` instead. */
    ActivityNetAmount$.outboundSchema = ActivityNetAmount$outboundSchema;
})(ActivityNetAmount$ || (ActivityNetAmount$ = {}));
export function activityNetAmountToJSON(activityNetAmount) {
    return JSON.stringify(ActivityNetAmount$outboundSchema.parse(activityNetAmount));
}
export function activityNetAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityNetAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityNetAmount' from JSON`);
}
/** @internal */
export const NextActivityProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const NextActivityProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NextActivityProcessDate$;
(function (NextActivityProcessDate$) {
    /** @deprecated use `NextActivityProcessDate$inboundSchema` instead. */
    NextActivityProcessDate$.inboundSchema = NextActivityProcessDate$inboundSchema;
    /** @deprecated use `NextActivityProcessDate$outboundSchema` instead. */
    NextActivityProcessDate$.outboundSchema = NextActivityProcessDate$outboundSchema;
})(NextActivityProcessDate$ || (NextActivityProcessDate$ = {}));
export function nextActivityProcessDateToJSON(nextActivityProcessDate) {
    return JSON.stringify(NextActivityProcessDate$outboundSchema.parse(nextActivityProcessDate));
}
export function nextActivityProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NextActivityProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NextActivityProcessDate' from JSON`);
}
/** @internal */
export const None$inboundSchema = z
    .object({});
/** @internal */
export const None$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var None$;
(function (None$) {
    /** @deprecated use `None$inboundSchema` instead. */
    None$.inboundSchema = None$inboundSchema;
    /** @deprecated use `None$outboundSchema` instead. */
    None$.outboundSchema = None$outboundSchema;
})(None$ || (None$ = {}));
export function noneToJSON(none) {
    return JSON.stringify(None$outboundSchema.parse(none));
}
export function noneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => None$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'None' from JSON`);
}
/** @internal */
export const ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKindCorporateActionGeneralInformation$;
(function (ActivityPaymentInKindCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityPaymentInKindCorporateActionGeneralInformation$.inboundSchema = ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityPaymentInKindCorporateActionGeneralInformation$.outboundSchema = ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema;
})(ActivityPaymentInKindCorporateActionGeneralInformation$ || (ActivityPaymentInKindCorporateActionGeneralInformation$ = {}));
export function activityPaymentInKindCorporateActionGeneralInformationToJSON(activityPaymentInKindCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema.parse(activityPaymentInKindCorporateActionGeneralInformation));
}
export function activityPaymentInKindCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKindCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityPaymentInKindPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityPaymentInKindPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKindPaymentDate$;
(function (ActivityPaymentInKindPaymentDate$) {
    /** @deprecated use `ActivityPaymentInKindPaymentDate$inboundSchema` instead. */
    ActivityPaymentInKindPaymentDate$.inboundSchema = ActivityPaymentInKindPaymentDate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindPaymentDate$outboundSchema` instead. */
    ActivityPaymentInKindPaymentDate$.outboundSchema = ActivityPaymentInKindPaymentDate$outboundSchema;
})(ActivityPaymentInKindPaymentDate$ || (ActivityPaymentInKindPaymentDate$ = {}));
export function activityPaymentInKindPaymentDateToJSON(activityPaymentInKindPaymentDate) {
    return JSON.stringify(ActivityPaymentInKindPaymentDate$outboundSchema.parse(activityPaymentInKindPaymentDate));
}
export function activityPaymentInKindPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKindPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKindPaymentDate' from JSON`);
}
/** @internal */
export const ActivityPaymentInKindRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityPaymentInKindRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKindRecordDate$;
(function (ActivityPaymentInKindRecordDate$) {
    /** @deprecated use `ActivityPaymentInKindRecordDate$inboundSchema` instead. */
    ActivityPaymentInKindRecordDate$.inboundSchema = ActivityPaymentInKindRecordDate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindRecordDate$outboundSchema` instead. */
    ActivityPaymentInKindRecordDate$.outboundSchema = ActivityPaymentInKindRecordDate$outboundSchema;
})(ActivityPaymentInKindRecordDate$ || (ActivityPaymentInKindRecordDate$ = {}));
export function activityPaymentInKindRecordDateToJSON(activityPaymentInKindRecordDate) {
    return JSON.stringify(ActivityPaymentInKindRecordDate$outboundSchema.parse(activityPaymentInKindRecordDate));
}
export function activityPaymentInKindRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKindRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKindRecordDate' from JSON`);
}
/** @internal */
export const ActivityPaymentInKindSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPaymentInKindSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKindSettled$;
(function (ActivityPaymentInKindSettled$) {
    /** @deprecated use `ActivityPaymentInKindSettled$inboundSchema` instead. */
    ActivityPaymentInKindSettled$.inboundSchema = ActivityPaymentInKindSettled$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindSettled$outboundSchema` instead. */
    ActivityPaymentInKindSettled$.outboundSchema = ActivityPaymentInKindSettled$outboundSchema;
})(ActivityPaymentInKindSettled$ || (ActivityPaymentInKindSettled$ = {}));
export function activityPaymentInKindSettledToJSON(activityPaymentInKindSettled) {
    return JSON.stringify(ActivityPaymentInKindSettled$outboundSchema.parse(activityPaymentInKindSettled));
}
export function activityPaymentInKindSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKindSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKindSettled' from JSON`);
}
/** @internal */
export const ActivityPaymentInKindStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPaymentInKindStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKindStockRate$;
(function (ActivityPaymentInKindStockRate$) {
    /** @deprecated use `ActivityPaymentInKindStockRate$inboundSchema` instead. */
    ActivityPaymentInKindStockRate$.inboundSchema = ActivityPaymentInKindStockRate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindStockRate$outboundSchema` instead. */
    ActivityPaymentInKindStockRate$.outboundSchema = ActivityPaymentInKindStockRate$outboundSchema;
})(ActivityPaymentInKindStockRate$ || (ActivityPaymentInKindStockRate$ = {}));
export function activityPaymentInKindStockRateToJSON(activityPaymentInKindStockRate) {
    return JSON.stringify(ActivityPaymentInKindStockRate$outboundSchema.parse(activityPaymentInKindStockRate));
}
export function activityPaymentInKindStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKindStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKindStockRate' from JSON`);
}
/** @internal */
export const ActivityPaymentInKind$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityPaymentInKindPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => ActivityPaymentInKindRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityPaymentInKindSettled$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => ActivityPaymentInKindStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ActivityPaymentInKind$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityPaymentInKindPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityPaymentInKindRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityPaymentInKindSettled$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => ActivityPaymentInKindStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPaymentInKind$;
(function (ActivityPaymentInKind$) {
    /** @deprecated use `ActivityPaymentInKind$inboundSchema` instead. */
    ActivityPaymentInKind$.inboundSchema = ActivityPaymentInKind$inboundSchema;
    /** @deprecated use `ActivityPaymentInKind$outboundSchema` instead. */
    ActivityPaymentInKind$.outboundSchema = ActivityPaymentInKind$outboundSchema;
})(ActivityPaymentInKind$ || (ActivityPaymentInKind$ = {}));
export function activityPaymentInKindToJSON(activityPaymentInKind) {
    return JSON.stringify(ActivityPaymentInKind$outboundSchema.parse(activityPaymentInKind));
}
export function activityPaymentInKindFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPaymentInKind$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPaymentInKind' from JSON`);
}
/** @internal */
export const PreviousProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PreviousProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousProcessDate$;
(function (PreviousProcessDate$) {
    /** @deprecated use `PreviousProcessDate$inboundSchema` instead. */
    PreviousProcessDate$.inboundSchema = PreviousProcessDate$inboundSchema;
    /** @deprecated use `PreviousProcessDate$outboundSchema` instead. */
    PreviousProcessDate$.outboundSchema = PreviousProcessDate$outboundSchema;
})(PreviousProcessDate$ || (PreviousProcessDate$ = {}));
export function previousProcessDateToJSON(previousProcessDate) {
    return JSON.stringify(PreviousProcessDate$outboundSchema.parse(previousProcessDate));
}
export function previousProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PreviousProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PreviousProcessDate' from JSON`);
}
/** @internal */
export const ActivityPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPrice$;
(function (ActivityPrice$) {
    /** @deprecated use `ActivityPrice$inboundSchema` instead. */
    ActivityPrice$.inboundSchema = ActivityPrice$inboundSchema;
    /** @deprecated use `ActivityPrice$outboundSchema` instead. */
    ActivityPrice$.outboundSchema = ActivityPrice$outboundSchema;
})(ActivityPrice$ || (ActivityPrice$ = {}));
export function activityPriceToJSON(activityPrice) {
    return JSON.stringify(ActivityPrice$outboundSchema.parse(activityPrice));
}
export function activityPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPrice' from JSON`);
}
/** @internal */
export const ActivityProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityProcessDate$;
(function (ActivityProcessDate$) {
    /** @deprecated use `ActivityProcessDate$inboundSchema` instead. */
    ActivityProcessDate$.inboundSchema = ActivityProcessDate$inboundSchema;
    /** @deprecated use `ActivityProcessDate$outboundSchema` instead. */
    ActivityProcessDate$.outboundSchema = ActivityProcessDate$outboundSchema;
})(ActivityProcessDate$ || (ActivityProcessDate$ = {}));
export function activityProcessDateToJSON(activityProcessDate) {
    return JSON.stringify(ActivityProcessDate$outboundSchema.parse(activityProcessDate));
}
export function activityProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityProcessDate' from JSON`);
}
/** @internal */
export const ActivityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityQuantity$;
(function (ActivityQuantity$) {
    /** @deprecated use `ActivityQuantity$inboundSchema` instead. */
    ActivityQuantity$.inboundSchema = ActivityQuantity$inboundSchema;
    /** @deprecated use `ActivityQuantity$outboundSchema` instead. */
    ActivityQuantity$.outboundSchema = ActivityQuantity$outboundSchema;
})(ActivityQuantity$ || (ActivityQuantity$ = {}));
export function activityQuantityToJSON(activityQuantity) {
    return JSON.stringify(ActivityQuantity$outboundSchema.parse(activityQuantity));
}
export function activityQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityQuantity' from JSON`);
}
/** @internal */
export const ActivityRedemptionFullAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionFullAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityRedemptionFullAction$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionFullAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullAction$;
(function (ActivityRedemptionFullAction$) {
    /** @deprecated use `ActivityRedemptionFullAction$inboundSchema` instead. */
    ActivityRedemptionFullAction$.inboundSchema = ActivityRedemptionFullAction$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullAction$outboundSchema` instead. */
    ActivityRedemptionFullAction$.outboundSchema = ActivityRedemptionFullAction$outboundSchema;
})(ActivityRedemptionFullAction$ || (ActivityRedemptionFullAction$ = {}));
/** @internal */
export const ActivityRedemptionFullCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRedemptionFullCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullCashRate$;
(function (ActivityRedemptionFullCashRate$) {
    /** @deprecated use `ActivityRedemptionFullCashRate$inboundSchema` instead. */
    ActivityRedemptionFullCashRate$.inboundSchema = ActivityRedemptionFullCashRate$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullCashRate$outboundSchema` instead. */
    ActivityRedemptionFullCashRate$.outboundSchema = ActivityRedemptionFullCashRate$outboundSchema;
})(ActivityRedemptionFullCashRate$ || (ActivityRedemptionFullCashRate$ = {}));
export function activityRedemptionFullCashRateToJSON(activityRedemptionFullCashRate) {
    return JSON.stringify(ActivityRedemptionFullCashRate$outboundSchema.parse(activityRedemptionFullCashRate));
}
export function activityRedemptionFullCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionFullCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionFullCashRate' from JSON`);
}
/** @internal */
export const ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullCorporateActionGeneralInformation$;
(function (ActivityRedemptionFullCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRedemptionFullCorporateActionGeneralInformation$.inboundSchema = ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRedemptionFullCorporateActionGeneralInformation$.outboundSchema = ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema;
})(ActivityRedemptionFullCorporateActionGeneralInformation$ || (ActivityRedemptionFullCorporateActionGeneralInformation$ = {}));
export function activityRedemptionFullCorporateActionGeneralInformationToJSON(activityRedemptionFullCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema
        .parse(activityRedemptionFullCorporateActionGeneralInformation));
}
export function activityRedemptionFullCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionFullCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityRedemptionFullPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityRedemptionFullPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullPaymentDate$;
(function (ActivityRedemptionFullPaymentDate$) {
    /** @deprecated use `ActivityRedemptionFullPaymentDate$inboundSchema` instead. */
    ActivityRedemptionFullPaymentDate$.inboundSchema = ActivityRedemptionFullPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullPaymentDate$outboundSchema` instead. */
    ActivityRedemptionFullPaymentDate$.outboundSchema = ActivityRedemptionFullPaymentDate$outboundSchema;
})(ActivityRedemptionFullPaymentDate$ || (ActivityRedemptionFullPaymentDate$ = {}));
export function activityRedemptionFullPaymentDateToJSON(activityRedemptionFullPaymentDate) {
    return JSON.stringify(ActivityRedemptionFullPaymentDate$outboundSchema.parse(activityRedemptionFullPaymentDate));
}
export function activityRedemptionFullPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionFullPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionFullPaymentDate' from JSON`);
}
/** @internal */
export const ActivityRedemptionFullQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRedemptionFullQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullQuantity$;
(function (ActivityRedemptionFullQuantity$) {
    /** @deprecated use `ActivityRedemptionFullQuantity$inboundSchema` instead. */
    ActivityRedemptionFullQuantity$.inboundSchema = ActivityRedemptionFullQuantity$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullQuantity$outboundSchema` instead. */
    ActivityRedemptionFullQuantity$.outboundSchema = ActivityRedemptionFullQuantity$outboundSchema;
})(ActivityRedemptionFullQuantity$ || (ActivityRedemptionFullQuantity$ = {}));
export function activityRedemptionFullQuantityToJSON(activityRedemptionFullQuantity) {
    return JSON.stringify(ActivityRedemptionFullQuantity$outboundSchema.parse(activityRedemptionFullQuantity));
}
export function activityRedemptionFullQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionFullQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionFullQuantity' from JSON`);
}
/** @internal */
export const ActivityRedemptionFullSubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionFullSubtype),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityRedemptionFullSubtype$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionFullSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFullSubtype$;
(function (ActivityRedemptionFullSubtype$) {
    /** @deprecated use `ActivityRedemptionFullSubtype$inboundSchema` instead. */
    ActivityRedemptionFullSubtype$.inboundSchema = ActivityRedemptionFullSubtype$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullSubtype$outboundSchema` instead. */
    ActivityRedemptionFullSubtype$.outboundSchema = ActivityRedemptionFullSubtype$outboundSchema;
})(ActivityRedemptionFullSubtype$ || (ActivityRedemptionFullSubtype$ = {}));
/** @internal */
export const ActivityRedemptionFull$inboundSchema = z.object({
    action: ActivityRedemptionFullAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => ActivityRedemptionFullCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityRedemptionFullPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityRedemptionFullQuantity$inboundSchema)).optional(),
    subtype: ActivityRedemptionFullSubtype$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const ActivityRedemptionFull$outboundSchema = z.object({
    action: ActivityRedemptionFullAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => ActivityRedemptionFullCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityRedemptionFullPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityRedemptionFullQuantity$outboundSchema)).optional(),
    subtype: ActivityRedemptionFullSubtype$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionFull$;
(function (ActivityRedemptionFull$) {
    /** @deprecated use `ActivityRedemptionFull$inboundSchema` instead. */
    ActivityRedemptionFull$.inboundSchema = ActivityRedemptionFull$inboundSchema;
    /** @deprecated use `ActivityRedemptionFull$outboundSchema` instead. */
    ActivityRedemptionFull$.outboundSchema = ActivityRedemptionFull$outboundSchema;
})(ActivityRedemptionFull$ || (ActivityRedemptionFull$ = {}));
export function activityRedemptionFullToJSON(activityRedemptionFull) {
    return JSON.stringify(ActivityRedemptionFull$outboundSchema.parse(activityRedemptionFull));
}
export function activityRedemptionFullFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionFull$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionFull' from JSON`);
}
/** @internal */
export const ActivityRedemptionPartialAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionPartialAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityRedemptionPartialAction$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionPartialAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartialAction$;
(function (ActivityRedemptionPartialAction$) {
    /** @deprecated use `ActivityRedemptionPartialAction$inboundSchema` instead. */
    ActivityRedemptionPartialAction$.inboundSchema = ActivityRedemptionPartialAction$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialAction$outboundSchema` instead. */
    ActivityRedemptionPartialAction$.outboundSchema = ActivityRedemptionPartialAction$outboundSchema;
})(ActivityRedemptionPartialAction$ || (ActivityRedemptionPartialAction$ = {}));
/** @internal */
export const ActivityRedemptionPartialCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRedemptionPartialCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartialCashRate$;
(function (ActivityRedemptionPartialCashRate$) {
    /** @deprecated use `ActivityRedemptionPartialCashRate$inboundSchema` instead. */
    ActivityRedemptionPartialCashRate$.inboundSchema = ActivityRedemptionPartialCashRate$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialCashRate$outboundSchema` instead. */
    ActivityRedemptionPartialCashRate$.outboundSchema = ActivityRedemptionPartialCashRate$outboundSchema;
})(ActivityRedemptionPartialCashRate$ || (ActivityRedemptionPartialCashRate$ = {}));
export function activityRedemptionPartialCashRateToJSON(activityRedemptionPartialCashRate) {
    return JSON.stringify(ActivityRedemptionPartialCashRate$outboundSchema.parse(activityRedemptionPartialCashRate));
}
export function activityRedemptionPartialCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionPartialCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionPartialCashRate' from JSON`);
}
/** @internal */
export const ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartialCorporateActionGeneralInformation$;
(function (ActivityRedemptionPartialCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRedemptionPartialCorporateActionGeneralInformation$.inboundSchema = ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRedemptionPartialCorporateActionGeneralInformation$.outboundSchema = ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema;
})(ActivityRedemptionPartialCorporateActionGeneralInformation$ || (ActivityRedemptionPartialCorporateActionGeneralInformation$ = {}));
export function activityRedemptionPartialCorporateActionGeneralInformationToJSON(activityRedemptionPartialCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema
        .parse(activityRedemptionPartialCorporateActionGeneralInformation));
}
export function activityRedemptionPartialCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionPartialCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityRedemptionPartialPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityRedemptionPartialPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartialPaymentDate$;
(function (ActivityRedemptionPartialPaymentDate$) {
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$inboundSchema` instead. */
    ActivityRedemptionPartialPaymentDate$.inboundSchema = ActivityRedemptionPartialPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$outboundSchema` instead. */
    ActivityRedemptionPartialPaymentDate$.outboundSchema = ActivityRedemptionPartialPaymentDate$outboundSchema;
})(ActivityRedemptionPartialPaymentDate$ || (ActivityRedemptionPartialPaymentDate$ = {}));
export function activityRedemptionPartialPaymentDateToJSON(activityRedemptionPartialPaymentDate) {
    return JSON.stringify(ActivityRedemptionPartialPaymentDate$outboundSchema.parse(activityRedemptionPartialPaymentDate));
}
export function activityRedemptionPartialPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionPartialPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionPartialPaymentDate' from JSON`);
}
/** @internal */
export const ActivityRedemptionPartialQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRedemptionPartialQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartialQuantity$;
(function (ActivityRedemptionPartialQuantity$) {
    /** @deprecated use `ActivityRedemptionPartialQuantity$inboundSchema` instead. */
    ActivityRedemptionPartialQuantity$.inboundSchema = ActivityRedemptionPartialQuantity$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialQuantity$outboundSchema` instead. */
    ActivityRedemptionPartialQuantity$.outboundSchema = ActivityRedemptionPartialQuantity$outboundSchema;
})(ActivityRedemptionPartialQuantity$ || (ActivityRedemptionPartialQuantity$ = {}));
export function activityRedemptionPartialQuantityToJSON(activityRedemptionPartialQuantity) {
    return JSON.stringify(ActivityRedemptionPartialQuantity$outboundSchema.parse(activityRedemptionPartialQuantity));
}
export function activityRedemptionPartialQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionPartialQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionPartialQuantity' from JSON`);
}
/** @internal */
export const ActivityRedemptionPartial$inboundSchema = z.object({
    action: ActivityRedemptionPartialAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => ActivityRedemptionPartialCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityRedemptionPartialPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityRedemptionPartialQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const ActivityRedemptionPartial$outboundSchema = z.object({
    action: ActivityRedemptionPartialAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => ActivityRedemptionPartialCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityRedemptionPartialPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityRedemptionPartialQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRedemptionPartial$;
(function (ActivityRedemptionPartial$) {
    /** @deprecated use `ActivityRedemptionPartial$inboundSchema` instead. */
    ActivityRedemptionPartial$.inboundSchema = ActivityRedemptionPartial$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartial$outboundSchema` instead. */
    ActivityRedemptionPartial$.outboundSchema = ActivityRedemptionPartial$outboundSchema;
})(ActivityRedemptionPartial$ || (ActivityRedemptionPartial$ = {}));
export function activityRedemptionPartialToJSON(activityRedemptionPartial) {
    return JSON.stringify(ActivityRedemptionPartial$outboundSchema.parse(activityRedemptionPartial));
}
export function activityRedemptionPartialFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRedemptionPartial$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRedemptionPartial' from JSON`);
}
/** @internal */
export const ActivityReverseStockSplitAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityReverseStockSplitAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityReverseStockSplitAction$outboundSchema = z.union([
    z.nativeEnum(ActivityReverseStockSplitAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplitAction$;
(function (ActivityReverseStockSplitAction$) {
    /** @deprecated use `ActivityReverseStockSplitAction$inboundSchema` instead. */
    ActivityReverseStockSplitAction$.inboundSchema = ActivityReverseStockSplitAction$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitAction$outboundSchema` instead. */
    ActivityReverseStockSplitAction$.outboundSchema = ActivityReverseStockSplitAction$outboundSchema;
})(ActivityReverseStockSplitAction$ || (ActivityReverseStockSplitAction$ = {}));
/** @internal */
export const ActivityReverseStockSplitCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityReverseStockSplitCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplitCashRate$;
(function (ActivityReverseStockSplitCashRate$) {
    /** @deprecated use `ActivityReverseStockSplitCashRate$inboundSchema` instead. */
    ActivityReverseStockSplitCashRate$.inboundSchema = ActivityReverseStockSplitCashRate$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitCashRate$outboundSchema` instead. */
    ActivityReverseStockSplitCashRate$.outboundSchema = ActivityReverseStockSplitCashRate$outboundSchema;
})(ActivityReverseStockSplitCashRate$ || (ActivityReverseStockSplitCashRate$ = {}));
export function activityReverseStockSplitCashRateToJSON(activityReverseStockSplitCashRate) {
    return JSON.stringify(ActivityReverseStockSplitCashRate$outboundSchema.parse(activityReverseStockSplitCashRate));
}
export function activityReverseStockSplitCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityReverseStockSplitCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityReverseStockSplitCashRate' from JSON`);
}
/** @internal */
export const ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplitCorporateActionGeneralInformation$;
(function (ActivityReverseStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityReverseStockSplitCorporateActionGeneralInformation$.inboundSchema = ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityReverseStockSplitCorporateActionGeneralInformation$.outboundSchema = ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityReverseStockSplitCorporateActionGeneralInformation$ || (ActivityReverseStockSplitCorporateActionGeneralInformation$ = {}));
export function activityReverseStockSplitCorporateActionGeneralInformationToJSON(activityReverseStockSplitCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema
        .parse(activityReverseStockSplitCorporateActionGeneralInformation));
}
export function activityReverseStockSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityReverseStockSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityReverseStockSplitEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityReverseStockSplitEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplitEffectiveDate$;
(function (ActivityReverseStockSplitEffectiveDate$) {
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$inboundSchema` instead. */
    ActivityReverseStockSplitEffectiveDate$.inboundSchema = ActivityReverseStockSplitEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$outboundSchema` instead. */
    ActivityReverseStockSplitEffectiveDate$.outboundSchema = ActivityReverseStockSplitEffectiveDate$outboundSchema;
})(ActivityReverseStockSplitEffectiveDate$ || (ActivityReverseStockSplitEffectiveDate$ = {}));
export function activityReverseStockSplitEffectiveDateToJSON(activityReverseStockSplitEffectiveDate) {
    return JSON.stringify(ActivityReverseStockSplitEffectiveDate$outboundSchema.parse(activityReverseStockSplitEffectiveDate));
}
export function activityReverseStockSplitEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityReverseStockSplitEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityReverseStockSplitEffectiveDate' from JSON`);
}
/** @internal */
export const ActivityFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFactorDenominator$;
(function (ActivityFactorDenominator$) {
    /** @deprecated use `ActivityFactorDenominator$inboundSchema` instead. */
    ActivityFactorDenominator$.inboundSchema = ActivityFactorDenominator$inboundSchema;
    /** @deprecated use `ActivityFactorDenominator$outboundSchema` instead. */
    ActivityFactorDenominator$.outboundSchema = ActivityFactorDenominator$outboundSchema;
})(ActivityFactorDenominator$ || (ActivityFactorDenominator$ = {}));
export function activityFactorDenominatorToJSON(activityFactorDenominator) {
    return JSON.stringify(ActivityFactorDenominator$outboundSchema.parse(activityFactorDenominator));
}
export function activityFactorDenominatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFactorDenominator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFactorDenominator' from JSON`);
}
/** @internal */
export const ActivityFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityFactorNumerator$;
(function (ActivityFactorNumerator$) {
    /** @deprecated use `ActivityFactorNumerator$inboundSchema` instead. */
    ActivityFactorNumerator$.inboundSchema = ActivityFactorNumerator$inboundSchema;
    /** @deprecated use `ActivityFactorNumerator$outboundSchema` instead. */
    ActivityFactorNumerator$.outboundSchema = ActivityFactorNumerator$outboundSchema;
})(ActivityFactorNumerator$ || (ActivityFactorNumerator$ = {}));
export function activityFactorNumeratorToJSON(activityFactorNumerator) {
    return JSON.stringify(ActivityFactorNumerator$outboundSchema.parse(activityFactorNumerator));
}
export function activityFactorNumeratorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityFactorNumerator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityFactorNumerator' from JSON`);
}
/** @internal */
export const ActivityReverseStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityReverseStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplitQuantity$;
(function (ActivityReverseStockSplitQuantity$) {
    /** @deprecated use `ActivityReverseStockSplitQuantity$inboundSchema` instead. */
    ActivityReverseStockSplitQuantity$.inboundSchema = ActivityReverseStockSplitQuantity$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitQuantity$outboundSchema` instead. */
    ActivityReverseStockSplitQuantity$.outboundSchema = ActivityReverseStockSplitQuantity$outboundSchema;
})(ActivityReverseStockSplitQuantity$ || (ActivityReverseStockSplitQuantity$ = {}));
export function activityReverseStockSplitQuantityToJSON(activityReverseStockSplitQuantity) {
    return JSON.stringify(ActivityReverseStockSplitQuantity$outboundSchema.parse(activityReverseStockSplitQuantity));
}
export function activityReverseStockSplitQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityReverseStockSplitQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityReverseStockSplitQuantity' from JSON`);
}
/** @internal */
export const ActivityReverseStockSplit$inboundSchema = z.object({
    action: ActivityReverseStockSplitAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => ActivityReverseStockSplitCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => ActivityReverseStockSplitEffectiveDate$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => ActivityFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => ActivityFactorNumerator$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityReverseStockSplitQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
    });
});
/** @internal */
export const ActivityReverseStockSplit$outboundSchema = z.object({
    action: ActivityReverseStockSplitAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => ActivityReverseStockSplitCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => ActivityReverseStockSplitEffectiveDate$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => ActivityFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => ActivityFactorNumerator$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivityReverseStockSplitQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReverseStockSplit$;
(function (ActivityReverseStockSplit$) {
    /** @deprecated use `ActivityReverseStockSplit$inboundSchema` instead. */
    ActivityReverseStockSplit$.inboundSchema = ActivityReverseStockSplit$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplit$outboundSchema` instead. */
    ActivityReverseStockSplit$.outboundSchema = ActivityReverseStockSplit$outboundSchema;
})(ActivityReverseStockSplit$ || (ActivityReverseStockSplit$ = {}));
export function activityReverseStockSplitToJSON(activityReverseStockSplit) {
    return JSON.stringify(ActivityReverseStockSplit$outboundSchema.parse(activityReverseStockSplit));
}
export function activityReverseStockSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityReverseStockSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityReverseStockSplit' from JSON`);
}
/** @internal */
export const ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsDistributionCorporateActionGeneralInformation$;
(function (ActivityRightsDistributionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRightsDistributionCorporateActionGeneralInformation$.inboundSchema = ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRightsDistributionCorporateActionGeneralInformation$.outboundSchema = ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema;
})(ActivityRightsDistributionCorporateActionGeneralInformation$ || (ActivityRightsDistributionCorporateActionGeneralInformation$ = {}));
export function activityRightsDistributionCorporateActionGeneralInformationToJSON(activityRightsDistributionCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema
        .parse(activityRightsDistributionCorporateActionGeneralInformation));
}
export function activityRightsDistributionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityRightsDistributionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityRightsDistributionPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityRightsDistributionPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsDistributionPaymentDate$;
(function (ActivityRightsDistributionPaymentDate$) {
    /** @deprecated use `ActivityRightsDistributionPaymentDate$inboundSchema` instead. */
    ActivityRightsDistributionPaymentDate$.inboundSchema = ActivityRightsDistributionPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionPaymentDate$outboundSchema` instead. */
    ActivityRightsDistributionPaymentDate$.outboundSchema = ActivityRightsDistributionPaymentDate$outboundSchema;
})(ActivityRightsDistributionPaymentDate$ || (ActivityRightsDistributionPaymentDate$ = {}));
export function activityRightsDistributionPaymentDateToJSON(activityRightsDistributionPaymentDate) {
    return JSON.stringify(ActivityRightsDistributionPaymentDate$outboundSchema.parse(activityRightsDistributionPaymentDate));
}
export function activityRightsDistributionPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsDistributionPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRightsDistributionPaymentDate' from JSON`);
}
/** @internal */
export const ActivityRightsDistributionRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityRightsDistributionRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsDistributionRecordDate$;
(function (ActivityRightsDistributionRecordDate$) {
    /** @deprecated use `ActivityRightsDistributionRecordDate$inboundSchema` instead. */
    ActivityRightsDistributionRecordDate$.inboundSchema = ActivityRightsDistributionRecordDate$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionRecordDate$outboundSchema` instead. */
    ActivityRightsDistributionRecordDate$.outboundSchema = ActivityRightsDistributionRecordDate$outboundSchema;
})(ActivityRightsDistributionRecordDate$ || (ActivityRightsDistributionRecordDate$ = {}));
export function activityRightsDistributionRecordDateToJSON(activityRightsDistributionRecordDate) {
    return JSON.stringify(ActivityRightsDistributionRecordDate$outboundSchema.parse(activityRightsDistributionRecordDate));
}
export function activityRightsDistributionRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsDistributionRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRightsDistributionRecordDate' from JSON`);
}
/** @internal */
export const ActivityRightsDistributionSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRightsDistributionSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsDistributionSettled$;
(function (ActivityRightsDistributionSettled$) {
    /** @deprecated use `ActivityRightsDistributionSettled$inboundSchema` instead. */
    ActivityRightsDistributionSettled$.inboundSchema = ActivityRightsDistributionSettled$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionSettled$outboundSchema` instead. */
    ActivityRightsDistributionSettled$.outboundSchema = ActivityRightsDistributionSettled$outboundSchema;
})(ActivityRightsDistributionSettled$ || (ActivityRightsDistributionSettled$ = {}));
export function activityRightsDistributionSettledToJSON(activityRightsDistributionSettled) {
    return JSON.stringify(ActivityRightsDistributionSettled$outboundSchema.parse(activityRightsDistributionSettled));
}
export function activityRightsDistributionSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsDistributionSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRightsDistributionSettled' from JSON`);
}
/** @internal */
export const ActivityRightsDistribution$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityRightsDistributionPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => ActivityRightsDistributionRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityRightsDistributionSettled$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityRightsDistribution$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityRightsDistributionPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityRightsDistributionRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivityRightsDistributionSettled$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsDistribution$;
(function (ActivityRightsDistribution$) {
    /** @deprecated use `ActivityRightsDistribution$inboundSchema` instead. */
    ActivityRightsDistribution$.inboundSchema = ActivityRightsDistribution$inboundSchema;
    /** @deprecated use `ActivityRightsDistribution$outboundSchema` instead. */
    ActivityRightsDistribution$.outboundSchema = ActivityRightsDistribution$outboundSchema;
})(ActivityRightsDistribution$ || (ActivityRightsDistribution$ = {}));
export function activityRightsDistributionToJSON(activityRightsDistribution) {
    return JSON.stringify(ActivityRightsDistribution$outboundSchema.parse(activityRightsDistribution));
}
export function activityRightsDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRightsDistribution' from JSON`);
}
/** @internal */
export const ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsSubscriptionCorporateActionGeneralInformation$;
(function (ActivityRightsSubscriptionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRightsSubscriptionCorporateActionGeneralInformation$.inboundSchema = ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRightsSubscriptionCorporateActionGeneralInformation$.outboundSchema = ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema;
})(ActivityRightsSubscriptionCorporateActionGeneralInformation$ || (ActivityRightsSubscriptionCorporateActionGeneralInformation$ = {}));
export function activityRightsSubscriptionCorporateActionGeneralInformationToJSON(activityRightsSubscriptionCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema
        .parse(activityRightsSubscriptionCorporateActionGeneralInformation));
}
export function activityRightsSubscriptionCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityRightsSubscriptionCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityRightsSubscription$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const ActivityRightsSubscription$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRightsSubscription$;
(function (ActivityRightsSubscription$) {
    /** @deprecated use `ActivityRightsSubscription$inboundSchema` instead. */
    ActivityRightsSubscription$.inboundSchema = ActivityRightsSubscription$inboundSchema;
    /** @deprecated use `ActivityRightsSubscription$outboundSchema` instead. */
    ActivityRightsSubscription$.outboundSchema = ActivityRightsSubscription$outboundSchema;
})(ActivityRightsSubscription$ || (ActivityRightsSubscription$ = {}));
export function activityRightsSubscriptionToJSON(activityRightsSubscription) {
    return JSON.stringify(ActivityRightsSubscription$outboundSchema.parse(activityRightsSubscription));
}
export function activityRightsSubscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRightsSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRightsSubscription' from JSON`);
}
/** @internal */
export const ActivityRoundingAdjustment$inboundSchema = z.object({
    rounding_reason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "rounding_reason": "roundingReason",
    });
});
/** @internal */
export const ActivityRoundingAdjustment$outboundSchema = z.object({
    roundingReason: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        roundingReason: "rounding_reason",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRoundingAdjustment$;
(function (ActivityRoundingAdjustment$) {
    /** @deprecated use `ActivityRoundingAdjustment$inboundSchema` instead. */
    ActivityRoundingAdjustment$.inboundSchema = ActivityRoundingAdjustment$inboundSchema;
    /** @deprecated use `ActivityRoundingAdjustment$outboundSchema` instead. */
    ActivityRoundingAdjustment$.outboundSchema = ActivityRoundingAdjustment$outboundSchema;
})(ActivityRoundingAdjustment$ || (ActivityRoundingAdjustment$ = {}));
export function activityRoundingAdjustmentToJSON(activityRoundingAdjustment) {
    return JSON.stringify(ActivityRoundingAdjustment$outboundSchema.parse(activityRoundingAdjustment));
}
export function activityRoundingAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRoundingAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRoundingAdjustment' from JSON`);
}
/** @internal */
export const RoundingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RoundingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoundingAmount$;
(function (RoundingAmount$) {
    /** @deprecated use `RoundingAmount$inboundSchema` instead. */
    RoundingAmount$.inboundSchema = RoundingAmount$inboundSchema;
    /** @deprecated use `RoundingAmount$outboundSchema` instead. */
    RoundingAmount$.outboundSchema = RoundingAmount$outboundSchema;
})(RoundingAmount$ || (RoundingAmount$ = {}));
export function roundingAmountToJSON(roundingAmount) {
    return JSON.stringify(RoundingAmount$outboundSchema.parse(roundingAmount));
}
export function roundingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoundingAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoundingAmount' from JSON`);
}
/** @internal */
export const ActivitySaleOfRightsCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivitySaleOfRightsCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRightsCashRate$;
(function (ActivitySaleOfRightsCashRate$) {
    /** @deprecated use `ActivitySaleOfRightsCashRate$inboundSchema` instead. */
    ActivitySaleOfRightsCashRate$.inboundSchema = ActivitySaleOfRightsCashRate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsCashRate$outboundSchema` instead. */
    ActivitySaleOfRightsCashRate$.outboundSchema = ActivitySaleOfRightsCashRate$outboundSchema;
})(ActivitySaleOfRightsCashRate$ || (ActivitySaleOfRightsCashRate$ = {}));
export function activitySaleOfRightsCashRateToJSON(activitySaleOfRightsCashRate) {
    return JSON.stringify(ActivitySaleOfRightsCashRate$outboundSchema.parse(activitySaleOfRightsCashRate));
}
export function activitySaleOfRightsCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRightsCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRightsCashRate' from JSON`);
}
/** @internal */
export const ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRightsCorporateActionGeneralInformation$;
(function (ActivitySaleOfRightsCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivitySaleOfRightsCorporateActionGeneralInformation$.inboundSchema = ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivitySaleOfRightsCorporateActionGeneralInformation$.outboundSchema = ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema;
})(ActivitySaleOfRightsCorporateActionGeneralInformation$ || (ActivitySaleOfRightsCorporateActionGeneralInformation$ = {}));
export function activitySaleOfRightsCorporateActionGeneralInformationToJSON(activitySaleOfRightsCorporateActionGeneralInformation) {
    return JSON.stringify(ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema.parse(activitySaleOfRightsCorporateActionGeneralInformation));
}
export function activitySaleOfRightsCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRightsCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivitySaleOfRightsPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivitySaleOfRightsPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRightsPaymentDate$;
(function (ActivitySaleOfRightsPaymentDate$) {
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$inboundSchema` instead. */
    ActivitySaleOfRightsPaymentDate$.inboundSchema = ActivitySaleOfRightsPaymentDate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$outboundSchema` instead. */
    ActivitySaleOfRightsPaymentDate$.outboundSchema = ActivitySaleOfRightsPaymentDate$outboundSchema;
})(ActivitySaleOfRightsPaymentDate$ || (ActivitySaleOfRightsPaymentDate$ = {}));
export function activitySaleOfRightsPaymentDateToJSON(activitySaleOfRightsPaymentDate) {
    return JSON.stringify(ActivitySaleOfRightsPaymentDate$outboundSchema.parse(activitySaleOfRightsPaymentDate));
}
export function activitySaleOfRightsPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRightsPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRightsPaymentDate' from JSON`);
}
/** @internal */
export const ActivitySaleOfRightsRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivitySaleOfRightsRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRightsRecordDate$;
(function (ActivitySaleOfRightsRecordDate$) {
    /** @deprecated use `ActivitySaleOfRightsRecordDate$inboundSchema` instead. */
    ActivitySaleOfRightsRecordDate$.inboundSchema = ActivitySaleOfRightsRecordDate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsRecordDate$outboundSchema` instead. */
    ActivitySaleOfRightsRecordDate$.outboundSchema = ActivitySaleOfRightsRecordDate$outboundSchema;
})(ActivitySaleOfRightsRecordDate$ || (ActivitySaleOfRightsRecordDate$ = {}));
export function activitySaleOfRightsRecordDateToJSON(activitySaleOfRightsRecordDate) {
    return JSON.stringify(ActivitySaleOfRightsRecordDate$outboundSchema.parse(activitySaleOfRightsRecordDate));
}
export function activitySaleOfRightsRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRightsRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRightsRecordDate' from JSON`);
}
/** @internal */
export const ActivitySaleOfRightsSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivitySaleOfRightsSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRightsSettled$;
(function (ActivitySaleOfRightsSettled$) {
    /** @deprecated use `ActivitySaleOfRightsSettled$inboundSchema` instead. */
    ActivitySaleOfRightsSettled$.inboundSchema = ActivitySaleOfRightsSettled$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsSettled$outboundSchema` instead. */
    ActivitySaleOfRightsSettled$.outboundSchema = ActivitySaleOfRightsSettled$outboundSchema;
})(ActivitySaleOfRightsSettled$ || (ActivitySaleOfRightsSettled$ = {}));
export function activitySaleOfRightsSettledToJSON(activitySaleOfRightsSettled) {
    return JSON.stringify(ActivitySaleOfRightsSettled$outboundSchema.parse(activitySaleOfRightsSettled));
}
export function activitySaleOfRightsSettledFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRightsSettled$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRightsSettled' from JSON`);
}
/** @internal */
export const ActivitySaleOfRights$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivitySaleOfRightsCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivitySaleOfRightsPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => ActivitySaleOfRightsRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivitySaleOfRightsSettled$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivitySaleOfRights$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivitySaleOfRightsCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivitySaleOfRightsPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivitySaleOfRightsRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => ActivitySaleOfRightsSettled$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySaleOfRights$;
(function (ActivitySaleOfRights$) {
    /** @deprecated use `ActivitySaleOfRights$inboundSchema` instead. */
    ActivitySaleOfRights$.inboundSchema = ActivitySaleOfRights$inboundSchema;
    /** @deprecated use `ActivitySaleOfRights$outboundSchema` instead. */
    ActivitySaleOfRights$.outboundSchema = ActivitySaleOfRights$outboundSchema;
})(ActivitySaleOfRights$ || (ActivitySaleOfRights$ = {}));
export function activitySaleOfRightsToJSON(activitySaleOfRights) {
    return JSON.stringify(ActivitySaleOfRights$outboundSchema.parse(activitySaleOfRights));
}
export function activitySaleOfRightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySaleOfRights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySaleOfRights' from JSON`);
}
/** @internal */
export const ActivitySettleDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivitySettleDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySettleDate$;
(function (ActivitySettleDate$) {
    /** @deprecated use `ActivitySettleDate$inboundSchema` instead. */
    ActivitySettleDate$.inboundSchema = ActivitySettleDate$inboundSchema;
    /** @deprecated use `ActivitySettleDate$outboundSchema` instead. */
    ActivitySettleDate$.outboundSchema = ActivitySettleDate$outboundSchema;
})(ActivitySettleDate$ || (ActivitySettleDate$ = {}));
export function activitySettleDateToJSON(activitySettleDate) {
    return JSON.stringify(ActivitySettleDate$outboundSchema.parse(activitySettleDate));
}
export function activitySettleDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySettleDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySettleDate' from JSON`);
}
/** @internal */
export const ActivitySide$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivitySide$outboundSchema = z.union([
    z.nativeEnum(ActivitySide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySide$;
(function (ActivitySide$) {
    /** @deprecated use `ActivitySide$inboundSchema` instead. */
    ActivitySide$.inboundSchema = ActivitySide$inboundSchema;
    /** @deprecated use `ActivitySide$outboundSchema` instead. */
    ActivitySide$.outboundSchema = ActivitySide$outboundSchema;
})(ActivitySide$ || (ActivitySide$ = {}));
/** @internal */
export const ActivitySideModifier$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivitySideModifier$outboundSchema = z.union([
    z.nativeEnum(ActivitySideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySideModifier$;
(function (ActivitySideModifier$) {
    /** @deprecated use `ActivitySideModifier$inboundSchema` instead. */
    ActivitySideModifier$.inboundSchema = ActivitySideModifier$inboundSchema;
    /** @deprecated use `ActivitySideModifier$outboundSchema` instead. */
    ActivitySideModifier$.outboundSchema = ActivitySideModifier$outboundSchema;
})(ActivitySideModifier$ || (ActivitySideModifier$ = {}));
/** @internal */
export const ActivitySpinoffCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivitySpinoffCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySpinoffCorporateActionGeneralInformation$;
(function (ActivitySpinoffCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivitySpinoffCorporateActionGeneralInformation$.inboundSchema = ActivitySpinoffCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivitySpinoffCorporateActionGeneralInformation$.outboundSchema = ActivitySpinoffCorporateActionGeneralInformation$outboundSchema;
})(ActivitySpinoffCorporateActionGeneralInformation$ || (ActivitySpinoffCorporateActionGeneralInformation$ = {}));
export function activitySpinoffCorporateActionGeneralInformationToJSON(activitySpinoffCorporateActionGeneralInformation) {
    return JSON.stringify(ActivitySpinoffCorporateActionGeneralInformation$outboundSchema.parse(activitySpinoffCorporateActionGeneralInformation));
}
export function activitySpinoffCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySpinoffCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySpinoffCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityPayDate$;
(function (ActivityPayDate$) {
    /** @deprecated use `ActivityPayDate$inboundSchema` instead. */
    ActivityPayDate$.inboundSchema = ActivityPayDate$inboundSchema;
    /** @deprecated use `ActivityPayDate$outboundSchema` instead. */
    ActivityPayDate$.outboundSchema = ActivityPayDate$outboundSchema;
})(ActivityPayDate$ || (ActivityPayDate$ = {}));
export function activityPayDateToJSON(activityPayDate) {
    return JSON.stringify(ActivityPayDate$outboundSchema.parse(activityPayDate));
}
export function activityPayDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityPayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityPayDate' from JSON`);
}
/** @internal */
export const ActivitySpinoffQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivitySpinoffQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySpinoffQuantity$;
(function (ActivitySpinoffQuantity$) {
    /** @deprecated use `ActivitySpinoffQuantity$inboundSchema` instead. */
    ActivitySpinoffQuantity$.inboundSchema = ActivitySpinoffQuantity$inboundSchema;
    /** @deprecated use `ActivitySpinoffQuantity$outboundSchema` instead. */
    ActivitySpinoffQuantity$.outboundSchema = ActivitySpinoffQuantity$outboundSchema;
})(ActivitySpinoffQuantity$ || (ActivitySpinoffQuantity$ = {}));
export function activitySpinoffQuantityToJSON(activitySpinoffQuantity) {
    return JSON.stringify(ActivitySpinoffQuantity$outboundSchema.parse(activitySpinoffQuantity));
}
export function activitySpinoffQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySpinoffQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySpinoffQuantity' from JSON`);
}
/** @internal */
export const ActivitySpinoffRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivitySpinoffRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySpinoffRecordDate$;
(function (ActivitySpinoffRecordDate$) {
    /** @deprecated use `ActivitySpinoffRecordDate$inboundSchema` instead. */
    ActivitySpinoffRecordDate$.inboundSchema = ActivitySpinoffRecordDate$inboundSchema;
    /** @deprecated use `ActivitySpinoffRecordDate$outboundSchema` instead. */
    ActivitySpinoffRecordDate$.outboundSchema = ActivitySpinoffRecordDate$outboundSchema;
})(ActivitySpinoffRecordDate$ || (ActivitySpinoffRecordDate$ = {}));
export function activitySpinoffRecordDateToJSON(activitySpinoffRecordDate) {
    return JSON.stringify(ActivitySpinoffRecordDate$outboundSchema.parse(activitySpinoffRecordDate));
}
export function activitySpinoffRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySpinoffRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySpinoffRecordDate' from JSON`);
}
/** @internal */
export const ActivitySpinoff$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivitySpinoffCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => ActivityPayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivitySpinoffQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => ActivitySpinoffRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivitySpinoff$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivitySpinoffCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => ActivityPayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => ActivitySpinoffQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => ActivitySpinoffRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySpinoff$;
(function (ActivitySpinoff$) {
    /** @deprecated use `ActivitySpinoff$inboundSchema` instead. */
    ActivitySpinoff$.inboundSchema = ActivitySpinoff$inboundSchema;
    /** @deprecated use `ActivitySpinoff$outboundSchema` instead. */
    ActivitySpinoff$.outboundSchema = ActivitySpinoff$outboundSchema;
})(ActivitySpinoff$ || (ActivitySpinoff$ = {}));
export function activitySpinoffToJSON(activitySpinoff) {
    return JSON.stringify(ActivitySpinoff$outboundSchema.parse(activitySpinoff));
}
export function activitySpinoffFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySpinoff$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySpinoff' from JSON`);
}
/** @internal */
export const ActivityState$inboundSchema = z
    .union([
    z.nativeEnum(ActivityState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityState$outboundSchema = z.union([
    z.nativeEnum(ActivityState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityState$;
(function (ActivityState$) {
    /** @deprecated use `ActivityState$inboundSchema` instead. */
    ActivityState$.inboundSchema = ActivityState$inboundSchema;
    /** @deprecated use `ActivityState$outboundSchema` instead. */
    ActivityState$.outboundSchema = ActivityState$outboundSchema;
})(ActivityState$ || (ActivityState$ = {}));
/** @internal */
export const ActivityStockDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityStockDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockDividendCorporateActionGeneralInformation$;
(function (ActivityStockDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityStockDividendCorporateActionGeneralInformation$.inboundSchema = ActivityStockDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityStockDividendCorporateActionGeneralInformation$.outboundSchema = ActivityStockDividendCorporateActionGeneralInformation$outboundSchema;
})(ActivityStockDividendCorporateActionGeneralInformation$ || (ActivityStockDividendCorporateActionGeneralInformation$ = {}));
export function activityStockDividendCorporateActionGeneralInformationToJSON(activityStockDividendCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityStockDividendCorporateActionGeneralInformation$outboundSchema.parse(activityStockDividendCorporateActionGeneralInformation));
}
export function activityStockDividendCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockDividendCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityStockDividendCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityStockDividendPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityStockDividendPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockDividendPayDate$;
(function (ActivityStockDividendPayDate$) {
    /** @deprecated use `ActivityStockDividendPayDate$inboundSchema` instead. */
    ActivityStockDividendPayDate$.inboundSchema = ActivityStockDividendPayDate$inboundSchema;
    /** @deprecated use `ActivityStockDividendPayDate$outboundSchema` instead. */
    ActivityStockDividendPayDate$.outboundSchema = ActivityStockDividendPayDate$outboundSchema;
})(ActivityStockDividendPayDate$ || (ActivityStockDividendPayDate$ = {}));
export function activityStockDividendPayDateToJSON(activityStockDividendPayDate) {
    return JSON.stringify(ActivityStockDividendPayDate$outboundSchema.parse(activityStockDividendPayDate));
}
export function activityStockDividendPayDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockDividendPayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockDividendPayDate' from JSON`);
}
/** @internal */
export const ActivityStockDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityStockDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockDividendQuantity$;
(function (ActivityStockDividendQuantity$) {
    /** @deprecated use `ActivityStockDividendQuantity$inboundSchema` instead. */
    ActivityStockDividendQuantity$.inboundSchema = ActivityStockDividendQuantity$inboundSchema;
    /** @deprecated use `ActivityStockDividendQuantity$outboundSchema` instead. */
    ActivityStockDividendQuantity$.outboundSchema = ActivityStockDividendQuantity$outboundSchema;
})(ActivityStockDividendQuantity$ || (ActivityStockDividendQuantity$ = {}));
export function activityStockDividendQuantityToJSON(activityStockDividendQuantity) {
    return JSON.stringify(ActivityStockDividendQuantity$outboundSchema.parse(activityStockDividendQuantity));
}
export function activityStockDividendQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockDividendQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockDividendQuantity' from JSON`);
}
/** @internal */
export const ActivityRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRate$;
(function (ActivityRate$) {
    /** @deprecated use `ActivityRate$inboundSchema` instead. */
    ActivityRate$.inboundSchema = ActivityRate$inboundSchema;
    /** @deprecated use `ActivityRate$outboundSchema` instead. */
    ActivityRate$.outboundSchema = ActivityRate$outboundSchema;
})(ActivityRate$ || (ActivityRate$ = {}));
export function activityRateToJSON(activityRate) {
    return JSON.stringify(ActivityRate$outboundSchema.parse(activityRate));
}
export function activityRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityRate' from JSON`);
}
/** @internal */
export const ActivityStockDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityStockDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockDividendRecordDate$;
(function (ActivityStockDividendRecordDate$) {
    /** @deprecated use `ActivityStockDividendRecordDate$inboundSchema` instead. */
    ActivityStockDividendRecordDate$.inboundSchema = ActivityStockDividendRecordDate$inboundSchema;
    /** @deprecated use `ActivityStockDividendRecordDate$outboundSchema` instead. */
    ActivityStockDividendRecordDate$.outboundSchema = ActivityStockDividendRecordDate$outboundSchema;
})(ActivityStockDividendRecordDate$ || (ActivityStockDividendRecordDate$ = {}));
export function activityStockDividendRecordDateToJSON(activityStockDividendRecordDate) {
    return JSON.stringify(ActivityStockDividendRecordDate$outboundSchema.parse(activityStockDividendRecordDate));
}
export function activityStockDividendRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockDividendRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockDividendRecordDate' from JSON`);
}
/** @internal */
export const ActivityStockDividend$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityStockDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => ActivityStockDividendPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityStockDividendQuantity$inboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => ActivityRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => ActivityStockDividendRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityStockDividend$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityStockDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => ActivityStockDividendPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityStockDividendQuantity$outboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => ActivityRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => ActivityStockDividendRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockDividend$;
(function (ActivityStockDividend$) {
    /** @deprecated use `ActivityStockDividend$inboundSchema` instead. */
    ActivityStockDividend$.inboundSchema = ActivityStockDividend$inboundSchema;
    /** @deprecated use `ActivityStockDividend$outboundSchema` instead. */
    ActivityStockDividend$.outboundSchema = ActivityStockDividend$outboundSchema;
})(ActivityStockDividend$ || (ActivityStockDividend$ = {}));
export function activityStockDividendToJSON(activityStockDividend) {
    return JSON.stringify(ActivityStockDividend$outboundSchema.parse(activityStockDividend));
}
export function activityStockDividendFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockDividend$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockDividend' from JSON`);
}
/** @internal */
export const ActivityStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitCorporateActionGeneralInformation$;
(function (ActivityStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityStockSplitCorporateActionGeneralInformation$.inboundSchema = ActivityStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityStockSplitCorporateActionGeneralInformation$.outboundSchema = ActivityStockSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityStockSplitCorporateActionGeneralInformation$ || (ActivityStockSplitCorporateActionGeneralInformation$ = {}));
export function activityStockSplitCorporateActionGeneralInformationToJSON(activityStockSplitCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityStockSplitCorporateActionGeneralInformation$outboundSchema.parse(activityStockSplitCorporateActionGeneralInformation));
}
export function activityStockSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityStockSplitFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityStockSplitFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitFactorDenominator$;
(function (ActivityStockSplitFactorDenominator$) {
    /** @deprecated use `ActivityStockSplitFactorDenominator$inboundSchema` instead. */
    ActivityStockSplitFactorDenominator$.inboundSchema = ActivityStockSplitFactorDenominator$inboundSchema;
    /** @deprecated use `ActivityStockSplitFactorDenominator$outboundSchema` instead. */
    ActivityStockSplitFactorDenominator$.outboundSchema = ActivityStockSplitFactorDenominator$outboundSchema;
})(ActivityStockSplitFactorDenominator$ || (ActivityStockSplitFactorDenominator$ = {}));
export function activityStockSplitFactorDenominatorToJSON(activityStockSplitFactorDenominator) {
    return JSON.stringify(ActivityStockSplitFactorDenominator$outboundSchema.parse(activityStockSplitFactorDenominator));
}
export function activityStockSplitFactorDenominatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitFactorDenominator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitFactorDenominator' from JSON`);
}
/** @internal */
export const ActivityStockSplitFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityStockSplitFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitFactorNumerator$;
(function (ActivityStockSplitFactorNumerator$) {
    /** @deprecated use `ActivityStockSplitFactorNumerator$inboundSchema` instead. */
    ActivityStockSplitFactorNumerator$.inboundSchema = ActivityStockSplitFactorNumerator$inboundSchema;
    /** @deprecated use `ActivityStockSplitFactorNumerator$outboundSchema` instead. */
    ActivityStockSplitFactorNumerator$.outboundSchema = ActivityStockSplitFactorNumerator$outboundSchema;
})(ActivityStockSplitFactorNumerator$ || (ActivityStockSplitFactorNumerator$ = {}));
export function activityStockSplitFactorNumeratorToJSON(activityStockSplitFactorNumerator) {
    return JSON.stringify(ActivityStockSplitFactorNumerator$outboundSchema.parse(activityStockSplitFactorNumerator));
}
export function activityStockSplitFactorNumeratorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitFactorNumerator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitFactorNumerator' from JSON`);
}
/** @internal */
export const ActivityStockSplitPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityStockSplitPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitPayDate$;
(function (ActivityStockSplitPayDate$) {
    /** @deprecated use `ActivityStockSplitPayDate$inboundSchema` instead. */
    ActivityStockSplitPayDate$.inboundSchema = ActivityStockSplitPayDate$inboundSchema;
    /** @deprecated use `ActivityStockSplitPayDate$outboundSchema` instead. */
    ActivityStockSplitPayDate$.outboundSchema = ActivityStockSplitPayDate$outboundSchema;
})(ActivityStockSplitPayDate$ || (ActivityStockSplitPayDate$ = {}));
export function activityStockSplitPayDateToJSON(activityStockSplitPayDate) {
    return JSON.stringify(ActivityStockSplitPayDate$outboundSchema.parse(activityStockSplitPayDate));
}
export function activityStockSplitPayDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitPayDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitPayDate' from JSON`);
}
/** @internal */
export const ActivityStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitQuantity$;
(function (ActivityStockSplitQuantity$) {
    /** @deprecated use `ActivityStockSplitQuantity$inboundSchema` instead. */
    ActivityStockSplitQuantity$.inboundSchema = ActivityStockSplitQuantity$inboundSchema;
    /** @deprecated use `ActivityStockSplitQuantity$outboundSchema` instead. */
    ActivityStockSplitQuantity$.outboundSchema = ActivityStockSplitQuantity$outboundSchema;
})(ActivityStockSplitQuantity$ || (ActivityStockSplitQuantity$ = {}));
export function activityStockSplitQuantityToJSON(activityStockSplitQuantity) {
    return JSON.stringify(ActivityStockSplitQuantity$outboundSchema.parse(activityStockSplitQuantity));
}
export function activityStockSplitQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitQuantity' from JSON`);
}
/** @internal */
export const ActivityStockSplitRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityStockSplitRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplitRecordDate$;
(function (ActivityStockSplitRecordDate$) {
    /** @deprecated use `ActivityStockSplitRecordDate$inboundSchema` instead. */
    ActivityStockSplitRecordDate$.inboundSchema = ActivityStockSplitRecordDate$inboundSchema;
    /** @deprecated use `ActivityStockSplitRecordDate$outboundSchema` instead. */
    ActivityStockSplitRecordDate$.outboundSchema = ActivityStockSplitRecordDate$outboundSchema;
})(ActivityStockSplitRecordDate$ || (ActivityStockSplitRecordDate$ = {}));
export function activityStockSplitRecordDateToJSON(activityStockSplitRecordDate) {
    return JSON.stringify(ActivityStockSplitRecordDate$outboundSchema.parse(activityStockSplitRecordDate));
}
export function activityStockSplitRecordDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplitRecordDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplitRecordDate' from JSON`);
}
/** @internal */
export const ActivityStockSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => ActivityStockSplitFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => ActivityStockSplitFactorNumerator$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => ActivityStockSplitPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityStockSplitQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => ActivityStockSplitRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
export const ActivityStockSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => ActivityStockSplitFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => ActivityStockSplitFactorNumerator$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => ActivityStockSplitPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityStockSplitQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => ActivityStockSplitRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityStockSplit$;
(function (ActivityStockSplit$) {
    /** @deprecated use `ActivityStockSplit$inboundSchema` instead. */
    ActivityStockSplit$.inboundSchema = ActivityStockSplit$inboundSchema;
    /** @deprecated use `ActivityStockSplit$outboundSchema` instead. */
    ActivityStockSplit$.outboundSchema = ActivityStockSplit$outboundSchema;
})(ActivityStockSplit$ || (ActivityStockSplit$ = {}));
export function activityStockSplitToJSON(activityStockSplit) {
    return JSON.stringify(ActivityStockSplit$outboundSchema.parse(activityStockSplit));
}
export function activityStockSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityStockSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityStockSplit' from JSON`);
}
/** @internal */
export const ActivitySweepAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySweepAction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivitySweepAction$outboundSchema = z.union([
    z.nativeEnum(ActivitySweepAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySweepAction$;
(function (ActivitySweepAction$) {
    /** @deprecated use `ActivitySweepAction$inboundSchema` instead. */
    ActivitySweepAction$.inboundSchema = ActivitySweepAction$inboundSchema;
    /** @deprecated use `ActivitySweepAction$outboundSchema` instead. */
    ActivitySweepAction$.outboundSchema = ActivitySweepAction$outboundSchema;
})(ActivitySweepAction$ || (ActivitySweepAction$ = {}));
/** @internal */
export const ActivitySweepType$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySweepType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivitySweepType$outboundSchema = z.union([
    z.nativeEnum(ActivitySweepType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySweepType$;
(function (ActivitySweepType$) {
    /** @deprecated use `ActivitySweepType$inboundSchema` instead. */
    ActivitySweepType$.inboundSchema = ActivitySweepType$inboundSchema;
    /** @deprecated use `ActivitySweepType$outboundSchema` instead. */
    ActivitySweepType$.outboundSchema = ActivitySweepType$outboundSchema;
})(ActivitySweepType$ || (ActivitySweepType$ = {}));
/** @internal */
export const ActivitySweep$inboundSchema = z.object({
    action: ActivitySweepAction$inboundSchema.optional(),
    eod_redemption: z.boolean().optional(),
    type: ActivitySweepType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "eod_redemption": "eodRedemption",
    });
});
/** @internal */
export const ActivitySweep$outboundSchema = z.object({
    action: ActivitySweepAction$outboundSchema.optional(),
    eodRedemption: z.boolean().optional(),
    type: ActivitySweepType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        eodRedemption: "eod_redemption",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivitySweep$;
(function (ActivitySweep$) {
    /** @deprecated use `ActivitySweep$inboundSchema` instead. */
    ActivitySweep$.inboundSchema = ActivitySweep$inboundSchema;
    /** @deprecated use `ActivitySweep$outboundSchema` instead. */
    ActivitySweep$.outboundSchema = ActivitySweep$outboundSchema;
})(ActivitySweep$ || (ActivitySweep$ = {}));
export function activitySweepToJSON(activitySweep) {
    return JSON.stringify(ActivitySweep$outboundSchema.parse(activitySweep));
}
export function activitySweepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivitySweep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivitySweep' from JSON`);
}
/** @internal */
export const ActivityTenderOfferCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityTenderOfferCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTenderOfferCashRate$;
(function (ActivityTenderOfferCashRate$) {
    /** @deprecated use `ActivityTenderOfferCashRate$inboundSchema` instead. */
    ActivityTenderOfferCashRate$.inboundSchema = ActivityTenderOfferCashRate$inboundSchema;
    /** @deprecated use `ActivityTenderOfferCashRate$outboundSchema` instead. */
    ActivityTenderOfferCashRate$.outboundSchema = ActivityTenderOfferCashRate$outboundSchema;
})(ActivityTenderOfferCashRate$ || (ActivityTenderOfferCashRate$ = {}));
export function activityTenderOfferCashRateToJSON(activityTenderOfferCashRate) {
    return JSON.stringify(ActivityTenderOfferCashRate$outboundSchema.parse(activityTenderOfferCashRate));
}
export function activityTenderOfferCashRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTenderOfferCashRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTenderOfferCashRate' from JSON`);
}
/** @internal */
export const ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTenderOfferCorporateActionGeneralInformation$;
(function (ActivityTenderOfferCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityTenderOfferCorporateActionGeneralInformation$.inboundSchema = ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityTenderOfferCorporateActionGeneralInformation$.outboundSchema = ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema;
})(ActivityTenderOfferCorporateActionGeneralInformation$ || (ActivityTenderOfferCorporateActionGeneralInformation$ = {}));
export function activityTenderOfferCorporateActionGeneralInformationToJSON(activityTenderOfferCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema.parse(activityTenderOfferCorporateActionGeneralInformation));
}
export function activityTenderOfferCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTenderOfferCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityTenderOfferType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityTenderOfferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityTenderOfferType$outboundSchema = z.union([
    z.nativeEnum(ActivityTenderOfferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTenderOfferType$;
(function (ActivityTenderOfferType$) {
    /** @deprecated use `ActivityTenderOfferType$inboundSchema` instead. */
    ActivityTenderOfferType$.inboundSchema = ActivityTenderOfferType$inboundSchema;
    /** @deprecated use `ActivityTenderOfferType$outboundSchema` instead. */
    ActivityTenderOfferType$.outboundSchema = ActivityTenderOfferType$outboundSchema;
})(ActivityTenderOfferType$ || (ActivityTenderOfferType$ = {}));
/** @internal */
export const ActivityTenderOffer$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => ActivityTenderOfferCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema)).optional(),
    tender_offer_type: ActivityTenderOfferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "tender_offer_type": "tenderOfferType",
    });
});
/** @internal */
export const ActivityTenderOffer$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => ActivityTenderOfferCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema)).optional(),
    tenderOfferType: ActivityTenderOfferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        tenderOfferType: "tender_offer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTenderOffer$;
(function (ActivityTenderOffer$) {
    /** @deprecated use `ActivityTenderOffer$inboundSchema` instead. */
    ActivityTenderOffer$.inboundSchema = ActivityTenderOffer$inboundSchema;
    /** @deprecated use `ActivityTenderOffer$outboundSchema` instead. */
    ActivityTenderOffer$.outboundSchema = ActivityTenderOffer$outboundSchema;
})(ActivityTenderOffer$ || (ActivityTenderOffer$ = {}));
export function activityTenderOfferToJSON(activityTenderOffer) {
    return JSON.stringify(ActivityTenderOffer$outboundSchema.parse(activityTenderOffer));
}
export function activityTenderOfferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTenderOffer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTenderOffer' from JSON`);
}
/** @internal */
export const ActivityTradeBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(ActivityTradeBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityTradeBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(ActivityTradeBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradeBrokerCapacity$;
(function (ActivityTradeBrokerCapacity$) {
    /** @deprecated use `ActivityTradeBrokerCapacity$inboundSchema` instead. */
    ActivityTradeBrokerCapacity$.inboundSchema = ActivityTradeBrokerCapacity$inboundSchema;
    /** @deprecated use `ActivityTradeBrokerCapacity$outboundSchema` instead. */
    ActivityTradeBrokerCapacity$.outboundSchema = ActivityTradeBrokerCapacity$outboundSchema;
})(ActivityTradeBrokerCapacity$ || (ActivityTradeBrokerCapacity$ = {}));
/** @internal */
export const ActivityTradePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityTradePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradePrevailingMarketPrice$;
(function (ActivityTradePrevailingMarketPrice$) {
    /** @deprecated use `ActivityTradePrevailingMarketPrice$inboundSchema` instead. */
    ActivityTradePrevailingMarketPrice$.inboundSchema = ActivityTradePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `ActivityTradePrevailingMarketPrice$outboundSchema` instead. */
    ActivityTradePrevailingMarketPrice$.outboundSchema = ActivityTradePrevailingMarketPrice$outboundSchema;
})(ActivityTradePrevailingMarketPrice$ || (ActivityTradePrevailingMarketPrice$ = {}));
export function activityTradePrevailingMarketPriceToJSON(activityTradePrevailingMarketPrice) {
    return JSON.stringify(ActivityTradePrevailingMarketPrice$outboundSchema.parse(activityTradePrevailingMarketPrice));
}
export function activityTradePrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTradePrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTradePrevailingMarketPrice' from JSON`);
}
/** @internal */
export const ActivityTradePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityTradePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradePriceAdjustmentAmount$;
(function (ActivityTradePriceAdjustmentAmount$) {
    /** @deprecated use `ActivityTradePriceAdjustmentAmount$inboundSchema` instead. */
    ActivityTradePriceAdjustmentAmount$.inboundSchema = ActivityTradePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `ActivityTradePriceAdjustmentAmount$outboundSchema` instead. */
    ActivityTradePriceAdjustmentAmount$.outboundSchema = ActivityTradePriceAdjustmentAmount$outboundSchema;
})(ActivityTradePriceAdjustmentAmount$ || (ActivityTradePriceAdjustmentAmount$ = {}));
export function activityTradePriceAdjustmentAmountToJSON(activityTradePriceAdjustmentAmount) {
    return JSON.stringify(ActivityTradePriceAdjustmentAmount$outboundSchema.parse(activityTradePriceAdjustmentAmount));
}
export function activityTradePriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTradePriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTradePriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const ActivityTradePriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityTradePriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradePriceAdjustmentPercent$;
(function (ActivityTradePriceAdjustmentPercent$) {
    /** @deprecated use `ActivityTradePriceAdjustmentPercent$inboundSchema` instead. */
    ActivityTradePriceAdjustmentPercent$.inboundSchema = ActivityTradePriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `ActivityTradePriceAdjustmentPercent$outboundSchema` instead. */
    ActivityTradePriceAdjustmentPercent$.outboundSchema = ActivityTradePriceAdjustmentPercent$outboundSchema;
})(ActivityTradePriceAdjustmentPercent$ || (ActivityTradePriceAdjustmentPercent$ = {}));
export function activityTradePriceAdjustmentPercentToJSON(activityTradePriceAdjustmentPercent) {
    return JSON.stringify(ActivityTradePriceAdjustmentPercent$outboundSchema.parse(activityTradePriceAdjustmentPercent));
}
export function activityTradePriceAdjustmentPercentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTradePriceAdjustmentPercent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTradePriceAdjustmentPercent' from JSON`);
}
/** @internal */
export const ActivityTradePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityTradePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityTradePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(ActivityTradePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradePriceAdjustmentType$;
(function (ActivityTradePriceAdjustmentType$) {
    /** @deprecated use `ActivityTradePriceAdjustmentType$inboundSchema` instead. */
    ActivityTradePriceAdjustmentType$.inboundSchema = ActivityTradePriceAdjustmentType$inboundSchema;
    /** @deprecated use `ActivityTradePriceAdjustmentType$outboundSchema` instead. */
    ActivityTradePriceAdjustmentType$.outboundSchema = ActivityTradePriceAdjustmentType$outboundSchema;
})(ActivityTradePriceAdjustmentType$ || (ActivityTradePriceAdjustmentType$ = {}));
/** @internal */
export const ActivityTradePriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: ActivityTradePriceAdjustmentType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const ActivityTradePriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: ActivityTradePriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTradePriceAdjustmentRecord$;
(function (ActivityTradePriceAdjustmentRecord$) {
    /** @deprecated use `ActivityTradePriceAdjustmentRecord$inboundSchema` instead. */
    ActivityTradePriceAdjustmentRecord$.inboundSchema = ActivityTradePriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `ActivityTradePriceAdjustmentRecord$outboundSchema` instead. */
    ActivityTradePriceAdjustmentRecord$.outboundSchema = ActivityTradePriceAdjustmentRecord$outboundSchema;
})(ActivityTradePriceAdjustmentRecord$ || (ActivityTradePriceAdjustmentRecord$ = {}));
export function activityTradePriceAdjustmentRecordToJSON(activityTradePriceAdjustmentRecord) {
    return JSON.stringify(ActivityTradePriceAdjustmentRecord$outboundSchema.parse(activityTradePriceAdjustmentRecord));
}
export function activityTradePriceAdjustmentRecordFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTradePriceAdjustmentRecord$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTradePriceAdjustmentRecord' from JSON`);
}
/** @internal */
export const ActivityTrade$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: ActivityTradeBrokerCapacity$inboundSchema.optional(),
    client_memos: z.array(z.string()).optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(Lot$inboundSchema).optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => ActivityTradePrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    symbol_description: z.string().optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memos": "clientMemos",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "symbol_description": "symbolDescription",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
export const ActivityTrade$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: ActivityTradeBrokerCapacity$outboundSchema.optional(),
    clientMemos: z.array(z.string()).optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(Lot$outboundSchema).optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => ActivityTradePrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => ActivityTradePriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    symbolDescription: z.string().optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemos: "client_memos",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        symbolDescription: "symbol_description",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTrade$;
(function (ActivityTrade$) {
    /** @deprecated use `ActivityTrade$inboundSchema` instead. */
    ActivityTrade$.inboundSchema = ActivityTrade$inboundSchema;
    /** @deprecated use `ActivityTrade$outboundSchema` instead. */
    ActivityTrade$.outboundSchema = ActivityTrade$outboundSchema;
})(ActivityTrade$ || (ActivityTrade$ = {}));
export function activityTradeToJSON(activityTrade) {
    return JSON.stringify(ActivityTrade$outboundSchema.parse(activityTrade));
}
export function activityTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTrade' from JSON`);
}
/** @internal */
export const ActivityTransferType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityTransferType$outboundSchema = z.union([
    z.nativeEnum(ActivityTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTransferType$;
(function (ActivityTransferType$) {
    /** @deprecated use `ActivityTransferType$inboundSchema` instead. */
    ActivityTransferType$.inboundSchema = ActivityTransferType$inboundSchema;
    /** @deprecated use `ActivityTransferType$outboundSchema` instead. */
    ActivityTransferType$.outboundSchema = ActivityTransferType$outboundSchema;
})(ActivityTransferType$ || (ActivityTransferType$ = {}));
/** @internal */
export const ActivityTransfer$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    client_brokerage: z.string().optional(),
    transfer_type: ActivityTransferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "client_brokerage": "clientBrokerage",
        "transfer_type": "transferType",
    });
});
/** @internal */
export const ActivityTransfer$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    clientBrokerage: z.string().optional(),
    transferType: ActivityTransferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        clientBrokerage: "client_brokerage",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityTransfer$;
(function (ActivityTransfer$) {
    /** @deprecated use `ActivityTransfer$inboundSchema` instead. */
    ActivityTransfer$.inboundSchema = ActivityTransfer$inboundSchema;
    /** @deprecated use `ActivityTransfer$outboundSchema` instead. */
    ActivityTransfer$.outboundSchema = ActivityTransfer$outboundSchema;
})(ActivityTransfer$ || (ActivityTransfer$ = {}));
export function activityTransferToJSON(activityTransfer) {
    return JSON.stringify(ActivityTransfer$outboundSchema.parse(activityTransfer));
}
export function activityTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityTransfer' from JSON`);
}
/** @internal */
export const ActivityType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityType$outboundSchema = z.union([
    z.nativeEnum(ActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityType$;
(function (ActivityType$) {
    /** @deprecated use `ActivityType$inboundSchema` instead. */
    ActivityType$.inboundSchema = ActivityType$inboundSchema;
    /** @deprecated use `ActivityType$outboundSchema` instead. */
    ActivityType$.outboundSchema = ActivityType$outboundSchema;
})(ActivityType$ || (ActivityType$ = {}));
/** @internal */
export const ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityUnitSplitCorporateActionGeneralInformation$;
(function (ActivityUnitSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityUnitSplitCorporateActionGeneralInformation$.inboundSchema = ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityUnitSplitCorporateActionGeneralInformation$.outboundSchema = ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityUnitSplitCorporateActionGeneralInformation$ || (ActivityUnitSplitCorporateActionGeneralInformation$ = {}));
export function activityUnitSplitCorporateActionGeneralInformationToJSON(activityUnitSplitCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema.parse(activityUnitSplitCorporateActionGeneralInformation));
}
export function activityUnitSplitCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityUnitSplitCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityUnitSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ActivityUnitSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityUnitSplitStockRate$;
(function (ActivityUnitSplitStockRate$) {
    /** @deprecated use `ActivityUnitSplitStockRate$inboundSchema` instead. */
    ActivityUnitSplitStockRate$.inboundSchema = ActivityUnitSplitStockRate$inboundSchema;
    /** @deprecated use `ActivityUnitSplitStockRate$outboundSchema` instead. */
    ActivityUnitSplitStockRate$.outboundSchema = ActivityUnitSplitStockRate$outboundSchema;
})(ActivityUnitSplitStockRate$ || (ActivityUnitSplitStockRate$ = {}));
export function activityUnitSplitStockRateToJSON(activityUnitSplitStockRate) {
    return JSON.stringify(ActivityUnitSplitStockRate$outboundSchema.parse(activityUnitSplitStockRate));
}
export function activityUnitSplitStockRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityUnitSplitStockRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityUnitSplitStockRate' from JSON`);
}
/** @internal */
export const ActivityUnitSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => ActivityUnitSplitStockRate$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
export const ActivityUnitSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => ActivityUnitSplitStockRate$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityUnitSplit$;
(function (ActivityUnitSplit$) {
    /** @deprecated use `ActivityUnitSplit$inboundSchema` instead. */
    ActivityUnitSplit$.inboundSchema = ActivityUnitSplit$inboundSchema;
    /** @deprecated use `ActivityUnitSplit$outboundSchema` instead. */
    ActivityUnitSplit$.outboundSchema = ActivityUnitSplit$outboundSchema;
})(ActivityUnitSplit$ || (ActivityUnitSplit$ = {}));
export function activityUnitSplitToJSON(activityUnitSplit) {
    return JSON.stringify(ActivityUnitSplit$outboundSchema.parse(activityUnitSplit));
}
export function activityUnitSplitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityUnitSplit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityUnitSplit' from JSON`);
}
/** @internal */
export const ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWarrantExerciseCorporateActionGeneralInformation$;
(function (ActivityWarrantExerciseCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityWarrantExerciseCorporateActionGeneralInformation$.inboundSchema = ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityWarrantExerciseCorporateActionGeneralInformation$.outboundSchema = ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema;
})(ActivityWarrantExerciseCorporateActionGeneralInformation$ || (ActivityWarrantExerciseCorporateActionGeneralInformation$ = {}));
export function activityWarrantExerciseCorporateActionGeneralInformationToJSON(activityWarrantExerciseCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema
        .parse(activityWarrantExerciseCorporateActionGeneralInformation));
}
export function activityWarrantExerciseCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'ActivityWarrantExerciseCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityWarrantExercise$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
export const ActivityWarrantExercise$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWarrantExercise$;
(function (ActivityWarrantExercise$) {
    /** @deprecated use `ActivityWarrantExercise$inboundSchema` instead. */
    ActivityWarrantExercise$.inboundSchema = ActivityWarrantExercise$inboundSchema;
    /** @deprecated use `ActivityWarrantExercise$outboundSchema` instead. */
    ActivityWarrantExercise$.outboundSchema = ActivityWarrantExercise$outboundSchema;
})(ActivityWarrantExercise$ || (ActivityWarrantExercise$ = {}));
export function activityWarrantExerciseToJSON(activityWarrantExercise) {
    return JSON.stringify(ActivityWarrantExercise$outboundSchema.parse(activityWarrantExercise));
}
export function activityWarrantExerciseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWarrantExercise$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWarrantExercise' from JSON`);
}
/** @internal */
export const ActivityDistributionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDistributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityDistributionType$outboundSchema = z.union([
    z.nativeEnum(ActivityDistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityDistributionType$;
(function (ActivityDistributionType$) {
    /** @deprecated use `ActivityDistributionType$inboundSchema` instead. */
    ActivityDistributionType$.inboundSchema = ActivityDistributionType$inboundSchema;
    /** @deprecated use `ActivityDistributionType$outboundSchema` instead. */
    ActivityDistributionType$.outboundSchema = ActivityDistributionType$outboundSchema;
})(ActivityDistributionType$ || (ActivityDistributionType$ = {}));
/** @internal */
export const ActivityRetirementType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRetirementType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityRetirementType$outboundSchema = z.union([
    z.nativeEnum(ActivityRetirementType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityRetirementType$;
(function (ActivityRetirementType$) {
    /** @deprecated use `ActivityRetirementType$inboundSchema` instead. */
    ActivityRetirementType$.inboundSchema = ActivityRetirementType$inboundSchema;
    /** @deprecated use `ActivityRetirementType$outboundSchema` instead. */
    ActivityRetirementType$.outboundSchema = ActivityRetirementType$outboundSchema;
})(ActivityRetirementType$ || (ActivityRetirementType$ = {}));
/** @internal */
export const ActivityWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(ActivityWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWithdrawalType$;
(function (ActivityWithdrawalType$) {
    /** @deprecated use `ActivityWithdrawalType$inboundSchema` instead. */
    ActivityWithdrawalType$.inboundSchema = ActivityWithdrawalType$inboundSchema;
    /** @deprecated use `ActivityWithdrawalType$outboundSchema` instead. */
    ActivityWithdrawalType$.outboundSchema = ActivityWithdrawalType$outboundSchema;
})(ActivityWithdrawalType$ || (ActivityWithdrawalType$ = {}));
/** @internal */
export const ActivityWithdrawal$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    advance: z.boolean().optional(),
    closing_account: z.boolean().optional(),
    conversion: z.boolean().optional(),
    destination_account_number: z.string().optional(),
    destination_institution: z.string().optional(),
    distribution_type: ActivityDistributionType$inboundSchema.optional(),
    distribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    futures_settlement: z.boolean().optional(),
    micro: z.boolean().optional(),
    originating_institution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirement_type: ActivityRetirementType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
    total_distribution: z.boolean().optional(),
    type: ActivityWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_instructions": "additionalInstructions",
        "closing_account": "closingAccount",
        "destination_account_number": "destinationAccountNumber",
        "destination_institution": "destinationInstitution",
        "distribution_type": "distributionType",
        "distribution_year": "distributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "futures_settlement": "futuresSettlement",
        "originating_institution": "originatingInstitution",
        "retirement_type": "retirementType",
        "total_distribution": "totalDistribution",
    });
});
/** @internal */
export const ActivityWithdrawal$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    advance: z.boolean().optional(),
    closingAccount: z.boolean().optional(),
    conversion: z.boolean().optional(),
    destinationAccountNumber: z.string().optional(),
    destinationInstitution: z.string().optional(),
    distributionType: ActivityDistributionType$outboundSchema.optional(),
    distributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    futuresSettlement: z.boolean().optional(),
    micro: z.boolean().optional(),
    originatingInstitution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirementType: ActivityRetirementType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
    totalDistribution: z.boolean().optional(),
    type: ActivityWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInstructions: "additional_instructions",
        closingAccount: "closing_account",
        destinationAccountNumber: "destination_account_number",
        destinationInstitution: "destination_institution",
        distributionType: "distribution_type",
        distributionYear: "distribution_year",
        fedReferenceNumber: "fed_reference_number",
        futuresSettlement: "futures_settlement",
        originatingInstitution: "originating_institution",
        retirementType: "retirement_type",
        totalDistribution: "total_distribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWithdrawal$;
(function (ActivityWithdrawal$) {
    /** @deprecated use `ActivityWithdrawal$inboundSchema` instead. */
    ActivityWithdrawal$.inboundSchema = ActivityWithdrawal$inboundSchema;
    /** @deprecated use `ActivityWithdrawal$outboundSchema` instead. */
    ActivityWithdrawal$.outboundSchema = ActivityWithdrawal$outboundSchema;
})(ActivityWithdrawal$ || (ActivityWithdrawal$ = {}));
export function activityWithdrawalToJSON(activityWithdrawal) {
    return JSON.stringify(ActivityWithdrawal$outboundSchema.parse(activityWithdrawal));
}
export function activityWithdrawalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWithdrawal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWithdrawal' from JSON`);
}
/** @internal */
export const ActivityReview$inboundSchema = z
    .union([
    z.nativeEnum(ActivityReview),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ActivityReview$outboundSchema = z.union([
    z.nativeEnum(ActivityReview),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityReview$;
(function (ActivityReview$) {
    /** @deprecated use `ActivityReview$inboundSchema` instead. */
    ActivityReview$.inboundSchema = ActivityReview$inboundSchema;
    /** @deprecated use `ActivityReview$outboundSchema` instead. */
    ActivityReview$.outboundSchema = ActivityReview$outboundSchema;
})(ActivityReview$ || (ActivityReview$ = {}));
/** @internal */
export const ActivityWithdrawalPendingReview$inboundSchema = z.object({
    review: ActivityReview$inboundSchema.optional(),
});
/** @internal */
export const ActivityWithdrawalPendingReview$outboundSchema = z.object({
    review: ActivityReview$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWithdrawalPendingReview$;
(function (ActivityWithdrawalPendingReview$) {
    /** @deprecated use `ActivityWithdrawalPendingReview$inboundSchema` instead. */
    ActivityWithdrawalPendingReview$.inboundSchema = ActivityWithdrawalPendingReview$inboundSchema;
    /** @deprecated use `ActivityWithdrawalPendingReview$outboundSchema` instead. */
    ActivityWithdrawalPendingReview$.outboundSchema = ActivityWithdrawalPendingReview$outboundSchema;
})(ActivityWithdrawalPendingReview$ || (ActivityWithdrawalPendingReview$ = {}));
export function activityWithdrawalPendingReviewToJSON(activityWithdrawalPendingReview) {
    return JSON.stringify(ActivityWithdrawalPendingReview$outboundSchema.parse(activityWithdrawalPendingReview));
}
export function activityWithdrawalPendingReviewFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWithdrawalPendingReview$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWithdrawalPendingReview' from JSON`);
}
/** @internal */
export const ActivityWithholding$inboundSchema = z.object({
    data: z.array(WithholdingData$inboundSchema).optional(),
});
/** @internal */
export const ActivityWithholding$outboundSchema = z.object({
    data: z.array(WithholdingData$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWithholding$;
(function (ActivityWithholding$) {
    /** @deprecated use `ActivityWithholding$inboundSchema` instead. */
    ActivityWithholding$.inboundSchema = ActivityWithholding$inboundSchema;
    /** @deprecated use `ActivityWithholding$outboundSchema` instead. */
    ActivityWithholding$.outboundSchema = ActivityWithholding$outboundSchema;
})(ActivityWithholding$ || (ActivityWithholding$ = {}));
export function activityWithholdingToJSON(activityWithholding) {
    return JSON.stringify(ActivityWithholding$outboundSchema.parse(activityWithholding));
}
export function activityWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWithholding' from JSON`);
}
/** @internal */
export const ActivityWorthlessCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
export const ActivityWorthlessCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWorthlessCorporateActionGeneralInformation$;
(function (ActivityWorthlessCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityWorthlessCorporateActionGeneralInformation$.inboundSchema = ActivityWorthlessCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityWorthlessCorporateActionGeneralInformation$.outboundSchema = ActivityWorthlessCorporateActionGeneralInformation$outboundSchema;
})(ActivityWorthlessCorporateActionGeneralInformation$ || (ActivityWorthlessCorporateActionGeneralInformation$ = {}));
export function activityWorthlessCorporateActionGeneralInformationToJSON(activityWorthlessCorporateActionGeneralInformation) {
    return JSON.stringify(ActivityWorthlessCorporateActionGeneralInformation$outboundSchema.parse(activityWorthlessCorporateActionGeneralInformation));
}
export function activityWorthlessCorporateActionGeneralInformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWorthlessCorporateActionGeneralInformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWorthlessCorporateActionGeneralInformation' from JSON`);
}
/** @internal */
export const ActivityWorthlessEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityWorthlessEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWorthlessEffectiveDate$;
(function (ActivityWorthlessEffectiveDate$) {
    /** @deprecated use `ActivityWorthlessEffectiveDate$inboundSchema` instead. */
    ActivityWorthlessEffectiveDate$.inboundSchema = ActivityWorthlessEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityWorthlessEffectiveDate$outboundSchema` instead. */
    ActivityWorthlessEffectiveDate$.outboundSchema = ActivityWorthlessEffectiveDate$outboundSchema;
})(ActivityWorthlessEffectiveDate$ || (ActivityWorthlessEffectiveDate$ = {}));
export function activityWorthlessEffectiveDateToJSON(activityWorthlessEffectiveDate) {
    return JSON.stringify(ActivityWorthlessEffectiveDate$outboundSchema.parse(activityWorthlessEffectiveDate));
}
export function activityWorthlessEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWorthlessEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWorthlessEffectiveDate' from JSON`);
}
/** @internal */
export const ActivityWorthlessPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ActivityWorthlessPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWorthlessPaymentDate$;
(function (ActivityWorthlessPaymentDate$) {
    /** @deprecated use `ActivityWorthlessPaymentDate$inboundSchema` instead. */
    ActivityWorthlessPaymentDate$.inboundSchema = ActivityWorthlessPaymentDate$inboundSchema;
    /** @deprecated use `ActivityWorthlessPaymentDate$outboundSchema` instead. */
    ActivityWorthlessPaymentDate$.outboundSchema = ActivityWorthlessPaymentDate$outboundSchema;
})(ActivityWorthlessPaymentDate$ || (ActivityWorthlessPaymentDate$ = {}));
export function activityWorthlessPaymentDateToJSON(activityWorthlessPaymentDate) {
    return JSON.stringify(ActivityWorthlessPaymentDate$outboundSchema.parse(activityWorthlessPaymentDate));
}
export function activityWorthlessPaymentDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWorthlessPaymentDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWorthlessPaymentDate' from JSON`);
}
/** @internal */
export const ActivityWorthless$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => ActivityWorthlessCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => ActivityWorthlessEffectiveDate$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => ActivityWorthlessPaymentDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
    });
});
/** @internal */
export const ActivityWorthless$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => ActivityWorthlessCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => ActivityWorthlessEffectiveDate$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => ActivityWorthlessPaymentDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivityWorthless$;
(function (ActivityWorthless$) {
    /** @deprecated use `ActivityWorthless$inboundSchema` instead. */
    ActivityWorthless$.inboundSchema = ActivityWorthless$inboundSchema;
    /** @deprecated use `ActivityWorthless$outboundSchema` instead. */
    ActivityWorthless$.outboundSchema = ActivityWorthless$outboundSchema;
})(ActivityWorthless$ || (ActivityWorthless$ = {}));
export function activityWorthlessToJSON(activityWorthless) {
    return JSON.stringify(ActivityWorthless$outboundSchema.parse(activityWorthless));
}
export function activityWorthlessFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivityWorthless$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivityWorthless' from JSON`);
}
/** @internal */
export const Activity$inboundSchema = z.object({
    acats_pending_out: z.nullable(z.lazy(() => ActivityAcatsPendingOut$inboundSchema)).optional(),
    account_id: z.string().optional(),
    account_memo: ActivityAccountMemo$inboundSchema.optional(),
    account_transfer: z.nullable(z.lazy(() => ActivityAccountTransfer$inboundSchema)).optional(),
    accrued_interest: z.array(AccruedInterest$inboundSchema).optional(),
    accrued_interest_desc: z.nullable(z.lazy(() => AccruedInterestDesc$inboundSchema)).optional(),
    activity_date: z.nullable(z.lazy(() => ActivityActivityDate$inboundSchema))
        .optional(),
    activity_description: z.string().optional(),
    activity_id: z.string().optional(),
    activity_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    allocation: z.nullable(z.lazy(() => ActivityAllocation$inboundSchema))
        .optional(),
    asset_description: z.string().optional(),
    asset_id: z.string().optional(),
    bond_default: z.nullable(z.lazy(() => ActivityBondDefault$inboundSchema))
        .optional(),
    capital_gains: z.nullable(z.lazy(() => ActivityCapitalGains$inboundSchema))
        .optional(),
    cash_dividend: z.nullable(z.lazy(() => ActivityCashDividend$inboundSchema))
        .optional(),
    cash_in_lieu: z.nullable(z.lazy(() => ActivityCashInLieu$inboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => ActivityCommission$inboundSchema))
        .optional(),
    commissions: z.array(Commission$inboundSchema).optional(),
    conversion: z.nullable(z.lazy(() => ActivityConversion$inboundSchema))
        .optional(),
    corporate_action_memo_adjustment: z.nullable(z.lazy(() => ActivityCorporateActionMemoAdjustment$inboundSchema)).optional(),
    correspondent_id: z.string().optional(),
    creation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    credit: z.nullable(z.lazy(() => ActivityCredit$inboundSchema)).optional(),
    currency_asset_id: z.string().optional(),
    currency_code: z.string().optional(),
    deposit: z.nullable(z.lazy(() => ActivityDeposit$inboundSchema)).optional(),
    drip: z.nullable(z.lazy(() => ActivityDrip$inboundSchema)).optional(),
    exchange: z.nullable(z.lazy(() => ActivityExchange$inboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => ActivityFee$inboundSchema)).optional(),
    fees: z.array(Fee$inboundSchema).optional(),
    fpsl: z.nullable(z.lazy(() => ActivityFpsl$inboundSchema)).optional(),
    generation: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => ActivityGrossAmount$inboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => ActivityInterest$inboundSchema)).optional(),
    interest_payment: z.nullable(z.lazy(() => ActivityInterestPayment$inboundSchema)).optional(),
    liquidation: z.nullable(z.lazy(() => ActivityLiquidation$inboundSchema))
        .optional(),
    maturity: z.nullable(z.lazy(() => ActivityMaturity$inboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => ActivityMerger$inboundSchema)).optional(),
    name: z.string().optional(),
    name_change: z.nullable(z.lazy(() => ActivityNameChange$inboundSchema))
        .optional(),
    net_amount: z.nullable(z.lazy(() => ActivityNetAmount$inboundSchema))
        .optional(),
    next_activity_id: z.string().optional(),
    next_activity_process_date: z.nullable(z.lazy(() => NextActivityProcessDate$inboundSchema)).optional(),
    none: z.nullable(z.lazy(() => None$inboundSchema)).optional(),
    payment_in_kind: z.nullable(z.lazy(() => ActivityPaymentInKind$inboundSchema))
        .optional(),
    previous_activity_id: z.string().optional(),
    previous_process_date: z.nullable(z.lazy(() => PreviousProcessDate$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => ActivityPrice$inboundSchema)).optional(),
    process_date: z.nullable(z.lazy(() => ActivityProcessDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityQuantity$inboundSchema)).optional(),
    redemption_full: z.nullable(z.lazy(() => ActivityRedemptionFull$inboundSchema)).optional(),
    redemption_partial: z.nullable(z.lazy(() => ActivityRedemptionPartial$inboundSchema)).optional(),
    region_code: z.string().optional(),
    reverse_stock_split: z.nullable(z.lazy(() => ActivityReverseStockSplit$inboundSchema)).optional(),
    rights_distribution: z.nullable(z.lazy(() => ActivityRightsDistribution$inboundSchema)).optional(),
    rights_subscription: z.nullable(z.lazy(() => ActivityRightsSubscription$inboundSchema)).optional(),
    rounding_adjustment: z.nullable(z.lazy(() => ActivityRoundingAdjustment$inboundSchema)).optional(),
    rounding_amount: z.nullable(z.lazy(() => RoundingAmount$inboundSchema))
        .optional(),
    rounding_reason: z.string().optional(),
    sale_of_rights: z.nullable(z.lazy(() => ActivitySaleOfRights$inboundSchema))
        .optional(),
    settle_date: z.nullable(z.lazy(() => ActivitySettleDate$inboundSchema))
        .optional(),
    side: ActivitySide$inboundSchema.optional(),
    side_modifier: ActivitySideModifier$inboundSchema.optional(),
    spinoff: z.nullable(z.lazy(() => ActivitySpinoff$inboundSchema)).optional(),
    state: ActivityState$inboundSchema.optional(),
    stock_dividend: z.nullable(z.lazy(() => ActivityStockDividend$inboundSchema))
        .optional(),
    stock_split: z.nullable(z.lazy(() => ActivityStockSplit$inboundSchema))
        .optional(),
    subtype_category: z.string().optional(),
    sweep: z.nullable(z.lazy(() => ActivitySweep$inboundSchema)).optional(),
    tender_offer: z.nullable(z.lazy(() => ActivityTenderOffer$inboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => ActivityTrade$inboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => ActivityTransfer$inboundSchema)).optional(),
    type: ActivityType$inboundSchema.optional(),
    unit_split: z.nullable(z.lazy(() => ActivityUnitSplit$inboundSchema))
        .optional(),
    warrant_exercise: z.nullable(z.lazy(() => ActivityWarrantExercise$inboundSchema)).optional(),
    withdrawal: z.nullable(z.lazy(() => ActivityWithdrawal$inboundSchema))
        .optional(),
    withdrawal_pending_review: z.nullable(z.lazy(() => ActivityWithdrawalPendingReview$inboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => ActivityWithholding$inboundSchema))
        .optional(),
    withholdings: z.array(Withholding$inboundSchema).optional(),
    worthless: z.nullable(z.lazy(() => ActivityWorthless$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "acats_pending_out": "acatsPendingOut",
        "account_id": "accountId",
        "account_memo": "accountMemo",
        "account_transfer": "accountTransfer",
        "accrued_interest": "accruedInterest",
        "accrued_interest_desc": "accruedInterestDesc",
        "activity_date": "activityDate",
        "activity_description": "activityDescription",
        "activity_id": "activityId",
        "activity_time": "activityTime",
        "asset_description": "assetDescription",
        "asset_id": "assetId",
        "bond_default": "bondDefault",
        "capital_gains": "capitalGains",
        "cash_dividend": "cashDividend",
        "cash_in_lieu": "cashInLieu",
        "corporate_action_memo_adjustment": "corporateActionMemoAdjustment",
        "correspondent_id": "correspondentId",
        "creation_time": "creationTime",
        "currency_asset_id": "currencyAssetId",
        "currency_code": "currencyCode",
        "gross_amount": "grossAmount",
        "interest_payment": "interestPayment",
        "name_change": "nameChange",
        "net_amount": "netAmount",
        "next_activity_id": "nextActivityId",
        "next_activity_process_date": "nextActivityProcessDate",
        "payment_in_kind": "paymentInKind",
        "previous_activity_id": "previousActivityId",
        "previous_process_date": "previousProcessDate",
        "process_date": "processDate",
        "redemption_full": "redemptionFull",
        "redemption_partial": "redemptionPartial",
        "region_code": "regionCode",
        "reverse_stock_split": "reverseStockSplit",
        "rights_distribution": "rightsDistribution",
        "rights_subscription": "rightsSubscription",
        "rounding_adjustment": "roundingAdjustment",
        "rounding_amount": "roundingAmount",
        "rounding_reason": "roundingReason",
        "sale_of_rights": "saleOfRights",
        "settle_date": "settleDate",
        "side_modifier": "sideModifier",
        "stock_dividend": "stockDividend",
        "stock_split": "stockSplit",
        "subtype_category": "subtypeCategory",
        "tender_offer": "tenderOffer",
        "unit_split": "unitSplit",
        "warrant_exercise": "warrantExercise",
        "withdrawal_pending_review": "withdrawalPendingReview",
    });
});
/** @internal */
export const Activity$outboundSchema = z.object({
    acatsPendingOut: z.nullable(z.lazy(() => ActivityAcatsPendingOut$outboundSchema)).optional(),
    accountId: z.string().optional(),
    accountMemo: ActivityAccountMemo$outboundSchema.optional(),
    accountTransfer: z.nullable(z.lazy(() => ActivityAccountTransfer$outboundSchema)).optional(),
    accruedInterest: z.array(AccruedInterest$outboundSchema).optional(),
    accruedInterestDesc: z.nullable(z.lazy(() => AccruedInterestDesc$outboundSchema)).optional(),
    activityDate: z.nullable(z.lazy(() => ActivityActivityDate$outboundSchema))
        .optional(),
    activityDescription: z.string().optional(),
    activityId: z.string().optional(),
    activityTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    allocation: z.nullable(z.lazy(() => ActivityAllocation$outboundSchema))
        .optional(),
    assetDescription: z.string().optional(),
    assetId: z.string().optional(),
    bondDefault: z.nullable(z.lazy(() => ActivityBondDefault$outboundSchema))
        .optional(),
    capitalGains: z.nullable(z.lazy(() => ActivityCapitalGains$outboundSchema))
        .optional(),
    cashDividend: z.nullable(z.lazy(() => ActivityCashDividend$outboundSchema))
        .optional(),
    cashInLieu: z.nullable(z.lazy(() => ActivityCashInLieu$outboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => ActivityCommission$outboundSchema))
        .optional(),
    commissions: z.array(Commission$outboundSchema).optional(),
    conversion: z.nullable(z.lazy(() => ActivityConversion$outboundSchema))
        .optional(),
    corporateActionMemoAdjustment: z.nullable(z.lazy(() => ActivityCorporateActionMemoAdjustment$outboundSchema)).optional(),
    correspondentId: z.string().optional(),
    creationTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    credit: z.nullable(z.lazy(() => ActivityCredit$outboundSchema)).optional(),
    currencyAssetId: z.string().optional(),
    currencyCode: z.string().optional(),
    deposit: z.nullable(z.lazy(() => ActivityDeposit$outboundSchema)).optional(),
    drip: z.nullable(z.lazy(() => ActivityDrip$outboundSchema)).optional(),
    exchange: z.nullable(z.lazy(() => ActivityExchange$outboundSchema))
        .optional(),
    fee: z.nullable(z.lazy(() => ActivityFee$outboundSchema)).optional(),
    fees: z.array(Fee$outboundSchema).optional(),
    fpsl: z.nullable(z.lazy(() => ActivityFpsl$outboundSchema)).optional(),
    generation: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => ActivityGrossAmount$outboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => ActivityInterest$outboundSchema))
        .optional(),
    interestPayment: z.nullable(z.lazy(() => ActivityInterestPayment$outboundSchema)).optional(),
    liquidation: z.nullable(z.lazy(() => ActivityLiquidation$outboundSchema))
        .optional(),
    maturity: z.nullable(z.lazy(() => ActivityMaturity$outboundSchema))
        .optional(),
    merger: z.nullable(z.lazy(() => ActivityMerger$outboundSchema)).optional(),
    name: z.string().optional(),
    nameChange: z.nullable(z.lazy(() => ActivityNameChange$outboundSchema))
        .optional(),
    netAmount: z.nullable(z.lazy(() => ActivityNetAmount$outboundSchema))
        .optional(),
    nextActivityId: z.string().optional(),
    nextActivityProcessDate: z.nullable(z.lazy(() => NextActivityProcessDate$outboundSchema)).optional(),
    none: z.nullable(z.lazy(() => None$outboundSchema)).optional(),
    paymentInKind: z.nullable(z.lazy(() => ActivityPaymentInKind$outboundSchema))
        .optional(),
    previousActivityId: z.string().optional(),
    previousProcessDate: z.nullable(z.lazy(() => PreviousProcessDate$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => ActivityPrice$outboundSchema)).optional(),
    processDate: z.nullable(z.lazy(() => ActivityProcessDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => ActivityQuantity$outboundSchema))
        .optional(),
    redemptionFull: z.nullable(z.lazy(() => ActivityRedemptionFull$outboundSchema)).optional(),
    redemptionPartial: z.nullable(z.lazy(() => ActivityRedemptionPartial$outboundSchema)).optional(),
    regionCode: z.string().optional(),
    reverseStockSplit: z.nullable(z.lazy(() => ActivityReverseStockSplit$outboundSchema)).optional(),
    rightsDistribution: z.nullable(z.lazy(() => ActivityRightsDistribution$outboundSchema)).optional(),
    rightsSubscription: z.nullable(z.lazy(() => ActivityRightsSubscription$outboundSchema)).optional(),
    roundingAdjustment: z.nullable(z.lazy(() => ActivityRoundingAdjustment$outboundSchema)).optional(),
    roundingAmount: z.nullable(z.lazy(() => RoundingAmount$outboundSchema))
        .optional(),
    roundingReason: z.string().optional(),
    saleOfRights: z.nullable(z.lazy(() => ActivitySaleOfRights$outboundSchema))
        .optional(),
    settleDate: z.nullable(z.lazy(() => ActivitySettleDate$outboundSchema))
        .optional(),
    side: ActivitySide$outboundSchema.optional(),
    sideModifier: ActivitySideModifier$outboundSchema.optional(),
    spinoff: z.nullable(z.lazy(() => ActivitySpinoff$outboundSchema)).optional(),
    state: ActivityState$outboundSchema.optional(),
    stockDividend: z.nullable(z.lazy(() => ActivityStockDividend$outboundSchema))
        .optional(),
    stockSplit: z.nullable(z.lazy(() => ActivityStockSplit$outboundSchema))
        .optional(),
    subtypeCategory: z.string().optional(),
    sweep: z.nullable(z.lazy(() => ActivitySweep$outboundSchema)).optional(),
    tenderOffer: z.nullable(z.lazy(() => ActivityTenderOffer$outboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => ActivityTrade$outboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => ActivityTransfer$outboundSchema))
        .optional(),
    type: ActivityType$outboundSchema.optional(),
    unitSplit: z.nullable(z.lazy(() => ActivityUnitSplit$outboundSchema))
        .optional(),
    warrantExercise: z.nullable(z.lazy(() => ActivityWarrantExercise$outboundSchema)).optional(),
    withdrawal: z.nullable(z.lazy(() => ActivityWithdrawal$outboundSchema))
        .optional(),
    withdrawalPendingReview: z.nullable(z.lazy(() => ActivityWithdrawalPendingReview$outboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => ActivityWithholding$outboundSchema))
        .optional(),
    withholdings: z.array(Withholding$outboundSchema).optional(),
    worthless: z.nullable(z.lazy(() => ActivityWorthless$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        acatsPendingOut: "acats_pending_out",
        accountId: "account_id",
        accountMemo: "account_memo",
        accountTransfer: "account_transfer",
        accruedInterest: "accrued_interest",
        accruedInterestDesc: "accrued_interest_desc",
        activityDate: "activity_date",
        activityDescription: "activity_description",
        activityId: "activity_id",
        activityTime: "activity_time",
        assetDescription: "asset_description",
        assetId: "asset_id",
        bondDefault: "bond_default",
        capitalGains: "capital_gains",
        cashDividend: "cash_dividend",
        cashInLieu: "cash_in_lieu",
        corporateActionMemoAdjustment: "corporate_action_memo_adjustment",
        correspondentId: "correspondent_id",
        creationTime: "creation_time",
        currencyAssetId: "currency_asset_id",
        currencyCode: "currency_code",
        grossAmount: "gross_amount",
        interestPayment: "interest_payment",
        nameChange: "name_change",
        netAmount: "net_amount",
        nextActivityId: "next_activity_id",
        nextActivityProcessDate: "next_activity_process_date",
        paymentInKind: "payment_in_kind",
        previousActivityId: "previous_activity_id",
        previousProcessDate: "previous_process_date",
        processDate: "process_date",
        redemptionFull: "redemption_full",
        redemptionPartial: "redemption_partial",
        regionCode: "region_code",
        reverseStockSplit: "reverse_stock_split",
        rightsDistribution: "rights_distribution",
        rightsSubscription: "rights_subscription",
        roundingAdjustment: "rounding_adjustment",
        roundingAmount: "rounding_amount",
        roundingReason: "rounding_reason",
        saleOfRights: "sale_of_rights",
        settleDate: "settle_date",
        sideModifier: "side_modifier",
        stockDividend: "stock_dividend",
        stockSplit: "stock_split",
        subtypeCategory: "subtype_category",
        tenderOffer: "tender_offer",
        unitSplit: "unit_split",
        warrantExercise: "warrant_exercise",
        withdrawalPendingReview: "withdrawal_pending_review",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Activity$;
(function (Activity$) {
    /** @deprecated use `Activity$inboundSchema` instead. */
    Activity$.inboundSchema = Activity$inboundSchema;
    /** @deprecated use `Activity$outboundSchema` instead. */
    Activity$.outboundSchema = Activity$outboundSchema;
})(Activity$ || (Activity$ = {}));
export function activityToJSON(activity) {
    return JSON.stringify(Activity$outboundSchema.parse(activity));
}
export function activityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Activity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Activity' from JSON`);
}
//# sourceMappingURL=activity.js.map