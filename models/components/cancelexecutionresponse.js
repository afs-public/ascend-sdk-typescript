/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BondYield$inboundSchema, BondYield$outboundSchema, } from "./bondyield.js";
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
export var CancelExecutionResponsePriceAdjustmentType;
(function (CancelExecutionResponsePriceAdjustmentType) {
    CancelExecutionResponsePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    CancelExecutionResponsePriceAdjustmentType["Markup"] = "MARKUP";
    CancelExecutionResponsePriceAdjustmentType["Markdown"] = "MARKDOWN";
    CancelExecutionResponsePriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(CancelExecutionResponsePriceAdjustmentType || (CancelExecutionResponsePriceAdjustmentType = {}));
/**
 * The state that the trade is in.
 */
export var CancelExecutionResponseState;
(function (CancelExecutionResponseState) {
    CancelExecutionResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    CancelExecutionResponseState["Creating"] = "CREATING";
    CancelExecutionResponseState["Rebooking"] = "REBOOKING";
    CancelExecutionResponseState["Canceling"] = "CANCELING";
    CancelExecutionResponseState["Booked"] = "BOOKED";
    CancelExecutionResponseState["Rebooked"] = "REBOOKED";
    CancelExecutionResponseState["Canceled"] = "CANCELED";
    CancelExecutionResponseState["Failed"] = "FAILED";
})(CancelExecutionResponseState || (CancelExecutionResponseState = {}));
/** @internal */
export const CancelExecutionResponseAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponseAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseAccruedInterestAmount$;
(function (CancelExecutionResponseAccruedInterestAmount$) {
    /** @deprecated use `CancelExecutionResponseAccruedInterestAmount$inboundSchema` instead. */
    CancelExecutionResponseAccruedInterestAmount$.inboundSchema = CancelExecutionResponseAccruedInterestAmount$inboundSchema;
    /** @deprecated use `CancelExecutionResponseAccruedInterestAmount$outboundSchema` instead. */
    CancelExecutionResponseAccruedInterestAmount$.outboundSchema = CancelExecutionResponseAccruedInterestAmount$outboundSchema;
})(CancelExecutionResponseAccruedInterestAmount$ || (CancelExecutionResponseAccruedInterestAmount$ = {}));
export function cancelExecutionResponseAccruedInterestAmountToJSON(cancelExecutionResponseAccruedInterestAmount) {
    return JSON.stringify(CancelExecutionResponseAccruedInterestAmount$outboundSchema.parse(cancelExecutionResponseAccruedInterestAmount));
}
export function cancelExecutionResponseAccruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponseAccruedInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponseAccruedInterestAmount' from JSON`);
}
/** @internal */
export const CancelExecutionResponseCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponseCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseCommissionAmount$;
(function (CancelExecutionResponseCommissionAmount$) {
    /** @deprecated use `CancelExecutionResponseCommissionAmount$inboundSchema` instead. */
    CancelExecutionResponseCommissionAmount$.inboundSchema = CancelExecutionResponseCommissionAmount$inboundSchema;
    /** @deprecated use `CancelExecutionResponseCommissionAmount$outboundSchema` instead. */
    CancelExecutionResponseCommissionAmount$.outboundSchema = CancelExecutionResponseCommissionAmount$outboundSchema;
})(CancelExecutionResponseCommissionAmount$ || (CancelExecutionResponseCommissionAmount$ = {}));
export function cancelExecutionResponseCommissionAmountToJSON(cancelExecutionResponseCommissionAmount) {
    return JSON.stringify(CancelExecutionResponseCommissionAmount$outboundSchema.parse(cancelExecutionResponseCommissionAmount));
}
export function cancelExecutionResponseCommissionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponseCommissionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponseCommissionAmount' from JSON`);
}
/** @internal */
export const CancelExecutionResponseGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponseGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseGrossAmount$;
(function (CancelExecutionResponseGrossAmount$) {
    /** @deprecated use `CancelExecutionResponseGrossAmount$inboundSchema` instead. */
    CancelExecutionResponseGrossAmount$.inboundSchema = CancelExecutionResponseGrossAmount$inboundSchema;
    /** @deprecated use `CancelExecutionResponseGrossAmount$outboundSchema` instead. */
    CancelExecutionResponseGrossAmount$.outboundSchema = CancelExecutionResponseGrossAmount$outboundSchema;
})(CancelExecutionResponseGrossAmount$ || (CancelExecutionResponseGrossAmount$ = {}));
export function cancelExecutionResponseGrossAmountToJSON(cancelExecutionResponseGrossAmount) {
    return JSON.stringify(CancelExecutionResponseGrossAmount$outboundSchema.parse(cancelExecutionResponseGrossAmount));
}
export function cancelExecutionResponseGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponseGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponseGrossAmount' from JSON`);
}
/** @internal */
export const CancelExecutionResponsePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponsePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponsePrevailingMarketPrice$;
(function (CancelExecutionResponsePrevailingMarketPrice$) {
    /** @deprecated use `CancelExecutionResponsePrevailingMarketPrice$inboundSchema` instead. */
    CancelExecutionResponsePrevailingMarketPrice$.inboundSchema = CancelExecutionResponsePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `CancelExecutionResponsePrevailingMarketPrice$outboundSchema` instead. */
    CancelExecutionResponsePrevailingMarketPrice$.outboundSchema = CancelExecutionResponsePrevailingMarketPrice$outboundSchema;
})(CancelExecutionResponsePrevailingMarketPrice$ || (CancelExecutionResponsePrevailingMarketPrice$ = {}));
export function cancelExecutionResponsePrevailingMarketPriceToJSON(cancelExecutionResponsePrevailingMarketPrice) {
    return JSON.stringify(CancelExecutionResponsePrevailingMarketPrice$outboundSchema.parse(cancelExecutionResponsePrevailingMarketPrice));
}
export function cancelExecutionResponsePrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponsePrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponsePrevailingMarketPrice' from JSON`);
}
/** @internal */
export const CancelExecutionResponsePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponsePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponsePrice$;
(function (CancelExecutionResponsePrice$) {
    /** @deprecated use `CancelExecutionResponsePrice$inboundSchema` instead. */
    CancelExecutionResponsePrice$.inboundSchema = CancelExecutionResponsePrice$inboundSchema;
    /** @deprecated use `CancelExecutionResponsePrice$outboundSchema` instead. */
    CancelExecutionResponsePrice$.outboundSchema = CancelExecutionResponsePrice$outboundSchema;
})(CancelExecutionResponsePrice$ || (CancelExecutionResponsePrice$ = {}));
export function cancelExecutionResponsePriceToJSON(cancelExecutionResponsePrice) {
    return JSON.stringify(CancelExecutionResponsePrice$outboundSchema.parse(cancelExecutionResponsePrice));
}
export function cancelExecutionResponsePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponsePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponsePrice' from JSON`);
}
/** @internal */
export const CancelExecutionResponsePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponsePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponsePriceAdjustmentAmount$;
(function (CancelExecutionResponsePriceAdjustmentAmount$) {
    /** @deprecated use `CancelExecutionResponsePriceAdjustmentAmount$inboundSchema` instead. */
    CancelExecutionResponsePriceAdjustmentAmount$.inboundSchema = CancelExecutionResponsePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `CancelExecutionResponsePriceAdjustmentAmount$outboundSchema` instead. */
    CancelExecutionResponsePriceAdjustmentAmount$.outboundSchema = CancelExecutionResponsePriceAdjustmentAmount$outboundSchema;
})(CancelExecutionResponsePriceAdjustmentAmount$ || (CancelExecutionResponsePriceAdjustmentAmount$ = {}));
export function cancelExecutionResponsePriceAdjustmentAmountToJSON(cancelExecutionResponsePriceAdjustmentAmount) {
    return JSON.stringify(CancelExecutionResponsePriceAdjustmentAmount$outboundSchema.parse(cancelExecutionResponsePriceAdjustmentAmount));
}
export function cancelExecutionResponsePriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponsePriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponsePriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const CancelExecutionResponsePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(CancelExecutionResponsePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelExecutionResponsePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(CancelExecutionResponsePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponsePriceAdjustmentType$;
(function (CancelExecutionResponsePriceAdjustmentType$) {
    /** @deprecated use `CancelExecutionResponsePriceAdjustmentType$inboundSchema` instead. */
    CancelExecutionResponsePriceAdjustmentType$.inboundSchema = CancelExecutionResponsePriceAdjustmentType$inboundSchema;
    /** @deprecated use `CancelExecutionResponsePriceAdjustmentType$outboundSchema` instead. */
    CancelExecutionResponsePriceAdjustmentType$.outboundSchema = CancelExecutionResponsePriceAdjustmentType$outboundSchema;
})(CancelExecutionResponsePriceAdjustmentType$ || (CancelExecutionResponsePriceAdjustmentType$ = {}));
/** @internal */
export const CancelExecutionResponsePriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => CancelExecutionResponsePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: CancelExecutionResponsePriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const CancelExecutionResponsePriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => CancelExecutionResponsePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: CancelExecutionResponsePriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponsePriceAdjustment$;
(function (CancelExecutionResponsePriceAdjustment$) {
    /** @deprecated use `CancelExecutionResponsePriceAdjustment$inboundSchema` instead. */
    CancelExecutionResponsePriceAdjustment$.inboundSchema = CancelExecutionResponsePriceAdjustment$inboundSchema;
    /** @deprecated use `CancelExecutionResponsePriceAdjustment$outboundSchema` instead. */
    CancelExecutionResponsePriceAdjustment$.outboundSchema = CancelExecutionResponsePriceAdjustment$outboundSchema;
})(CancelExecutionResponsePriceAdjustment$ || (CancelExecutionResponsePriceAdjustment$ = {}));
export function cancelExecutionResponsePriceAdjustmentToJSON(cancelExecutionResponsePriceAdjustment) {
    return JSON.stringify(CancelExecutionResponsePriceAdjustment$outboundSchema.parse(cancelExecutionResponsePriceAdjustment));
}
export function cancelExecutionResponsePriceAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponsePriceAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponsePriceAdjustment' from JSON`);
}
/** @internal */
export const CancelExecutionResponseQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CancelExecutionResponseQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseQuantity$;
(function (CancelExecutionResponseQuantity$) {
    /** @deprecated use `CancelExecutionResponseQuantity$inboundSchema` instead. */
    CancelExecutionResponseQuantity$.inboundSchema = CancelExecutionResponseQuantity$inboundSchema;
    /** @deprecated use `CancelExecutionResponseQuantity$outboundSchema` instead. */
    CancelExecutionResponseQuantity$.outboundSchema = CancelExecutionResponseQuantity$outboundSchema;
})(CancelExecutionResponseQuantity$ || (CancelExecutionResponseQuantity$ = {}));
export function cancelExecutionResponseQuantityToJSON(cancelExecutionResponseQuantity) {
    return JSON.stringify(CancelExecutionResponseQuantity$outboundSchema.parse(cancelExecutionResponseQuantity));
}
export function cancelExecutionResponseQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponseQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponseQuantity' from JSON`);
}
/** @internal */
export const CancelExecutionResponseState$inboundSchema = z
    .union([
    z.nativeEnum(CancelExecutionResponseState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CancelExecutionResponseState$outboundSchema = z.union([
    z.nativeEnum(CancelExecutionResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseState$;
(function (CancelExecutionResponseState$) {
    /** @deprecated use `CancelExecutionResponseState$inboundSchema` instead. */
    CancelExecutionResponseState$.inboundSchema = CancelExecutionResponseState$inboundSchema;
    /** @deprecated use `CancelExecutionResponseState$outboundSchema` instead. */
    CancelExecutionResponseState$.outboundSchema = CancelExecutionResponseState$outboundSchema;
})(CancelExecutionResponseState$ || (CancelExecutionResponseState$ = {}));
/** @internal */
export const CancelExecutionResponseExecution$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => CancelExecutionResponseAccruedInterestAmount$inboundSchema)).optional(),
    activity_id: z.string().optional(),
    bond_yield: z.array(BondYield$inboundSchema).optional(),
    commission_amount: z.nullable(z.lazy(() => CancelExecutionResponseCommissionAmount$inboundSchema)).optional(),
    execution_id: z.string().optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    external_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => CancelExecutionResponseGrossAmount$inboundSchema)).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => CancelExecutionResponsePrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => CancelExecutionResponsePrice$inboundSchema))
        .optional(),
    price_adjustment: z.nullable(z.lazy(() => CancelExecutionResponsePriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => CancelExecutionResponseQuantity$inboundSchema)).optional(),
    state: CancelExecutionResponseState$inboundSchema.optional(),
    street_execution_id: z.string().optional(),
    trade_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "activity_id": "activityId",
        "bond_yield": "bondYield",
        "commission_amount": "commissionAmount",
        "execution_id": "executionId",
        "execution_time": "executionTime",
        "external_id": "externalId",
        "gross_amount": "grossAmount",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "street_execution_id": "streetExecutionId",
        "trade_id": "tradeId",
    });
});
/** @internal */
export const CancelExecutionResponseExecution$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => CancelExecutionResponseAccruedInterestAmount$outboundSchema)).optional(),
    activityId: z.string().optional(),
    bondYield: z.array(BondYield$outboundSchema).optional(),
    commissionAmount: z.nullable(z.lazy(() => CancelExecutionResponseCommissionAmount$outboundSchema)).optional(),
    executionId: z.string().optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    externalId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => CancelExecutionResponseGrossAmount$outboundSchema)).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => CancelExecutionResponsePrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => CancelExecutionResponsePrice$outboundSchema))
        .optional(),
    priceAdjustment: z.nullable(z.lazy(() => CancelExecutionResponsePriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => CancelExecutionResponseQuantity$outboundSchema)).optional(),
    state: CancelExecutionResponseState$outboundSchema.optional(),
    streetExecutionId: z.string().optional(),
    tradeId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        activityId: "activity_id",
        bondYield: "bond_yield",
        commissionAmount: "commission_amount",
        executionId: "execution_id",
        executionTime: "execution_time",
        externalId: "external_id",
        grossAmount: "gross_amount",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        streetExecutionId: "street_execution_id",
        tradeId: "trade_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponseExecution$;
(function (CancelExecutionResponseExecution$) {
    /** @deprecated use `CancelExecutionResponseExecution$inboundSchema` instead. */
    CancelExecutionResponseExecution$.inboundSchema = CancelExecutionResponseExecution$inboundSchema;
    /** @deprecated use `CancelExecutionResponseExecution$outboundSchema` instead. */
    CancelExecutionResponseExecution$.outboundSchema = CancelExecutionResponseExecution$outboundSchema;
})(CancelExecutionResponseExecution$ || (CancelExecutionResponseExecution$ = {}));
export function cancelExecutionResponseExecutionToJSON(cancelExecutionResponseExecution) {
    return JSON.stringify(CancelExecutionResponseExecution$outboundSchema.parse(cancelExecutionResponseExecution));
}
export function cancelExecutionResponseExecutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponseExecution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponseExecution' from JSON`);
}
/** @internal */
export const CancelExecutionResponse$inboundSchema = z.object({
    execution: z.nullable(z.lazy(() => CancelExecutionResponseExecution$inboundSchema)).optional(),
});
/** @internal */
export const CancelExecutionResponse$outboundSchema = z.object({
    execution: z.nullable(z.lazy(() => CancelExecutionResponseExecution$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionResponse$;
(function (CancelExecutionResponse$) {
    /** @deprecated use `CancelExecutionResponse$inboundSchema` instead. */
    CancelExecutionResponse$.inboundSchema = CancelExecutionResponse$inboundSchema;
    /** @deprecated use `CancelExecutionResponse$outboundSchema` instead. */
    CancelExecutionResponse$.outboundSchema = CancelExecutionResponse$outboundSchema;
})(CancelExecutionResponse$ || (CancelExecutionResponse$ = {}));
export function cancelExecutionResponseToJSON(cancelExecutionResponse) {
    return JSON.stringify(CancelExecutionResponse$outboundSchema.parse(cancelExecutionResponse));
}
export function cancelExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionResponse' from JSON`);
}
//# sourceMappingURL=cancelexecutionresponse.js.map