/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
 */
export var AccountTaxProfileUpdateCostBasisLotDisposalMethod;
(function (AccountTaxProfileUpdateCostBasisLotDisposalMethod) {
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalMethodUnspecified"] = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalFifo"] = "COST_BASIS_LOT_DISPOSAL_FIFO";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLifo"] = "COST_BASIS_LOT_DISPOSAL_LIFO";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCost"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCost"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalMinTaxTerm"] = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM";
})(AccountTaxProfileUpdateCostBasisLotDisposalMethod || (AccountTaxProfileUpdateCostBasisLotDisposalMethod = {}));
/** @internal */
export const AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema = z
    .union([
    z.nativeEnum(AccountTaxProfileUpdateCostBasisLotDisposalMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema = z.union([
    z.nativeEnum(AccountTaxProfileUpdateCostBasisLotDisposalMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTaxProfileUpdateCostBasisLotDisposalMethod$;
(function (AccountTaxProfileUpdateCostBasisLotDisposalMethod$) {
    /** @deprecated use `AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema` instead. */
    AccountTaxProfileUpdateCostBasisLotDisposalMethod$.inboundSchema = AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema;
    /** @deprecated use `AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema` instead. */
    AccountTaxProfileUpdateCostBasisLotDisposalMethod$.outboundSchema = AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema;
})(AccountTaxProfileUpdateCostBasisLotDisposalMethod$ || (AccountTaxProfileUpdateCostBasisLotDisposalMethod$ = {}));
/** @internal */
export const AccountTaxProfileUpdate$inboundSchema = z.object({
    cost_basis_lot_disposal_method: AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema.optional(),
    section_475_election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "cost_basis_lot_disposal_method": "costBasisLotDisposalMethod",
        "section_475_election": "section475Election",
    });
});
/** @internal */
export const AccountTaxProfileUpdate$outboundSchema = z.object({
    costBasisLotDisposalMethod: AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema.optional(),
    section475Election: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        costBasisLotDisposalMethod: "cost_basis_lot_disposal_method",
        section475Election: "section_475_election",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTaxProfileUpdate$;
(function (AccountTaxProfileUpdate$) {
    /** @deprecated use `AccountTaxProfileUpdate$inboundSchema` instead. */
    AccountTaxProfileUpdate$.inboundSchema = AccountTaxProfileUpdate$inboundSchema;
    /** @deprecated use `AccountTaxProfileUpdate$outboundSchema` instead. */
    AccountTaxProfileUpdate$.outboundSchema = AccountTaxProfileUpdate$outboundSchema;
})(AccountTaxProfileUpdate$ || (AccountTaxProfileUpdate$ = {}));
export function accountTaxProfileUpdateToJSON(accountTaxProfileUpdate) {
    return JSON.stringify(AccountTaxProfileUpdate$outboundSchema.parse(accountTaxProfileUpdate));
}
export function accountTaxProfileUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTaxProfileUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTaxProfileUpdate' from JSON`);
}
//# sourceMappingURL=accounttaxprofileupdate.js.map