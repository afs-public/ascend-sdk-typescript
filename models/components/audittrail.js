/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The audit record type, one of:
 *
 * @remarks
 * - `AUDIT_TYPE_UNSPECIFIED` - Default/Null audit type.
 * - `INVESTIGATION_REQUEST_UPDATE` - Used to update an investigation request.
 * - `INVESTIGATION_STATE` - Used for recording investigation state changed events.
 * - `COMMENT` - Used for adding a comment to investigation.
 */
export var AuditType;
(function (AuditType) {
    AuditType["AuditTypeUnspecified"] = "AUDIT_TYPE_UNSPECIFIED";
    AuditType["InvestigationRequestUpdate"] = "INVESTIGATION_REQUEST_UPDATE";
    AuditType["InvestigationState"] = "INVESTIGATION_STATE";
    AuditType["Comment"] = "COMMENT";
})(AuditType || (AuditType = {}));
/** @internal */
export const AuditType$inboundSchema = z
    .union([
    z.nativeEnum(AuditType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AuditType$outboundSchema = z.union([
    z.nativeEnum(AuditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuditType$;
(function (AuditType$) {
    /** @deprecated use `AuditType$inboundSchema` instead. */
    AuditType$.inboundSchema = AuditType$inboundSchema;
    /** @deprecated use `AuditType$outboundSchema` instead. */
    AuditType$.outboundSchema = AuditType$outboundSchema;
})(AuditType$ || (AuditType$ = {}));
/** @internal */
export const AuditTrail$inboundSchema = z.object({
    audit_type: AuditType$inboundSchema.optional(),
    comment: z.string().optional(),
    field: z.string().optional(),
    new_value: z.string().optional(),
    old_value: z.string().optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    update_user: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "audit_type": "auditType",
        "new_value": "newValue",
        "old_value": "oldValue",
        "update_time": "updateTime",
        "update_user": "updateUser",
    });
});
/** @internal */
export const AuditTrail$outboundSchema = z.object({
    auditType: AuditType$outboundSchema.optional(),
    comment: z.string().optional(),
    field: z.string().optional(),
    newValue: z.string().optional(),
    oldValue: z.string().optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updateUser: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        auditType: "audit_type",
        newValue: "new_value",
        oldValue: "old_value",
        updateTime: "update_time",
        updateUser: "update_user",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuditTrail$;
(function (AuditTrail$) {
    /** @deprecated use `AuditTrail$inboundSchema` instead. */
    AuditTrail$.inboundSchema = AuditTrail$inboundSchema;
    /** @deprecated use `AuditTrail$outboundSchema` instead. */
    AuditTrail$.outboundSchema = AuditTrail$outboundSchema;
})(AuditTrail$ || (AuditTrail$ = {}));
export function auditTrailToJSON(auditTrail) {
    return JSON.stringify(AuditTrail$outboundSchema.parse(auditTrail));
}
export function auditTrailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuditTrail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuditTrail' from JSON`);
}
//# sourceMappingURL=audittrail.js.map