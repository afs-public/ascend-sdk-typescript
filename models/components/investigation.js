/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AuditTrail$inboundSchema, AuditTrail$outboundSchema, } from "./audittrail.js";
import { EntityIdentification$inboundSchema, EntityIdentification$outboundSchema, } from "./entityidentification.js";
import { IdentityVerificationResult$inboundSchema, IdentityVerificationResult$outboundSchema, } from "./identityverificationresult.js";
import { PersonIdentification$inboundSchema, PersonIdentification$outboundSchema, } from "./personidentification.js";
import { PostalAddress$inboundSchema, PostalAddress$outboundSchema, } from "./postaladdress.js";
import { WatchlistMatch$inboundSchema, WatchlistMatch$outboundSchema, } from "./watchlistmatch.js";
/**
 * The screen state of one screening within an investigation, one of:
 *
 * @remarks
 * - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
 * - `PENDING` - Screen result is pending.
 * - `PASSED` - Screen result has passed.
 * - `FAILED` - Screen result has failed.
 * - `NEEDS_REVIEW` - Screen result needs manual review.
 * - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
 * - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
 */
export var IdentityVerification;
(function (IdentityVerification) {
    IdentityVerification["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    IdentityVerification["Pending"] = "PENDING";
    IdentityVerification["Passed"] = "PASSED";
    IdentityVerification["Failed"] = "FAILED";
    IdentityVerification["NeedsReview"] = "NEEDS_REVIEW";
    IdentityVerification["DeferredReview"] = "DEFERRED_REVIEW";
    IdentityVerification["OutOfScope"] = "OUT_OF_SCOPE";
})(IdentityVerification || (IdentityVerification = {}));
/**
 * Used to determine who is responsible for running identity verification checks, one of:
 *
 * @remarks
 * - `IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED` - Default/Null value.
 * - `PERFORMED_BY_APEX` - Run CIP and CDD checks.
 * - `PROVIDED_BY_CLIENT` - Run CDD checks with CIP provided in request.
 */
export var IdentityVerificationScope;
(function (IdentityVerificationScope) {
    IdentityVerificationScope["IdentityVerificationScopeUnspecified"] = "IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED";
    IdentityVerificationScope["PerformedByApex"] = "PERFORMED_BY_APEX";
    IdentityVerificationScope["ProvidedByClient"] = "PROVIDED_BY_CLIENT";
})(IdentityVerificationScope || (IdentityVerificationScope = {}));
/**
 * The state of an investigation request, one of:
 *
 * @remarks
 * - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
 * - `OPEN` - The investigation request is open.
 * - `CLOSED` - The investigation request is closed.
 */
export var InvestigationRequestState;
(function (InvestigationRequestState) {
    InvestigationRequestState["InvestigationRequestStateUnspecified"] = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED";
    InvestigationRequestState["Open"] = "OPEN";
    InvestigationRequestState["Closed"] = "CLOSED";
})(InvestigationRequestState || (InvestigationRequestState = {}));
/**
 * The name suffix for individuals, one of:
 *
 * @remarks
 * - `NAME_SUFFIX_UNSPECIFIED` - Default/Null value.
 * - `SR` - Senior.
 * - `JR` - Junior.
 * - `III` - The third.
 * - `IV` - The fourth.
 * - `V` - The fifth.
 */
export var InvestigationNameSuffix;
(function (InvestigationNameSuffix) {
    InvestigationNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    InvestigationNameSuffix["Sr"] = "SR";
    InvestigationNameSuffix["Jr"] = "JR";
    InvestigationNameSuffix["Iii"] = "III";
    InvestigationNameSuffix["Iv"] = "IV";
    InvestigationNameSuffix["V"] = "V";
})(InvestigationNameSuffix || (InvestigationNameSuffix = {}));
/**
 * The screen state of one screening within an investigation, one of:
 *
 * @remarks
 * - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
 * - `PENDING` - Screen result is pending.
 * - `PASSED` - Screen result has passed.
 * - `FAILED` - Screen result has failed.
 * - `NEEDS_REVIEW` - Screen result needs manual review.
 * - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
 * - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
 */
export var WatchlistScreen;
(function (WatchlistScreen) {
    WatchlistScreen["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    WatchlistScreen["Pending"] = "PENDING";
    WatchlistScreen["Passed"] = "PASSED";
    WatchlistScreen["Failed"] = "FAILED";
    WatchlistScreen["NeedsReview"] = "NEEDS_REVIEW";
    WatchlistScreen["DeferredReview"] = "DEFERRED_REVIEW";
    WatchlistScreen["OutOfScope"] = "OUT_OF_SCOPE";
})(WatchlistScreen || (WatchlistScreen = {}));
/** @internal */
export const InvestigationLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const InvestigationLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationLegalAddress$;
(function (InvestigationLegalAddress$) {
    /** @deprecated use `InvestigationLegalAddress$inboundSchema` instead. */
    InvestigationLegalAddress$.inboundSchema = InvestigationLegalAddress$inboundSchema;
    /** @deprecated use `InvestigationLegalAddress$outboundSchema` instead. */
    InvestigationLegalAddress$.outboundSchema = InvestigationLegalAddress$outboundSchema;
})(InvestigationLegalAddress$ || (InvestigationLegalAddress$ = {}));
export function investigationLegalAddressToJSON(investigationLegalAddress) {
    return JSON.stringify(InvestigationLegalAddress$outboundSchema.parse(investigationLegalAddress));
}
export function investigationLegalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationLegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationLegalAddress' from JSON`);
}
/** @internal */
export const Entity$inboundSchema = z
    .object({
    dba_names: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    identifications: z.array(EntityIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => InvestigationLegalAddress$inboundSchema)).optional(),
    legal_name: z.string().optional(),
    mailing_addresses: z.array(PostalAddress$inboundSchema).optional(),
    operating_region_codes: z.array(z.string()).optional(),
    phone_numbers: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "dba_names": "dbaNames",
        "email_addresses": "emailAddresses",
        "legal_address": "legalAddress",
        "legal_name": "legalName",
        "mailing_addresses": "mailingAddresses",
        "operating_region_codes": "operatingRegionCodes",
        "phone_numbers": "phoneNumbers",
        "registration_region": "registrationRegion",
    });
});
/** @internal */
export const Entity$outboundSchema = z.object({
    dbaNames: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    identifications: z.array(EntityIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => InvestigationLegalAddress$outboundSchema)).optional(),
    legalName: z.string().optional(),
    mailingAddresses: z.array(PostalAddress$outboundSchema).optional(),
    operatingRegionCodes: z.array(z.string()).optional(),
    phoneNumbers: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        dbaNames: "dba_names",
        emailAddresses: "email_addresses",
        legalAddress: "legal_address",
        legalName: "legal_name",
        mailingAddresses: "mailing_addresses",
        operatingRegionCodes: "operating_region_codes",
        phoneNumbers: "phone_numbers",
        registrationRegion: "registration_region",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Entity$;
(function (Entity$) {
    /** @deprecated use `Entity$inboundSchema` instead. */
    Entity$.inboundSchema = Entity$inboundSchema;
    /** @deprecated use `Entity$outboundSchema` instead. */
    Entity$.outboundSchema = Entity$outboundSchema;
})(Entity$ || (Entity$ = {}));
export function entityToJSON(entity) {
    return JSON.stringify(Entity$outboundSchema.parse(entity));
}
export function entityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Entity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Entity' from JSON`);
}
/** @internal */
export const IdentityVerification$inboundSchema = z
    .union([
    z.nativeEnum(IdentityVerification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentityVerification$outboundSchema = z.union([
    z.nativeEnum(IdentityVerification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityVerification$;
(function (IdentityVerification$) {
    /** @deprecated use `IdentityVerification$inboundSchema` instead. */
    IdentityVerification$.inboundSchema = IdentityVerification$inboundSchema;
    /** @deprecated use `IdentityVerification$outboundSchema` instead. */
    IdentityVerification$.outboundSchema = IdentityVerification$outboundSchema;
})(IdentityVerification$ || (IdentityVerification$ = {}));
/** @internal */
export const IdentityVerificationScope$inboundSchema = z
    .union([
    z.nativeEnum(IdentityVerificationScope),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentityVerificationScope$outboundSchema = z.union([
    z.nativeEnum(IdentityVerificationScope),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityVerificationScope$;
(function (IdentityVerificationScope$) {
    /** @deprecated use `IdentityVerificationScope$inboundSchema` instead. */
    IdentityVerificationScope$.inboundSchema = IdentityVerificationScope$inboundSchema;
    /** @deprecated use `IdentityVerificationScope$outboundSchema` instead. */
    IdentityVerificationScope$.outboundSchema = IdentityVerificationScope$outboundSchema;
})(IdentityVerificationScope$ || (IdentityVerificationScope$ = {}));
/** @internal */
export const InvestigationRequestState$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationRequestState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InvestigationRequestState$outboundSchema = z.union([
    z.nativeEnum(InvestigationRequestState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationRequestState$;
(function (InvestigationRequestState$) {
    /** @deprecated use `InvestigationRequestState$inboundSchema` instead. */
    InvestigationRequestState$.inboundSchema = InvestigationRequestState$inboundSchema;
    /** @deprecated use `InvestigationRequestState$outboundSchema` instead. */
    InvestigationRequestState$.outboundSchema = InvestigationRequestState$outboundSchema;
})(InvestigationRequestState$ || (InvestigationRequestState$ = {}));
/** @internal */
export const InvestigationBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InvestigationBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationBirthDate$;
(function (InvestigationBirthDate$) {
    /** @deprecated use `InvestigationBirthDate$inboundSchema` instead. */
    InvestigationBirthDate$.inboundSchema = InvestigationBirthDate$inboundSchema;
    /** @deprecated use `InvestigationBirthDate$outboundSchema` instead. */
    InvestigationBirthDate$.outboundSchema = InvestigationBirthDate$outboundSchema;
})(InvestigationBirthDate$ || (InvestigationBirthDate$ = {}));
export function investigationBirthDateToJSON(investigationBirthDate) {
    return JSON.stringify(InvestigationBirthDate$outboundSchema.parse(investigationBirthDate));
}
export function investigationBirthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationBirthDate' from JSON`);
}
/** @internal */
export const InvestigationPersonLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const InvestigationPersonLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationPersonLegalAddress$;
(function (InvestigationPersonLegalAddress$) {
    /** @deprecated use `InvestigationPersonLegalAddress$inboundSchema` instead. */
    InvestigationPersonLegalAddress$.inboundSchema = InvestigationPersonLegalAddress$inboundSchema;
    /** @deprecated use `InvestigationPersonLegalAddress$outboundSchema` instead. */
    InvestigationPersonLegalAddress$.outboundSchema = InvestigationPersonLegalAddress$outboundSchema;
})(InvestigationPersonLegalAddress$ || (InvestigationPersonLegalAddress$ = {}));
export function investigationPersonLegalAddressToJSON(investigationPersonLegalAddress) {
    return JSON.stringify(InvestigationPersonLegalAddress$outboundSchema.parse(investigationPersonLegalAddress));
}
export function investigationPersonLegalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationPersonLegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationPersonLegalAddress' from JSON`);
}
/** @internal */
export const InvestigationNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationNameSuffix),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InvestigationNameSuffix$outboundSchema = z.union([
    z.nativeEnum(InvestigationNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationNameSuffix$;
(function (InvestigationNameSuffix$) {
    /** @deprecated use `InvestigationNameSuffix$inboundSchema` instead. */
    InvestigationNameSuffix$.inboundSchema = InvestigationNameSuffix$inboundSchema;
    /** @deprecated use `InvestigationNameSuffix$outboundSchema` instead. */
    InvestigationNameSuffix$.outboundSchema = InvestigationNameSuffix$outboundSchema;
})(InvestigationNameSuffix$ || (InvestigationNameSuffix$ = {}));
/** @internal */
export const InvestigationExecutionDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InvestigationExecutionDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationExecutionDate$;
(function (InvestigationExecutionDate$) {
    /** @deprecated use `InvestigationExecutionDate$inboundSchema` instead. */
    InvestigationExecutionDate$.inboundSchema = InvestigationExecutionDate$inboundSchema;
    /** @deprecated use `InvestigationExecutionDate$outboundSchema` instead. */
    InvestigationExecutionDate$.outboundSchema = InvestigationExecutionDate$outboundSchema;
})(InvestigationExecutionDate$ || (InvestigationExecutionDate$ = {}));
export function investigationExecutionDateToJSON(investigationExecutionDate) {
    return JSON.stringify(InvestigationExecutionDate$outboundSchema.parse(investigationExecutionDate));
}
export function investigationExecutionDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationExecutionDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationExecutionDate' from JSON`);
}
/** @internal */
export const ProvidedIdentityVerification$inboundSchema = z.object({
    address_verified: z.boolean().optional(),
    birth_date_verified: z.boolean().optional(),
    execution_date: z.nullable(z.lazy(() => InvestigationExecutionDate$inboundSchema)).optional(),
    external_case_id: z.string().optional(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    name_verified: z.boolean().optional(),
    provided_identity_verification_id: z.string().optional(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "name_verified": "nameVerified",
        "provided_identity_verification_id": "providedIdentityVerificationId",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
export const ProvidedIdentityVerification$outboundSchema = z.object({
    addressVerified: z.boolean().optional(),
    birthDateVerified: z.boolean().optional(),
    executionDate: z.nullable(z.lazy(() => InvestigationExecutionDate$outboundSchema)).optional(),
    externalCaseId: z.string().optional(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    nameVerified: z.boolean().optional(),
    providedIdentityVerificationId: z.string().optional(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        nameVerified: "name_verified",
        providedIdentityVerificationId: "provided_identity_verification_id",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProvidedIdentityVerification$;
(function (ProvidedIdentityVerification$) {
    /** @deprecated use `ProvidedIdentityVerification$inboundSchema` instead. */
    ProvidedIdentityVerification$.inboundSchema = ProvidedIdentityVerification$inboundSchema;
    /** @deprecated use `ProvidedIdentityVerification$outboundSchema` instead. */
    ProvidedIdentityVerification$.outboundSchema = ProvidedIdentityVerification$outboundSchema;
})(ProvidedIdentityVerification$ || (ProvidedIdentityVerification$ = {}));
export function providedIdentityVerificationToJSON(providedIdentityVerification) {
    return JSON.stringify(ProvidedIdentityVerification$outboundSchema.parse(providedIdentityVerification));
}
export function providedIdentityVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProvidedIdentityVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProvidedIdentityVerification' from JSON`);
}
/** @internal */
export const Person$inboundSchema = z
    .object({
    birth_date: z.nullable(z.lazy(() => InvestigationBirthDate$inboundSchema))
        .optional(),
    birth_region_code: z.string().optional(),
    citizenship_region_codes: z.array(z.string()).optional(),
    document_ids: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    identifications: z.array(PersonIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => InvestigationPersonLegalAddress$inboundSchema)).optional(),
    mailing_addresses: z.array(PostalAddress$inboundSchema).optional(),
    middle_names: z.string().optional(),
    name_suffix: InvestigationNameSuffix$inboundSchema.optional(),
    phone_numbers: z.array(z.string()).optional(),
    provided_identity_verification: z.nullable(z.lazy(() => ProvidedIdentityVerification$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "birth_date": "birthDate",
        "birth_region_code": "birthRegionCode",
        "citizenship_region_codes": "citizenshipRegionCodes",
        "document_ids": "documentIds",
        "email_addresses": "emailAddresses",
        "family_name": "familyName",
        "given_name": "givenName",
        "legal_address": "legalAddress",
        "mailing_addresses": "mailingAddresses",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "phone_numbers": "phoneNumbers",
        "provided_identity_verification": "providedIdentityVerification",
    });
});
/** @internal */
export const Person$outboundSchema = z.object({
    birthDate: z.nullable(z.lazy(() => InvestigationBirthDate$outboundSchema))
        .optional(),
    birthRegionCode: z.string().optional(),
    citizenshipRegionCodes: z.array(z.string()).optional(),
    documentIds: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    identifications: z.array(PersonIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => InvestigationPersonLegalAddress$outboundSchema)).optional(),
    mailingAddresses: z.array(PostalAddress$outboundSchema).optional(),
    middleNames: z.string().optional(),
    nameSuffix: InvestigationNameSuffix$outboundSchema.optional(),
    phoneNumbers: z.array(z.string()).optional(),
    providedIdentityVerification: z.nullable(z.lazy(() => ProvidedIdentityVerification$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        birthDate: "birth_date",
        birthRegionCode: "birth_region_code",
        citizenshipRegionCodes: "citizenship_region_codes",
        documentIds: "document_ids",
        emailAddresses: "email_addresses",
        familyName: "family_name",
        givenName: "given_name",
        legalAddress: "legal_address",
        mailingAddresses: "mailing_addresses",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        phoneNumbers: "phone_numbers",
        providedIdentityVerification: "provided_identity_verification",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Person$;
(function (Person$) {
    /** @deprecated use `Person$inboundSchema` instead. */
    Person$.inboundSchema = Person$inboundSchema;
    /** @deprecated use `Person$outboundSchema` instead. */
    Person$.outboundSchema = Person$outboundSchema;
})(Person$ || (Person$ = {}));
export function personToJSON(person) {
    return JSON.stringify(Person$outboundSchema.parse(person));
}
export function personFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Person$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Person' from JSON`);
}
/** @internal */
export const WatchlistScreen$inboundSchema = z
    .union([
    z.nativeEnum(WatchlistScreen),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WatchlistScreen$outboundSchema = z.union([
    z.nativeEnum(WatchlistScreen),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistScreen$;
(function (WatchlistScreen$) {
    /** @deprecated use `WatchlistScreen$inboundSchema` instead. */
    WatchlistScreen$.inboundSchema = WatchlistScreen$inboundSchema;
    /** @deprecated use `WatchlistScreen$outboundSchema` instead. */
    WatchlistScreen$.outboundSchema = WatchlistScreen$outboundSchema;
})(WatchlistScreen$ || (WatchlistScreen$ = {}));
/** @internal */
export const Investigation$inboundSchema = z.object({
    audit_trail: z.array(AuditTrail$inboundSchema).optional(),
    client_id: z.string().optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    entity: z.nullable(z.lazy(() => Entity$inboundSchema)).optional(),
    identity_verification: IdentityVerification$inboundSchema.optional(),
    identity_verification_results: z.array(IdentityVerificationResult$inboundSchema).optional(),
    identity_verification_scope: IdentityVerificationScope$inboundSchema
        .optional(),
    investigation_request_state: InvestigationRequestState$inboundSchema
        .optional(),
    name: z.string().optional(),
    person: z.nullable(z.lazy(() => Person$inboundSchema)).optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    watchlist_matches: z.array(WatchlistMatch$inboundSchema).optional(),
    watchlist_screen: WatchlistScreen$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "audit_trail": "auditTrail",
        "client_id": "clientId",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "identity_verification": "identityVerification",
        "identity_verification_results": "identityVerificationResults",
        "identity_verification_scope": "identityVerificationScope",
        "investigation_request_state": "investigationRequestState",
        "update_time": "updateTime",
        "watchlist_matches": "watchlistMatches",
        "watchlist_screen": "watchlistScreen",
    });
});
/** @internal */
export const Investigation$outboundSchema = z.object({
    auditTrail: z.array(AuditTrail$outboundSchema).optional(),
    clientId: z.string().optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    entity: z.nullable(z.lazy(() => Entity$outboundSchema)).optional(),
    identityVerification: IdentityVerification$outboundSchema.optional(),
    identityVerificationResults: z.array(IdentityVerificationResult$outboundSchema).optional(),
    identityVerificationScope: IdentityVerificationScope$outboundSchema
        .optional(),
    investigationRequestState: InvestigationRequestState$outboundSchema
        .optional(),
    name: z.string().optional(),
    person: z.nullable(z.lazy(() => Person$outboundSchema)).optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    watchlistMatches: z.array(WatchlistMatch$outboundSchema).optional(),
    watchlistScreen: WatchlistScreen$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        auditTrail: "audit_trail",
        clientId: "client_id",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        identityVerification: "identity_verification",
        identityVerificationResults: "identity_verification_results",
        identityVerificationScope: "identity_verification_scope",
        investigationRequestState: "investigation_request_state",
        updateTime: "update_time",
        watchlistMatches: "watchlist_matches",
        watchlistScreen: "watchlist_screen",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Investigation$;
(function (Investigation$) {
    /** @deprecated use `Investigation$inboundSchema` instead. */
    Investigation$.inboundSchema = Investigation$inboundSchema;
    /** @deprecated use `Investigation$outboundSchema` instead. */
    Investigation$.outboundSchema = Investigation$outboundSchema;
})(Investigation$ || (Investigation$ = {}));
export function investigationToJSON(investigation) {
    return JSON.stringify(Investigation$outboundSchema.parse(investigation));
}
export function investigationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Investigation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Investigation' from JSON`);
}
//# sourceMappingURL=investigation.js.map