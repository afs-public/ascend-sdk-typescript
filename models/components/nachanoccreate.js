/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The notice of change reason code.
 */
export var Code;
(function (Code) {
    Code["CodeUnspecified"] = "CODE_UNSPECIFIED";
    Code["C01"] = "C01";
    Code["C02"] = "C02";
    Code["C03"] = "C03";
    Code["C04"] = "C04";
    Code["C05"] = "C05";
    Code["C06"] = "C06";
    Code["C07"] = "C07";
    Code["C08"] = "C08";
    Code["C09"] = "C09";
    Code["C13"] = "C13";
    Code["C14"] = "C14";
    Code["C61"] = "C61";
    Code["C62"] = "C62";
    Code["C63"] = "C63";
    Code["C64"] = "C64";
    Code["C65"] = "C65";
    Code["C66"] = "C66";
    Code["C67"] = "C67";
    Code["C68"] = "C68";
    Code["C69"] = "C69";
})(Code || (Code = {}));
/**
 * The updated bank account type. Should only be set when the code is for an incorrect transaction code.
 */
export var UpdatedBankAccountType;
(function (UpdatedBankAccountType) {
    UpdatedBankAccountType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    UpdatedBankAccountType["Checking"] = "CHECKING";
    UpdatedBankAccountType["Savings"] = "SAVINGS";
})(UpdatedBankAccountType || (UpdatedBankAccountType = {}));
/** @internal */
export const Code$inboundSchema = z
    .union([
    z.nativeEnum(Code),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Code$outboundSchema = z.union([
    z.nativeEnum(Code),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Code$;
(function (Code$) {
    /** @deprecated use `Code$inboundSchema` instead. */
    Code$.inboundSchema = Code$inboundSchema;
    /** @deprecated use `Code$outboundSchema` instead. */
    Code$.outboundSchema = Code$outboundSchema;
})(Code$ || (Code$ = {}));
/** @internal */
export const UpdatedBankAccountType$inboundSchema = z
    .union([
    z.nativeEnum(UpdatedBankAccountType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const UpdatedBankAccountType$outboundSchema = z.union([
    z.nativeEnum(UpdatedBankAccountType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdatedBankAccountType$;
(function (UpdatedBankAccountType$) {
    /** @deprecated use `UpdatedBankAccountType$inboundSchema` instead. */
    UpdatedBankAccountType$.inboundSchema = UpdatedBankAccountType$inboundSchema;
    /** @deprecated use `UpdatedBankAccountType$outboundSchema` instead. */
    UpdatedBankAccountType$.outboundSchema = UpdatedBankAccountType$outboundSchema;
})(UpdatedBankAccountType$ || (UpdatedBankAccountType$ = {}));
/** @internal */
export const NachaNocCreate$inboundSchema = z.object({
    code: Code$inboundSchema,
    updated_bank_account_number: z.string().optional(),
    updated_bank_account_type: UpdatedBankAccountType$inboundSchema.optional(),
    updated_bank_routing_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "updated_bank_account_number": "updatedBankAccountNumber",
        "updated_bank_account_type": "updatedBankAccountType",
        "updated_bank_routing_number": "updatedBankRoutingNumber",
    });
});
/** @internal */
export const NachaNocCreate$outboundSchema = z.object({
    code: Code$outboundSchema,
    updatedBankAccountNumber: z.string().optional(),
    updatedBankAccountType: UpdatedBankAccountType$outboundSchema.optional(),
    updatedBankRoutingNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        updatedBankAccountNumber: "updated_bank_account_number",
        updatedBankAccountType: "updated_bank_account_type",
        updatedBankRoutingNumber: "updated_bank_routing_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NachaNocCreate$;
(function (NachaNocCreate$) {
    /** @deprecated use `NachaNocCreate$inboundSchema` instead. */
    NachaNocCreate$.inboundSchema = NachaNocCreate$inboundSchema;
    /** @deprecated use `NachaNocCreate$outboundSchema` instead. */
    NachaNocCreate$.outboundSchema = NachaNocCreate$outboundSchema;
})(NachaNocCreate$ || (NachaNocCreate$ = {}));
export function nachaNocCreateToJSON(nachaNocCreate) {
    return JSON.stringify(NachaNocCreate$outboundSchema.parse(nachaNocCreate));
}
export function nachaNocCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NachaNocCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NachaNocCreate' from JSON`);
}
//# sourceMappingURL=nachanoccreate.js.map