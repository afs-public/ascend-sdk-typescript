/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const IdentificationDetail$inboundSchema = z.object({
    id_notes: z.string().optional(),
    id_type: z.string().optional(),
    id_value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "id_notes": "idNotes",
        "id_type": "idType",
        "id_value": "idValue",
    });
});
/** @internal */
export const IdentificationDetail$outboundSchema = z.object({
    idNotes: z.string().optional(),
    idType: z.string().optional(),
    idValue: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        idNotes: "id_notes",
        idType: "id_type",
        idValue: "id_value",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentificationDetail$;
(function (IdentificationDetail$) {
    /** @deprecated use `IdentificationDetail$inboundSchema` instead. */
    IdentificationDetail$.inboundSchema = IdentificationDetail$inboundSchema;
    /** @deprecated use `IdentificationDetail$outboundSchema` instead. */
    IdentificationDetail$.outboundSchema = IdentificationDetail$outboundSchema;
})(IdentificationDetail$ || (IdentificationDetail$ = {}));
export function identificationDetailToJSON(identificationDetail) {
    return JSON.stringify(IdentificationDetail$outboundSchema.parse(identificationDetail));
}
export function identificationDetailFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IdentificationDetail$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IdentificationDetail' from JSON`);
}
//# sourceMappingURL=identificationdetail.js.map