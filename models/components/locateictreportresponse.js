/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The ICT program associated with the report.
 */
export var LocateIctReportResponseProgram;
(function (LocateIctReportResponseProgram) {
    LocateIctReportResponseProgram["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    LocateIctReportResponseProgram["BrokerPartner"] = "BROKER_PARTNER";
    LocateIctReportResponseProgram["DepositOnly"] = "DEPOSIT_ONLY";
    LocateIctReportResponseProgram["BankingPartner"] = "BANKING_PARTNER";
    LocateIctReportResponseProgram["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    LocateIctReportResponseProgram["DigitalPartner"] = "DIGITAL_PARTNER";
})(LocateIctReportResponseProgram || (LocateIctReportResponseProgram = {}));
/** @internal */
export const ProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const ProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProcessDate$;
(function (ProcessDate$) {
    /** @deprecated use `ProcessDate$inboundSchema` instead. */
    ProcessDate$.inboundSchema = ProcessDate$inboundSchema;
    /** @deprecated use `ProcessDate$outboundSchema` instead. */
    ProcessDate$.outboundSchema = ProcessDate$outboundSchema;
})(ProcessDate$ || (ProcessDate$ = {}));
export function processDateToJSON(processDate) {
    return JSON.stringify(ProcessDate$outboundSchema.parse(processDate));
}
export function processDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProcessDate' from JSON`);
}
/** @internal */
export const LocateIctReportResponseProgram$inboundSchema = z
    .union([
    z.nativeEnum(LocateIctReportResponseProgram),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LocateIctReportResponseProgram$outboundSchema = z.union([
    z.nativeEnum(LocateIctReportResponseProgram),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocateIctReportResponseProgram$;
(function (LocateIctReportResponseProgram$) {
    /** @deprecated use `LocateIctReportResponseProgram$inboundSchema` instead. */
    LocateIctReportResponseProgram$.inboundSchema = LocateIctReportResponseProgram$inboundSchema;
    /** @deprecated use `LocateIctReportResponseProgram$outboundSchema` instead. */
    LocateIctReportResponseProgram$.outboundSchema = LocateIctReportResponseProgram$outboundSchema;
})(LocateIctReportResponseProgram$ || (LocateIctReportResponseProgram$ = {}));
/** @internal */
export const LocateIctReportResponse$inboundSchema = z.object({
    batch_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    download_uri: z.string().optional(),
    process_date: z.nullable(z.lazy(() => ProcessDate$inboundSchema)).optional(),
    program: LocateIctReportResponseProgram$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "batch_id": "batchId",
        "create_time": "createTime",
        "download_uri": "downloadUri",
        "process_date": "processDate",
    });
});
/** @internal */
export const LocateIctReportResponse$outboundSchema = z.object({
    batchId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    downloadUri: z.string().optional(),
    processDate: z.nullable(z.lazy(() => ProcessDate$outboundSchema)).optional(),
    program: LocateIctReportResponseProgram$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        batchId: "batch_id",
        createTime: "create_time",
        downloadUri: "download_uri",
        processDate: "process_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocateIctReportResponse$;
(function (LocateIctReportResponse$) {
    /** @deprecated use `LocateIctReportResponse$inboundSchema` instead. */
    LocateIctReportResponse$.inboundSchema = LocateIctReportResponse$inboundSchema;
    /** @deprecated use `LocateIctReportResponse$outboundSchema` instead. */
    LocateIctReportResponse$.outboundSchema = LocateIctReportResponse$outboundSchema;
})(LocateIctReportResponse$ || (LocateIctReportResponse$ = {}));
export function locateIctReportResponseToJSON(locateIctReportResponse) {
    return JSON.stringify(LocateIctReportResponse$outboundSchema.parse(locateIctReportResponse));
}
export function locateIctReportResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LocateIctReportResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LocateIctReportResponse' from JSON`);
}
//# sourceMappingURL=locateictreportresponse.js.map