/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
/**
 * The type of the fee being charged
 */
export var TransfersFeeCreateType;
(function (TransfersFeeCreateType) {
    TransfersFeeCreateType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransfersFeeCreateType["Management"] = "MANAGEMENT";
    TransfersFeeCreateType["Advisory"] = "ADVISORY";
    TransfersFeeCreateType["Exchange"] = "EXCHANGE";
    TransfersFeeCreateType["Platform"] = "PLATFORM";
    TransfersFeeCreateType["Inactivity"] = "INACTIVITY";
})(TransfersFeeCreateType || (TransfersFeeCreateType = {}));
/** @internal */
export const TransfersFeeCreateType$inboundSchema = z
    .union([
    z.nativeEnum(TransfersFeeCreateType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransfersFeeCreateType$outboundSchema = z.union([
    z.nativeEnum(TransfersFeeCreateType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeCreateType$;
(function (TransfersFeeCreateType$) {
    /** @deprecated use `TransfersFeeCreateType$inboundSchema` instead. */
    TransfersFeeCreateType$.inboundSchema = TransfersFeeCreateType$inboundSchema;
    /** @deprecated use `TransfersFeeCreateType$outboundSchema` instead. */
    TransfersFeeCreateType$.outboundSchema = TransfersFeeCreateType$outboundSchema;
})(TransfersFeeCreateType$ || (TransfersFeeCreateType$ = {}));
/** @internal */
export const TransfersFeeCreate$inboundSchema = z.object({
    amount: DecimalCreate$inboundSchema,
    client_transfer_id: z.string(),
    description: z.string().optional(),
    fee_operating_account: z.string().optional(),
    type: TransfersFeeCreateType$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "fee_operating_account": "feeOperatingAccount",
    });
});
/** @internal */
export const TransfersFeeCreate$outboundSchema = z.object({
    amount: DecimalCreate$outboundSchema,
    clientTransferId: z.string(),
    description: z.string().optional(),
    feeOperatingAccount: z.string().optional(),
    type: TransfersFeeCreateType$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        feeOperatingAccount: "fee_operating_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransfersFeeCreate$;
(function (TransfersFeeCreate$) {
    /** @deprecated use `TransfersFeeCreate$inboundSchema` instead. */
    TransfersFeeCreate$.inboundSchema = TransfersFeeCreate$inboundSchema;
    /** @deprecated use `TransfersFeeCreate$outboundSchema` instead. */
    TransfersFeeCreate$.outboundSchema = TransfersFeeCreate$outboundSchema;
})(TransfersFeeCreate$ || (TransfersFeeCreate$ = {}));
export function transfersFeeCreateToJSON(transfersFeeCreate) {
    return JSON.stringify(TransfersFeeCreate$outboundSchema.parse(transfersFeeCreate));
}
export function transfersFeeCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransfersFeeCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransfersFeeCreate' from JSON`);
}
//# sourceMappingURL=transfersfeecreate.js.map