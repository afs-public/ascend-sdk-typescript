/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The NSCC asset category
 */
export var AssetCategory;
(function (AssetCategory) {
    AssetCategory["AssetCategoryUnspecified"] = "ASSET_CATEGORY_UNSPECIFIED";
    AssetCategory["AlternativeInvestment"] = "ALTERNATIVE_INVESTMENT";
    AssetCategory["Annuity"] = "ANNUITY";
    AssetCategory["AuctionRatePreferredUit"] = "AUCTION_RATE_PREFERRED_UIT";
    AssetCategory["CdAndCommercialPaper"] = "CD_AND_COMMERCIAL_PAPER";
    AssetCategory["CorporateBond"] = "CORPORATE_BOND";
    AssetCategory["DeferredSaleChargeUit"] = "DEFERRED_SALE_CHARGE_UIT";
    AssetCategory["Equity"] = "EQUITY";
    AssetCategory["ForeignCurrency"] = "FOREIGN_CURRENCY";
    AssetCategory["ForeignDebt"] = "FOREIGN_DEBT";
    AssetCategory["ForeignEquity"] = "FOREIGN_EQUITY";
    AssetCategory["LifeInsurance"] = "LIFE_INSURANCE";
    AssetCategory["LimitedPartnership"] = "LIMITED_PARTNERSHIP";
    AssetCategory["MortgageBackedSecurity"] = "MORTGAGE_BACKED_SECURITY";
    AssetCategory["MutualFundMoneyMarket"] = "MUTUAL_FUND_MONEY_MARKET";
    AssetCategory["MutualFundNonMoneyMarket"] = "MUTUAL_FUND_NON_MONEY_MARKET";
    AssetCategory["MunicipalBond"] = "MUNICIPAL_BOND";
    AssetCategory["Option"] = "OPTION";
    AssetCategory["RealEstateInvestmentTrust"] = "REAL_ESTATE_INVESTMENT_TRUST";
    AssetCategory["Right"] = "RIGHT";
    AssetCategory["UsGovernment"] = "US_GOVERNMENT";
    AssetCategory["UnitInvestmentTrust"] = "UNIT_INVESTMENT_TRUST";
    AssetCategory["Unit"] = "UNIT";
    AssetCategory["Warrant"] = "WARRANT";
    AssetCategory["ZeroCouponBond"] = "ZERO_COUPON_BOND";
})(AssetCategory || (AssetCategory = {}));
/**
 * The asset identifier type
 */
export var AcatsAssetType;
(function (AcatsAssetType) {
    AcatsAssetType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    AcatsAssetType["CurrencyCode"] = "CURRENCY_CODE";
    AcatsAssetType["Cusip"] = "CUSIP";
    AcatsAssetType["Symbol"] = "SYMBOL";
    AcatsAssetType["Isin"] = "ISIN";
    AcatsAssetType["AssetId"] = "ASSET_ID";
})(AcatsAssetType || (AcatsAssetType = {}));
/** @internal */
export const AssetCategory$inboundSchema = z
    .union([
    z.nativeEnum(AssetCategory),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AssetCategory$outboundSchema = z.union([
    z.nativeEnum(AssetCategory),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetCategory$;
(function (AssetCategory$) {
    /** @deprecated use `AssetCategory$inboundSchema` instead. */
    AssetCategory$.inboundSchema = AssetCategory$inboundSchema;
    /** @deprecated use `AssetCategory$outboundSchema` instead. */
    AssetCategory$.outboundSchema = AssetCategory$outboundSchema;
})(AssetCategory$ || (AssetCategory$ = {}));
/** @internal */
export const AcatsAssetQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AcatsAssetQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsAssetQuantity$;
(function (AcatsAssetQuantity$) {
    /** @deprecated use `AcatsAssetQuantity$inboundSchema` instead. */
    AcatsAssetQuantity$.inboundSchema = AcatsAssetQuantity$inboundSchema;
    /** @deprecated use `AcatsAssetQuantity$outboundSchema` instead. */
    AcatsAssetQuantity$.outboundSchema = AcatsAssetQuantity$outboundSchema;
})(AcatsAssetQuantity$ || (AcatsAssetQuantity$ = {}));
export function acatsAssetQuantityToJSON(acatsAssetQuantity) {
    return JSON.stringify(AcatsAssetQuantity$outboundSchema.parse(acatsAssetQuantity));
}
export function acatsAssetQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsAssetQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsAssetQuantity' from JSON`);
}
/** @internal */
export const AcatsAssetPosition$inboundSchema = z.object({
    quantity: z.nullable(z.lazy(() => AcatsAssetQuantity$inboundSchema))
        .optional(),
});
/** @internal */
export const AcatsAssetPosition$outboundSchema = z.object({
    quantity: z.nullable(z.lazy(() => AcatsAssetQuantity$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsAssetPosition$;
(function (AcatsAssetPosition$) {
    /** @deprecated use `AcatsAssetPosition$inboundSchema` instead. */
    AcatsAssetPosition$.inboundSchema = AcatsAssetPosition$inboundSchema;
    /** @deprecated use `AcatsAssetPosition$outboundSchema` instead. */
    AcatsAssetPosition$.outboundSchema = AcatsAssetPosition$outboundSchema;
})(AcatsAssetPosition$ || (AcatsAssetPosition$ = {}));
export function acatsAssetPositionToJSON(acatsAssetPosition) {
    return JSON.stringify(AcatsAssetPosition$outboundSchema.parse(acatsAssetPosition));
}
export function acatsAssetPositionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsAssetPosition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsAssetPosition' from JSON`);
}
/** @internal */
export const AcatsAssetType$inboundSchema = z
    .union([
    z.nativeEnum(AcatsAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcatsAssetType$outboundSchema = z.union([
    z.nativeEnum(AcatsAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsAssetType$;
(function (AcatsAssetType$) {
    /** @deprecated use `AcatsAssetType$inboundSchema` instead. */
    AcatsAssetType$.inboundSchema = AcatsAssetType$inboundSchema;
    /** @deprecated use `AcatsAssetType$outboundSchema` instead. */
    AcatsAssetType$.outboundSchema = AcatsAssetType$outboundSchema;
})(AcatsAssetType$ || (AcatsAssetType$ = {}));
/** @internal */
export const AcatsAsset$inboundSchema = z.object({
    asset_category: AssetCategory$inboundSchema.optional(),
    asset_id: z.string().optional(),
    identifier: z.string().optional(),
    position: z.nullable(z.lazy(() => AcatsAssetPosition$inboundSchema))
        .optional(),
    type: AcatsAssetType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "asset_category": "assetCategory",
        "asset_id": "assetId",
    });
});
/** @internal */
export const AcatsAsset$outboundSchema = z.object({
    assetCategory: AssetCategory$outboundSchema.optional(),
    assetId: z.string().optional(),
    identifier: z.string().optional(),
    position: z.nullable(z.lazy(() => AcatsAssetPosition$outboundSchema))
        .optional(),
    type: AcatsAssetType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        assetCategory: "asset_category",
        assetId: "asset_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcatsAsset$;
(function (AcatsAsset$) {
    /** @deprecated use `AcatsAsset$inboundSchema` instead. */
    AcatsAsset$.inboundSchema = AcatsAsset$inboundSchema;
    /** @deprecated use `AcatsAsset$outboundSchema` instead. */
    AcatsAsset$.outboundSchema = AcatsAsset$outboundSchema;
})(AcatsAsset$ || (AcatsAsset$ = {}));
export function acatsAssetToJSON(acatsAsset) {
    return JSON.stringify(AcatsAsset$outboundSchema.parse(acatsAsset));
}
export function acatsAssetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcatsAsset$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcatsAsset' from JSON`);
}
//# sourceMappingURL=acatsasset.js.map