/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { AddressDetail$inboundSchema, AddressDetail$outboundSchema, } from "./addressdetail.js";
import { CountryDetail$inboundSchema, CountryDetail$outboundSchema, } from "./countrydetail.js";
import { DescriptionDetail$inboundSchema, DescriptionDetail$outboundSchema, } from "./descriptiondetail.js";
import { DowJonesDate$inboundSchema, DowJonesDate$outboundSchema, } from "./dowjonesdate.js";
import { IdentificationDetail$inboundSchema, IdentificationDetail$outboundSchema, } from "./identificationdetail.js";
import { NameDetail$inboundSchema, NameDetail$outboundSchema, } from "./namedetail.js";
import { RelatedProfile$inboundSchema, RelatedProfile$outboundSchema, } from "./relatedprofile.js";
import { RoleDetail$inboundSchema, RoleDetail$outboundSchema, } from "./roledetail.js";
import { SanctionsListDetail$inboundSchema, SanctionsListDetail$outboundSchema, } from "./sanctionslistdetail.js";
/** @internal */
export const CreatedDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CreatedDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreatedDate$;
(function (CreatedDate$) {
    /** @deprecated use `CreatedDate$inboundSchema` instead. */
    CreatedDate$.inboundSchema = CreatedDate$inboundSchema;
    /** @deprecated use `CreatedDate$outboundSchema` instead. */
    CreatedDate$.outboundSchema = CreatedDate$outboundSchema;
})(CreatedDate$ || (CreatedDate$ = {}));
export function createdDateToJSON(createdDate) {
    return JSON.stringify(CreatedDate$outboundSchema.parse(createdDate));
}
export function createdDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreatedDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreatedDate' from JSON`);
}
/** @internal */
export const Dob$inboundSchema = z
    .object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const Dob$outboundSchema = z
    .object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Dob$;
(function (Dob$) {
    /** @deprecated use `Dob$inboundSchema` instead. */
    Dob$.inboundSchema = Dob$inboundSchema;
    /** @deprecated use `Dob$outboundSchema` instead. */
    Dob$.outboundSchema = Dob$outboundSchema;
})(Dob$ || (Dob$ = {}));
export function dobToJSON(dob) {
    return JSON.stringify(Dob$outboundSchema.parse(dob));
}
export function dobFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Dob$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Dob' from JSON`);
}
/** @internal */
export const EndDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const EndDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EndDate$;
(function (EndDate$) {
    /** @deprecated use `EndDate$inboundSchema` instead. */
    EndDate$.inboundSchema = EndDate$inboundSchema;
    /** @deprecated use `EndDate$outboundSchema` instead. */
    EndDate$.outboundSchema = EndDate$outboundSchema;
})(EndDate$ || (EndDate$ = {}));
export function endDateToJSON(endDate) {
    return JSON.stringify(EndDate$outboundSchema.parse(endDate));
}
export function endDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EndDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EndDate' from JSON`);
}
/** @internal */
export const DndbDetails$inboundSchema = z.object({
    business_nm: z.string().optional(),
    comments: z.string().optional(),
    create_user: z.string().optional(),
    created_date: z.nullable(z.lazy(() => CreatedDate$inboundSchema)).optional(),
    dob: z.nullable(z.lazy(() => Dob$inboundSchema)).optional(),
    email: z.string().optional(),
    end_date: z.nullable(z.lazy(() => EndDate$inboundSchema)).optional(),
    first_nm: z.string().optional(),
    id: z.number().int().optional(),
    last_nm: z.string().optional(),
    middle_nm: z.string().optional(),
    ssn: z.string().optional(),
    telephone: z.string().optional(),
    tin: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "business_nm": "businessNm",
        "create_user": "createUser",
        "created_date": "createdDate",
        "end_date": "endDate",
        "first_nm": "firstNm",
        "last_nm": "lastNm",
        "middle_nm": "middleNm",
    });
});
/** @internal */
export const DndbDetails$outboundSchema = z.object({
    businessNm: z.string().optional(),
    comments: z.string().optional(),
    createUser: z.string().optional(),
    createdDate: z.nullable(z.lazy(() => CreatedDate$outboundSchema)).optional(),
    dob: z.nullable(z.lazy(() => Dob$outboundSchema)).optional(),
    email: z.string().optional(),
    endDate: z.nullable(z.lazy(() => EndDate$outboundSchema)).optional(),
    firstNm: z.string().optional(),
    id: z.number().int().optional(),
    lastNm: z.string().optional(),
    middleNm: z.string().optional(),
    ssn: z.string().optional(),
    telephone: z.string().optional(),
    tin: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        businessNm: "business_nm",
        createUser: "create_user",
        createdDate: "created_date",
        endDate: "end_date",
        firstNm: "first_nm",
        lastNm: "last_nm",
        middleNm: "middle_nm",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DndbDetails$;
(function (DndbDetails$) {
    /** @deprecated use `DndbDetails$inboundSchema` instead. */
    DndbDetails$.inboundSchema = DndbDetails$inboundSchema;
    /** @deprecated use `DndbDetails$outboundSchema` instead. */
    DndbDetails$.outboundSchema = DndbDetails$outboundSchema;
})(DndbDetails$ || (DndbDetails$ = {}));
export function dndbDetailsToJSON(dndbDetails) {
    return JSON.stringify(DndbDetails$outboundSchema.parse(dndbDetails));
}
export function dndbDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DndbDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DndbDetails' from JSON`);
}
/** @internal */
export const LastChangedDate$inboundSchema = z.object({
    day: z.string().optional(),
    month: z.string().optional(),
    year: z.string().optional(),
});
/** @internal */
export const LastChangedDate$outboundSchema = z.object({
    day: z.string().optional(),
    month: z.string().optional(),
    year: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LastChangedDate$;
(function (LastChangedDate$) {
    /** @deprecated use `LastChangedDate$inboundSchema` instead. */
    LastChangedDate$.inboundSchema = LastChangedDate$inboundSchema;
    /** @deprecated use `LastChangedDate$outboundSchema` instead. */
    LastChangedDate$.outboundSchema = LastChangedDate$outboundSchema;
})(LastChangedDate$ || (LastChangedDate$ = {}));
export function lastChangedDateToJSON(lastChangedDate) {
    return JSON.stringify(LastChangedDate$outboundSchema.parse(lastChangedDate));
}
export function lastChangedDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LastChangedDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LastChangedDate' from JSON`);
}
/** @internal */
export const DowJonesDetails$inboundSchema = z.object({
    active_status: z.string().optional(),
    address_details: z.array(AddressDetail$inboundSchema).optional(),
    birth_dates: z.array(DowJonesDate$inboundSchema).optional(),
    birth_places: z.array(z.string()).optional(),
    country_details: z.array(CountryDetail$inboundSchema).optional(),
    deceased: z.string().optional(),
    deceased_dates: z.array(DowJonesDate$inboundSchema).optional(),
    description_details: z.array(DescriptionDetail$inboundSchema).optional(),
    dow_jones_person_id: z.number().int().optional(),
    gender: z.string().optional(),
    identifications: z.array(IdentificationDetail$inboundSchema).optional(),
    images: z.array(z.string()).optional(),
    last_changed_date: z.nullable(z.lazy(() => LastChangedDate$inboundSchema))
        .optional(),
    name_details: z.array(NameDetail$inboundSchema).optional(),
    profile_notes: z.string().optional(),
    related_profiles: z.array(RelatedProfile$inboundSchema).optional(),
    role_details: z.array(RoleDetail$inboundSchema).optional(),
    sanctions_list_details: z.array(SanctionsListDetail$inboundSchema).optional(),
    sources: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "active_status": "activeStatus",
        "address_details": "addressDetails",
        "birth_dates": "birthDates",
        "birth_places": "birthPlaces",
        "country_details": "countryDetails",
        "deceased_dates": "deceasedDates",
        "description_details": "descriptionDetails",
        "dow_jones_person_id": "dowJonesPersonId",
        "last_changed_date": "lastChangedDate",
        "name_details": "nameDetails",
        "profile_notes": "profileNotes",
        "related_profiles": "relatedProfiles",
        "role_details": "roleDetails",
        "sanctions_list_details": "sanctionsListDetails",
    });
});
/** @internal */
export const DowJonesDetails$outboundSchema = z.object({
    activeStatus: z.string().optional(),
    addressDetails: z.array(AddressDetail$outboundSchema).optional(),
    birthDates: z.array(DowJonesDate$outboundSchema).optional(),
    birthPlaces: z.array(z.string()).optional(),
    countryDetails: z.array(CountryDetail$outboundSchema).optional(),
    deceased: z.string().optional(),
    deceasedDates: z.array(DowJonesDate$outboundSchema).optional(),
    descriptionDetails: z.array(DescriptionDetail$outboundSchema).optional(),
    dowJonesPersonId: z.number().int().optional(),
    gender: z.string().optional(),
    identifications: z.array(IdentificationDetail$outboundSchema).optional(),
    images: z.array(z.string()).optional(),
    lastChangedDate: z.nullable(z.lazy(() => LastChangedDate$outboundSchema))
        .optional(),
    nameDetails: z.array(NameDetail$outboundSchema).optional(),
    profileNotes: z.string().optional(),
    relatedProfiles: z.array(RelatedProfile$outboundSchema).optional(),
    roleDetails: z.array(RoleDetail$outboundSchema).optional(),
    sanctionsListDetails: z.array(SanctionsListDetail$outboundSchema).optional(),
    sources: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        activeStatus: "active_status",
        addressDetails: "address_details",
        birthDates: "birth_dates",
        birthPlaces: "birth_places",
        countryDetails: "country_details",
        deceasedDates: "deceased_dates",
        descriptionDetails: "description_details",
        dowJonesPersonId: "dow_jones_person_id",
        lastChangedDate: "last_changed_date",
        nameDetails: "name_details",
        profileNotes: "profile_notes",
        relatedProfiles: "related_profiles",
        roleDetails: "role_details",
        sanctionsListDetails: "sanctions_list_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DowJonesDetails$;
(function (DowJonesDetails$) {
    /** @deprecated use `DowJonesDetails$inboundSchema` instead. */
    DowJonesDetails$.inboundSchema = DowJonesDetails$inboundSchema;
    /** @deprecated use `DowJonesDetails$outboundSchema` instead. */
    DowJonesDetails$.outboundSchema = DowJonesDetails$outboundSchema;
})(DowJonesDetails$ || (DowJonesDetails$ = {}));
export function dowJonesDetailsToJSON(dowJonesDetails) {
    return JSON.stringify(DowJonesDetails$outboundSchema.parse(dowJonesDetails));
}
export function dowJonesDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DowJonesDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DowJonesDetails' from JSON`);
}
/** @internal */
export const WatchlistItem$inboundSchema = z.object({
    dndb_details: z.nullable(z.lazy(() => DndbDetails$inboundSchema)).optional(),
    dow_jones_details: z.nullable(z.lazy(() => DowJonesDetails$inboundSchema))
        .optional(),
    name: z.string().optional(),
    watchlist: z.string().optional(),
    watchlist_item: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "dndb_details": "dndbDetails",
        "dow_jones_details": "dowJonesDetails",
        "watchlist_item": "watchlistItem",
    });
});
/** @internal */
export const WatchlistItem$outboundSchema = z.object({
    dndbDetails: z.nullable(z.lazy(() => DndbDetails$outboundSchema)).optional(),
    dowJonesDetails: z.nullable(z.lazy(() => DowJonesDetails$outboundSchema))
        .optional(),
    name: z.string().optional(),
    watchlist: z.string().optional(),
    watchlistItem: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        dndbDetails: "dndb_details",
        dowJonesDetails: "dow_jones_details",
        watchlistItem: "watchlist_item",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistItem$;
(function (WatchlistItem$) {
    /** @deprecated use `WatchlistItem$inboundSchema` instead. */
    WatchlistItem$.inboundSchema = WatchlistItem$inboundSchema;
    /** @deprecated use `WatchlistItem$outboundSchema` instead. */
    WatchlistItem$.outboundSchema = WatchlistItem$outboundSchema;
})(WatchlistItem$ || (WatchlistItem$ = {}));
export function watchlistItemToJSON(watchlistItem) {
    return JSON.stringify(WatchlistItem$outboundSchema.parse(watchlistItem));
}
export function watchlistItemFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WatchlistItem$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WatchlistItem' from JSON`);
}
//# sourceMappingURL=watchlistitem.js.map