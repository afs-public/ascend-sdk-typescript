/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export var PartyBusinessIndustrialClassification;
(function (PartyBusinessIndustrialClassification) {
    PartyBusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    PartyBusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    PartyBusinessIndustrialClassification["Mining"] = "MINING";
    PartyBusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    PartyBusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    PartyBusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    PartyBusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    PartyBusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    PartyBusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    PartyBusinessIndustrialClassification["Services"] = "SERVICES";
    PartyBusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(PartyBusinessIndustrialClassification || (PartyBusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
export var PartyCorporateStructure;
(function (PartyCorporateStructure) {
    PartyCorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    PartyCorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    PartyCorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    PartyCorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    PartyCorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(PartyCorporateStructure || (PartyCorporateStructure = {}));
/**
 * The entity type.
 */
export var PartyEntityType;
(function (PartyEntityType) {
    PartyEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    PartyEntityType["Corporation"] = "CORPORATION";
    PartyEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    PartyEntityType["Partnership"] = "PARTNERSHIP";
    PartyEntityType["Trust"] = "TRUST";
    PartyEntityType["Estate"] = "ESTATE";
})(PartyEntityType || (PartyEntityType = {}));
/**
 * **Field Dependencies:**
 *
 * @remarks
 *
 * Exempt entities must set `exempt_verifying_beneficial_owners` to `true` and provide an `exempt_customer_reason` on the owner record.
 *
 * Required if `exempt_verifying_beneficial_owners` is `true`.
 *
 * Otherwise, must be empty.
 */
export var PartyExemptCustomerReason;
(function (PartyExemptCustomerReason) {
    PartyExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    PartyExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    PartyExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    PartyExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    PartyExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    PartyExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    PartyExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    PartyExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    PartyExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    PartyExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    PartyExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    PartyExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(PartyExemptCustomerReason || (PartyExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var PartyTaxIdType;
(function (PartyTaxIdType) {
    PartyTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    PartyTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    PartyTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    PartyTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(PartyTaxIdType || (PartyTaxIdType = {}));
/**
 * Federal tax classification.
 */
export var PartyFederalTaxClassification;
(function (PartyFederalTaxClassification) {
    PartyFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    PartyFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    PartyFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    PartyFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    PartyFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    PartyFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    PartyFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    PartyFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    PartyFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    PartyFederalTaxClassification["Other"] = "OTHER";
})(PartyFederalTaxClassification || (PartyFederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var PartyIrsFormType;
(function (PartyIrsFormType) {
    PartyIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    PartyIrsFormType["W9"] = "W_9";
    PartyIrsFormType["W8Ben"] = "W_8BEN";
})(PartyIrsFormType || (PartyIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
export var PartyReportingEligibility;
(function (PartyReportingEligibility) {
    PartyReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    PartyReportingEligibility["Eligible"] = "ELIGIBLE";
    PartyReportingEligibility["Ineligible"] = "INELIGIBLE";
})(PartyReportingEligibility || (PartyReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
export var PartyTaxpayerCertificationState;
(function (PartyTaxpayerCertificationState) {
    PartyTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    PartyTaxpayerCertificationState["Certified"] = "CERTIFIED";
    PartyTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(PartyTaxpayerCertificationState || (PartyTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var PartyUsTinStatus;
(function (PartyUsTinStatus) {
    PartyUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    PartyUsTinStatus["Passing"] = "PASSING";
    PartyUsTinStatus["Failing"] = "FAILING";
})(PartyUsTinStatus || (PartyUsTinStatus = {}));
/**
 * B/C Notice status.
 */
export var PartyWithholdingState;
(function (PartyWithholdingState) {
    PartyWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    PartyWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    PartyWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    PartyWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    PartyWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(PartyWithholdingState || (PartyWithholdingState = {}));
/**
 * Classifies in what capacity (or if) the underlying natural person holds a job
 */
export var PartyEmploymentStatus;
(function (PartyEmploymentStatus) {
    PartyEmploymentStatus["StatusUnspecified"] = "STATUS_UNSPECIFIED";
    PartyEmploymentStatus["Employed"] = "EMPLOYED";
    PartyEmploymentStatus["SelfEmployed"] = "SELF_EMPLOYED";
    PartyEmploymentStatus["Unemployed"] = "UNEMPLOYED";
    PartyEmploymentStatus["Retired"] = "RETIRED";
    PartyEmploymentStatus["Student"] = "STUDENT";
})(PartyEmploymentStatus || (PartyEmploymentStatus = {}));
/**
 * Identification type
 */
export var PartyLegalNaturalPersonType;
(function (PartyLegalNaturalPersonType) {
    PartyLegalNaturalPersonType["IdentificationTypeUnspecified"] = "IDENTIFICATION_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonType["Passport"] = "PASSPORT";
    PartyLegalNaturalPersonType["NationalId"] = "NATIONAL_ID";
    PartyLegalNaturalPersonType["DriversLicense"] = "DRIVERS_LICENSE";
})(PartyLegalNaturalPersonType || (PartyLegalNaturalPersonType = {}));
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
export var PartyMaritalStatus;
(function (PartyMaritalStatus) {
    PartyMaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    PartyMaritalStatus["Single"] = "SINGLE";
    PartyMaritalStatus["Married"] = "MARRIED";
    PartyMaritalStatus["Divorced"] = "DIVORCED";
    PartyMaritalStatus["Widowed"] = "WIDOWED";
})(PartyMaritalStatus || (PartyMaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
export var PartyNameSuffix;
(function (PartyNameSuffix) {
    PartyNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    PartyNameSuffix["Sr"] = "SR";
    PartyNameSuffix["Jr"] = "JR";
    PartyNameSuffix["Iii"] = "III";
    PartyNameSuffix["Iv"] = "IV";
    PartyNameSuffix["V"] = "V";
})(PartyNameSuffix || (PartyNameSuffix = {}));
export var PartyResidencyStatus;
(function (PartyResidencyStatus) {
    PartyResidencyStatus["ResidencyStatusUnspecified"] = "RESIDENCY_STATUS_UNSPECIFIED";
    PartyResidencyStatus["UsPermanentResident"] = "US_PERMANENT_RESIDENT";
    PartyResidencyStatus["UsTemporaryResident"] = "US_TEMPORARY_RESIDENT";
    PartyResidencyStatus["UsNonResident"] = "US_NON_RESIDENT";
})(PartyResidencyStatus || (PartyResidencyStatus = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var PartyLegalNaturalPersonTaxIdType;
(function (PartyLegalNaturalPersonTaxIdType) {
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(PartyLegalNaturalPersonTaxIdType || (PartyLegalNaturalPersonTaxIdType = {}));
/**
 * Federal tax classification.
 */
export var PartyLegalNaturalPersonFederalTaxClassification;
(function (PartyLegalNaturalPersonFederalTaxClassification) {
    PartyLegalNaturalPersonFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    PartyLegalNaturalPersonFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    PartyLegalNaturalPersonFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    PartyLegalNaturalPersonFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    PartyLegalNaturalPersonFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    PartyLegalNaturalPersonFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    PartyLegalNaturalPersonFederalTaxClassification["Other"] = "OTHER";
})(PartyLegalNaturalPersonFederalTaxClassification || (PartyLegalNaturalPersonFederalTaxClassification = {}));
/**
 * IRS form type.
 */
export var PartyLegalNaturalPersonIrsFormType;
(function (PartyLegalNaturalPersonIrsFormType) {
    PartyLegalNaturalPersonIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonIrsFormType["W9"] = "W_9";
    PartyLegalNaturalPersonIrsFormType["W8Ben"] = "W_8BEN";
})(PartyLegalNaturalPersonIrsFormType || (PartyLegalNaturalPersonIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
export var PartyLegalNaturalPersonReportingEligibility;
(function (PartyLegalNaturalPersonReportingEligibility) {
    PartyLegalNaturalPersonReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    PartyLegalNaturalPersonReportingEligibility["Eligible"] = "ELIGIBLE";
    PartyLegalNaturalPersonReportingEligibility["Ineligible"] = "INELIGIBLE";
})(PartyLegalNaturalPersonReportingEligibility || (PartyLegalNaturalPersonReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
export var PartyLegalNaturalPersonTaxpayerCertificationState;
(function (PartyLegalNaturalPersonTaxpayerCertificationState) {
    PartyLegalNaturalPersonTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    PartyLegalNaturalPersonTaxpayerCertificationState["Certified"] = "CERTIFIED";
    PartyLegalNaturalPersonTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(PartyLegalNaturalPersonTaxpayerCertificationState || (PartyLegalNaturalPersonTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
export var PartyLegalNaturalPersonUsTinStatus;
(function (PartyLegalNaturalPersonUsTinStatus) {
    PartyLegalNaturalPersonUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    PartyLegalNaturalPersonUsTinStatus["Passing"] = "PASSING";
    PartyLegalNaturalPersonUsTinStatus["Failing"] = "FAILING";
})(PartyLegalNaturalPersonUsTinStatus || (PartyLegalNaturalPersonUsTinStatus = {}));
/**
 * B/C Notice status.
 */
export var PartyLegalNaturalPersonWithholdingState;
(function (PartyLegalNaturalPersonWithholdingState) {
    PartyLegalNaturalPersonWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    PartyLegalNaturalPersonWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(PartyLegalNaturalPersonWithholdingState || (PartyLegalNaturalPersonWithholdingState = {}));
/**
 * Delivery method instruction for prospectuses for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyProspectusDeliveryPreference;
(function (PartyProspectusDeliveryPreference) {
    PartyProspectusDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyProspectusDeliveryPreference["Digital"] = "DIGITAL";
    PartyProspectusDeliveryPreference["Physical"] = "PHYSICAL";
    PartyProspectusDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyProspectusDeliveryPreference || (PartyProspectusDeliveryPreference = {}));
/**
 * Delivery method instruction for proxy voting for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyProxyDeliveryPreference;
(function (PartyProxyDeliveryPreference) {
    PartyProxyDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyProxyDeliveryPreference["Digital"] = "DIGITAL";
    PartyProxyDeliveryPreference["Physical"] = "PHYSICAL";
    PartyProxyDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyProxyDeliveryPreference || (PartyProxyDeliveryPreference = {}));
/**
 * Conveys how a person is related to account; Located on each account Party record; Examples are `PRIMARY_OWNER`, `JOINT_OWNER`, `EXECUTOR`, etc.
 */
export var PartyRelationType;
(function (PartyRelationType) {
    PartyRelationType["PartyRelationTypeUnspecified"] = "PARTY_RELATION_TYPE_UNSPECIFIED";
    PartyRelationType["PrimaryOwner"] = "PRIMARY_OWNER";
    PartyRelationType["JointOwner"] = "JOINT_OWNER";
    PartyRelationType["Custodian"] = "CUSTODIAN";
    PartyRelationType["Executor"] = "EXECUTOR";
    PartyRelationType["AuthorizedSigner"] = "AUTHORIZED_SIGNER";
    PartyRelationType["BeneficialOwner"] = "BENEFICIAL_OWNER";
    PartyRelationType["ControlPerson"] = "CONTROL_PERSON";
    PartyRelationType["AuthorizedRepresentative"] = "AUTHORIZED_REPRESENTATIVE";
    PartyRelationType["Trustee"] = "TRUSTEE";
    PartyRelationType["AuthTrusteeRep"] = "AUTH_TRUSTEE_REP";
})(PartyRelationType || (PartyRelationType = {}));
/**
 * Delivery method instruction for account statements for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyStatementDeliveryPreference;
(function (PartyStatementDeliveryPreference) {
    PartyStatementDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyStatementDeliveryPreference["Digital"] = "DIGITAL";
    PartyStatementDeliveryPreference["Physical"] = "PHYSICAL";
    PartyStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyStatementDeliveryPreference || (PartyStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for tax documents for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated; Per regulation, selected tax forms will be mailed by regulation regardless of this setting
 */
export var PartyTaxDocumentDeliveryPreference;
(function (PartyTaxDocumentDeliveryPreference) {
    PartyTaxDocumentDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyTaxDocumentDeliveryPreference["Digital"] = "DIGITAL";
    PartyTaxDocumentDeliveryPreference["Physical"] = "PHYSICAL";
    PartyTaxDocumentDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyTaxDocumentDeliveryPreference || (PartyTaxDocumentDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyTradeConfirmationDeliveryPreference;
(function (PartyTradeConfirmationDeliveryPreference) {
    PartyTradeConfirmationDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyTradeConfirmationDeliveryPreference["Digital"] = "DIGITAL";
    PartyTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    PartyTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyTradeConfirmationDeliveryPreference || (PartyTradeConfirmationDeliveryPreference = {}));
/** @internal */
export const PartyBusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyBusinessIndustrialClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyBusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(PartyBusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyBusinessIndustrialClassification$;
(function (PartyBusinessIndustrialClassification$) {
    /** @deprecated use `PartyBusinessIndustrialClassification$inboundSchema` instead. */
    PartyBusinessIndustrialClassification$.inboundSchema = PartyBusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `PartyBusinessIndustrialClassification$outboundSchema` instead. */
    PartyBusinessIndustrialClassification$.outboundSchema = PartyBusinessIndustrialClassification$outboundSchema;
})(PartyBusinessIndustrialClassification$ || (PartyBusinessIndustrialClassification$ = {}));
/** @internal */
export const PartyCorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(PartyCorporateStructure),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyCorporateStructure$outboundSchema = z.union([
    z.nativeEnum(PartyCorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyCorporateStructure$;
(function (PartyCorporateStructure$) {
    /** @deprecated use `PartyCorporateStructure$inboundSchema` instead. */
    PartyCorporateStructure$.inboundSchema = PartyCorporateStructure$inboundSchema;
    /** @deprecated use `PartyCorporateStructure$outboundSchema` instead. */
    PartyCorporateStructure$.outboundSchema = PartyCorporateStructure$outboundSchema;
})(PartyCorporateStructure$ || (PartyCorporateStructure$ = {}));
/** @internal */
export const PartyNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
export const PartyNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyNegativeNews$;
(function (PartyNegativeNews$) {
    /** @deprecated use `PartyNegativeNews$inboundSchema` instead. */
    PartyNegativeNews$.inboundSchema = PartyNegativeNews$inboundSchema;
    /** @deprecated use `PartyNegativeNews$outboundSchema` instead. */
    PartyNegativeNews$.outboundSchema = PartyNegativeNews$outboundSchema;
})(PartyNegativeNews$ || (PartyNegativeNews$ = {}));
export function partyNegativeNewsToJSON(partyNegativeNews) {
    return JSON.stringify(PartyNegativeNews$outboundSchema.parse(partyNegativeNews));
}
export function partyNegativeNewsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyNegativeNews$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyNegativeNews' from JSON`);
}
/** @internal */
export const PartyEntityDueDiligence$inboundSchema = z.object({
    entity_issues_bearer_shares: z.boolean().optional(),
    negative_news: z.nullable(z.lazy(() => PartyNegativeNews$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "entity_issues_bearer_shares": "entityIssuesBearerShares",
        "negative_news": "negativeNews",
    });
});
/** @internal */
export const PartyEntityDueDiligence$outboundSchema = z.object({
    entityIssuesBearerShares: z.boolean().optional(),
    negativeNews: z.nullable(z.lazy(() => PartyNegativeNews$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        entityIssuesBearerShares: "entity_issues_bearer_shares",
        negativeNews: "negative_news",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEntityDueDiligence$;
(function (PartyEntityDueDiligence$) {
    /** @deprecated use `PartyEntityDueDiligence$inboundSchema` instead. */
    PartyEntityDueDiligence$.inboundSchema = PartyEntityDueDiligence$inboundSchema;
    /** @deprecated use `PartyEntityDueDiligence$outboundSchema` instead. */
    PartyEntityDueDiligence$.outboundSchema = PartyEntityDueDiligence$outboundSchema;
})(PartyEntityDueDiligence$ || (PartyEntityDueDiligence$ = {}));
export function partyEntityDueDiligenceToJSON(partyEntityDueDiligence) {
    return JSON.stringify(PartyEntityDueDiligence$outboundSchema.parse(partyEntityDueDiligence));
}
export function partyEntityDueDiligenceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyEntityDueDiligence$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyEntityDueDiligence' from JSON`);
}
/** @internal */
export const PartyEntityType$inboundSchema = z
    .union([
    z.nativeEnum(PartyEntityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyEntityType$outboundSchema = z.union([
    z.nativeEnum(PartyEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEntityType$;
(function (PartyEntityType$) {
    /** @deprecated use `PartyEntityType$inboundSchema` instead. */
    PartyEntityType$.inboundSchema = PartyEntityType$inboundSchema;
    /** @deprecated use `PartyEntityType$outboundSchema` instead. */
    PartyEntityType$.outboundSchema = PartyEntityType$outboundSchema;
})(PartyEntityType$ || (PartyEntityType$ = {}));
/** @internal */
export const PartyExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(PartyExemptCustomerReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(PartyExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyExemptCustomerReason$;
(function (PartyExemptCustomerReason$) {
    /** @deprecated use `PartyExemptCustomerReason$inboundSchema` instead. */
    PartyExemptCustomerReason$.inboundSchema = PartyExemptCustomerReason$inboundSchema;
    /** @deprecated use `PartyExemptCustomerReason$outboundSchema` instead. */
    PartyExemptCustomerReason$.outboundSchema = PartyExemptCustomerReason$outboundSchema;
})(PartyExemptCustomerReason$ || (PartyExemptCustomerReason$ = {}));
/** @internal */
export const PartyFormationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyFormationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyFormationDate$;
(function (PartyFormationDate$) {
    /** @deprecated use `PartyFormationDate$inboundSchema` instead. */
    PartyFormationDate$.inboundSchema = PartyFormationDate$inboundSchema;
    /** @deprecated use `PartyFormationDate$outboundSchema` instead. */
    PartyFormationDate$.outboundSchema = PartyFormationDate$outboundSchema;
})(PartyFormationDate$ || (PartyFormationDate$ = {}));
export function partyFormationDateToJSON(partyFormationDate) {
    return JSON.stringify(PartyFormationDate$outboundSchema.parse(partyFormationDate));
}
export function partyFormationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyFormationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyFormationDate' from JSON`);
}
/** @internal */
export const PartyEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEffectiveDate$;
(function (PartyEffectiveDate$) {
    /** @deprecated use `PartyEffectiveDate$inboundSchema` instead. */
    PartyEffectiveDate$.inboundSchema = PartyEffectiveDate$inboundSchema;
    /** @deprecated use `PartyEffectiveDate$outboundSchema` instead. */
    PartyEffectiveDate$.outboundSchema = PartyEffectiveDate$outboundSchema;
})(PartyEffectiveDate$ || (PartyEffectiveDate$ = {}));
export function partyEffectiveDateToJSON(partyEffectiveDate) {
    return JSON.stringify(PartyEffectiveDate$outboundSchema.parse(partyEffectiveDate));
}
export function partyEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyEffectiveDate' from JSON`);
}
/** @internal */
export const PartyLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => PartyEffectiveDate$inboundSchema))
        .optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const PartyLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => PartyEffectiveDate$outboundSchema))
        .optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLargeTrader$;
(function (PartyLargeTrader$) {
    /** @deprecated use `PartyLargeTrader$inboundSchema` instead. */
    PartyLargeTrader$.inboundSchema = PartyLargeTrader$inboundSchema;
    /** @deprecated use `PartyLargeTrader$outboundSchema` instead. */
    PartyLargeTrader$.outboundSchema = PartyLargeTrader$outboundSchema;
})(PartyLargeTrader$ || (PartyLargeTrader$ = {}));
export function partyLargeTraderToJSON(partyLargeTrader) {
    return JSON.stringify(PartyLargeTrader$outboundSchema.parse(partyLargeTrader));
}
export function partyLargeTraderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLargeTrader$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLargeTrader' from JSON`);
}
/** @internal */
export const PartyLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const PartyLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalAddress$;
(function (PartyLegalAddress$) {
    /** @deprecated use `PartyLegalAddress$inboundSchema` instead. */
    PartyLegalAddress$.inboundSchema = PartyLegalAddress$inboundSchema;
    /** @deprecated use `PartyLegalAddress$outboundSchema` instead. */
    PartyLegalAddress$.outboundSchema = PartyLegalAddress$outboundSchema;
})(PartyLegalAddress$ || (PartyLegalAddress$ = {}));
export function partyLegalAddressToJSON(partyLegalAddress) {
    return JSON.stringify(PartyLegalAddress$outboundSchema.parse(partyLegalAddress));
}
export function partyLegalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalAddress' from JSON`);
}
/** @internal */
export const PartyTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyTaxIdType$outboundSchema = z.union([
    z.nativeEnum(PartyTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTaxIdType$;
(function (PartyTaxIdType$) {
    /** @deprecated use `PartyTaxIdType$inboundSchema` instead. */
    PartyTaxIdType$.inboundSchema = PartyTaxIdType$inboundSchema;
    /** @deprecated use `PartyTaxIdType$outboundSchema` instead. */
    PartyTaxIdType$.outboundSchema = PartyTaxIdType$outboundSchema;
})(PartyTaxIdType$ || (PartyTaxIdType$ = {}));
/** @internal */
export const PartyCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyCNoticeDate$;
(function (PartyCNoticeDate$) {
    /** @deprecated use `PartyCNoticeDate$inboundSchema` instead. */
    PartyCNoticeDate$.inboundSchema = PartyCNoticeDate$inboundSchema;
    /** @deprecated use `PartyCNoticeDate$outboundSchema` instead. */
    PartyCNoticeDate$.outboundSchema = PartyCNoticeDate$outboundSchema;
})(PartyCNoticeDate$ || (PartyCNoticeDate$ = {}));
export function partyCNoticeDateToJSON(partyCNoticeDate) {
    return JSON.stringify(PartyCNoticeDate$outboundSchema.parse(partyCNoticeDate));
}
export function partyCNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyCNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyCNoticeDate' from JSON`);
}
/** @internal */
export const PartyFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyFederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(PartyFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyFederalTaxClassification$;
(function (PartyFederalTaxClassification$) {
    /** @deprecated use `PartyFederalTaxClassification$inboundSchema` instead. */
    PartyFederalTaxClassification$.inboundSchema = PartyFederalTaxClassification$inboundSchema;
    /** @deprecated use `PartyFederalTaxClassification$outboundSchema` instead. */
    PartyFederalTaxClassification$.outboundSchema = PartyFederalTaxClassification$outboundSchema;
})(PartyFederalTaxClassification$ || (PartyFederalTaxClassification$ = {}));
/** @internal */
export const PartyFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyFirstBNoticeDate$;
(function (PartyFirstBNoticeDate$) {
    /** @deprecated use `PartyFirstBNoticeDate$inboundSchema` instead. */
    PartyFirstBNoticeDate$.inboundSchema = PartyFirstBNoticeDate$inboundSchema;
    /** @deprecated use `PartyFirstBNoticeDate$outboundSchema` instead. */
    PartyFirstBNoticeDate$.outboundSchema = PartyFirstBNoticeDate$outboundSchema;
})(PartyFirstBNoticeDate$ || (PartyFirstBNoticeDate$ = {}));
export function partyFirstBNoticeDateToJSON(partyFirstBNoticeDate) {
    return JSON.stringify(PartyFirstBNoticeDate$outboundSchema.parse(partyFirstBNoticeDate));
}
export function partyFirstBNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyFirstBNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyFirstBNoticeDate' from JSON`);
}
/** @internal */
export const PartyIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(PartyIrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyIrsFormType$outboundSchema = z.union([
    z.nativeEnum(PartyIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyIrsFormType$;
(function (PartyIrsFormType$) {
    /** @deprecated use `PartyIrsFormType$inboundSchema` instead. */
    PartyIrsFormType$.inboundSchema = PartyIrsFormType$inboundSchema;
    /** @deprecated use `PartyIrsFormType$outboundSchema` instead. */
    PartyIrsFormType$.outboundSchema = PartyIrsFormType$outboundSchema;
})(PartyIrsFormType$ || (PartyIrsFormType$ = {}));
/** @internal */
export const PartyReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(PartyReportingEligibility),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(PartyReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyReportingEligibility$;
(function (PartyReportingEligibility$) {
    /** @deprecated use `PartyReportingEligibility$inboundSchema` instead. */
    PartyReportingEligibility$.inboundSchema = PartyReportingEligibility$inboundSchema;
    /** @deprecated use `PartyReportingEligibility$outboundSchema` instead. */
    PartyReportingEligibility$.outboundSchema = PartyReportingEligibility$outboundSchema;
})(PartyReportingEligibility$ || (PartyReportingEligibility$ = {}));
/** @internal */
export const PartyTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTaxCertificationDate$;
(function (PartyTaxCertificationDate$) {
    /** @deprecated use `PartyTaxCertificationDate$inboundSchema` instead. */
    PartyTaxCertificationDate$.inboundSchema = PartyTaxCertificationDate$inboundSchema;
    /** @deprecated use `PartyTaxCertificationDate$outboundSchema` instead. */
    PartyTaxCertificationDate$.outboundSchema = PartyTaxCertificationDate$outboundSchema;
})(PartyTaxCertificationDate$ || (PartyTaxCertificationDate$ = {}));
export function partyTaxCertificationDateToJSON(partyTaxCertificationDate) {
    return JSON.stringify(PartyTaxCertificationDate$outboundSchema.parse(partyTaxCertificationDate));
}
export function partyTaxCertificationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyTaxCertificationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyTaxCertificationDate' from JSON`);
}
/** @internal */
export const PartyTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxpayerCertificationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(PartyTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTaxpayerCertificationState$;
(function (PartyTaxpayerCertificationState$) {
    /** @deprecated use `PartyTaxpayerCertificationState$inboundSchema` instead. */
    PartyTaxpayerCertificationState$.inboundSchema = PartyTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `PartyTaxpayerCertificationState$outboundSchema` instead. */
    PartyTaxpayerCertificationState$.outboundSchema = PartyTaxpayerCertificationState$outboundSchema;
})(PartyTaxpayerCertificationState$ || (PartyTaxpayerCertificationState$ = {}));
/** @internal */
export const PartyUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyUsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(PartyUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyUsTinStatus$;
(function (PartyUsTinStatus$) {
    /** @deprecated use `PartyUsTinStatus$inboundSchema` instead. */
    PartyUsTinStatus$.inboundSchema = PartyUsTinStatus$inboundSchema;
    /** @deprecated use `PartyUsTinStatus$outboundSchema` instead. */
    PartyUsTinStatus$.outboundSchema = PartyUsTinStatus$outboundSchema;
})(PartyUsTinStatus$ || (PartyUsTinStatus$ = {}));
/** @internal */
export const PartyWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(PartyWithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyWithholdingState$outboundSchema = z.union([
    z.nativeEnum(PartyWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyWithholdingState$;
(function (PartyWithholdingState$) {
    /** @deprecated use `PartyWithholdingState$inboundSchema` instead. */
    PartyWithholdingState$.inboundSchema = PartyWithholdingState$inboundSchema;
    /** @deprecated use `PartyWithholdingState$outboundSchema` instead. */
    PartyWithholdingState$.outboundSchema = PartyWithholdingState$outboundSchema;
})(PartyWithholdingState$ || (PartyWithholdingState$ = {}));
/** @internal */
export const PartyTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => PartyCNoticeDate$inboundSchema))
        .optional(),
    federal_tax_classification: PartyFederalTaxClassification$inboundSchema
        .optional(),
    first_b_notice_date: z.nullable(z.lazy(() => PartyFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: PartyIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: PartyReportingEligibility$inboundSchema.optional(),
    tax_certification_date: z.nullable(z.lazy(() => PartyTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: PartyTaxpayerCertificationState$inboundSchema
        .optional(),
    us_tin_status: PartyUsTinStatus$inboundSchema.optional(),
    withholding_state: PartyWithholdingState$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
export const PartyTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => PartyCNoticeDate$outboundSchema))
        .optional(),
    federalTaxClassification: PartyFederalTaxClassification$outboundSchema
        .optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => PartyFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: PartyIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: PartyReportingEligibility$outboundSchema.optional(),
    taxCertificationDate: z.nullable(z.lazy(() => PartyTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: PartyTaxpayerCertificationState$outboundSchema
        .optional(),
    usTinStatus: PartyUsTinStatus$outboundSchema.optional(),
    withholdingState: PartyWithholdingState$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTaxProfile$;
(function (PartyTaxProfile$) {
    /** @deprecated use `PartyTaxProfile$inboundSchema` instead. */
    PartyTaxProfile$.inboundSchema = PartyTaxProfile$inboundSchema;
    /** @deprecated use `PartyTaxProfile$outboundSchema` instead. */
    PartyTaxProfile$.outboundSchema = PartyTaxProfile$outboundSchema;
})(PartyTaxProfile$ || (PartyTaxProfile$ = {}));
export function partyTaxProfileToJSON(partyTaxProfile) {
    return JSON.stringify(PartyTaxProfile$outboundSchema.parse(partyTaxProfile));
}
export function partyTaxProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyTaxProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyTaxProfile' from JSON`);
}
/** @internal */
export const PartyLegalEntity$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: PartyBusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: PartyCorporateStructure$inboundSchema.optional(),
    correspondent_id: z.string().optional(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: z.nullable(z.lazy(() => PartyEntityDueDiligence$inboundSchema)).optional(),
    entity_name: z.string().optional(),
    entity_type: PartyEntityType$inboundSchema.optional(),
    exempt_customer_reason: PartyExemptCustomerReason$inboundSchema.optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_entity: z.boolean().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: z.nullable(z.lazy(() => PartyFormationDate$inboundSchema))
        .optional(),
    global_person_id: z.string().optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => PartyLargeTrader$inboundSchema))
        .optional(),
    legal_address: z.nullable(z.lazy(() => PartyLegalAddress$inboundSchema))
        .optional(),
    legal_entity_id: z.string().optional(),
    lei_code: z.string().optional(),
    name: z.string().optional(),
    operating_regions: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: PartyTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => PartyTaxProfile$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_entity": "foreignEntity",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "global_person_id": "globalPersonId",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "legal_entity_id": "legalEntityId",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const PartyLegalEntity$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: PartyBusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: PartyCorporateStructure$outboundSchema.optional(),
    correspondentId: z.string().optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: z.nullable(z.lazy(() => PartyEntityDueDiligence$outboundSchema)).optional(),
    entityName: z.string().optional(),
    entityType: PartyEntityType$outboundSchema.optional(),
    exemptCustomerReason: PartyExemptCustomerReason$outboundSchema.optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignEntity: z.boolean().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: z.nullable(z.lazy(() => PartyFormationDate$outboundSchema))
        .optional(),
    globalPersonId: z.string().optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => PartyLargeTrader$outboundSchema))
        .optional(),
    legalAddress: z.nullable(z.lazy(() => PartyLegalAddress$outboundSchema))
        .optional(),
    legalEntityId: z.string().optional(),
    leiCode: z.string().optional(),
    name: z.string().optional(),
    operatingRegions: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: PartyTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => PartyTaxProfile$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignEntity: "foreign_entity",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        globalPersonId: "global_person_id",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        legalEntityId: "legal_entity_id",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalEntity$;
(function (PartyLegalEntity$) {
    /** @deprecated use `PartyLegalEntity$inboundSchema` instead. */
    PartyLegalEntity$.inboundSchema = PartyLegalEntity$inboundSchema;
    /** @deprecated use `PartyLegalEntity$outboundSchema` instead. */
    PartyLegalEntity$.outboundSchema = PartyLegalEntity$outboundSchema;
})(PartyLegalEntity$ || (PartyLegalEntity$ = {}));
export function partyLegalEntityToJSON(partyLegalEntity) {
    return JSON.stringify(PartyLegalEntity$outboundSchema.parse(partyLegalEntity));
}
export function partyLegalEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalEntity' from JSON`);
}
/** @internal */
export const PartyBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyBirthDate$;
(function (PartyBirthDate$) {
    /** @deprecated use `PartyBirthDate$inboundSchema` instead. */
    PartyBirthDate$.inboundSchema = PartyBirthDate$inboundSchema;
    /** @deprecated use `PartyBirthDate$outboundSchema` instead. */
    PartyBirthDate$.outboundSchema = PartyBirthDate$outboundSchema;
})(PartyBirthDate$ || (PartyBirthDate$ = {}));
export function partyBirthDateToJSON(partyBirthDate) {
    return JSON.stringify(PartyBirthDate$outboundSchema.parse(partyBirthDate));
}
export function partyBirthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyBirthDate' from JSON`);
}
/** @internal */
export const PartyDeathDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyDeathDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyDeathDate$;
(function (PartyDeathDate$) {
    /** @deprecated use `PartyDeathDate$inboundSchema` instead. */
    PartyDeathDate$.inboundSchema = PartyDeathDate$inboundSchema;
    /** @deprecated use `PartyDeathDate$outboundSchema` instead. */
    PartyDeathDate$.outboundSchema = PartyDeathDate$outboundSchema;
})(PartyDeathDate$ || (PartyDeathDate$ = {}));
export function partyDeathDateToJSON(partyDeathDate) {
    return JSON.stringify(PartyDeathDate$outboundSchema.parse(partyDeathDate));
}
export function partyDeathDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyDeathDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyDeathDate' from JSON`);
}
/** @internal */
export const PartyEmployerAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const PartyEmployerAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEmployerAddress$;
(function (PartyEmployerAddress$) {
    /** @deprecated use `PartyEmployerAddress$inboundSchema` instead. */
    PartyEmployerAddress$.inboundSchema = PartyEmployerAddress$inboundSchema;
    /** @deprecated use `PartyEmployerAddress$outboundSchema` instead. */
    PartyEmployerAddress$.outboundSchema = PartyEmployerAddress$outboundSchema;
})(PartyEmployerAddress$ || (PartyEmployerAddress$ = {}));
export function partyEmployerAddressToJSON(partyEmployerAddress) {
    return JSON.stringify(PartyEmployerAddress$outboundSchema.parse(partyEmployerAddress));
}
export function partyEmployerAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyEmployerAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyEmployerAddress' from JSON`);
}
/** @internal */
export const PartyEmploymentStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyEmploymentStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyEmploymentStatus$outboundSchema = z.union([
    z.nativeEnum(PartyEmploymentStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEmploymentStatus$;
(function (PartyEmploymentStatus$) {
    /** @deprecated use `PartyEmploymentStatus$inboundSchema` instead. */
    PartyEmploymentStatus$.inboundSchema = PartyEmploymentStatus$inboundSchema;
    /** @deprecated use `PartyEmploymentStatus$outboundSchema` instead. */
    PartyEmploymentStatus$.outboundSchema = PartyEmploymentStatus$outboundSchema;
})(PartyEmploymentStatus$ || (PartyEmploymentStatus$ = {}));
/** @internal */
export const PartyEmployment$inboundSchema = z.object({
    employer: z.string().optional(),
    employer_address: z.nullable(z.lazy(() => PartyEmployerAddress$inboundSchema))
        .optional(),
    employment_id: z.string().optional(),
    employment_status: PartyEmploymentStatus$inboundSchema.optional(),
    occupation: z.string().optional(),
    start_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "employer_address": "employerAddress",
        "employment_id": "employmentId",
        "employment_status": "employmentStatus",
        "start_year": "startYear",
    });
});
/** @internal */
export const PartyEmployment$outboundSchema = z.object({
    employer: z.string().optional(),
    employerAddress: z.nullable(z.lazy(() => PartyEmployerAddress$outboundSchema))
        .optional(),
    employmentId: z.string().optional(),
    employmentStatus: PartyEmploymentStatus$outboundSchema.optional(),
    occupation: z.string().optional(),
    startYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        employerAddress: "employer_address",
        employmentId: "employment_id",
        employmentStatus: "employment_status",
        startYear: "start_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyEmployment$;
(function (PartyEmployment$) {
    /** @deprecated use `PartyEmployment$inboundSchema` instead. */
    PartyEmployment$.inboundSchema = PartyEmployment$inboundSchema;
    /** @deprecated use `PartyEmployment$outboundSchema` instead. */
    PartyEmployment$.outboundSchema = PartyEmployment$outboundSchema;
})(PartyEmployment$ || (PartyEmployment$ = {}));
export function partyEmploymentToJSON(partyEmployment) {
    return JSON.stringify(PartyEmployment$outboundSchema.parse(partyEmployment));
}
export function partyEmploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyEmployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyEmployment' from JSON`);
}
/** @internal */
export const PartyExpirationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyExpirationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyExpirationDate$;
(function (PartyExpirationDate$) {
    /** @deprecated use `PartyExpirationDate$inboundSchema` instead. */
    PartyExpirationDate$.inboundSchema = PartyExpirationDate$inboundSchema;
    /** @deprecated use `PartyExpirationDate$outboundSchema` instead. */
    PartyExpirationDate$.outboundSchema = PartyExpirationDate$outboundSchema;
})(PartyExpirationDate$ || (PartyExpirationDate$ = {}));
export function partyExpirationDateToJSON(partyExpirationDate) {
    return JSON.stringify(PartyExpirationDate$outboundSchema.parse(partyExpirationDate));
}
export function partyExpirationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyExpirationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyExpirationDate' from JSON`);
}
/** @internal */
export const PartyIssueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyIssueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyIssueDate$;
(function (PartyIssueDate$) {
    /** @deprecated use `PartyIssueDate$inboundSchema` instead. */
    PartyIssueDate$.inboundSchema = PartyIssueDate$inboundSchema;
    /** @deprecated use `PartyIssueDate$outboundSchema` instead. */
    PartyIssueDate$.outboundSchema = PartyIssueDate$outboundSchema;
})(PartyIssueDate$ || (PartyIssueDate$ = {}));
export function partyIssueDateToJSON(partyIssueDate) {
    return JSON.stringify(PartyIssueDate$outboundSchema.parse(partyIssueDate));
}
export function partyIssueDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyIssueDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyIssueDate' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonType$;
(function (PartyLegalNaturalPersonType$) {
    /** @deprecated use `PartyLegalNaturalPersonType$inboundSchema` instead. */
    PartyLegalNaturalPersonType$.inboundSchema = PartyLegalNaturalPersonType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonType$outboundSchema` instead. */
    PartyLegalNaturalPersonType$.outboundSchema = PartyLegalNaturalPersonType$outboundSchema;
})(PartyLegalNaturalPersonType$ || (PartyLegalNaturalPersonType$ = {}));
/** @internal */
export const PartyForeignIdentification$inboundSchema = z.object({
    expiration_date: z.nullable(z.lazy(() => PartyExpirationDate$inboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identification_number: z.string().optional(),
    issue_date: z.nullable(z.lazy(() => PartyIssueDate$inboundSchema)).optional(),
    issuing_region_code: z.string().optional(),
    type: PartyLegalNaturalPersonType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "expiration_date": "expirationDate",
        "identification_number": "identificationNumber",
        "issue_date": "issueDate",
        "issuing_region_code": "issuingRegionCode",
    });
});
/** @internal */
export const PartyForeignIdentification$outboundSchema = z.object({
    expirationDate: z.nullable(z.lazy(() => PartyExpirationDate$outboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identificationNumber: z.string().optional(),
    issueDate: z.nullable(z.lazy(() => PartyIssueDate$outboundSchema)).optional(),
    issuingRegionCode: z.string().optional(),
    type: PartyLegalNaturalPersonType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        expirationDate: "expiration_date",
        identificationNumber: "identification_number",
        issueDate: "issue_date",
        issuingRegionCode: "issuing_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyForeignIdentification$;
(function (PartyForeignIdentification$) {
    /** @deprecated use `PartyForeignIdentification$inboundSchema` instead. */
    PartyForeignIdentification$.inboundSchema = PartyForeignIdentification$inboundSchema;
    /** @deprecated use `PartyForeignIdentification$outboundSchema` instead. */
    PartyForeignIdentification$.outboundSchema = PartyForeignIdentification$outboundSchema;
})(PartyForeignIdentification$ || (PartyForeignIdentification$ = {}));
export function partyForeignIdentificationToJSON(partyForeignIdentification) {
    return JSON.stringify(PartyForeignIdentification$outboundSchema.parse(partyForeignIdentification));
}
export function partyForeignIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyForeignIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyForeignIdentification' from JSON`);
}
/** @internal */
export const PartyExecutionDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyExecutionDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyExecutionDate$;
(function (PartyExecutionDate$) {
    /** @deprecated use `PartyExecutionDate$inboundSchema` instead. */
    PartyExecutionDate$.inboundSchema = PartyExecutionDate$inboundSchema;
    /** @deprecated use `PartyExecutionDate$outboundSchema` instead. */
    PartyExecutionDate$.outboundSchema = PartyExecutionDate$outboundSchema;
})(PartyExecutionDate$ || (PartyExecutionDate$ = {}));
export function partyExecutionDateToJSON(partyExecutionDate) {
    return JSON.stringify(PartyExecutionDate$outboundSchema.parse(partyExecutionDate));
}
export function partyExecutionDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyExecutionDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyExecutionDate' from JSON`);
}
/** @internal */
export const PartyIdentityVerificationResult$inboundSchema = z.object({
    address_verified: z.boolean().optional(),
    birth_date_verified: z.boolean().optional(),
    execution_date: z.nullable(z.lazy(() => PartyExecutionDate$inboundSchema))
        .optional(),
    external_case_id: z.string().optional(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    identity_verification_result_id: z.string().optional(),
    name_verified: z.boolean().optional(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "identity_verification_result_id": "identityVerificationResultId",
        "name_verified": "nameVerified",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
export const PartyIdentityVerificationResult$outboundSchema = z.object({
    addressVerified: z.boolean().optional(),
    birthDateVerified: z.boolean().optional(),
    executionDate: z.nullable(z.lazy(() => PartyExecutionDate$outboundSchema))
        .optional(),
    externalCaseId: z.string().optional(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    identityVerificationResultId: z.string().optional(),
    nameVerified: z.boolean().optional(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        identityVerificationResultId: "identity_verification_result_id",
        nameVerified: "name_verified",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyIdentityVerificationResult$;
(function (PartyIdentityVerificationResult$) {
    /** @deprecated use `PartyIdentityVerificationResult$inboundSchema` instead. */
    PartyIdentityVerificationResult$.inboundSchema = PartyIdentityVerificationResult$inboundSchema;
    /** @deprecated use `PartyIdentityVerificationResult$outboundSchema` instead. */
    PartyIdentityVerificationResult$.outboundSchema = PartyIdentityVerificationResult$outboundSchema;
})(PartyIdentityVerificationResult$ || (PartyIdentityVerificationResult$ = {}));
export function partyIdentityVerificationResultToJSON(partyIdentityVerificationResult) {
    return JSON.stringify(PartyIdentityVerificationResult$outboundSchema.parse(partyIdentityVerificationResult));
}
export function partyIdentityVerificationResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyIdentityVerificationResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyIdentityVerificationResult' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyLegalNaturalPersonEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonEffectiveDate$;
(function (PartyLegalNaturalPersonEffectiveDate$) {
    /** @deprecated use `PartyLegalNaturalPersonEffectiveDate$inboundSchema` instead. */
    PartyLegalNaturalPersonEffectiveDate$.inboundSchema = PartyLegalNaturalPersonEffectiveDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonEffectiveDate$outboundSchema` instead. */
    PartyLegalNaturalPersonEffectiveDate$.outboundSchema = PartyLegalNaturalPersonEffectiveDate$outboundSchema;
})(PartyLegalNaturalPersonEffectiveDate$ || (PartyLegalNaturalPersonEffectiveDate$ = {}));
export function partyLegalNaturalPersonEffectiveDateToJSON(partyLegalNaturalPersonEffectiveDate) {
    return JSON.stringify(PartyLegalNaturalPersonEffectiveDate$outboundSchema.parse(partyLegalNaturalPersonEffectiveDate));
}
export function partyLegalNaturalPersonEffectiveDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonEffectiveDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonEffectiveDate' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => PartyLegalNaturalPersonEffectiveDate$inboundSchema)).optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
export const PartyLegalNaturalPersonLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => PartyLegalNaturalPersonEffectiveDate$outboundSchema)).optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonLargeTrader$;
(function (PartyLegalNaturalPersonLargeTrader$) {
    /** @deprecated use `PartyLegalNaturalPersonLargeTrader$inboundSchema` instead. */
    PartyLegalNaturalPersonLargeTrader$.inboundSchema = PartyLegalNaturalPersonLargeTrader$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonLargeTrader$outboundSchema` instead. */
    PartyLegalNaturalPersonLargeTrader$.outboundSchema = PartyLegalNaturalPersonLargeTrader$outboundSchema;
})(PartyLegalNaturalPersonLargeTrader$ || (PartyLegalNaturalPersonLargeTrader$ = {}));
export function partyLegalNaturalPersonLargeTraderToJSON(partyLegalNaturalPersonLargeTrader) {
    return JSON.stringify(PartyLegalNaturalPersonLargeTrader$outboundSchema.parse(partyLegalNaturalPersonLargeTrader));
}
export function partyLegalNaturalPersonLargeTraderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonLargeTrader$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonLargeTrader' from JSON`);
}
/** @internal */
export const PartyMaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyMaritalStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyMaritalStatus$outboundSchema = z.union([
    z.nativeEnum(PartyMaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyMaritalStatus$;
(function (PartyMaritalStatus$) {
    /** @deprecated use `PartyMaritalStatus$inboundSchema` instead. */
    PartyMaritalStatus$.inboundSchema = PartyMaritalStatus$inboundSchema;
    /** @deprecated use `PartyMaritalStatus$outboundSchema` instead. */
    PartyMaritalStatus$.outboundSchema = PartyMaritalStatus$outboundSchema;
})(PartyMaritalStatus$ || (PartyMaritalStatus$ = {}));
/** @internal */
export const PartyNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(PartyNameSuffix),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyNameSuffix$outboundSchema = z.union([
    z.nativeEnum(PartyNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyNameSuffix$;
(function (PartyNameSuffix$) {
    /** @deprecated use `PartyNameSuffix$inboundSchema` instead. */
    PartyNameSuffix$.inboundSchema = PartyNameSuffix$inboundSchema;
    /** @deprecated use `PartyNameSuffix$outboundSchema` instead. */
    PartyNameSuffix$.outboundSchema = PartyNameSuffix$outboundSchema;
})(PartyNameSuffix$ || (PartyNameSuffix$ = {}));
/** @internal */
export const PartyCustomerReferralSource$inboundSchema = z.object({
    name: z.string().optional(),
    relationship_to_applicant: z.string().optional(),
    relationship_years_with_applicant: z.number().int().optional(),
    relationship_years_with_broker: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "relationship_to_applicant": "relationshipToApplicant",
        "relationship_years_with_applicant": "relationshipYearsWithApplicant",
        "relationship_years_with_broker": "relationshipYearsWithBroker",
    });
});
/** @internal */
export const PartyCustomerReferralSource$outboundSchema = z.object({
    name: z.string().optional(),
    relationshipToApplicant: z.string().optional(),
    relationshipYearsWithApplicant: z.number().int().optional(),
    relationshipYearsWithBroker: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        relationshipToApplicant: "relationship_to_applicant",
        relationshipYearsWithApplicant: "relationship_years_with_applicant",
        relationshipYearsWithBroker: "relationship_years_with_broker",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyCustomerReferralSource$;
(function (PartyCustomerReferralSource$) {
    /** @deprecated use `PartyCustomerReferralSource$inboundSchema` instead. */
    PartyCustomerReferralSource$.inboundSchema = PartyCustomerReferralSource$inboundSchema;
    /** @deprecated use `PartyCustomerReferralSource$outboundSchema` instead. */
    PartyCustomerReferralSource$.outboundSchema = PartyCustomerReferralSource$outboundSchema;
})(PartyCustomerReferralSource$ || (PartyCustomerReferralSource$ = {}));
export function partyCustomerReferralSourceToJSON(partyCustomerReferralSource) {
    return JSON.stringify(PartyCustomerReferralSource$outboundSchema.parse(partyCustomerReferralSource));
}
export function partyCustomerReferralSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyCustomerReferralSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyCustomerReferralSource' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
export const PartyLegalNaturalPersonNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonNegativeNews$;
(function (PartyLegalNaturalPersonNegativeNews$) {
    /** @deprecated use `PartyLegalNaturalPersonNegativeNews$inboundSchema` instead. */
    PartyLegalNaturalPersonNegativeNews$.inboundSchema = PartyLegalNaturalPersonNegativeNews$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonNegativeNews$outboundSchema` instead. */
    PartyLegalNaturalPersonNegativeNews$.outboundSchema = PartyLegalNaturalPersonNegativeNews$outboundSchema;
})(PartyLegalNaturalPersonNegativeNews$ || (PartyLegalNaturalPersonNegativeNews$ = {}));
export function partyLegalNaturalPersonNegativeNewsToJSON(partyLegalNaturalPersonNegativeNews) {
    return JSON.stringify(PartyLegalNaturalPersonNegativeNews$outboundSchema.parse(partyLegalNaturalPersonNegativeNews));
}
export function partyLegalNaturalPersonNegativeNewsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonNegativeNews$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonNegativeNews' from JSON`);
}
/** @internal */
export const PartyOtherSourcesOfWealth$inboundSchema = z.object({
    applicant_has_other_sources_of_wealth: z.boolean().optional(),
    other_sources_of_wealth: z.string().optional(),
    other_sources_of_wealth_verification: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "applicant_has_other_sources_of_wealth": "applicantHasOtherSourcesOfWealth",
        "other_sources_of_wealth": "otherSourcesOfWealth",
        "other_sources_of_wealth_verification": "otherSourcesOfWealthVerification",
    });
});
/** @internal */
export const PartyOtherSourcesOfWealth$outboundSchema = z.object({
    applicantHasOtherSourcesOfWealth: z.boolean().optional(),
    otherSourcesOfWealth: z.string().optional(),
    otherSourcesOfWealthVerification: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        applicantHasOtherSourcesOfWealth: "applicant_has_other_sources_of_wealth",
        otherSourcesOfWealth: "other_sources_of_wealth",
        otherSourcesOfWealthVerification: "other_sources_of_wealth_verification",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyOtherSourcesOfWealth$;
(function (PartyOtherSourcesOfWealth$) {
    /** @deprecated use `PartyOtherSourcesOfWealth$inboundSchema` instead. */
    PartyOtherSourcesOfWealth$.inboundSchema = PartyOtherSourcesOfWealth$inboundSchema;
    /** @deprecated use `PartyOtherSourcesOfWealth$outboundSchema` instead. */
    PartyOtherSourcesOfWealth$.outboundSchema = PartyOtherSourcesOfWealth$outboundSchema;
})(PartyOtherSourcesOfWealth$ || (PartyOtherSourcesOfWealth$ = {}));
export function partyOtherSourcesOfWealthToJSON(partyOtherSourcesOfWealth) {
    return JSON.stringify(PartyOtherSourcesOfWealth$outboundSchema.parse(partyOtherSourcesOfWealth));
}
export function partyOtherSourcesOfWealthFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyOtherSourcesOfWealth$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyOtherSourcesOfWealth' from JSON`);
}
/** @internal */
export const PartyNaturalPersonFdd$inboundSchema = z.object({
    customer_non_referral_source: z.string().optional(),
    customer_referral_source: z.nullable(z.lazy(() => PartyCustomerReferralSource$inboundSchema)).optional(),
    employment_and_employer_description: z.string().optional(),
    negative_news: z.nullable(z.lazy(() => PartyLegalNaturalPersonNegativeNews$inboundSchema)).optional(),
    other_sources_of_wealth: z.nullable(z.lazy(() => PartyOtherSourcesOfWealth$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "customer_non_referral_source": "customerNonReferralSource",
        "customer_referral_source": "customerReferralSource",
        "employment_and_employer_description": "employmentAndEmployerDescription",
        "negative_news": "negativeNews",
        "other_sources_of_wealth": "otherSourcesOfWealth",
    });
});
/** @internal */
export const PartyNaturalPersonFdd$outboundSchema = z.object({
    customerNonReferralSource: z.string().optional(),
    customerReferralSource: z.nullable(z.lazy(() => PartyCustomerReferralSource$outboundSchema)).optional(),
    employmentAndEmployerDescription: z.string().optional(),
    negativeNews: z.nullable(z.lazy(() => PartyLegalNaturalPersonNegativeNews$outboundSchema)).optional(),
    otherSourcesOfWealth: z.nullable(z.lazy(() => PartyOtherSourcesOfWealth$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        customerNonReferralSource: "customer_non_referral_source",
        customerReferralSource: "customer_referral_source",
        employmentAndEmployerDescription: "employment_and_employer_description",
        negativeNews: "negative_news",
        otherSourcesOfWealth: "other_sources_of_wealth",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyNaturalPersonFdd$;
(function (PartyNaturalPersonFdd$) {
    /** @deprecated use `PartyNaturalPersonFdd$inboundSchema` instead. */
    PartyNaturalPersonFdd$.inboundSchema = PartyNaturalPersonFdd$inboundSchema;
    /** @deprecated use `PartyNaturalPersonFdd$outboundSchema` instead. */
    PartyNaturalPersonFdd$.outboundSchema = PartyNaturalPersonFdd$outboundSchema;
})(PartyNaturalPersonFdd$ || (PartyNaturalPersonFdd$ = {}));
export function partyNaturalPersonFddToJSON(partyNaturalPersonFdd) {
    return JSON.stringify(PartyNaturalPersonFdd$outboundSchema.parse(partyNaturalPersonFdd));
}
export function partyNaturalPersonFddFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyNaturalPersonFdd$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyNaturalPersonFdd' from JSON`);
}
/** @internal */
export const PartyResidencyStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyResidencyStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyResidencyStatus$outboundSchema = z.union([
    z.nativeEnum(PartyResidencyStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyResidencyStatus$;
(function (PartyResidencyStatus$) {
    /** @deprecated use `PartyResidencyStatus$inboundSchema` instead. */
    PartyResidencyStatus$.inboundSchema = PartyResidencyStatus$inboundSchema;
    /** @deprecated use `PartyResidencyStatus$outboundSchema` instead. */
    PartyResidencyStatus$.outboundSchema = PartyResidencyStatus$outboundSchema;
})(PartyResidencyStatus$ || (PartyResidencyStatus$ = {}));
/** @internal */
export const PartyNonCitizenResidency$inboundSchema = z.object({
    residency_status: PartyResidencyStatus$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "residency_status": "residencyStatus",
    });
});
/** @internal */
export const PartyNonCitizenResidency$outboundSchema = z.object({
    residencyStatus: PartyResidencyStatus$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        residencyStatus: "residency_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyNonCitizenResidency$;
(function (PartyNonCitizenResidency$) {
    /** @deprecated use `PartyNonCitizenResidency$inboundSchema` instead. */
    PartyNonCitizenResidency$.inboundSchema = PartyNonCitizenResidency$inboundSchema;
    /** @deprecated use `PartyNonCitizenResidency$outboundSchema` instead. */
    PartyNonCitizenResidency$.outboundSchema = PartyNonCitizenResidency$outboundSchema;
})(PartyNonCitizenResidency$ || (PartyNonCitizenResidency$ = {}));
export function partyNonCitizenResidencyToJSON(partyNonCitizenResidency) {
    return JSON.stringify(PartyNonCitizenResidency$outboundSchema.parse(partyNonCitizenResidency));
}
export function partyNonCitizenResidencyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyNonCitizenResidency$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyNonCitizenResidency' from JSON`);
}
/** @internal */
export const PartyPersonalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const PartyPersonalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyPersonalAddress$;
(function (PartyPersonalAddress$) {
    /** @deprecated use `PartyPersonalAddress$inboundSchema` instead. */
    PartyPersonalAddress$.inboundSchema = PartyPersonalAddress$inboundSchema;
    /** @deprecated use `PartyPersonalAddress$outboundSchema` instead. */
    PartyPersonalAddress$.outboundSchema = PartyPersonalAddress$outboundSchema;
})(PartyPersonalAddress$ || (PartyPersonalAddress$ = {}));
export function partyPersonalAddressToJSON(partyPersonalAddress) {
    return JSON.stringify(PartyPersonalAddress$outboundSchema.parse(partyPersonalAddress));
}
export function partyPersonalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyPersonalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyPersonalAddress' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonTaxIdType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonTaxIdType$;
(function (PartyLegalNaturalPersonTaxIdType$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxIdType$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxIdType$.inboundSchema = PartyLegalNaturalPersonTaxIdType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxIdType$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxIdType$.outboundSchema = PartyLegalNaturalPersonTaxIdType$outboundSchema;
})(PartyLegalNaturalPersonTaxIdType$ || (PartyLegalNaturalPersonTaxIdType$ = {}));
/** @internal */
export const PartyLegalNaturalPersonCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyLegalNaturalPersonCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonCNoticeDate$;
(function (PartyLegalNaturalPersonCNoticeDate$) {
    /** @deprecated use `PartyLegalNaturalPersonCNoticeDate$inboundSchema` instead. */
    PartyLegalNaturalPersonCNoticeDate$.inboundSchema = PartyLegalNaturalPersonCNoticeDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonCNoticeDate$outboundSchema` instead. */
    PartyLegalNaturalPersonCNoticeDate$.outboundSchema = PartyLegalNaturalPersonCNoticeDate$outboundSchema;
})(PartyLegalNaturalPersonCNoticeDate$ || (PartyLegalNaturalPersonCNoticeDate$ = {}));
export function partyLegalNaturalPersonCNoticeDateToJSON(partyLegalNaturalPersonCNoticeDate) {
    return JSON.stringify(PartyLegalNaturalPersonCNoticeDate$outboundSchema.parse(partyLegalNaturalPersonCNoticeDate));
}
export function partyLegalNaturalPersonCNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonCNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonCNoticeDate' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonFederalTaxClassification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonFederalTaxClassification$;
(function (PartyLegalNaturalPersonFederalTaxClassification$) {
    /** @deprecated use `PartyLegalNaturalPersonFederalTaxClassification$inboundSchema` instead. */
    PartyLegalNaturalPersonFederalTaxClassification$.inboundSchema = PartyLegalNaturalPersonFederalTaxClassification$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonFederalTaxClassification$outboundSchema` instead. */
    PartyLegalNaturalPersonFederalTaxClassification$.outboundSchema = PartyLegalNaturalPersonFederalTaxClassification$outboundSchema;
})(PartyLegalNaturalPersonFederalTaxClassification$ || (PartyLegalNaturalPersonFederalTaxClassification$ = {}));
/** @internal */
export const PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonFirstBNoticeDate$;
(function (PartyLegalNaturalPersonFirstBNoticeDate$) {
    /** @deprecated use `PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema` instead. */
    PartyLegalNaturalPersonFirstBNoticeDate$.inboundSchema = PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema` instead. */
    PartyLegalNaturalPersonFirstBNoticeDate$.outboundSchema = PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema;
})(PartyLegalNaturalPersonFirstBNoticeDate$ || (PartyLegalNaturalPersonFirstBNoticeDate$ = {}));
export function partyLegalNaturalPersonFirstBNoticeDateToJSON(partyLegalNaturalPersonFirstBNoticeDate) {
    return JSON.stringify(PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema.parse(partyLegalNaturalPersonFirstBNoticeDate));
}
export function partyLegalNaturalPersonFirstBNoticeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonFirstBNoticeDate' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonIrsFormType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonIrsFormType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonIrsFormType$;
(function (PartyLegalNaturalPersonIrsFormType$) {
    /** @deprecated use `PartyLegalNaturalPersonIrsFormType$inboundSchema` instead. */
    PartyLegalNaturalPersonIrsFormType$.inboundSchema = PartyLegalNaturalPersonIrsFormType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonIrsFormType$outboundSchema` instead. */
    PartyLegalNaturalPersonIrsFormType$.outboundSchema = PartyLegalNaturalPersonIrsFormType$outboundSchema;
})(PartyLegalNaturalPersonIrsFormType$ || (PartyLegalNaturalPersonIrsFormType$ = {}));
/** @internal */
export const PartyLegalNaturalPersonReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonReportingEligibility),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonReportingEligibility$;
(function (PartyLegalNaturalPersonReportingEligibility$) {
    /** @deprecated use `PartyLegalNaturalPersonReportingEligibility$inboundSchema` instead. */
    PartyLegalNaturalPersonReportingEligibility$.inboundSchema = PartyLegalNaturalPersonReportingEligibility$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonReportingEligibility$outboundSchema` instead. */
    PartyLegalNaturalPersonReportingEligibility$.outboundSchema = PartyLegalNaturalPersonReportingEligibility$outboundSchema;
})(PartyLegalNaturalPersonReportingEligibility$ || (PartyLegalNaturalPersonReportingEligibility$ = {}));
/** @internal */
export const PartyLegalNaturalPersonTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const PartyLegalNaturalPersonTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonTaxCertificationDate$;
(function (PartyLegalNaturalPersonTaxCertificationDate$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxCertificationDate$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxCertificationDate$.inboundSchema = PartyLegalNaturalPersonTaxCertificationDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxCertificationDate$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxCertificationDate$.outboundSchema = PartyLegalNaturalPersonTaxCertificationDate$outboundSchema;
})(PartyLegalNaturalPersonTaxCertificationDate$ || (PartyLegalNaturalPersonTaxCertificationDate$ = {}));
export function partyLegalNaturalPersonTaxCertificationDateToJSON(partyLegalNaturalPersonTaxCertificationDate) {
    return JSON.stringify(PartyLegalNaturalPersonTaxCertificationDate$outboundSchema.parse(partyLegalNaturalPersonTaxCertificationDate));
}
export function partyLegalNaturalPersonTaxCertificationDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonTaxCertificationDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonTaxCertificationDate' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonTaxpayerCertificationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonTaxpayerCertificationState$;
(function (PartyLegalNaturalPersonTaxpayerCertificationState$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxpayerCertificationState$.inboundSchema = PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxpayerCertificationState$.outboundSchema = PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema;
})(PartyLegalNaturalPersonTaxpayerCertificationState$ || (PartyLegalNaturalPersonTaxpayerCertificationState$ = {}));
/** @internal */
export const PartyLegalNaturalPersonUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonUsTinStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonUsTinStatus$;
(function (PartyLegalNaturalPersonUsTinStatus$) {
    /** @deprecated use `PartyLegalNaturalPersonUsTinStatus$inboundSchema` instead. */
    PartyLegalNaturalPersonUsTinStatus$.inboundSchema = PartyLegalNaturalPersonUsTinStatus$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonUsTinStatus$outboundSchema` instead. */
    PartyLegalNaturalPersonUsTinStatus$.outboundSchema = PartyLegalNaturalPersonUsTinStatus$outboundSchema;
})(PartyLegalNaturalPersonUsTinStatus$ || (PartyLegalNaturalPersonUsTinStatus$ = {}));
/** @internal */
export const PartyLegalNaturalPersonWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonWithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyLegalNaturalPersonWithholdingState$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonWithholdingState$;
(function (PartyLegalNaturalPersonWithholdingState$) {
    /** @deprecated use `PartyLegalNaturalPersonWithholdingState$inboundSchema` instead. */
    PartyLegalNaturalPersonWithholdingState$.inboundSchema = PartyLegalNaturalPersonWithholdingState$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonWithholdingState$outboundSchema` instead. */
    PartyLegalNaturalPersonWithholdingState$.outboundSchema = PartyLegalNaturalPersonWithholdingState$outboundSchema;
})(PartyLegalNaturalPersonWithholdingState$ || (PartyLegalNaturalPersonWithholdingState$ = {}));
/** @internal */
export const PartyLegalNaturalPersonTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => PartyLegalNaturalPersonCNoticeDate$inboundSchema)).optional(),
    federal_tax_classification: PartyLegalNaturalPersonFederalTaxClassification$inboundSchema.optional(),
    first_b_notice_date: z.nullable(z.lazy(() => PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: PartyLegalNaturalPersonIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: PartyLegalNaturalPersonReportingEligibility$inboundSchema.optional(),
    tax_certification_date: z.nullable(z.lazy(() => PartyLegalNaturalPersonTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema.optional(),
    us_tin_status: PartyLegalNaturalPersonUsTinStatus$inboundSchema.optional(),
    withholding_state: PartyLegalNaturalPersonWithholdingState$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
export const PartyLegalNaturalPersonTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => PartyLegalNaturalPersonCNoticeDate$outboundSchema)).optional(),
    federalTaxClassification: PartyLegalNaturalPersonFederalTaxClassification$outboundSchema.optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: PartyLegalNaturalPersonIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: PartyLegalNaturalPersonReportingEligibility$outboundSchema.optional(),
    taxCertificationDate: z.nullable(z.lazy(() => PartyLegalNaturalPersonTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema.optional(),
    usTinStatus: PartyLegalNaturalPersonUsTinStatus$outboundSchema.optional(),
    withholdingState: PartyLegalNaturalPersonWithholdingState$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPersonTaxProfile$;
(function (PartyLegalNaturalPersonTaxProfile$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxProfile$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxProfile$.inboundSchema = PartyLegalNaturalPersonTaxProfile$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxProfile$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxProfile$.outboundSchema = PartyLegalNaturalPersonTaxProfile$outboundSchema;
})(PartyLegalNaturalPersonTaxProfile$ || (PartyLegalNaturalPersonTaxProfile$ = {}));
export function partyLegalNaturalPersonTaxProfileToJSON(partyLegalNaturalPersonTaxProfile) {
    return JSON.stringify(PartyLegalNaturalPersonTaxProfile$outboundSchema.parse(partyLegalNaturalPersonTaxProfile));
}
export function partyLegalNaturalPersonTaxProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPersonTaxProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPersonTaxProfile' from JSON`);
}
/** @internal */
export const PartyLegalNaturalPerson$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: z.nullable(z.lazy(() => PartyBirthDate$inboundSchema)).optional(),
    citizenship_countries: z.array(z.string()).optional(),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string().optional(),
    custodian_employee: z.boolean().optional(),
    customer_identification_id: z.string().optional(),
    death_date: z.nullable(z.lazy(() => PartyDeathDate$inboundSchema)).optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => PartyEmployment$inboundSchema))
        .optional(),
    family_name: z.string().optional(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: z.nullable(z.lazy(() => PartyForeignIdentification$inboundSchema)).optional(),
    given_name: z.string().optional(),
    global_person_id: z.string().optional(),
    identity_verification_result: z.nullable(z.lazy(() => PartyIdentityVerificationResult$inboundSchema)).optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => PartyLegalNaturalPersonLargeTrader$inboundSchema)).optional(),
    legal_natural_person_id: z.string().optional(),
    marital_status: PartyMaritalStatus$inboundSchema.optional(),
    middle_names: z.string().optional(),
    name: z.string().optional(),
    name_suffix: PartyNameSuffix$inboundSchema.optional(),
    natural_person_fdd: z.nullable(z.lazy(() => PartyNaturalPersonFdd$inboundSchema)).optional(),
    non_citizen_residency: z.nullable(z.lazy(() => PartyNonCitizenResidency$inboundSchema)).optional(),
    personal_address: z.nullable(z.lazy(() => PartyPersonalAddress$inboundSchema))
        .optional(),
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: PartyLegalNaturalPersonTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => PartyLegalNaturalPersonTaxProfile$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "custodian_employee": "custodianEmployee",
        "customer_identification_id": "customerIdentificationId",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "global_person_id": "globalPersonId",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_natural_person_id": "legalNaturalPersonId",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const PartyLegalNaturalPerson$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: z.nullable(z.lazy(() => PartyBirthDate$outboundSchema)).optional(),
    citizenshipCountries: z.array(z.string()).optional(),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string().optional(),
    custodianEmployee: z.boolean().optional(),
    customerIdentificationId: z.string().optional(),
    deathDate: z.nullable(z.lazy(() => PartyDeathDate$outboundSchema)).optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => PartyEmployment$outboundSchema))
        .optional(),
    familyName: z.string().optional(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: z.nullable(z.lazy(() => PartyForeignIdentification$outboundSchema)).optional(),
    givenName: z.string().optional(),
    globalPersonId: z.string().optional(),
    identityVerificationResult: z.nullable(z.lazy(() => PartyIdentityVerificationResult$outboundSchema)).optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => PartyLegalNaturalPersonLargeTrader$outboundSchema)).optional(),
    legalNaturalPersonId: z.string().optional(),
    maritalStatus: PartyMaritalStatus$outboundSchema.optional(),
    middleNames: z.string().optional(),
    name: z.string().optional(),
    nameSuffix: PartyNameSuffix$outboundSchema.optional(),
    naturalPersonFdd: z.nullable(z.lazy(() => PartyNaturalPersonFdd$outboundSchema)).optional(),
    nonCitizenResidency: z.nullable(z.lazy(() => PartyNonCitizenResidency$outboundSchema)).optional(),
    personalAddress: z.nullable(z.lazy(() => PartyPersonalAddress$outboundSchema))
        .optional(),
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: PartyLegalNaturalPersonTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => PartyLegalNaturalPersonTaxProfile$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        custodianEmployee: "custodian_employee",
        customerIdentificationId: "customer_identification_id",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        globalPersonId: "global_person_id",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalNaturalPersonId: "legal_natural_person_id",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyLegalNaturalPerson$;
(function (PartyLegalNaturalPerson$) {
    /** @deprecated use `PartyLegalNaturalPerson$inboundSchema` instead. */
    PartyLegalNaturalPerson$.inboundSchema = PartyLegalNaturalPerson$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPerson$outboundSchema` instead. */
    PartyLegalNaturalPerson$.outboundSchema = PartyLegalNaturalPerson$outboundSchema;
})(PartyLegalNaturalPerson$ || (PartyLegalNaturalPerson$ = {}));
export function partyLegalNaturalPersonToJSON(partyLegalNaturalPerson) {
    return JSON.stringify(PartyLegalNaturalPerson$outboundSchema.parse(partyLegalNaturalPerson));
}
export function partyLegalNaturalPersonFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyLegalNaturalPerson$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyLegalNaturalPerson' from JSON`);
}
/** @internal */
export const PartyMailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const PartyMailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyMailingAddress$;
(function (PartyMailingAddress$) {
    /** @deprecated use `PartyMailingAddress$inboundSchema` instead. */
    PartyMailingAddress$.inboundSchema = PartyMailingAddress$inboundSchema;
    /** @deprecated use `PartyMailingAddress$outboundSchema` instead. */
    PartyMailingAddress$.outboundSchema = PartyMailingAddress$outboundSchema;
})(PartyMailingAddress$ || (PartyMailingAddress$ = {}));
export function partyMailingAddressToJSON(partyMailingAddress) {
    return JSON.stringify(PartyMailingAddress$outboundSchema.parse(partyMailingAddress));
}
export function partyMailingAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyMailingAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyMailingAddress' from JSON`);
}
/** @internal */
export const PartyShortCode$inboundSchema = z.object({
    number: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "region_code": "regionCode",
    });
});
/** @internal */
export const PartyShortCode$outboundSchema = z.object({
    number: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyShortCode$;
(function (PartyShortCode$) {
    /** @deprecated use `PartyShortCode$inboundSchema` instead. */
    PartyShortCode$.inboundSchema = PartyShortCode$inboundSchema;
    /** @deprecated use `PartyShortCode$outboundSchema` instead. */
    PartyShortCode$.outboundSchema = PartyShortCode$outboundSchema;
})(PartyShortCode$ || (PartyShortCode$ = {}));
export function partyShortCodeToJSON(partyShortCode) {
    return JSON.stringify(PartyShortCode$outboundSchema.parse(partyShortCode));
}
export function partyShortCodeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyShortCode$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyShortCode' from JSON`);
}
/** @internal */
export const PartyPhoneNumber$inboundSchema = z.object({
    e164_number: z.string().optional(),
    extension: z.string().optional(),
    short_code: z.nullable(z.lazy(() => PartyShortCode$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "e164_number": "e164Number",
        "short_code": "shortCode",
    });
});
/** @internal */
export const PartyPhoneNumber$outboundSchema = z.object({
    e164Number: z.string().optional(),
    extension: z.string().optional(),
    shortCode: z.nullable(z.lazy(() => PartyShortCode$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        e164Number: "e164_number",
        shortCode: "short_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyPhoneNumber$;
(function (PartyPhoneNumber$) {
    /** @deprecated use `PartyPhoneNumber$inboundSchema` instead. */
    PartyPhoneNumber$.inboundSchema = PartyPhoneNumber$inboundSchema;
    /** @deprecated use `PartyPhoneNumber$outboundSchema` instead. */
    PartyPhoneNumber$.outboundSchema = PartyPhoneNumber$outboundSchema;
})(PartyPhoneNumber$ || (PartyPhoneNumber$ = {}));
export function partyPhoneNumberToJSON(partyPhoneNumber) {
    return JSON.stringify(PartyPhoneNumber$outboundSchema.parse(partyPhoneNumber));
}
export function partyPhoneNumberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyPhoneNumber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyPhoneNumber' from JSON`);
}
/** @internal */
export const PartyProspectusDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyProspectusDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyProspectusDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyProspectusDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyProspectusDeliveryPreference$;
(function (PartyProspectusDeliveryPreference$) {
    /** @deprecated use `PartyProspectusDeliveryPreference$inboundSchema` instead. */
    PartyProspectusDeliveryPreference$.inboundSchema = PartyProspectusDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyProspectusDeliveryPreference$outboundSchema` instead. */
    PartyProspectusDeliveryPreference$.outboundSchema = PartyProspectusDeliveryPreference$outboundSchema;
})(PartyProspectusDeliveryPreference$ || (PartyProspectusDeliveryPreference$ = {}));
/** @internal */
export const PartyProxyDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyProxyDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyProxyDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyProxyDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyProxyDeliveryPreference$;
(function (PartyProxyDeliveryPreference$) {
    /** @deprecated use `PartyProxyDeliveryPreference$inboundSchema` instead. */
    PartyProxyDeliveryPreference$.inboundSchema = PartyProxyDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyProxyDeliveryPreference$outboundSchema` instead. */
    PartyProxyDeliveryPreference$.outboundSchema = PartyProxyDeliveryPreference$outboundSchema;
})(PartyProxyDeliveryPreference$ || (PartyProxyDeliveryPreference$ = {}));
/** @internal */
export const PartyRelationType$inboundSchema = z
    .union([
    z.nativeEnum(PartyRelationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRelationType$outboundSchema = z.union([
    z.nativeEnum(PartyRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRelationType$;
(function (PartyRelationType$) {
    /** @deprecated use `PartyRelationType$inboundSchema` instead. */
    PartyRelationType$.inboundSchema = PartyRelationType$inboundSchema;
    /** @deprecated use `PartyRelationType$outboundSchema` instead. */
    PartyRelationType$.outboundSchema = PartyRelationType$outboundSchema;
})(PartyRelationType$ || (PartyRelationType$ = {}));
/** @internal */
export const PartyStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyStatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyStatementDeliveryPreference$;
(function (PartyStatementDeliveryPreference$) {
    /** @deprecated use `PartyStatementDeliveryPreference$inboundSchema` instead. */
    PartyStatementDeliveryPreference$.inboundSchema = PartyStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyStatementDeliveryPreference$outboundSchema` instead. */
    PartyStatementDeliveryPreference$.outboundSchema = PartyStatementDeliveryPreference$outboundSchema;
})(PartyStatementDeliveryPreference$ || (PartyStatementDeliveryPreference$ = {}));
/** @internal */
export const PartyTaxDocumentDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxDocumentDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyTaxDocumentDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyTaxDocumentDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTaxDocumentDeliveryPreference$;
(function (PartyTaxDocumentDeliveryPreference$) {
    /** @deprecated use `PartyTaxDocumentDeliveryPreference$inboundSchema` instead. */
    PartyTaxDocumentDeliveryPreference$.inboundSchema = PartyTaxDocumentDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyTaxDocumentDeliveryPreference$outboundSchema` instead. */
    PartyTaxDocumentDeliveryPreference$.outboundSchema = PartyTaxDocumentDeliveryPreference$outboundSchema;
})(PartyTaxDocumentDeliveryPreference$ || (PartyTaxDocumentDeliveryPreference$ = {}));
/** @internal */
export const PartyTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyTradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyTradeConfirmationDeliveryPreference$;
(function (PartyTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `PartyTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    PartyTradeConfirmationDeliveryPreference$.inboundSchema = PartyTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    PartyTradeConfirmationDeliveryPreference$.outboundSchema = PartyTradeConfirmationDeliveryPreference$outboundSchema;
})(PartyTradeConfirmationDeliveryPreference$ || (PartyTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const Party$inboundSchema = z
    .object({
    email_address: z.string().optional(),
    legal_entity: z.nullable(z.lazy(() => PartyLegalEntity$inboundSchema))
        .optional(),
    legal_natural_person: z.nullable(z.lazy(() => PartyLegalNaturalPerson$inboundSchema)).optional(),
    mailing_address: z.nullable(z.lazy(() => PartyMailingAddress$inboundSchema))
        .optional(),
    name: z.string().optional(),
    party_id: z.string().optional(),
    phone_number: z.nullable(z.lazy(() => PartyPhoneNumber$inboundSchema))
        .optional(),
    prospectus_delivery_preference: PartyProspectusDeliveryPreference$inboundSchema.optional(),
    proxy_delivery_preference: PartyProxyDeliveryPreference$inboundSchema
        .optional(),
    relation_type: PartyRelationType$inboundSchema.optional(),
    statement_delivery_preference: PartyStatementDeliveryPreference$inboundSchema.optional(),
    tax_document_delivery_preference: PartyTaxDocumentDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: PartyTradeConfirmationDeliveryPreference$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "email_address": "emailAddress",
        "legal_entity": "legalEntity",
        "legal_natural_person": "legalNaturalPerson",
        "mailing_address": "mailingAddress",
        "party_id": "partyId",
        "phone_number": "phoneNumber",
        "prospectus_delivery_preference": "prospectusDeliveryPreference",
        "proxy_delivery_preference": "proxyDeliveryPreference",
        "relation_type": "relationType",
        "statement_delivery_preference": "statementDeliveryPreference",
        "tax_document_delivery_preference": "taxDocumentDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const Party$outboundSchema = z.object({
    emailAddress: z.string().optional(),
    legalEntity: z.nullable(z.lazy(() => PartyLegalEntity$outboundSchema))
        .optional(),
    legalNaturalPerson: z.nullable(z.lazy(() => PartyLegalNaturalPerson$outboundSchema)).optional(),
    mailingAddress: z.nullable(z.lazy(() => PartyMailingAddress$outboundSchema))
        .optional(),
    name: z.string().optional(),
    partyId: z.string().optional(),
    phoneNumber: z.nullable(z.lazy(() => PartyPhoneNumber$outboundSchema))
        .optional(),
    prospectusDeliveryPreference: PartyProspectusDeliveryPreference$outboundSchema
        .optional(),
    proxyDeliveryPreference: PartyProxyDeliveryPreference$outboundSchema
        .optional(),
    relationType: PartyRelationType$outboundSchema.optional(),
    statementDeliveryPreference: PartyStatementDeliveryPreference$outboundSchema
        .optional(),
    taxDocumentDeliveryPreference: PartyTaxDocumentDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: PartyTradeConfirmationDeliveryPreference$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        emailAddress: "email_address",
        legalEntity: "legal_entity",
        legalNaturalPerson: "legal_natural_person",
        mailingAddress: "mailing_address",
        partyId: "party_id",
        phoneNumber: "phone_number",
        prospectusDeliveryPreference: "prospectus_delivery_preference",
        proxyDeliveryPreference: "proxy_delivery_preference",
        relationType: "relation_type",
        statementDeliveryPreference: "statement_delivery_preference",
        taxDocumentDeliveryPreference: "tax_document_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Party$;
(function (Party$) {
    /** @deprecated use `Party$inboundSchema` instead. */
    Party$.inboundSchema = Party$inboundSchema;
    /** @deprecated use `Party$outboundSchema` instead. */
    Party$.outboundSchema = Party$outboundSchema;
})(Party$ || (Party$ = {}));
export function partyToJSON(party) {
    return JSON.stringify(Party$outboundSchema.parse(party));
}
export function partyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Party$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Party' from JSON`);
}
//# sourceMappingURL=party.js.map