/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of retirement contribution.
 */
export var WireDepositType;
(function (WireDepositType) {
    WireDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    WireDepositType["Regular"] = "REGULAR";
    WireDepositType["Employee"] = "EMPLOYEE";
    WireDepositType["Employer"] = "EMPLOYER";
    WireDepositType["Recharacterization"] = "RECHARACTERIZATION";
    WireDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    WireDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    WireDepositType["Transfer"] = "TRANSFER";
    WireDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    WireDepositType["Conversion"] = "CONVERSION";
    WireDepositType["Repayment"] = "REPAYMENT";
    WireDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(WireDepositType || (WireDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var WireDepositStateState;
(function (WireDepositStateState) {
    WireDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    WireDepositStateState["Processing"] = "PROCESSING";
    WireDepositStateState["PendingReview"] = "PENDING_REVIEW";
    WireDepositStateState["Posted"] = "POSTED";
    WireDepositStateState["Completed"] = "COMPLETED";
    WireDepositStateState["Rejected"] = "REJECTED";
    WireDepositStateState["Canceled"] = "CANCELED";
    WireDepositStateState["Returned"] = "RETURNED";
    WireDepositStateState["Postponed"] = "POSTPONED";
})(WireDepositStateState || (WireDepositStateState = {}));
/** @internal */
export const WireDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositAmount$;
(function (WireDepositAmount$) {
    /** @deprecated use `WireDepositAmount$inboundSchema` instead. */
    WireDepositAmount$.inboundSchema = WireDepositAmount$inboundSchema;
    /** @deprecated use `WireDepositAmount$outboundSchema` instead. */
    WireDepositAmount$.outboundSchema = WireDepositAmount$outboundSchema;
})(WireDepositAmount$ || (WireDepositAmount$ = {}));
export function wireDepositAmountToJSON(wireDepositAmount) {
    return JSON.stringify(WireDepositAmount$outboundSchema.parse(wireDepositAmount));
}
export function wireDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDepositAmount' from JSON`);
}
/** @internal */
export const WireDepositType$inboundSchema = z
    .union([
    z.nativeEnum(WireDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WireDepositType$outboundSchema = z.union([
    z.nativeEnum(WireDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositType$;
(function (WireDepositType$) {
    /** @deprecated use `WireDepositType$inboundSchema` instead. */
    WireDepositType$.inboundSchema = WireDepositType$inboundSchema;
    /** @deprecated use `WireDepositType$outboundSchema` instead. */
    WireDepositType$.outboundSchema = WireDepositType$outboundSchema;
})(WireDepositType$ || (WireDepositType$ = {}));
/** @internal */
export const WireDepositRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: WireDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const WireDepositRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: WireDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositRetirementContribution$;
(function (WireDepositRetirementContribution$) {
    /** @deprecated use `WireDepositRetirementContribution$inboundSchema` instead. */
    WireDepositRetirementContribution$.inboundSchema = WireDepositRetirementContribution$inboundSchema;
    /** @deprecated use `WireDepositRetirementContribution$outboundSchema` instead. */
    WireDepositRetirementContribution$.outboundSchema = WireDepositRetirementContribution$outboundSchema;
})(WireDepositRetirementContribution$ || (WireDepositRetirementContribution$ = {}));
export function wireDepositRetirementContributionToJSON(wireDepositRetirementContribution) {
    return JSON.stringify(WireDepositRetirementContribution$outboundSchema.parse(wireDepositRetirementContribution));
}
export function wireDepositRetirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDepositRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDepositRetirementContribution' from JSON`);
}
/** @internal */
export const WireDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(WireDepositStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WireDepositStateState$outboundSchema = z.union([
    z.nativeEnum(WireDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositStateState$;
(function (WireDepositStateState$) {
    /** @deprecated use `WireDepositStateState$inboundSchema` instead. */
    WireDepositStateState$.inboundSchema = WireDepositStateState$inboundSchema;
    /** @deprecated use `WireDepositStateState$outboundSchema` instead. */
    WireDepositStateState$.outboundSchema = WireDepositStateState$outboundSchema;
})(WireDepositStateState$ || (WireDepositStateState$ = {}));
/** @internal */
export const WireDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: WireDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const WireDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: WireDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositState$;
(function (WireDepositState$) {
    /** @deprecated use `WireDepositState$inboundSchema` instead. */
    WireDepositState$.inboundSchema = WireDepositState$inboundSchema;
    /** @deprecated use `WireDepositState$outboundSchema` instead. */
    WireDepositState$.outboundSchema = WireDepositState$outboundSchema;
})(WireDepositState$ || (WireDepositState$ = {}));
export function wireDepositStateToJSON(wireDepositState) {
    return JSON.stringify(WireDepositState$outboundSchema.parse(wireDepositState));
}
export function wireDepositStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDepositState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDepositState' from JSON`);
}
/** @internal */
export const WireDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireDepositAmount$inboundSchema)).optional(),
    bank_reference_id: z.string().optional(),
    fed_reference_number: z.string().optional(),
    name: z.string().optional(),
    retirement_contribution: z.nullable(z.lazy(() => WireDepositRetirementContribution$inboundSchema)).optional(),
    returned_wire_withdrawal: z.boolean().optional(),
    state: z.nullable(z.lazy(() => WireDepositState$inboundSchema)).optional(),
    wire_instructions: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "bank_reference_id": "bankReferenceId",
        "fed_reference_number": "fedReferenceNumber",
        "retirement_contribution": "retirementContribution",
        "returned_wire_withdrawal": "returnedWireWithdrawal",
        "wire_instructions": "wireInstructions",
    });
});
/** @internal */
export const WireDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireDepositAmount$outboundSchema)).optional(),
    bankReferenceId: z.string().optional(),
    fedReferenceNumber: z.string().optional(),
    name: z.string().optional(),
    retirementContribution: z.nullable(z.lazy(() => WireDepositRetirementContribution$outboundSchema)).optional(),
    returnedWireWithdrawal: z.boolean().optional(),
    state: z.nullable(z.lazy(() => WireDepositState$outboundSchema)).optional(),
    wireInstructions: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        bankReferenceId: "bank_reference_id",
        fedReferenceNumber: "fed_reference_number",
        retirementContribution: "retirement_contribution",
        returnedWireWithdrawal: "returned_wire_withdrawal",
        wireInstructions: "wire_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDeposit$;
(function (WireDeposit$) {
    /** @deprecated use `WireDeposit$inboundSchema` instead. */
    WireDeposit$.inboundSchema = WireDeposit$inboundSchema;
    /** @deprecated use `WireDeposit$outboundSchema` instead. */
    WireDeposit$.outboundSchema = WireDeposit$outboundSchema;
})(WireDeposit$ || (WireDeposit$ = {}));
export function wireDepositToJSON(wireDeposit) {
    return JSON.stringify(WireDeposit$outboundSchema.parse(wireDeposit));
}
export function wireDepositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDeposit' from JSON`);
}
//# sourceMappingURL=wiredeposit.js.map