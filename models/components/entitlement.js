/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * GRANTED if it was activated via an enrollment, SUSPENDED if a restriction has temporarily disabled it, or DENIED if it has never before been GRANTED
 */
export var EntitlementState;
(function (EntitlementState) {
    EntitlementState["EntitlementStateUnspecified"] = "ENTITLEMENT_STATE_UNSPECIFIED";
    EntitlementState["Granted"] = "GRANTED";
    EntitlementState["Suspended"] = "SUSPENDED";
    EntitlementState["Denied"] = "DENIED";
})(EntitlementState || (EntitlementState = {}));
/** @internal */
export const EntitlementState$inboundSchema = z
    .union([
    z.nativeEnum(EntitlementState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EntitlementState$outboundSchema = z.union([
    z.nativeEnum(EntitlementState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EntitlementState$;
(function (EntitlementState$) {
    /** @deprecated use `EntitlementState$inboundSchema` instead. */
    EntitlementState$.inboundSchema = EntitlementState$inboundSchema;
    /** @deprecated use `EntitlementState$outboundSchema` instead. */
    EntitlementState$.outboundSchema = EntitlementState$outboundSchema;
})(EntitlementState$ || (EntitlementState$ = {}));
/** @internal */
export const Entitlement$inboundSchema = z.object({
    display_name: z.string().optional(),
    entitlement_code: z.string().optional(),
    last_modified_reason: z.string().optional(),
    last_modified_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    parent_entitlements: z.array(z.string()).optional(),
    state: EntitlementState$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "display_name": "displayName",
        "entitlement_code": "entitlementCode",
        "last_modified_reason": "lastModifiedReason",
        "last_modified_time": "lastModifiedTime",
        "parent_entitlements": "parentEntitlements",
    });
});
/** @internal */
export const Entitlement$outboundSchema = z.object({
    displayName: z.string().optional(),
    entitlementCode: z.string().optional(),
    lastModifiedReason: z.string().optional(),
    lastModifiedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    parentEntitlements: z.array(z.string()).optional(),
    state: EntitlementState$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        displayName: "display_name",
        entitlementCode: "entitlement_code",
        lastModifiedReason: "last_modified_reason",
        lastModifiedTime: "last_modified_time",
        parentEntitlements: "parent_entitlements",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Entitlement$;
(function (Entitlement$) {
    /** @deprecated use `Entitlement$inboundSchema` instead. */
    Entitlement$.inboundSchema = Entitlement$inboundSchema;
    /** @deprecated use `Entitlement$outboundSchema` instead. */
    Entitlement$.outboundSchema = Entitlement$outboundSchema;
})(Entitlement$ || (Entitlement$ = {}));
export function entitlementToJSON(entitlement) {
    return JSON.stringify(Entitlement$outboundSchema.parse(entitlement));
}
export function entitlementFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Entitlement$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Entitlement' from JSON`);
}
//# sourceMappingURL=entitlement.js.map