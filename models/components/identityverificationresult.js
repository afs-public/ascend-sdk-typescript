/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const IdentityVerificationResult$inboundSchema = z.object({
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    customer_identification_id: z.string().optional(),
    document_ids: z.array(z.string()).optional(),
    external_vendor: z.string().optional(),
    identity_verification_passed: z.boolean().optional(),
    identity_verification_types: z.array(z.string()).optional(),
    provided_by: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "create_time": "createTime",
        "customer_identification_id": "customerIdentificationId",
        "document_ids": "documentIds",
        "external_vendor": "externalVendor",
        "identity_verification_passed": "identityVerificationPassed",
        "identity_verification_types": "identityVerificationTypes",
        "provided_by": "providedBy",
    });
});
/** @internal */
export const IdentityVerificationResult$outboundSchema = z.object({
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    customerIdentificationId: z.string().optional(),
    documentIds: z.array(z.string()).optional(),
    externalVendor: z.string().optional(),
    identityVerificationPassed: z.boolean().optional(),
    identityVerificationTypes: z.array(z.string()).optional(),
    providedBy: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        createTime: "create_time",
        customerIdentificationId: "customer_identification_id",
        documentIds: "document_ids",
        externalVendor: "external_vendor",
        identityVerificationPassed: "identity_verification_passed",
        identityVerificationTypes: "identity_verification_types",
        providedBy: "provided_by",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityVerificationResult$;
(function (IdentityVerificationResult$) {
    /** @deprecated use `IdentityVerificationResult$inboundSchema` instead. */
    IdentityVerificationResult$.inboundSchema = IdentityVerificationResult$inboundSchema;
    /** @deprecated use `IdentityVerificationResult$outboundSchema` instead. */
    IdentityVerificationResult$.outboundSchema = IdentityVerificationResult$outboundSchema;
})(IdentityVerificationResult$ || (IdentityVerificationResult$ = {}));
export function identityVerificationResultToJSON(identityVerificationResult) {
    return JSON.stringify(IdentityVerificationResult$outboundSchema.parse(identityVerificationResult));
}
export function identityVerificationResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IdentityVerificationResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IdentityVerificationResult' from JSON`);
}
//# sourceMappingURL=identityverificationresult.js.map