/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The calculation type of this price
 */
export var MarkPriceType;
(function (MarkPriceType) {
    MarkPriceType["PercentageOfPar"] = "PERCENTAGE_OF_PAR";
    MarkPriceType["DirtyPercentageOfPar"] = "DIRTY_PERCENTAGE_OF_PAR";
    MarkPriceType["YieldToWorst"] = "YIELD_TO_WORST";
    MarkPriceType["YieldToMaturity"] = "YIELD_TO_MATURITY";
})(MarkPriceType || (MarkPriceType = {}));
/** @internal */
export const MarkPricePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const MarkPricePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MarkPricePrice$;
(function (MarkPricePrice$) {
    /** @deprecated use `MarkPricePrice$inboundSchema` instead. */
    MarkPricePrice$.inboundSchema = MarkPricePrice$inboundSchema;
    /** @deprecated use `MarkPricePrice$outboundSchema` instead. */
    MarkPricePrice$.outboundSchema = MarkPricePrice$outboundSchema;
})(MarkPricePrice$ || (MarkPricePrice$ = {}));
export function markPricePriceToJSON(markPricePrice) {
    return JSON.stringify(MarkPricePrice$outboundSchema.parse(markPricePrice));
}
export function markPricePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MarkPricePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MarkPricePrice' from JSON`);
}
/** @internal */
export const MarkPriceType$inboundSchema = z
    .union([
    z.nativeEnum(MarkPriceType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MarkPriceType$outboundSchema = z.union([
    z.nativeEnum(MarkPriceType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MarkPriceType$;
(function (MarkPriceType$) {
    /** @deprecated use `MarkPriceType$inboundSchema` instead. */
    MarkPriceType$.inboundSchema = MarkPriceType$inboundSchema;
    /** @deprecated use `MarkPriceType$outboundSchema` instead. */
    MarkPriceType$.outboundSchema = MarkPriceType$outboundSchema;
})(MarkPriceType$ || (MarkPriceType$ = {}));
/** @internal */
export const MarkPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => MarkPricePrice$inboundSchema)).optional(),
    type: MarkPriceType$inboundSchema.optional(),
});
/** @internal */
export const MarkPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => MarkPricePrice$outboundSchema)).optional(),
    type: MarkPriceType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MarkPrice$;
(function (MarkPrice$) {
    /** @deprecated use `MarkPrice$inboundSchema` instead. */
    MarkPrice$.inboundSchema = MarkPrice$inboundSchema;
    /** @deprecated use `MarkPrice$outboundSchema` instead. */
    MarkPrice$.outboundSchema = MarkPrice$outboundSchema;
})(MarkPrice$ || (MarkPrice$ = {}));
export function markPriceToJSON(markPrice) {
    return JSON.stringify(MarkPrice$outboundSchema.parse(markPrice));
}
export function markPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MarkPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MarkPrice' from JSON`);
}
//# sourceMappingURL=markprice.js.map