/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
import { Execution$inboundSchema, Execution$outboundSchema, } from "./execution.js";
/**
 * Type of the asset being traded.
 */
export var BookingTradeAssetType;
(function (BookingTradeAssetType) {
    BookingTradeAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    BookingTradeAssetType["Equity"] = "EQUITY";
    BookingTradeAssetType["FixedIncome"] = "FIXED_INCOME";
})(BookingTradeAssetType || (BookingTradeAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var BookingTradeBrokerCapacity;
(function (BookingTradeBrokerCapacity) {
    BookingTradeBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    BookingTradeBrokerCapacity["Agency"] = "AGENCY";
    BookingTradeBrokerCapacity["Principal"] = "PRINCIPAL";
    BookingTradeBrokerCapacity["Mixed"] = "MIXED";
})(BookingTradeBrokerCapacity || (BookingTradeBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var BookingTradeIdentifierType;
(function (BookingTradeIdentifierType) {
    BookingTradeIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    BookingTradeIdentifierType["AssetId"] = "ASSET_ID";
    BookingTradeIdentifierType["Symbol"] = "SYMBOL";
    BookingTradeIdentifierType["Cusip"] = "CUSIP";
    BookingTradeIdentifierType["Isin"] = "ISIN";
})(BookingTradeIdentifierType || (BookingTradeIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var BookingTradeRouteType;
(function (BookingTradeRouteType) {
    BookingTradeRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    BookingTradeRouteType["Dma"] = "DMA";
    BookingTradeRouteType["Mngd"] = "MNGD";
    BookingTradeRouteType["Quik"] = "QUIK";
    BookingTradeRouteType["Algo"] = "ALGO";
    BookingTradeRouteType["Away"] = "AWAY";
    BookingTradeRouteType["Corr"] = "CORR";
    BookingTradeRouteType["Boats"] = "BOATS";
})(BookingTradeRouteType || (BookingTradeRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var BookingTradeSide;
(function (BookingTradeSide) {
    BookingTradeSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    BookingTradeSide["Buy"] = "BUY";
    BookingTradeSide["Sell"] = "SELL";
})(BookingTradeSide || (BookingTradeSide = {}));
/**
 * Side modifier for the trade.
 */
export var BookingTradeSideModifier;
(function (BookingTradeSideModifier) {
    BookingTradeSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    BookingTradeSideModifier["Short"] = "SHORT";
    BookingTradeSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    BookingTradeSideModifier["ShortCover"] = "SHORT_COVER";
    BookingTradeSideModifier["Open"] = "OPEN";
    BookingTradeSideModifier["Close"] = "CLOSE";
})(BookingTradeSideModifier || (BookingTradeSideModifier = {}));
export var BookingTradeSpecialInstructions;
(function (BookingTradeSpecialInstructions) {
    BookingTradeSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    BookingTradeSpecialInstructions["Rule144"] = "RULE_144";
    BookingTradeSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    BookingTradeSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    BookingTradeSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    BookingTradeSpecialInstructions["CoverShort"] = "COVER_SHORT";
    BookingTradeSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    BookingTradeSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    BookingTradeSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    BookingTradeSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    BookingTradeSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    BookingTradeSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    BookingTradeSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    BookingTradeSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    BookingTradeSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    BookingTradeSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    BookingTradeSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    BookingTradeSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    BookingTradeSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    BookingTradeSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    BookingTradeSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    BookingTradeSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    BookingTradeSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    BookingTradeSpecialInstructions["Solicited"] = "SOLICITED";
    BookingTradeSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    BookingTradeSpecialInstructions["XDividend"] = "X_DIVIDEND";
    BookingTradeSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    BookingTradeSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    BookingTradeSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    BookingTradeSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    BookingTradeSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    BookingTradeSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    BookingTradeSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    BookingTradeSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    BookingTradeSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    BookingTradeSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    BookingTradeSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    BookingTradeSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    BookingTradeSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    BookingTradeSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    BookingTradeSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    BookingTradeSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    BookingTradeSpecialInstructions["StockReward"] = "STOCK_REWARD";
    BookingTradeSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    BookingTradeSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    BookingTradeSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    BookingTradeSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(BookingTradeSpecialInstructions || (BookingTradeSpecialInstructions = {}));
/**
 * Exchange venue
 */
export var BookingTradeVenue;
(function (BookingTradeVenue) {
    BookingTradeVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    BookingTradeVenue["Amex"] = "AMEX";
    BookingTradeVenue["Arca"] = "ARCA";
    BookingTradeVenue["Bats"] = "BATS";
    BookingTradeVenue["BatsByx"] = "BATS_BYX";
    BookingTradeVenue["Boston"] = "BOSTON";
    BookingTradeVenue["Box"] = "BOX";
    BookingTradeVenue["Bzx"] = "BZX";
    BookingTradeVenue["C2"] = "C2";
    BookingTradeVenue["Cboe"] = "CBOE";
    BookingTradeVenue["Chicago"] = "CHICAGO";
    BookingTradeVenue["Cincinnati"] = "CINCINNATI";
    BookingTradeVenue["Edga"] = "EDGA";
    BookingTradeVenue["Edgx"] = "EDGX";
    BookingTradeVenue["Exclearing"] = "EXCLEARING";
    BookingTradeVenue["Iex"] = "IEX";
    BookingTradeVenue["Ise"] = "ISE";
    BookingTradeVenue["IseGemini"] = "ISE_GEMINI";
    BookingTradeVenue["Miax"] = "MIAX";
    BookingTradeVenue["Nasdaq"] = "NASDAQ";
    BookingTradeVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    BookingTradeVenue["Nyse"] = "NYSE";
    BookingTradeVenue["Phlx"] = "PHLX";
    BookingTradeVenue["Otc"] = "OTC";
    BookingTradeVenue["Qsr"] = "QSR";
})(BookingTradeVenue || (BookingTradeVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var BookingTradeWhenIssued;
(function (BookingTradeWhenIssued) {
    BookingTradeWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    BookingTradeWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    BookingTradeWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(BookingTradeWhenIssued || (BookingTradeWhenIssued = {}));
/** @internal */
export const BookingTradeAssetType$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeAssetType$outboundSchema = z.union([
    z.nativeEnum(BookingTradeAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeAssetType$;
(function (BookingTradeAssetType$) {
    /** @deprecated use `BookingTradeAssetType$inboundSchema` instead. */
    BookingTradeAssetType$.inboundSchema = BookingTradeAssetType$inboundSchema;
    /** @deprecated use `BookingTradeAssetType$outboundSchema` instead. */
    BookingTradeAssetType$.outboundSchema = BookingTradeAssetType$outboundSchema;
})(BookingTradeAssetType$ || (BookingTradeAssetType$ = {}));
/** @internal */
export const BookingTradeBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(BookingTradeBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeBrokerCapacity$;
(function (BookingTradeBrokerCapacity$) {
    /** @deprecated use `BookingTradeBrokerCapacity$inboundSchema` instead. */
    BookingTradeBrokerCapacity$.inboundSchema = BookingTradeBrokerCapacity$inboundSchema;
    /** @deprecated use `BookingTradeBrokerCapacity$outboundSchema` instead. */
    BookingTradeBrokerCapacity$.outboundSchema = BookingTradeBrokerCapacity$outboundSchema;
})(BookingTradeBrokerCapacity$ || (BookingTradeBrokerCapacity$ = {}));
/** @internal */
export const BookingTradeIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeIdentifierType$outboundSchema = z.union([
    z.nativeEnum(BookingTradeIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeIdentifierType$;
(function (BookingTradeIdentifierType$) {
    /** @deprecated use `BookingTradeIdentifierType$inboundSchema` instead. */
    BookingTradeIdentifierType$.inboundSchema = BookingTradeIdentifierType$inboundSchema;
    /** @deprecated use `BookingTradeIdentifierType$outboundSchema` instead. */
    BookingTradeIdentifierType$.outboundSchema = BookingTradeIdentifierType$outboundSchema;
})(BookingTradeIdentifierType$ || (BookingTradeIdentifierType$ = {}));
/** @internal */
export const LocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocalMarketTradeDate$;
(function (LocalMarketTradeDate$) {
    /** @deprecated use `LocalMarketTradeDate$inboundSchema` instead. */
    LocalMarketTradeDate$.inboundSchema = LocalMarketTradeDate$inboundSchema;
    /** @deprecated use `LocalMarketTradeDate$outboundSchema` instead. */
    LocalMarketTradeDate$.outboundSchema = LocalMarketTradeDate$outboundSchema;
})(LocalMarketTradeDate$ || (LocalMarketTradeDate$ = {}));
export function localMarketTradeDateToJSON(localMarketTradeDate) {
    return JSON.stringify(LocalMarketTradeDate$outboundSchema.parse(localMarketTradeDate));
}
export function localMarketTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LocalMarketTradeDate' from JSON`);
}
/** @internal */
export const BookingTradeRouteType$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeRouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeRouteType$outboundSchema = z.union([
    z.nativeEnum(BookingTradeRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeRouteType$;
(function (BookingTradeRouteType$) {
    /** @deprecated use `BookingTradeRouteType$inboundSchema` instead. */
    BookingTradeRouteType$.inboundSchema = BookingTradeRouteType$inboundSchema;
    /** @deprecated use `BookingTradeRouteType$outboundSchema` instead. */
    BookingTradeRouteType$.outboundSchema = BookingTradeRouteType$outboundSchema;
})(BookingTradeRouteType$ || (BookingTradeRouteType$ = {}));
/** @internal */
export const SettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const SettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SettlementDate$;
(function (SettlementDate$) {
    /** @deprecated use `SettlementDate$inboundSchema` instead. */
    SettlementDate$.inboundSchema = SettlementDate$inboundSchema;
    /** @deprecated use `SettlementDate$outboundSchema` instead. */
    SettlementDate$.outboundSchema = SettlementDate$outboundSchema;
})(SettlementDate$ || (SettlementDate$ = {}));
export function settlementDateToJSON(settlementDate) {
    return JSON.stringify(SettlementDate$outboundSchema.parse(settlementDate));
}
export function settlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SettlementDate' from JSON`);
}
/** @internal */
export const BookingTradeSide$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeSide$outboundSchema = z.union([
    z.nativeEnum(BookingTradeSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeSide$;
(function (BookingTradeSide$) {
    /** @deprecated use `BookingTradeSide$inboundSchema` instead. */
    BookingTradeSide$.inboundSchema = BookingTradeSide$inboundSchema;
    /** @deprecated use `BookingTradeSide$outboundSchema` instead. */
    BookingTradeSide$.outboundSchema = BookingTradeSide$outboundSchema;
})(BookingTradeSide$ || (BookingTradeSide$ = {}));
/** @internal */
export const BookingTradeSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeSideModifier$outboundSchema = z.union([
    z.nativeEnum(BookingTradeSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeSideModifier$;
(function (BookingTradeSideModifier$) {
    /** @deprecated use `BookingTradeSideModifier$inboundSchema` instead. */
    BookingTradeSideModifier$.inboundSchema = BookingTradeSideModifier$inboundSchema;
    /** @deprecated use `BookingTradeSideModifier$outboundSchema` instead. */
    BookingTradeSideModifier$.outboundSchema = BookingTradeSideModifier$outboundSchema;
})(BookingTradeSideModifier$ || (BookingTradeSideModifier$ = {}));
/** @internal */
export const BookingTradeSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(BookingTradeSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeSpecialInstructions$;
(function (BookingTradeSpecialInstructions$) {
    /** @deprecated use `BookingTradeSpecialInstructions$inboundSchema` instead. */
    BookingTradeSpecialInstructions$.inboundSchema = BookingTradeSpecialInstructions$inboundSchema;
    /** @deprecated use `BookingTradeSpecialInstructions$outboundSchema` instead. */
    BookingTradeSpecialInstructions$.outboundSchema = BookingTradeSpecialInstructions$outboundSchema;
})(BookingTradeSpecialInstructions$ || (BookingTradeSpecialInstructions$ = {}));
/** @internal */
export const BookingTradeVenue$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeVenue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeVenue$outboundSchema = z.union([
    z.nativeEnum(BookingTradeVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeVenue$;
(function (BookingTradeVenue$) {
    /** @deprecated use `BookingTradeVenue$inboundSchema` instead. */
    BookingTradeVenue$.inboundSchema = BookingTradeVenue$inboundSchema;
    /** @deprecated use `BookingTradeVenue$outboundSchema` instead. */
    BookingTradeVenue$.outboundSchema = BookingTradeVenue$outboundSchema;
})(BookingTradeVenue$ || (BookingTradeVenue$ = {}));
/** @internal */
export const BookingTradeWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(BookingTradeWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingTradeWhenIssued$outboundSchema = z.union([
    z.nativeEnum(BookingTradeWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTradeWhenIssued$;
(function (BookingTradeWhenIssued$) {
    /** @deprecated use `BookingTradeWhenIssued$inboundSchema` instead. */
    BookingTradeWhenIssued$.inboundSchema = BookingTradeWhenIssued$inboundSchema;
    /** @deprecated use `BookingTradeWhenIssued$outboundSchema` instead. */
    BookingTradeWhenIssued$.outboundSchema = BookingTradeWhenIssued$outboundSchema;
})(BookingTradeWhenIssued$ || (BookingTradeWhenIssued$ = {}));
/** @internal */
export const BookingTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: BookingTradeAssetType$inboundSchema.optional(),
    broker_capacity: BookingTradeBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(Execution$inboundSchema).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: BookingTradeIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => LocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: BookingTradeRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => SettlementDate$inboundSchema))
        .optional(),
    side: BookingTradeSide$inboundSchema.optional(),
    side_modifier: BookingTradeSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(BookingTradeSpecialInstructions$inboundSchema)
        .optional(),
    trade_id: z.string().optional(),
    venue: BookingTradeVenue$inboundSchema.optional(),
    when_issued: BookingTradeWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const BookingTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: BookingTradeAssetType$outboundSchema.optional(),
    brokerCapacity: BookingTradeBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(Execution$outboundSchema).optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: BookingTradeIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => LocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: BookingTradeRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => SettlementDate$outboundSchema))
        .optional(),
    side: BookingTradeSide$outboundSchema.optional(),
    sideModifier: BookingTradeSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(BookingTradeSpecialInstructions$outboundSchema)
        .optional(),
    tradeId: z.string().optional(),
    venue: BookingTradeVenue$outboundSchema.optional(),
    whenIssued: BookingTradeWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingTrade$;
(function (BookingTrade$) {
    /** @deprecated use `BookingTrade$inboundSchema` instead. */
    BookingTrade$.inboundSchema = BookingTrade$inboundSchema;
    /** @deprecated use `BookingTrade$outboundSchema` instead. */
    BookingTrade$.outboundSchema = BookingTrade$outboundSchema;
})(BookingTrade$ || (BookingTrade$ = {}));
export function bookingTradeToJSON(bookingTrade) {
    return JSON.stringify(BookingTrade$outboundSchema.parse(bookingTrade));
}
export function bookingTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingTrade' from JSON`);
}
//# sourceMappingURL=bookingtrade.js.map