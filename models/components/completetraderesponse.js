/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
import { Execution$inboundSchema, Execution$outboundSchema, } from "./execution.js";
/**
 * Type of the asset being traded.
 */
export var CompleteTradeResponseAssetType;
(function (CompleteTradeResponseAssetType) {
    CompleteTradeResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    CompleteTradeResponseAssetType["Equity"] = "EQUITY";
    CompleteTradeResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(CompleteTradeResponseAssetType || (CompleteTradeResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var CompleteTradeResponseBrokerCapacity;
(function (CompleteTradeResponseBrokerCapacity) {
    CompleteTradeResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    CompleteTradeResponseBrokerCapacity["Agency"] = "AGENCY";
    CompleteTradeResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    CompleteTradeResponseBrokerCapacity["Mixed"] = "MIXED";
})(CompleteTradeResponseBrokerCapacity || (CompleteTradeResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var CompleteTradeResponseIdentifierType;
(function (CompleteTradeResponseIdentifierType) {
    CompleteTradeResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    CompleteTradeResponseIdentifierType["AssetId"] = "ASSET_ID";
    CompleteTradeResponseIdentifierType["Symbol"] = "SYMBOL";
    CompleteTradeResponseIdentifierType["Cusip"] = "CUSIP";
    CompleteTradeResponseIdentifierType["Isin"] = "ISIN";
})(CompleteTradeResponseIdentifierType || (CompleteTradeResponseIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var CompleteTradeResponseRouteType;
(function (CompleteTradeResponseRouteType) {
    CompleteTradeResponseRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    CompleteTradeResponseRouteType["Dma"] = "DMA";
    CompleteTradeResponseRouteType["Mngd"] = "MNGD";
    CompleteTradeResponseRouteType["Quik"] = "QUIK";
    CompleteTradeResponseRouteType["Algo"] = "ALGO";
    CompleteTradeResponseRouteType["Away"] = "AWAY";
    CompleteTradeResponseRouteType["Corr"] = "CORR";
    CompleteTradeResponseRouteType["Boats"] = "BOATS";
})(CompleteTradeResponseRouteType || (CompleteTradeResponseRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var CompleteTradeResponseSide;
(function (CompleteTradeResponseSide) {
    CompleteTradeResponseSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    CompleteTradeResponseSide["Buy"] = "BUY";
    CompleteTradeResponseSide["Sell"] = "SELL";
})(CompleteTradeResponseSide || (CompleteTradeResponseSide = {}));
/**
 * Side modifier for the trade.
 */
export var CompleteTradeResponseSideModifier;
(function (CompleteTradeResponseSideModifier) {
    CompleteTradeResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    CompleteTradeResponseSideModifier["Short"] = "SHORT";
    CompleteTradeResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    CompleteTradeResponseSideModifier["ShortCover"] = "SHORT_COVER";
    CompleteTradeResponseSideModifier["Open"] = "OPEN";
    CompleteTradeResponseSideModifier["Close"] = "CLOSE";
})(CompleteTradeResponseSideModifier || (CompleteTradeResponseSideModifier = {}));
export var CompleteTradeResponseSpecialInstructions;
(function (CompleteTradeResponseSpecialInstructions) {
    CompleteTradeResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    CompleteTradeResponseSpecialInstructions["Rule144"] = "RULE_144";
    CompleteTradeResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    CompleteTradeResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    CompleteTradeResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    CompleteTradeResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    CompleteTradeResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    CompleteTradeResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    CompleteTradeResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    CompleteTradeResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    CompleteTradeResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    CompleteTradeResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    CompleteTradeResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    CompleteTradeResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    CompleteTradeResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    CompleteTradeResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    CompleteTradeResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    CompleteTradeResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    CompleteTradeResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    CompleteTradeResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    CompleteTradeResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    CompleteTradeResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    CompleteTradeResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    CompleteTradeResponseSpecialInstructions["Solicited"] = "SOLICITED";
    CompleteTradeResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    CompleteTradeResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    CompleteTradeResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    CompleteTradeResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    CompleteTradeResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    CompleteTradeResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    CompleteTradeResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    CompleteTradeResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    CompleteTradeResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    CompleteTradeResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    CompleteTradeResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    CompleteTradeResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    CompleteTradeResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    CompleteTradeResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    CompleteTradeResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    CompleteTradeResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    CompleteTradeResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    CompleteTradeResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    CompleteTradeResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    CompleteTradeResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    CompleteTradeResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    CompleteTradeResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    CompleteTradeResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(CompleteTradeResponseSpecialInstructions || (CompleteTradeResponseSpecialInstructions = {}));
/**
 * Exchange venue
 */
export var CompleteTradeResponseVenue;
(function (CompleteTradeResponseVenue) {
    CompleteTradeResponseVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    CompleteTradeResponseVenue["Amex"] = "AMEX";
    CompleteTradeResponseVenue["Arca"] = "ARCA";
    CompleteTradeResponseVenue["Bats"] = "BATS";
    CompleteTradeResponseVenue["BatsByx"] = "BATS_BYX";
    CompleteTradeResponseVenue["Boston"] = "BOSTON";
    CompleteTradeResponseVenue["Box"] = "BOX";
    CompleteTradeResponseVenue["Bzx"] = "BZX";
    CompleteTradeResponseVenue["C2"] = "C2";
    CompleteTradeResponseVenue["Cboe"] = "CBOE";
    CompleteTradeResponseVenue["Chicago"] = "CHICAGO";
    CompleteTradeResponseVenue["Cincinnati"] = "CINCINNATI";
    CompleteTradeResponseVenue["Edga"] = "EDGA";
    CompleteTradeResponseVenue["Edgx"] = "EDGX";
    CompleteTradeResponseVenue["Exclearing"] = "EXCLEARING";
    CompleteTradeResponseVenue["Iex"] = "IEX";
    CompleteTradeResponseVenue["Ise"] = "ISE";
    CompleteTradeResponseVenue["IseGemini"] = "ISE_GEMINI";
    CompleteTradeResponseVenue["Miax"] = "MIAX";
    CompleteTradeResponseVenue["Nasdaq"] = "NASDAQ";
    CompleteTradeResponseVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    CompleteTradeResponseVenue["Nyse"] = "NYSE";
    CompleteTradeResponseVenue["Phlx"] = "PHLX";
    CompleteTradeResponseVenue["Otc"] = "OTC";
    CompleteTradeResponseVenue["Qsr"] = "QSR";
})(CompleteTradeResponseVenue || (CompleteTradeResponseVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var CompleteTradeResponseWhenIssued;
(function (CompleteTradeResponseWhenIssued) {
    CompleteTradeResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    CompleteTradeResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    CompleteTradeResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(CompleteTradeResponseWhenIssued || (CompleteTradeResponseWhenIssued = {}));
/** @internal */
export const CompleteTradeResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseAssetType$;
(function (CompleteTradeResponseAssetType$) {
    /** @deprecated use `CompleteTradeResponseAssetType$inboundSchema` instead. */
    CompleteTradeResponseAssetType$.inboundSchema = CompleteTradeResponseAssetType$inboundSchema;
    /** @deprecated use `CompleteTradeResponseAssetType$outboundSchema` instead. */
    CompleteTradeResponseAssetType$.outboundSchema = CompleteTradeResponseAssetType$outboundSchema;
})(CompleteTradeResponseAssetType$ || (CompleteTradeResponseAssetType$ = {}));
/** @internal */
export const CompleteTradeResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseBrokerCapacity$;
(function (CompleteTradeResponseBrokerCapacity$) {
    /** @deprecated use `CompleteTradeResponseBrokerCapacity$inboundSchema` instead. */
    CompleteTradeResponseBrokerCapacity$.inboundSchema = CompleteTradeResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `CompleteTradeResponseBrokerCapacity$outboundSchema` instead. */
    CompleteTradeResponseBrokerCapacity$.outboundSchema = CompleteTradeResponseBrokerCapacity$outboundSchema;
})(CompleteTradeResponseBrokerCapacity$ || (CompleteTradeResponseBrokerCapacity$ = {}));
/** @internal */
export const CompleteTradeResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseIdentifierType$;
(function (CompleteTradeResponseIdentifierType$) {
    /** @deprecated use `CompleteTradeResponseIdentifierType$inboundSchema` instead. */
    CompleteTradeResponseIdentifierType$.inboundSchema = CompleteTradeResponseIdentifierType$inboundSchema;
    /** @deprecated use `CompleteTradeResponseIdentifierType$outboundSchema` instead. */
    CompleteTradeResponseIdentifierType$.outboundSchema = CompleteTradeResponseIdentifierType$outboundSchema;
})(CompleteTradeResponseIdentifierType$ || (CompleteTradeResponseIdentifierType$ = {}));
/** @internal */
export const CompleteTradeResponseLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CompleteTradeResponseLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseLocalMarketTradeDate$;
(function (CompleteTradeResponseLocalMarketTradeDate$) {
    /** @deprecated use `CompleteTradeResponseLocalMarketTradeDate$inboundSchema` instead. */
    CompleteTradeResponseLocalMarketTradeDate$.inboundSchema = CompleteTradeResponseLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `CompleteTradeResponseLocalMarketTradeDate$outboundSchema` instead. */
    CompleteTradeResponseLocalMarketTradeDate$.outboundSchema = CompleteTradeResponseLocalMarketTradeDate$outboundSchema;
})(CompleteTradeResponseLocalMarketTradeDate$ || (CompleteTradeResponseLocalMarketTradeDate$ = {}));
export function completeTradeResponseLocalMarketTradeDateToJSON(completeTradeResponseLocalMarketTradeDate) {
    return JSON.stringify(CompleteTradeResponseLocalMarketTradeDate$outboundSchema.parse(completeTradeResponseLocalMarketTradeDate));
}
export function completeTradeResponseLocalMarketTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteTradeResponseLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteTradeResponseLocalMarketTradeDate' from JSON`);
}
/** @internal */
export const CompleteTradeResponseRouteType$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseRouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseRouteType$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseRouteType$;
(function (CompleteTradeResponseRouteType$) {
    /** @deprecated use `CompleteTradeResponseRouteType$inboundSchema` instead. */
    CompleteTradeResponseRouteType$.inboundSchema = CompleteTradeResponseRouteType$inboundSchema;
    /** @deprecated use `CompleteTradeResponseRouteType$outboundSchema` instead. */
    CompleteTradeResponseRouteType$.outboundSchema = CompleteTradeResponseRouteType$outboundSchema;
})(CompleteTradeResponseRouteType$ || (CompleteTradeResponseRouteType$ = {}));
/** @internal */
export const CompleteTradeResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CompleteTradeResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseSettlementDate$;
(function (CompleteTradeResponseSettlementDate$) {
    /** @deprecated use `CompleteTradeResponseSettlementDate$inboundSchema` instead. */
    CompleteTradeResponseSettlementDate$.inboundSchema = CompleteTradeResponseSettlementDate$inboundSchema;
    /** @deprecated use `CompleteTradeResponseSettlementDate$outboundSchema` instead. */
    CompleteTradeResponseSettlementDate$.outboundSchema = CompleteTradeResponseSettlementDate$outboundSchema;
})(CompleteTradeResponseSettlementDate$ || (CompleteTradeResponseSettlementDate$ = {}));
export function completeTradeResponseSettlementDateToJSON(completeTradeResponseSettlementDate) {
    return JSON.stringify(CompleteTradeResponseSettlementDate$outboundSchema.parse(completeTradeResponseSettlementDate));
}
export function completeTradeResponseSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteTradeResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteTradeResponseSettlementDate' from JSON`);
}
/** @internal */
export const CompleteTradeResponseSide$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseSide$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseSide$;
(function (CompleteTradeResponseSide$) {
    /** @deprecated use `CompleteTradeResponseSide$inboundSchema` instead. */
    CompleteTradeResponseSide$.inboundSchema = CompleteTradeResponseSide$inboundSchema;
    /** @deprecated use `CompleteTradeResponseSide$outboundSchema` instead. */
    CompleteTradeResponseSide$.outboundSchema = CompleteTradeResponseSide$outboundSchema;
})(CompleteTradeResponseSide$ || (CompleteTradeResponseSide$ = {}));
/** @internal */
export const CompleteTradeResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseSideModifier$;
(function (CompleteTradeResponseSideModifier$) {
    /** @deprecated use `CompleteTradeResponseSideModifier$inboundSchema` instead. */
    CompleteTradeResponseSideModifier$.inboundSchema = CompleteTradeResponseSideModifier$inboundSchema;
    /** @deprecated use `CompleteTradeResponseSideModifier$outboundSchema` instead. */
    CompleteTradeResponseSideModifier$.outboundSchema = CompleteTradeResponseSideModifier$outboundSchema;
})(CompleteTradeResponseSideModifier$ || (CompleteTradeResponseSideModifier$ = {}));
/** @internal */
export const CompleteTradeResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseSpecialInstructions$;
(function (CompleteTradeResponseSpecialInstructions$) {
    /** @deprecated use `CompleteTradeResponseSpecialInstructions$inboundSchema` instead. */
    CompleteTradeResponseSpecialInstructions$.inboundSchema = CompleteTradeResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `CompleteTradeResponseSpecialInstructions$outboundSchema` instead. */
    CompleteTradeResponseSpecialInstructions$.outboundSchema = CompleteTradeResponseSpecialInstructions$outboundSchema;
})(CompleteTradeResponseSpecialInstructions$ || (CompleteTradeResponseSpecialInstructions$ = {}));
/** @internal */
export const CompleteTradeResponseVenue$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseVenue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseVenue$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseVenue$;
(function (CompleteTradeResponseVenue$) {
    /** @deprecated use `CompleteTradeResponseVenue$inboundSchema` instead. */
    CompleteTradeResponseVenue$.inboundSchema = CompleteTradeResponseVenue$inboundSchema;
    /** @deprecated use `CompleteTradeResponseVenue$outboundSchema` instead. */
    CompleteTradeResponseVenue$.outboundSchema = CompleteTradeResponseVenue$outboundSchema;
})(CompleteTradeResponseVenue$ || (CompleteTradeResponseVenue$ = {}));
/** @internal */
export const CompleteTradeResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(CompleteTradeResponseWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompleteTradeResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(CompleteTradeResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponseWhenIssued$;
(function (CompleteTradeResponseWhenIssued$) {
    /** @deprecated use `CompleteTradeResponseWhenIssued$inboundSchema` instead. */
    CompleteTradeResponseWhenIssued$.inboundSchema = CompleteTradeResponseWhenIssued$inboundSchema;
    /** @deprecated use `CompleteTradeResponseWhenIssued$outboundSchema` instead. */
    CompleteTradeResponseWhenIssued$.outboundSchema = CompleteTradeResponseWhenIssued$outboundSchema;
})(CompleteTradeResponseWhenIssued$ || (CompleteTradeResponseWhenIssued$ = {}));
/** @internal */
export const Trade$inboundSchema = z
    .object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: CompleteTradeResponseAssetType$inboundSchema.optional(),
    broker_capacity: CompleteTradeResponseBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(Execution$inboundSchema).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: CompleteTradeResponseIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => CompleteTradeResponseLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: CompleteTradeResponseRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => CompleteTradeResponseSettlementDate$inboundSchema)).optional(),
    side: CompleteTradeResponseSide$inboundSchema.optional(),
    side_modifier: CompleteTradeResponseSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(CompleteTradeResponseSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: CompleteTradeResponseVenue$inboundSchema.optional(),
    when_issued: CompleteTradeResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const Trade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: CompleteTradeResponseAssetType$outboundSchema.optional(),
    brokerCapacity: CompleteTradeResponseBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(Execution$outboundSchema).optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: CompleteTradeResponseIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => CompleteTradeResponseLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: CompleteTradeResponseRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => CompleteTradeResponseSettlementDate$outboundSchema)).optional(),
    side: CompleteTradeResponseSide$outboundSchema.optional(),
    sideModifier: CompleteTradeResponseSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(CompleteTradeResponseSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: CompleteTradeResponseVenue$outboundSchema.optional(),
    whenIssued: CompleteTradeResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Trade$;
(function (Trade$) {
    /** @deprecated use `Trade$inboundSchema` instead. */
    Trade$.inboundSchema = Trade$inboundSchema;
    /** @deprecated use `Trade$outboundSchema` instead. */
    Trade$.outboundSchema = Trade$outboundSchema;
})(Trade$ || (Trade$ = {}));
export function tradeToJSON(trade) {
    return JSON.stringify(Trade$outboundSchema.parse(trade));
}
export function tradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Trade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Trade' from JSON`);
}
/** @internal */
export const CompleteTradeResponse$inboundSchema = z.object({
    trade: z.nullable(z.lazy(() => Trade$inboundSchema)).optional(),
});
/** @internal */
export const CompleteTradeResponse$outboundSchema = z.object({
    trade: z.nullable(z.lazy(() => Trade$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteTradeResponse$;
(function (CompleteTradeResponse$) {
    /** @deprecated use `CompleteTradeResponse$inboundSchema` instead. */
    CompleteTradeResponse$.inboundSchema = CompleteTradeResponse$inboundSchema;
    /** @deprecated use `CompleteTradeResponse$outboundSchema` instead. */
    CompleteTradeResponse$.outboundSchema = CompleteTradeResponse$outboundSchema;
})(CompleteTradeResponse$ || (CompleteTradeResponse$ = {}));
export function completeTradeResponseToJSON(completeTradeResponse) {
    return JSON.stringify(CompleteTradeResponse$outboundSchema.parse(completeTradeResponse));
}
export function completeTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteTradeResponse' from JSON`);
}
//# sourceMappingURL=completetraderesponse.js.map