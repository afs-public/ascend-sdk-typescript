/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CalculateCashBalanceResponseOpenOrderSummary$inboundSchema, CalculateCashBalanceResponseOpenOrderSummary$outboundSchema, } from "./calculatecashbalanceresponseopenordersummary.js";
import { CalculateCashBalanceResponseTradeSummary$inboundSchema, CalculateCashBalanceResponseTradeSummary$outboundSchema, } from "./calculatecashbalanceresponsetradesummary.js";
import { CalculateCashBalanceResponseTransferSummary$inboundSchema, CalculateCashBalanceResponseTransferSummary$outboundSchema, } from "./calculatecashbalanceresponsetransfersummary.js";
/** @internal */
export const AvailableCashToWithdrawAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AvailableCashToWithdrawAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AvailableCashToWithdrawAmount$;
(function (AvailableCashToWithdrawAmount$) {
    /** @deprecated use `AvailableCashToWithdrawAmount$inboundSchema` instead. */
    AvailableCashToWithdrawAmount$.inboundSchema = AvailableCashToWithdrawAmount$inboundSchema;
    /** @deprecated use `AvailableCashToWithdrawAmount$outboundSchema` instead. */
    AvailableCashToWithdrawAmount$.outboundSchema = AvailableCashToWithdrawAmount$outboundSchema;
})(AvailableCashToWithdrawAmount$ || (AvailableCashToWithdrawAmount$ = {}));
export function availableCashToWithdrawAmountToJSON(availableCashToWithdrawAmount) {
    return JSON.stringify(AvailableCashToWithdrawAmount$outboundSchema.parse(availableCashToWithdrawAmount));
}
export function availableCashToWithdrawAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AvailableCashToWithdrawAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AvailableCashToWithdrawAmount' from JSON`);
}
/** @internal */
export const AvailableLiquidityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AvailableLiquidityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AvailableLiquidityAmount$;
(function (AvailableLiquidityAmount$) {
    /** @deprecated use `AvailableLiquidityAmount$inboundSchema` instead. */
    AvailableLiquidityAmount$.inboundSchema = AvailableLiquidityAmount$inboundSchema;
    /** @deprecated use `AvailableLiquidityAmount$outboundSchema` instead. */
    AvailableLiquidityAmount$.outboundSchema = AvailableLiquidityAmount$outboundSchema;
})(AvailableLiquidityAmount$ || (AvailableLiquidityAmount$ = {}));
export function availableLiquidityAmountToJSON(availableLiquidityAmount) {
    return JSON.stringify(AvailableLiquidityAmount$outboundSchema.parse(availableLiquidityAmount));
}
export function availableLiquidityAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AvailableLiquidityAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AvailableLiquidityAmount' from JSON`);
}
/** @internal */
export const FullyPaidUnsettledFundsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const FullyPaidUnsettledFundsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FullyPaidUnsettledFundsAmount$;
(function (FullyPaidUnsettledFundsAmount$) {
    /** @deprecated use `FullyPaidUnsettledFundsAmount$inboundSchema` instead. */
    FullyPaidUnsettledFundsAmount$.inboundSchema = FullyPaidUnsettledFundsAmount$inboundSchema;
    /** @deprecated use `FullyPaidUnsettledFundsAmount$outboundSchema` instead. */
    FullyPaidUnsettledFundsAmount$.outboundSchema = FullyPaidUnsettledFundsAmount$outboundSchema;
})(FullyPaidUnsettledFundsAmount$ || (FullyPaidUnsettledFundsAmount$ = {}));
export function fullyPaidUnsettledFundsAmountToJSON(fullyPaidUnsettledFundsAmount) {
    return JSON.stringify(FullyPaidUnsettledFundsAmount$outboundSchema.parse(fullyPaidUnsettledFundsAmount));
}
export function fullyPaidUnsettledFundsAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FullyPaidUnsettledFundsAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FullyPaidUnsettledFundsAmount' from JSON`);
}
/** @internal */
export const OpenBalanceAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const OpenBalanceAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OpenBalanceAmount$;
(function (OpenBalanceAmount$) {
    /** @deprecated use `OpenBalanceAmount$inboundSchema` instead. */
    OpenBalanceAmount$.inboundSchema = OpenBalanceAmount$inboundSchema;
    /** @deprecated use `OpenBalanceAmount$outboundSchema` instead. */
    OpenBalanceAmount$.outboundSchema = OpenBalanceAmount$outboundSchema;
})(OpenBalanceAmount$ || (OpenBalanceAmount$ = {}));
export function openBalanceAmountToJSON(openBalanceAmount) {
    return JSON.stringify(OpenBalanceAmount$outboundSchema.parse(openBalanceAmount));
}
export function openBalanceAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OpenBalanceAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OpenBalanceAmount' from JSON`);
}
/** @internal */
export const OpenLiquidityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const OpenLiquidityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OpenLiquidityAmount$;
(function (OpenLiquidityAmount$) {
    /** @deprecated use `OpenLiquidityAmount$inboundSchema` instead. */
    OpenLiquidityAmount$.inboundSchema = OpenLiquidityAmount$inboundSchema;
    /** @deprecated use `OpenLiquidityAmount$outboundSchema` instead. */
    OpenLiquidityAmount$.outboundSchema = OpenLiquidityAmount$outboundSchema;
})(OpenLiquidityAmount$ || (OpenLiquidityAmount$ = {}));
export function openLiquidityAmountToJSON(openLiquidityAmount) {
    return JSON.stringify(OpenLiquidityAmount$outboundSchema.parse(openLiquidityAmount));
}
export function openLiquidityAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OpenLiquidityAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OpenLiquidityAmount' from JSON`);
}
/** @internal */
export const PendingDebitDividendsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PendingDebitDividendsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PendingDebitDividendsAmount$;
(function (PendingDebitDividendsAmount$) {
    /** @deprecated use `PendingDebitDividendsAmount$inboundSchema` instead. */
    PendingDebitDividendsAmount$.inboundSchema = PendingDebitDividendsAmount$inboundSchema;
    /** @deprecated use `PendingDebitDividendsAmount$outboundSchema` instead. */
    PendingDebitDividendsAmount$.outboundSchema = PendingDebitDividendsAmount$outboundSchema;
})(PendingDebitDividendsAmount$ || (PendingDebitDividendsAmount$ = {}));
export function pendingDebitDividendsAmountToJSON(pendingDebitDividendsAmount) {
    return JSON.stringify(PendingDebitDividendsAmount$outboundSchema.parse(pendingDebitDividendsAmount));
}
export function pendingDebitDividendsAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PendingDebitDividendsAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PendingDebitDividendsAmount' from JSON`);
}
/** @internal */
export const PendingDebitInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PendingDebitInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PendingDebitInterestAmount$;
(function (PendingDebitInterestAmount$) {
    /** @deprecated use `PendingDebitInterestAmount$inboundSchema` instead. */
    PendingDebitInterestAmount$.inboundSchema = PendingDebitInterestAmount$inboundSchema;
    /** @deprecated use `PendingDebitInterestAmount$outboundSchema` instead. */
    PendingDebitInterestAmount$.outboundSchema = PendingDebitInterestAmount$outboundSchema;
})(PendingDebitInterestAmount$ || (PendingDebitInterestAmount$ = {}));
export function pendingDebitInterestAmountToJSON(pendingDebitInterestAmount) {
    return JSON.stringify(PendingDebitInterestAmount$outboundSchema.parse(pendingDebitInterestAmount));
}
export function pendingDebitInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PendingDebitInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PendingDebitInterestAmount' from JSON`);
}
/** @internal */
export const UnadjustedAvailableCashToWithdrawAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const UnadjustedAvailableCashToWithdrawAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnadjustedAvailableCashToWithdrawAmount$;
(function (UnadjustedAvailableCashToWithdrawAmount$) {
    /** @deprecated use `UnadjustedAvailableCashToWithdrawAmount$inboundSchema` instead. */
    UnadjustedAvailableCashToWithdrawAmount$.inboundSchema = UnadjustedAvailableCashToWithdrawAmount$inboundSchema;
    /** @deprecated use `UnadjustedAvailableCashToWithdrawAmount$outboundSchema` instead. */
    UnadjustedAvailableCashToWithdrawAmount$.outboundSchema = UnadjustedAvailableCashToWithdrawAmount$outboundSchema;
})(UnadjustedAvailableCashToWithdrawAmount$ || (UnadjustedAvailableCashToWithdrawAmount$ = {}));
export function unadjustedAvailableCashToWithdrawAmountToJSON(unadjustedAvailableCashToWithdrawAmount) {
    return JSON.stringify(UnadjustedAvailableCashToWithdrawAmount$outboundSchema.parse(unadjustedAvailableCashToWithdrawAmount));
}
export function unadjustedAvailableCashToWithdrawAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UnadjustedAvailableCashToWithdrawAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UnadjustedAvailableCashToWithdrawAmount' from JSON`);
}
/** @internal */
export const WithheldDepositThresholdAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WithheldDepositThresholdAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithheldDepositThresholdAmount$;
(function (WithheldDepositThresholdAmount$) {
    /** @deprecated use `WithheldDepositThresholdAmount$inboundSchema` instead. */
    WithheldDepositThresholdAmount$.inboundSchema = WithheldDepositThresholdAmount$inboundSchema;
    /** @deprecated use `WithheldDepositThresholdAmount$outboundSchema` instead. */
    WithheldDepositThresholdAmount$.outboundSchema = WithheldDepositThresholdAmount$outboundSchema;
})(WithheldDepositThresholdAmount$ || (WithheldDepositThresholdAmount$ = {}));
export function withheldDepositThresholdAmountToJSON(withheldDepositThresholdAmount) {
    return JSON.stringify(WithheldDepositThresholdAmount$outboundSchema.parse(withheldDepositThresholdAmount));
}
export function withheldDepositThresholdAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WithheldDepositThresholdAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WithheldDepositThresholdAmount' from JSON`);
}
/** @internal */
export const CalculateCashBalanceResponse$inboundSchema = z.object({
    account: z.string().optional(),
    available_cash_to_withdraw_amount: z.nullable(z.lazy(() => AvailableCashToWithdrawAmount$inboundSchema)).optional(),
    available_liquidity_amount: z.nullable(z.lazy(() => AvailableLiquidityAmount$inboundSchema)).optional(),
    fully_paid_unsettled_funds_amount: z.nullable(z.lazy(() => FullyPaidUnsettledFundsAmount$inboundSchema)).optional(),
    include_fully_paid_unsettled_funds: z.boolean().optional(),
    intraday_buy_trades: z.array(CalculateCashBalanceResponseTradeSummary$inboundSchema).optional(),
    intraday_deposits: z.array(CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    intraday_returns: z.array(CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    intraday_withdrawals: z.array(CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    open_balance_amount: z.nullable(z.lazy(() => OpenBalanceAmount$inboundSchema))
        .optional(),
    open_buy_orders: z.array(CalculateCashBalanceResponseOpenOrderSummary$inboundSchema).optional(),
    open_liquidity_amount: z.nullable(z.lazy(() => OpenLiquidityAmount$inboundSchema)).optional(),
    pending_debit_dividends_amount: z.nullable(z.lazy(() => PendingDebitDividendsAmount$inboundSchema)).optional(),
    pending_debit_interest_amount: z.nullable(z.lazy(() => PendingDebitInterestAmount$inboundSchema)).optional(),
    pending_withdrawals: z.array(CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    unadjusted_available_cash_to_withdraw_amount: z.nullable(z.lazy(() => UnadjustedAvailableCashToWithdrawAmount$inboundSchema)).optional(),
    withheld_deposit_threshold_amount: z.nullable(z.lazy(() => WithheldDepositThresholdAmount$inboundSchema)).optional(),
    withheld_deposits: z.array(CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "available_cash_to_withdraw_amount": "availableCashToWithdrawAmount",
        "available_liquidity_amount": "availableLiquidityAmount",
        "fully_paid_unsettled_funds_amount": "fullyPaidUnsettledFundsAmount",
        "include_fully_paid_unsettled_funds": "includeFullyPaidUnsettledFunds",
        "intraday_buy_trades": "intradayBuyTrades",
        "intraday_deposits": "intradayDeposits",
        "intraday_returns": "intradayReturns",
        "intraday_withdrawals": "intradayWithdrawals",
        "open_balance_amount": "openBalanceAmount",
        "open_buy_orders": "openBuyOrders",
        "open_liquidity_amount": "openLiquidityAmount",
        "pending_debit_dividends_amount": "pendingDebitDividendsAmount",
        "pending_debit_interest_amount": "pendingDebitInterestAmount",
        "pending_withdrawals": "pendingWithdrawals",
        "unadjusted_available_cash_to_withdraw_amount": "unadjustedAvailableCashToWithdrawAmount",
        "withheld_deposit_threshold_amount": "withheldDepositThresholdAmount",
        "withheld_deposits": "withheldDeposits",
    });
});
/** @internal */
export const CalculateCashBalanceResponse$outboundSchema = z.object({
    account: z.string().optional(),
    availableCashToWithdrawAmount: z.nullable(z.lazy(() => AvailableCashToWithdrawAmount$outboundSchema)).optional(),
    availableLiquidityAmount: z.nullable(z.lazy(() => AvailableLiquidityAmount$outboundSchema)).optional(),
    fullyPaidUnsettledFundsAmount: z.nullable(z.lazy(() => FullyPaidUnsettledFundsAmount$outboundSchema)).optional(),
    includeFullyPaidUnsettledFunds: z.boolean().optional(),
    intradayBuyTrades: z.array(CalculateCashBalanceResponseTradeSummary$outboundSchema).optional(),
    intradayDeposits: z.array(CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    intradayReturns: z.array(CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    intradayWithdrawals: z.array(CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    openBalanceAmount: z.nullable(z.lazy(() => OpenBalanceAmount$outboundSchema))
        .optional(),
    openBuyOrders: z.array(CalculateCashBalanceResponseOpenOrderSummary$outboundSchema).optional(),
    openLiquidityAmount: z.nullable(z.lazy(() => OpenLiquidityAmount$outboundSchema)).optional(),
    pendingDebitDividendsAmount: z.nullable(z.lazy(() => PendingDebitDividendsAmount$outboundSchema)).optional(),
    pendingDebitInterestAmount: z.nullable(z.lazy(() => PendingDebitInterestAmount$outboundSchema)).optional(),
    pendingWithdrawals: z.array(CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    unadjustedAvailableCashToWithdrawAmount: z.nullable(z.lazy(() => UnadjustedAvailableCashToWithdrawAmount$outboundSchema)).optional(),
    withheldDepositThresholdAmount: z.nullable(z.lazy(() => WithheldDepositThresholdAmount$outboundSchema)).optional(),
    withheldDeposits: z.array(CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        availableCashToWithdrawAmount: "available_cash_to_withdraw_amount",
        availableLiquidityAmount: "available_liquidity_amount",
        fullyPaidUnsettledFundsAmount: "fully_paid_unsettled_funds_amount",
        includeFullyPaidUnsettledFunds: "include_fully_paid_unsettled_funds",
        intradayBuyTrades: "intraday_buy_trades",
        intradayDeposits: "intraday_deposits",
        intradayReturns: "intraday_returns",
        intradayWithdrawals: "intraday_withdrawals",
        openBalanceAmount: "open_balance_amount",
        openBuyOrders: "open_buy_orders",
        openLiquidityAmount: "open_liquidity_amount",
        pendingDebitDividendsAmount: "pending_debit_dividends_amount",
        pendingDebitInterestAmount: "pending_debit_interest_amount",
        pendingWithdrawals: "pending_withdrawals",
        unadjustedAvailableCashToWithdrawAmount: "unadjusted_available_cash_to_withdraw_amount",
        withheldDepositThresholdAmount: "withheld_deposit_threshold_amount",
        withheldDeposits: "withheld_deposits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CalculateCashBalanceResponse$;
(function (CalculateCashBalanceResponse$) {
    /** @deprecated use `CalculateCashBalanceResponse$inboundSchema` instead. */
    CalculateCashBalanceResponse$.inboundSchema = CalculateCashBalanceResponse$inboundSchema;
    /** @deprecated use `CalculateCashBalanceResponse$outboundSchema` instead. */
    CalculateCashBalanceResponse$.outboundSchema = CalculateCashBalanceResponse$outboundSchema;
})(CalculateCashBalanceResponse$ || (CalculateCashBalanceResponse$ = {}));
export function calculateCashBalanceResponseToJSON(calculateCashBalanceResponse) {
    return JSON.stringify(CalculateCashBalanceResponse$outboundSchema.parse(calculateCashBalanceResponse));
}
export function calculateCashBalanceResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CalculateCashBalanceResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CalculateCashBalanceResponse' from JSON`);
}
//# sourceMappingURL=calculatecashbalanceresponse.js.map