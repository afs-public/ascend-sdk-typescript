/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BondYieldCreate$inboundSchema, BondYieldCreate$outboundSchema, } from "./bondyieldcreate.js";
import { BookingFeeCreate$inboundSchema, BookingFeeCreate$outboundSchema, } from "./bookingfeecreate.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
import { LotCreate$inboundSchema, LotCreate$outboundSchema, } from "./lotcreate.js";
import { PriceAdjustmentCreate$inboundSchema, PriceAdjustmentCreate$outboundSchema, } from "./priceadjustmentcreate.js";
/**
 * Type of the asset being traded.
 */
export var TradeAllocationCreateAssetType;
(function (TradeAllocationCreateAssetType) {
    TradeAllocationCreateAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeAllocationCreateAssetType["Equity"] = "EQUITY";
    TradeAllocationCreateAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeAllocationCreateAssetType || (TradeAllocationCreateAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var TradeAllocationCreateBrokerCapacity;
(function (TradeAllocationCreateBrokerCapacity) {
    TradeAllocationCreateBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeAllocationCreateBrokerCapacity["Agency"] = "AGENCY";
    TradeAllocationCreateBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeAllocationCreateBrokerCapacity["Mixed"] = "MIXED";
})(TradeAllocationCreateBrokerCapacity || (TradeAllocationCreateBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var TradeAllocationCreateIdentifierType;
(function (TradeAllocationCreateIdentifierType) {
    TradeAllocationCreateIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeAllocationCreateIdentifierType["AssetId"] = "ASSET_ID";
    TradeAllocationCreateIdentifierType["Symbol"] = "SYMBOL";
    TradeAllocationCreateIdentifierType["Cusip"] = "CUSIP";
    TradeAllocationCreateIdentifierType["Isin"] = "ISIN";
})(TradeAllocationCreateIdentifierType || (TradeAllocationCreateIdentifierType = {}));
/**
 * Side modifier for the trade allocation.
 */
export var TradeAllocationCreateSideModifier;
(function (TradeAllocationCreateSideModifier) {
    TradeAllocationCreateSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    TradeAllocationCreateSideModifier["Short"] = "SHORT";
    TradeAllocationCreateSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    TradeAllocationCreateSideModifier["ShortCover"] = "SHORT_COVER";
    TradeAllocationCreateSideModifier["Open"] = "OPEN";
    TradeAllocationCreateSideModifier["Close"] = "CLOSE";
})(TradeAllocationCreateSideModifier || (TradeAllocationCreateSideModifier = {}));
export var TradeAllocationCreateSpecialInstructions;
(function (TradeAllocationCreateSpecialInstructions) {
    TradeAllocationCreateSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    TradeAllocationCreateSpecialInstructions["Rule144"] = "RULE_144";
    TradeAllocationCreateSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    TradeAllocationCreateSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    TradeAllocationCreateSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    TradeAllocationCreateSpecialInstructions["CoverShort"] = "COVER_SHORT";
    TradeAllocationCreateSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    TradeAllocationCreateSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    TradeAllocationCreateSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    TradeAllocationCreateSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    TradeAllocationCreateSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    TradeAllocationCreateSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    TradeAllocationCreateSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    TradeAllocationCreateSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    TradeAllocationCreateSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    TradeAllocationCreateSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    TradeAllocationCreateSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    TradeAllocationCreateSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    TradeAllocationCreateSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    TradeAllocationCreateSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    TradeAllocationCreateSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    TradeAllocationCreateSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    TradeAllocationCreateSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    TradeAllocationCreateSpecialInstructions["Solicited"] = "SOLICITED";
    TradeAllocationCreateSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    TradeAllocationCreateSpecialInstructions["XDividend"] = "X_DIVIDEND";
    TradeAllocationCreateSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    TradeAllocationCreateSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    TradeAllocationCreateSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    TradeAllocationCreateSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    TradeAllocationCreateSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    TradeAllocationCreateSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    TradeAllocationCreateSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    TradeAllocationCreateSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    TradeAllocationCreateSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    TradeAllocationCreateSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    TradeAllocationCreateSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    TradeAllocationCreateSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    TradeAllocationCreateSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    TradeAllocationCreateSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    TradeAllocationCreateSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    TradeAllocationCreateSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    TradeAllocationCreateSpecialInstructions["StockReward"] = "STOCK_REWARD";
    TradeAllocationCreateSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    TradeAllocationCreateSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    TradeAllocationCreateSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    TradeAllocationCreateSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(TradeAllocationCreateSpecialInstructions || (TradeAllocationCreateSpecialInstructions = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
export var ToSide;
(function (ToSide) {
    ToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    ToSide["Buy"] = "BUY";
    ToSide["Sell"] = "SELL";
})(ToSide || (ToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
export var TradeAllocationCreateWhenIssued;
(function (TradeAllocationCreateWhenIssued) {
    TradeAllocationCreateWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    TradeAllocationCreateWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    TradeAllocationCreateWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(TradeAllocationCreateWhenIssued || (TradeAllocationCreateWhenIssued = {}));
/** @internal */
export const TradeAllocationCreateAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateAssetType$;
(function (TradeAllocationCreateAssetType$) {
    /** @deprecated use `TradeAllocationCreateAssetType$inboundSchema` instead. */
    TradeAllocationCreateAssetType$.inboundSchema = TradeAllocationCreateAssetType$inboundSchema;
    /** @deprecated use `TradeAllocationCreateAssetType$outboundSchema` instead. */
    TradeAllocationCreateAssetType$.outboundSchema = TradeAllocationCreateAssetType$outboundSchema;
})(TradeAllocationCreateAssetType$ || (TradeAllocationCreateAssetType$ = {}));
/** @internal */
export const TradeAllocationCreateBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateBrokerCapacity$;
(function (TradeAllocationCreateBrokerCapacity$) {
    /** @deprecated use `TradeAllocationCreateBrokerCapacity$inboundSchema` instead. */
    TradeAllocationCreateBrokerCapacity$.inboundSchema = TradeAllocationCreateBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeAllocationCreateBrokerCapacity$outboundSchema` instead. */
    TradeAllocationCreateBrokerCapacity$.outboundSchema = TradeAllocationCreateBrokerCapacity$outboundSchema;
})(TradeAllocationCreateBrokerCapacity$ || (TradeAllocationCreateBrokerCapacity$ = {}));
/** @internal */
export const TradeAllocationCreateIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateIdentifierType$;
(function (TradeAllocationCreateIdentifierType$) {
    /** @deprecated use `TradeAllocationCreateIdentifierType$inboundSchema` instead. */
    TradeAllocationCreateIdentifierType$.inboundSchema = TradeAllocationCreateIdentifierType$inboundSchema;
    /** @deprecated use `TradeAllocationCreateIdentifierType$outboundSchema` instead. */
    TradeAllocationCreateIdentifierType$.outboundSchema = TradeAllocationCreateIdentifierType$outboundSchema;
})(TradeAllocationCreateIdentifierType$ || (TradeAllocationCreateIdentifierType$ = {}));
/** @internal */
export const TradeAllocationCreateSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateSideModifier$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateSideModifier$;
(function (TradeAllocationCreateSideModifier$) {
    /** @deprecated use `TradeAllocationCreateSideModifier$inboundSchema` instead. */
    TradeAllocationCreateSideModifier$.inboundSchema = TradeAllocationCreateSideModifier$inboundSchema;
    /** @deprecated use `TradeAllocationCreateSideModifier$outboundSchema` instead. */
    TradeAllocationCreateSideModifier$.outboundSchema = TradeAllocationCreateSideModifier$outboundSchema;
})(TradeAllocationCreateSideModifier$ || (TradeAllocationCreateSideModifier$ = {}));
/** @internal */
export const TradeAllocationCreateSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateSpecialInstructions$;
(function (TradeAllocationCreateSpecialInstructions$) {
    /** @deprecated use `TradeAllocationCreateSpecialInstructions$inboundSchema` instead. */
    TradeAllocationCreateSpecialInstructions$.inboundSchema = TradeAllocationCreateSpecialInstructions$inboundSchema;
    /** @deprecated use `TradeAllocationCreateSpecialInstructions$outboundSchema` instead. */
    TradeAllocationCreateSpecialInstructions$.outboundSchema = TradeAllocationCreateSpecialInstructions$outboundSchema;
})(TradeAllocationCreateSpecialInstructions$ || (TradeAllocationCreateSpecialInstructions$ = {}));
/** @internal */
export const ToSide$inboundSchema = z
    .union([
    z.nativeEnum(ToSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ToSide$outboundSchema = z.union([
    z.nativeEnum(ToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ToSide$;
(function (ToSide$) {
    /** @deprecated use `ToSide$inboundSchema` instead. */
    ToSide$.inboundSchema = ToSide$inboundSchema;
    /** @deprecated use `ToSide$outboundSchema` instead. */
    ToSide$.outboundSchema = ToSide$outboundSchema;
})(ToSide$ || (ToSide$ = {}));
/** @internal */
export const TradeAllocationCreateWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationCreateWhenIssued$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreateWhenIssued$;
(function (TradeAllocationCreateWhenIssued$) {
    /** @deprecated use `TradeAllocationCreateWhenIssued$inboundSchema` instead. */
    TradeAllocationCreateWhenIssued$.inboundSchema = TradeAllocationCreateWhenIssued$inboundSchema;
    /** @deprecated use `TradeAllocationCreateWhenIssued$outboundSchema` instead. */
    TradeAllocationCreateWhenIssued$.outboundSchema = TradeAllocationCreateWhenIssued$outboundSchema;
})(TradeAllocationCreateWhenIssued$ || (TradeAllocationCreateWhenIssued$ = {}));
/** @internal */
export const TradeAllocationCreate$inboundSchema = z.object({
    accrued_interest_amount: DecimalCreate$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    asset_type: TradeAllocationCreateAssetType$inboundSchema,
    bond_yield: z.array(BondYieldCreate$inboundSchema).optional(),
    broker_capacity: TradeAllocationCreateBrokerCapacity$inboundSchema,
    client_order_id: z.string().optional(),
    commission_amount: DecimalCreate$inboundSchema.optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    fees: z.array(BookingFeeCreate$inboundSchema).optional(),
    from_account_id: z.string(),
    gross_amount: DecimalCreate$inboundSchema.optional(),
    identifier: z.string(),
    identifier_type: TradeAllocationCreateIdentifierType$inboundSchema,
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(LotCreate$inboundSchema).optional(),
    memo: z.string().optional(),
    prevailing_market_price: DecimalCreate$inboundSchema.optional(),
    price: DecimalCreate$inboundSchema,
    price_adjustment: PriceAdjustmentCreate$inboundSchema.optional(),
    quantity: DecimalCreate$inboundSchema,
    settlement_date: DateCreate$inboundSchema.optional(),
    side_modifier: TradeAllocationCreateSideModifier$inboundSchema.optional(),
    source_application: z.string(),
    special_instructions: z.array(TradeAllocationCreateSpecialInstructions$inboundSchema).optional(),
    to_account_id: z.string(),
    to_side: ToSide$inboundSchema,
    when_issued: TradeAllocationCreateWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_side": "toSide",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const TradeAllocationCreate$outboundSchema = z.object({
    accruedInterestAmount: DecimalCreate$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    assetType: TradeAllocationCreateAssetType$outboundSchema,
    bondYield: z.array(BondYieldCreate$outboundSchema).optional(),
    brokerCapacity: TradeAllocationCreateBrokerCapacity$outboundSchema,
    clientOrderId: z.string().optional(),
    commissionAmount: DecimalCreate$outboundSchema.optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString())),
    fees: z.array(BookingFeeCreate$outboundSchema).optional(),
    fromAccountId: z.string(),
    grossAmount: DecimalCreate$outboundSchema.optional(),
    identifier: z.string(),
    identifierType: TradeAllocationCreateIdentifierType$outboundSchema,
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(LotCreate$outboundSchema).optional(),
    memo: z.string().optional(),
    prevailingMarketPrice: DecimalCreate$outboundSchema.optional(),
    price: DecimalCreate$outboundSchema,
    priceAdjustment: PriceAdjustmentCreate$outboundSchema.optional(),
    quantity: DecimalCreate$outboundSchema,
    settlementDate: DateCreate$outboundSchema.optional(),
    sideModifier: TradeAllocationCreateSideModifier$outboundSchema.optional(),
    sourceApplication: z.string(),
    specialInstructions: z.array(TradeAllocationCreateSpecialInstructions$outboundSchema).optional(),
    toAccountId: z.string(),
    toSide: ToSide$outboundSchema,
    whenIssued: TradeAllocationCreateWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toSide: "to_side",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCreate$;
(function (TradeAllocationCreate$) {
    /** @deprecated use `TradeAllocationCreate$inboundSchema` instead. */
    TradeAllocationCreate$.inboundSchema = TradeAllocationCreate$inboundSchema;
    /** @deprecated use `TradeAllocationCreate$outboundSchema` instead. */
    TradeAllocationCreate$.outboundSchema = TradeAllocationCreate$outboundSchema;
})(TradeAllocationCreate$ || (TradeAllocationCreate$ = {}));
export function tradeAllocationCreateToJSON(tradeAllocationCreate) {
    return JSON.stringify(TradeAllocationCreate$outboundSchema.parse(tradeAllocationCreate));
}
export function tradeAllocationCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationCreate' from JSON`);
}
//# sourceMappingURL=tradeallocationcreate.js.map