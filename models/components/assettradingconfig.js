/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Type of the asset
 */
export var AssetTradingConfigAssetType;
(function (AssetTradingConfigAssetType) {
    AssetTradingConfigAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    AssetTradingConfigAssetType["Equity"] = "EQUITY";
    AssetTradingConfigAssetType["MutualFund"] = "MUTUAL_FUND";
    AssetTradingConfigAssetType["Option"] = "OPTION";
    AssetTradingConfigAssetType["Index"] = "INDEX";
})(AssetTradingConfigAssetType || (AssetTradingConfigAssetType = {}));
/** @internal */
export const AssetTradability$inboundSchema = z.object({
    close_fractional_quantity_enabled: z.boolean().optional(),
    close_notional_quantity_enabled: z.boolean().optional(),
    close_whole_quantity_enabled: z.boolean().optional(),
    open_fractional_quantity_enabled: z.boolean().optional(),
    open_notional_quantity_enabled: z.boolean().optional(),
    open_whole_quantity_enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "close_fractional_quantity_enabled": "closeFractionalQuantityEnabled",
        "close_notional_quantity_enabled": "closeNotionalQuantityEnabled",
        "close_whole_quantity_enabled": "closeWholeQuantityEnabled",
        "open_fractional_quantity_enabled": "openFractionalQuantityEnabled",
        "open_notional_quantity_enabled": "openNotionalQuantityEnabled",
        "open_whole_quantity_enabled": "openWholeQuantityEnabled",
    });
});
/** @internal */
export const AssetTradability$outboundSchema = z.object({
    closeFractionalQuantityEnabled: z.boolean().optional(),
    closeNotionalQuantityEnabled: z.boolean().optional(),
    closeWholeQuantityEnabled: z.boolean().optional(),
    openFractionalQuantityEnabled: z.boolean().optional(),
    openNotionalQuantityEnabled: z.boolean().optional(),
    openWholeQuantityEnabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        closeFractionalQuantityEnabled: "close_fractional_quantity_enabled",
        closeNotionalQuantityEnabled: "close_notional_quantity_enabled",
        closeWholeQuantityEnabled: "close_whole_quantity_enabled",
        openFractionalQuantityEnabled: "open_fractional_quantity_enabled",
        openNotionalQuantityEnabled: "open_notional_quantity_enabled",
        openWholeQuantityEnabled: "open_whole_quantity_enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTradability$;
(function (AssetTradability$) {
    /** @deprecated use `AssetTradability$inboundSchema` instead. */
    AssetTradability$.inboundSchema = AssetTradability$inboundSchema;
    /** @deprecated use `AssetTradability$outboundSchema` instead. */
    AssetTradability$.outboundSchema = AssetTradability$outboundSchema;
})(AssetTradability$ || (AssetTradability$ = {}));
export function assetTradabilityToJSON(assetTradability) {
    return JSON.stringify(AssetTradability$outboundSchema.parse(assetTradability));
}
export function assetTradabilityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetTradability$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTradability' from JSON`);
}
/** @internal */
export const AssetTradingConfigAssetType$inboundSchema = z
    .union([
    z.nativeEnum(AssetTradingConfigAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AssetTradingConfigAssetType$outboundSchema = z.union([
    z.nativeEnum(AssetTradingConfigAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTradingConfigAssetType$;
(function (AssetTradingConfigAssetType$) {
    /** @deprecated use `AssetTradingConfigAssetType$inboundSchema` instead. */
    AssetTradingConfigAssetType$.inboundSchema = AssetTradingConfigAssetType$inboundSchema;
    /** @deprecated use `AssetTradingConfigAssetType$outboundSchema` instead. */
    AssetTradingConfigAssetType$.outboundSchema = AssetTradingConfigAssetType$outboundSchema;
})(AssetTradingConfigAssetType$ || (AssetTradingConfigAssetType$ = {}));
/** @internal */
export const OptionRootTradability$inboundSchema = z.object({
    close_options_whole_quantity_enabled: z.boolean().optional(),
    open_nonstandard_options_whole_quantity_enabled: z.boolean().optional(),
    open_standard_options_whole_quantity_enabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "close_options_whole_quantity_enabled": "closeOptionsWholeQuantityEnabled",
        "open_nonstandard_options_whole_quantity_enabled": "openNonstandardOptionsWholeQuantityEnabled",
        "open_standard_options_whole_quantity_enabled": "openStandardOptionsWholeQuantityEnabled",
    });
});
/** @internal */
export const OptionRootTradability$outboundSchema = z.object({
    closeOptionsWholeQuantityEnabled: z.boolean().optional(),
    openNonstandardOptionsWholeQuantityEnabled: z.boolean().optional(),
    openStandardOptionsWholeQuantityEnabled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        closeOptionsWholeQuantityEnabled: "close_options_whole_quantity_enabled",
        openNonstandardOptionsWholeQuantityEnabled: "open_nonstandard_options_whole_quantity_enabled",
        openStandardOptionsWholeQuantityEnabled: "open_standard_options_whole_quantity_enabled",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OptionRootTradability$;
(function (OptionRootTradability$) {
    /** @deprecated use `OptionRootTradability$inboundSchema` instead. */
    OptionRootTradability$.inboundSchema = OptionRootTradability$inboundSchema;
    /** @deprecated use `OptionRootTradability$outboundSchema` instead. */
    OptionRootTradability$.outboundSchema = OptionRootTradability$outboundSchema;
})(OptionRootTradability$ || (OptionRootTradability$ = {}));
export function optionRootTradabilityToJSON(optionRootTradability) {
    return JSON.stringify(OptionRootTradability$outboundSchema.parse(optionRootTradability));
}
export function optionRootTradabilityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OptionRootTradability$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OptionRootTradability' from JSON`);
}
/** @internal */
export const AssetTradingConfig$inboundSchema = z.object({
    asset_id: z.string().optional(),
    asset_tradability: z.nullable(z.lazy(() => AssetTradability$inboundSchema))
        .optional(),
    asset_type: AssetTradingConfigAssetType$inboundSchema.optional(),
    correspondent_id: z.string().optional(),
    cusip: z.string().optional(),
    isin: z.string().optional(),
    name: z.string().optional(),
    option_root_tradability: z.nullable(z.lazy(() => OptionRootTradability$inboundSchema)).optional(),
    symbol: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "asset_id": "assetId",
        "asset_tradability": "assetTradability",
        "asset_type": "assetType",
        "correspondent_id": "correspondentId",
        "option_root_tradability": "optionRootTradability",
    });
});
/** @internal */
export const AssetTradingConfig$outboundSchema = z.object({
    assetId: z.string().optional(),
    assetTradability: z.nullable(z.lazy(() => AssetTradability$outboundSchema))
        .optional(),
    assetType: AssetTradingConfigAssetType$outboundSchema.optional(),
    correspondentId: z.string().optional(),
    cusip: z.string().optional(),
    isin: z.string().optional(),
    name: z.string().optional(),
    optionRootTradability: z.nullable(z.lazy(() => OptionRootTradability$outboundSchema)).optional(),
    symbol: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        assetId: "asset_id",
        assetTradability: "asset_tradability",
        assetType: "asset_type",
        correspondentId: "correspondent_id",
        optionRootTradability: "option_root_tradability",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetTradingConfig$;
(function (AssetTradingConfig$) {
    /** @deprecated use `AssetTradingConfig$inboundSchema` instead. */
    AssetTradingConfig$.inboundSchema = AssetTradingConfig$inboundSchema;
    /** @deprecated use `AssetTradingConfig$outboundSchema` instead. */
    AssetTradingConfig$.outboundSchema = AssetTradingConfig$outboundSchema;
})(AssetTradingConfig$ || (AssetTradingConfig$ = {}));
export function assetTradingConfigToJSON(assetTradingConfig) {
    return JSON.stringify(AssetTradingConfig$outboundSchema.parse(assetTradingConfig));
}
export function assetTradingConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetTradingConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetTradingConfig' from JSON`);
}
//# sourceMappingURL=assettradingconfig.js.map