/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export var MatchAttributes;
(function (MatchAttributes) {
    MatchAttributes["MatchAttributeUnspecified"] = "MATCH_ATTRIBUTE_UNSPECIFIED";
    MatchAttributes["Name"] = "NAME";
    MatchAttributes["PhoneNumber"] = "PHONE_NUMBER";
    MatchAttributes["BirthDate"] = "BIRTH_DATE";
    MatchAttributes["Identification"] = "IDENTIFICATION";
    MatchAttributes["Email"] = "EMAIL";
    MatchAttributes["Address"] = "ADDRESS";
})(MatchAttributes || (MatchAttributes = {}));
/**
 * The match state for a profile, one of:
 *
 * @remarks
 * - `MATCH_UNSPECIFIED` - Default/Null value.
 * - `CONFIRMED_MATCH` - Match is confirmed.
 * - `POTENTIAL_MATCH` - Match is a potential.
 * - `NO_MATCH` - Match is confirmed not to be a match.
 * - `INCONCLUSIVE` - Match is deemed to be inconclusive.
 */
export var MatchState;
(function (MatchState) {
    MatchState["MatchUnspecified"] = "MATCH_UNSPECIFIED";
    MatchState["ConfirmedMatch"] = "CONFIRMED_MATCH";
    MatchState["PotentialMatch"] = "POTENTIAL_MATCH";
    MatchState["NoMatch"] = "NO_MATCH";
    MatchState["Inconclusive"] = "INCONCLUSIVE";
})(MatchState || (MatchState = {}));
export var MatchTypes;
(function (MatchTypes) {
    MatchTypes["MatchTypeUnspecified"] = "MATCH_TYPE_UNSPECIFIED";
    MatchTypes["NonOfacSanctions"] = "NON_OFAC_SANCTIONS";
    MatchTypes["RelativeOrCloseAssociate"] = "RELATIVE_OR_CLOSE_ASSOCIATE";
    MatchTypes["OfacSanctions"] = "OFAC_SANCTIONS";
    MatchTypes["PoliticallyExposedPerson"] = "POLITICALLY_EXPOSED_PERSON";
    MatchTypes["Dndb"] = "DNDB";
    MatchTypes["NegativeNews"] = "NEGATIVE_NEWS";
})(MatchTypes || (MatchTypes = {}));
/** @internal */
export const MatchAttributes$inboundSchema = z
    .union([
    z.nativeEnum(MatchAttributes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MatchAttributes$outboundSchema = z.union([
    z.nativeEnum(MatchAttributes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MatchAttributes$;
(function (MatchAttributes$) {
    /** @deprecated use `MatchAttributes$inboundSchema` instead. */
    MatchAttributes$.inboundSchema = MatchAttributes$inboundSchema;
    /** @deprecated use `MatchAttributes$outboundSchema` instead. */
    MatchAttributes$.outboundSchema = MatchAttributes$outboundSchema;
})(MatchAttributes$ || (MatchAttributes$ = {}));
/** @internal */
export const MatchState$inboundSchema = z
    .union([
    z.nativeEnum(MatchState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MatchState$outboundSchema = z.union([
    z.nativeEnum(MatchState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MatchState$;
(function (MatchState$) {
    /** @deprecated use `MatchState$inboundSchema` instead. */
    MatchState$.inboundSchema = MatchState$inboundSchema;
    /** @deprecated use `MatchState$outboundSchema` instead. */
    MatchState$.outboundSchema = MatchState$outboundSchema;
})(MatchState$ || (MatchState$ = {}));
/** @internal */
export const MatchTypes$inboundSchema = z
    .union([
    z.nativeEnum(MatchTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const MatchTypes$outboundSchema = z.union([
    z.nativeEnum(MatchTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MatchTypes$;
(function (MatchTypes$) {
    /** @deprecated use `MatchTypes$inboundSchema` instead. */
    MatchTypes$.inboundSchema = MatchTypes$inboundSchema;
    /** @deprecated use `MatchTypes$outboundSchema` instead. */
    MatchTypes$.outboundSchema = MatchTypes$outboundSchema;
})(MatchTypes$ || (MatchTypes$ = {}));
/** @internal */
export const WatchlistMatch$inboundSchema = z.object({
    active: z.boolean().optional(),
    created_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    exclude_from_screening: z.boolean().optional(),
    match_attributes: z.array(MatchAttributes$inboundSchema).optional(),
    match_state: MatchState$inboundSchema.optional(),
    match_types: z.array(MatchTypes$inboundSchema).optional(),
    updated_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    watchlist_id: z.string().optional(),
    watchlist_item_id: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "exclude_from_screening": "excludeFromScreening",
        "match_attributes": "matchAttributes",
        "match_state": "matchState",
        "match_types": "matchTypes",
        "updated_at": "updatedAt",
        "watchlist_id": "watchlistId",
        "watchlist_item_id": "watchlistItemId",
    });
});
/** @internal */
export const WatchlistMatch$outboundSchema = z.object({
    active: z.boolean().optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    excludeFromScreening: z.boolean().optional(),
    matchAttributes: z.array(MatchAttributes$outboundSchema).optional(),
    matchState: MatchState$outboundSchema.optional(),
    matchTypes: z.array(MatchTypes$outboundSchema).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    watchlistId: z.string().optional(),
    watchlistItemId: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        excludeFromScreening: "exclude_from_screening",
        matchAttributes: "match_attributes",
        matchState: "match_state",
        matchTypes: "match_types",
        updatedAt: "updated_at",
        watchlistId: "watchlist_id",
        watchlistItemId: "watchlist_item_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistMatch$;
(function (WatchlistMatch$) {
    /** @deprecated use `WatchlistMatch$inboundSchema` instead. */
    WatchlistMatch$.inboundSchema = WatchlistMatch$inboundSchema;
    /** @deprecated use `WatchlistMatch$outboundSchema` instead. */
    WatchlistMatch$.outboundSchema = WatchlistMatch$outboundSchema;
})(WatchlistMatch$ || (WatchlistMatch$ = {}));
export function watchlistMatchToJSON(watchlistMatch) {
    return JSON.stringify(WatchlistMatch$outboundSchema.parse(watchlistMatch));
}
export function watchlistMatchFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WatchlistMatch$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WatchlistMatch' from JSON`);
}
//# sourceMappingURL=watchlistmatch.js.map