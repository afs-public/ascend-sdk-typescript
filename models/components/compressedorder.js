/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BasketTradingExecutedPrice$inboundSchema, BasketTradingExecutedPrice$outboundSchema, } from "./baskettradingexecutedprice.js";
import { BasketTradingExecutions$inboundSchema, BasketTradingExecutions$outboundSchema, } from "./baskettradingexecutions.js";
/**
 * The type of the asset in this order
 */
export var CompressedOrderAssetType;
(function (CompressedOrderAssetType) {
    CompressedOrderAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    CompressedOrderAssetType["Equity"] = "EQUITY";
    CompressedOrderAssetType["MutualFund"] = "MUTUAL_FUND";
})(CompressedOrderAssetType || (CompressedOrderAssetType = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported
 */
export var CompressedOrderIdentifierType;
(function (CompressedOrderIdentifierType) {
    CompressedOrderIdentifierType["Symbol"] = "SYMBOL";
    CompressedOrderIdentifierType["Cusip"] = "CUSIP";
    CompressedOrderIdentifierType["Isin"] = "ISIN";
})(CompressedOrderIdentifierType || (CompressedOrderIdentifierType = {}));
/**
 * When an order has the REJECTED status, this will be populated with a system code describing the rejection.
 */
export var CompressedOrderOrderRejectedReason;
(function (CompressedOrderOrderRejectedReason) {
    CompressedOrderOrderRejectedReason["OrderRejectReasonUnspecified"] = "ORDER_REJECT_REASON_UNSPECIFIED";
    CompressedOrderOrderRejectedReason["BrokerOption"] = "BROKER_OPTION";
    CompressedOrderOrderRejectedReason["UnknownSecurity"] = "UNKNOWN_SECURITY";
    CompressedOrderOrderRejectedReason["ExchangeClosed"] = "EXCHANGE_CLOSED";
    CompressedOrderOrderRejectedReason["TooLateToEnter"] = "TOO_LATE_TO_ENTER";
    CompressedOrderOrderRejectedReason["UnknownOrder"] = "UNKNOWN_ORDER";
    CompressedOrderOrderRejectedReason["DuplicateOrder"] = "DUPLICATE_ORDER";
    CompressedOrderOrderRejectedReason["StaleOrder"] = "STALE_ORDER";
    CompressedOrderOrderRejectedReason["BelowNotionalMinimum"] = "BELOW_NOTIONAL_MINIMUM";
    CompressedOrderOrderRejectedReason["AccountNotEntitled"] = "ACCOUNT_NOT_ENTITLED";
    CompressedOrderOrderRejectedReason["SystemError"] = "SYSTEM_ERROR";
    CompressedOrderOrderRejectedReason["BlockingCorporateAction"] = "BLOCKING_CORPORATE_ACTION";
    CompressedOrderOrderRejectedReason["UnavailablePriceQuote"] = "UNAVAILABLE_PRICE_QUOTE";
    CompressedOrderOrderRejectedReason["ExecutionMisconfiguredClient"] = "EXECUTION_MISCONFIGURED_CLIENT";
    CompressedOrderOrderRejectedReason["NotionalQuantityNotAllowedForSecurity"] = "NOTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    CompressedOrderOrderRejectedReason["FractionalQuantityNotAllowedForSecurity"] = "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    CompressedOrderOrderRejectedReason["OnlyFractionalSellOrWholeOrdersAllowedForSecurity"] = "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY";
    CompressedOrderOrderRejectedReason["SymbolNotTradeable"] = "SYMBOL_NOT_TRADEABLE";
    CompressedOrderOrderRejectedReason["AboveNotionalMaximum"] = "ABOVE_NOTIONAL_MAXIMUM";
    CompressedOrderOrderRejectedReason["AboveShareMaximum"] = "ABOVE_SHARE_MAXIMUM";
    CompressedOrderOrderRejectedReason["MaxSellQuantityRequired"] = "MAX_SELL_QUANTITY_REQUIRED";
    CompressedOrderOrderRejectedReason["MaxSellQuantityProhibited"] = "MAX_SELL_QUANTITY_PROHIBITED";
    CompressedOrderOrderRejectedReason["StockTradesDisabled"] = "STOCK_TRADES_DISABLED";
    CompressedOrderOrderRejectedReason["AssetNotSetUpToTrade"] = "ASSET_NOT_SET_UP_TO_TRADE";
    CompressedOrderOrderRejectedReason["AnotherBasketOrderForAccountHasFailedRiskChecks"] = "ANOTHER_BASKET_ORDER_FOR_ACCOUNT_HAS_FAILED_RISK_CHECKS";
    CompressedOrderOrderRejectedReason["InsufficientPosition"] = "INSUFFICIENT_POSITION";
    CompressedOrderOrderRejectedReason["FailedBuyingPower"] = "FAILED_BUYING_POWER";
    CompressedOrderOrderRejectedReason["RoundUpAmountTooSmall"] = "ROUND_UP_AMOUNT_TOO_SMALL";
    CompressedOrderOrderRejectedReason["AssetNotSetUpForRoundUps"] = "ASSET_NOT_SET_UP_FOR_ROUND_UPS";
})(CompressedOrderOrderRejectedReason || (CompressedOrderOrderRejectedReason = {}));
/**
 * The processing status of the order
 */
export var CompressedOrderOrderStatus;
(function (CompressedOrderOrderStatus) {
    CompressedOrderOrderStatus["OrderStatusUnspecified"] = "ORDER_STATUS_UNSPECIFIED";
    CompressedOrderOrderStatus["PendingNew"] = "PENDING_NEW";
    CompressedOrderOrderStatus["New"] = "NEW";
    CompressedOrderOrderStatus["PartiallyFilled"] = "PARTIALLY_FILLED";
    CompressedOrderOrderStatus["Filled"] = "FILLED";
    CompressedOrderOrderStatus["Rejected"] = "REJECTED";
    CompressedOrderOrderStatus["RemovedBeforeSubmission"] = "REMOVED_BEFORE_SUBMISSION";
})(CompressedOrderOrderStatus || (CompressedOrderOrderStatus = {}));
/**
 * The execution type of this order. Only MARKET is supported.
 */
export var CompressedOrderOrderType;
(function (CompressedOrderOrderType) {
    CompressedOrderOrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    CompressedOrderOrderType["Market"] = "MARKET";
})(CompressedOrderOrderType || (CompressedOrderOrderType = {}));
/**
 * The side of this order.
 */
export var CompressedOrderSide;
(function (CompressedOrderSide) {
    CompressedOrderSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    CompressedOrderSide["Buy"] = "BUY";
    CompressedOrderSide["Sell"] = "SELL";
})(CompressedOrderSide || (CompressedOrderSide = {}));
export var CompressedOrderSpecialReportingInstructions;
(function (CompressedOrderSpecialReportingInstructions) {
    CompressedOrderSpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    CompressedOrderSpecialReportingInstructions["Solicited"] = "SOLICITED";
    CompressedOrderSpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    CompressedOrderSpecialReportingInstructions["RoundUp"] = "ROUND_UP";
})(CompressedOrderSpecialReportingInstructions || (CompressedOrderSpecialReportingInstructions = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
export var CompressedOrderTimeInForce;
(function (CompressedOrderTimeInForce) {
    CompressedOrderTimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    CompressedOrderTimeInForce["Day"] = "DAY";
})(CompressedOrderTimeInForce || (CompressedOrderTimeInForce = {}));
/** @internal */
export const CompressedOrderAssetType$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderAssetType$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderAssetType$;
(function (CompressedOrderAssetType$) {
    /** @deprecated use `CompressedOrderAssetType$inboundSchema` instead. */
    CompressedOrderAssetType$.inboundSchema = CompressedOrderAssetType$inboundSchema;
    /** @deprecated use `CompressedOrderAssetType$outboundSchema` instead. */
    CompressedOrderAssetType$.outboundSchema = CompressedOrderAssetType$outboundSchema;
})(CompressedOrderAssetType$ || (CompressedOrderAssetType$ = {}));
/** @internal */
export const CompressedOrderCumulativeNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CompressedOrderCumulativeNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderCumulativeNotionalValue$;
(function (CompressedOrderCumulativeNotionalValue$) {
    /** @deprecated use `CompressedOrderCumulativeNotionalValue$inboundSchema` instead. */
    CompressedOrderCumulativeNotionalValue$.inboundSchema = CompressedOrderCumulativeNotionalValue$inboundSchema;
    /** @deprecated use `CompressedOrderCumulativeNotionalValue$outboundSchema` instead. */
    CompressedOrderCumulativeNotionalValue$.outboundSchema = CompressedOrderCumulativeNotionalValue$outboundSchema;
})(CompressedOrderCumulativeNotionalValue$ || (CompressedOrderCumulativeNotionalValue$ = {}));
export function compressedOrderCumulativeNotionalValueToJSON(compressedOrderCumulativeNotionalValue) {
    return JSON.stringify(CompressedOrderCumulativeNotionalValue$outboundSchema.parse(compressedOrderCumulativeNotionalValue));
}
export function compressedOrderCumulativeNotionalValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompressedOrderCumulativeNotionalValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompressedOrderCumulativeNotionalValue' from JSON`);
}
/** @internal */
export const CompressedOrderFilledQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CompressedOrderFilledQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderFilledQuantity$;
(function (CompressedOrderFilledQuantity$) {
    /** @deprecated use `CompressedOrderFilledQuantity$inboundSchema` instead. */
    CompressedOrderFilledQuantity$.inboundSchema = CompressedOrderFilledQuantity$inboundSchema;
    /** @deprecated use `CompressedOrderFilledQuantity$outboundSchema` instead. */
    CompressedOrderFilledQuantity$.outboundSchema = CompressedOrderFilledQuantity$outboundSchema;
})(CompressedOrderFilledQuantity$ || (CompressedOrderFilledQuantity$ = {}));
export function compressedOrderFilledQuantityToJSON(compressedOrderFilledQuantity) {
    return JSON.stringify(CompressedOrderFilledQuantity$outboundSchema.parse(compressedOrderFilledQuantity));
}
export function compressedOrderFilledQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompressedOrderFilledQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompressedOrderFilledQuantity' from JSON`);
}
/** @internal */
export const CompressedOrderIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderIdentifierType$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderIdentifierType$;
(function (CompressedOrderIdentifierType$) {
    /** @deprecated use `CompressedOrderIdentifierType$inboundSchema` instead. */
    CompressedOrderIdentifierType$.inboundSchema = CompressedOrderIdentifierType$inboundSchema;
    /** @deprecated use `CompressedOrderIdentifierType$outboundSchema` instead. */
    CompressedOrderIdentifierType$.outboundSchema = CompressedOrderIdentifierType$outboundSchema;
})(CompressedOrderIdentifierType$ || (CompressedOrderIdentifierType$ = {}));
/** @internal */
export const CompressedOrderNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CompressedOrderNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderNotionalValue$;
(function (CompressedOrderNotionalValue$) {
    /** @deprecated use `CompressedOrderNotionalValue$inboundSchema` instead. */
    CompressedOrderNotionalValue$.inboundSchema = CompressedOrderNotionalValue$inboundSchema;
    /** @deprecated use `CompressedOrderNotionalValue$outboundSchema` instead. */
    CompressedOrderNotionalValue$.outboundSchema = CompressedOrderNotionalValue$outboundSchema;
})(CompressedOrderNotionalValue$ || (CompressedOrderNotionalValue$ = {}));
export function compressedOrderNotionalValueToJSON(compressedOrderNotionalValue) {
    return JSON.stringify(CompressedOrderNotionalValue$outboundSchema.parse(compressedOrderNotionalValue));
}
export function compressedOrderNotionalValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompressedOrderNotionalValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompressedOrderNotionalValue' from JSON`);
}
/** @internal */
export const CompressedOrderOrderRejectedReason$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderOrderRejectedReason),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderOrderRejectedReason$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderOrderRejectedReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderOrderRejectedReason$;
(function (CompressedOrderOrderRejectedReason$) {
    /** @deprecated use `CompressedOrderOrderRejectedReason$inboundSchema` instead. */
    CompressedOrderOrderRejectedReason$.inboundSchema = CompressedOrderOrderRejectedReason$inboundSchema;
    /** @deprecated use `CompressedOrderOrderRejectedReason$outboundSchema` instead. */
    CompressedOrderOrderRejectedReason$.outboundSchema = CompressedOrderOrderRejectedReason$outboundSchema;
})(CompressedOrderOrderRejectedReason$ || (CompressedOrderOrderRejectedReason$ = {}));
/** @internal */
export const CompressedOrderOrderStatus$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderOrderStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderOrderStatus$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderOrderStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderOrderStatus$;
(function (CompressedOrderOrderStatus$) {
    /** @deprecated use `CompressedOrderOrderStatus$inboundSchema` instead. */
    CompressedOrderOrderStatus$.inboundSchema = CompressedOrderOrderStatus$inboundSchema;
    /** @deprecated use `CompressedOrderOrderStatus$outboundSchema` instead. */
    CompressedOrderOrderStatus$.outboundSchema = CompressedOrderOrderStatus$outboundSchema;
})(CompressedOrderOrderStatus$ || (CompressedOrderOrderStatus$ = {}));
/** @internal */
export const CompressedOrderOrderType$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderOrderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderOrderType$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderOrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderOrderType$;
(function (CompressedOrderOrderType$) {
    /** @deprecated use `CompressedOrderOrderType$inboundSchema` instead. */
    CompressedOrderOrderType$.inboundSchema = CompressedOrderOrderType$inboundSchema;
    /** @deprecated use `CompressedOrderOrderType$outboundSchema` instead. */
    CompressedOrderOrderType$.outboundSchema = CompressedOrderOrderType$outboundSchema;
})(CompressedOrderOrderType$ || (CompressedOrderOrderType$ = {}));
/** @internal */
export const CompressedOrderQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CompressedOrderQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderQuantity$;
(function (CompressedOrderQuantity$) {
    /** @deprecated use `CompressedOrderQuantity$inboundSchema` instead. */
    CompressedOrderQuantity$.inboundSchema = CompressedOrderQuantity$inboundSchema;
    /** @deprecated use `CompressedOrderQuantity$outboundSchema` instead. */
    CompressedOrderQuantity$.outboundSchema = CompressedOrderQuantity$outboundSchema;
})(CompressedOrderQuantity$ || (CompressedOrderQuantity$ = {}));
export function compressedOrderQuantityToJSON(compressedOrderQuantity) {
    return JSON.stringify(CompressedOrderQuantity$outboundSchema.parse(compressedOrderQuantity));
}
export function compressedOrderQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompressedOrderQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompressedOrderQuantity' from JSON`);
}
/** @internal */
export const CompressedOrderSide$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderSide$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderSide$;
(function (CompressedOrderSide$) {
    /** @deprecated use `CompressedOrderSide$inboundSchema` instead. */
    CompressedOrderSide$.inboundSchema = CompressedOrderSide$inboundSchema;
    /** @deprecated use `CompressedOrderSide$outboundSchema` instead. */
    CompressedOrderSide$.outboundSchema = CompressedOrderSide$outboundSchema;
})(CompressedOrderSide$ || (CompressedOrderSide$ = {}));
/** @internal */
export const CompressedOrderSpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderSpecialReportingInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderSpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderSpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderSpecialReportingInstructions$;
(function (CompressedOrderSpecialReportingInstructions$) {
    /** @deprecated use `CompressedOrderSpecialReportingInstructions$inboundSchema` instead. */
    CompressedOrderSpecialReportingInstructions$.inboundSchema = CompressedOrderSpecialReportingInstructions$inboundSchema;
    /** @deprecated use `CompressedOrderSpecialReportingInstructions$outboundSchema` instead. */
    CompressedOrderSpecialReportingInstructions$.outboundSchema = CompressedOrderSpecialReportingInstructions$outboundSchema;
})(CompressedOrderSpecialReportingInstructions$ || (CompressedOrderSpecialReportingInstructions$ = {}));
/** @internal */
export const CompressedOrderTimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(CompressedOrderTimeInForce),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CompressedOrderTimeInForce$outboundSchema = z.union([
    z.nativeEnum(CompressedOrderTimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrderTimeInForce$;
(function (CompressedOrderTimeInForce$) {
    /** @deprecated use `CompressedOrderTimeInForce$inboundSchema` instead. */
    CompressedOrderTimeInForce$.inboundSchema = CompressedOrderTimeInForce$inboundSchema;
    /** @deprecated use `CompressedOrderTimeInForce$outboundSchema` instead. */
    CompressedOrderTimeInForce$.outboundSchema = CompressedOrderTimeInForce$outboundSchema;
})(CompressedOrderTimeInForce$ || (CompressedOrderTimeInForce$ = {}));
/** @internal */
export const CompressedOrder$inboundSchema = z.object({
    asset_id: z.string().optional(),
    asset_type: CompressedOrderAssetType$inboundSchema.optional(),
    average_price_account_id: z.string().optional(),
    average_prices: z.array(BasketTradingExecutedPrice$inboundSchema).optional(),
    compressed_order_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    cumulative_notional_value: z.nullable(z.lazy(() => CompressedOrderCumulativeNotionalValue$inboundSchema)).optional(),
    currency_code: z.string().optional(),
    executions: z.array(BasketTradingExecutions$inboundSchema).optional(),
    filled_quantity: z.nullable(z.lazy(() => CompressedOrderFilledQuantity$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: CompressedOrderIdentifierType$inboundSchema.optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    notional_value: z.nullable(z.lazy(() => CompressedOrderNotionalValue$inboundSchema)).optional(),
    order_rejected_reason: CompressedOrderOrderRejectedReason$inboundSchema
        .optional(),
    order_status: CompressedOrderOrderStatus$inboundSchema.optional(),
    order_type: CompressedOrderOrderType$inboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => CompressedOrderQuantity$inboundSchema))
        .optional(),
    side: CompressedOrderSide$inboundSchema.optional(),
    special_reporting_instructions: z.array(CompressedOrderSpecialReportingInstructions$inboundSchema).optional(),
    time_in_force: CompressedOrderTimeInForce$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "asset_id": "assetId",
        "asset_type": "assetType",
        "average_price_account_id": "averagePriceAccountId",
        "average_prices": "averagePrices",
        "compressed_order_id": "compressedOrderId",
        "create_time": "createTime",
        "cumulative_notional_value": "cumulativeNotionalValue",
        "currency_code": "currencyCode",
        "filled_quantity": "filledQuantity",
        "identifier_type": "identifierType",
        "last_update_time": "lastUpdateTime",
        "notional_value": "notionalValue",
        "order_rejected_reason": "orderRejectedReason",
        "order_status": "orderStatus",
        "order_type": "orderType",
        "special_reporting_instructions": "specialReportingInstructions",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
export const CompressedOrder$outboundSchema = z.object({
    assetId: z.string().optional(),
    assetType: CompressedOrderAssetType$outboundSchema.optional(),
    averagePriceAccountId: z.string().optional(),
    averagePrices: z.array(BasketTradingExecutedPrice$outboundSchema).optional(),
    compressedOrderId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    cumulativeNotionalValue: z.nullable(z.lazy(() => CompressedOrderCumulativeNotionalValue$outboundSchema)).optional(),
    currencyCode: z.string().optional(),
    executions: z.array(BasketTradingExecutions$outboundSchema).optional(),
    filledQuantity: z.nullable(z.lazy(() => CompressedOrderFilledQuantity$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: CompressedOrderIdentifierType$outboundSchema.optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    name: z.string().optional(),
    notionalValue: z.nullable(z.lazy(() => CompressedOrderNotionalValue$outboundSchema)).optional(),
    orderRejectedReason: CompressedOrderOrderRejectedReason$outboundSchema
        .optional(),
    orderStatus: CompressedOrderOrderStatus$outboundSchema.optional(),
    orderType: CompressedOrderOrderType$outboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => CompressedOrderQuantity$outboundSchema))
        .optional(),
    side: CompressedOrderSide$outboundSchema.optional(),
    specialReportingInstructions: z.array(CompressedOrderSpecialReportingInstructions$outboundSchema).optional(),
    timeInForce: CompressedOrderTimeInForce$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        assetId: "asset_id",
        assetType: "asset_type",
        averagePriceAccountId: "average_price_account_id",
        averagePrices: "average_prices",
        compressedOrderId: "compressed_order_id",
        createTime: "create_time",
        cumulativeNotionalValue: "cumulative_notional_value",
        currencyCode: "currency_code",
        filledQuantity: "filled_quantity",
        identifierType: "identifier_type",
        lastUpdateTime: "last_update_time",
        notionalValue: "notional_value",
        orderRejectedReason: "order_rejected_reason",
        orderStatus: "order_status",
        orderType: "order_type",
        specialReportingInstructions: "special_reporting_instructions",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompressedOrder$;
(function (CompressedOrder$) {
    /** @deprecated use `CompressedOrder$inboundSchema` instead. */
    CompressedOrder$.inboundSchema = CompressedOrder$inboundSchema;
    /** @deprecated use `CompressedOrder$outboundSchema` instead. */
    CompressedOrder$.outboundSchema = CompressedOrder$outboundSchema;
})(CompressedOrder$ || (CompressedOrder$ = {}));
export function compressedOrderToJSON(compressedOrder) {
    return JSON.stringify(CompressedOrder$outboundSchema.parse(compressedOrder));
}
export function compressedOrderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompressedOrder$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompressedOrder' from JSON`);
}
//# sourceMappingURL=compressedorder.js.map