/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { TradingExecutedPrice$inboundSchema, TradingExecutedPrice$outboundSchema, } from "./tradingexecutedprice.js";
/** @internal */
export const AccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccruedInterestAmount$;
(function (AccruedInterestAmount$) {
    /** @deprecated use `AccruedInterestAmount$inboundSchema` instead. */
    AccruedInterestAmount$.inboundSchema = AccruedInterestAmount$inboundSchema;
    /** @deprecated use `AccruedInterestAmount$outboundSchema` instead. */
    AccruedInterestAmount$.outboundSchema = AccruedInterestAmount$outboundSchema;
})(AccruedInterestAmount$ || (AccruedInterestAmount$ = {}));
export function accruedInterestAmountToJSON(accruedInterestAmount) {
    return JSON.stringify(AccruedInterestAmount$outboundSchema.parse(accruedInterestAmount));
}
export function accruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccruedInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccruedInterestAmount' from JSON`);
}
/** @internal */
export const GrossCreditAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const GrossCreditAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrossCreditAmount$;
(function (GrossCreditAmount$) {
    /** @deprecated use `GrossCreditAmount$inboundSchema` instead. */
    GrossCreditAmount$.inboundSchema = GrossCreditAmount$inboundSchema;
    /** @deprecated use `GrossCreditAmount$outboundSchema` instead. */
    GrossCreditAmount$.outboundSchema = GrossCreditAmount$outboundSchema;
})(GrossCreditAmount$ || (GrossCreditAmount$ = {}));
export function grossCreditAmountToJSON(grossCreditAmount) {
    return JSON.stringify(GrossCreditAmount$outboundSchema.parse(grossCreditAmount));
}
export function grossCreditAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GrossCreditAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GrossCreditAmount' from JSON`);
}
/** @internal */
export const PrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const PrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrevailingMarketPrice$;
(function (PrevailingMarketPrice$) {
    /** @deprecated use `PrevailingMarketPrice$inboundSchema` instead. */
    PrevailingMarketPrice$.inboundSchema = PrevailingMarketPrice$inboundSchema;
    /** @deprecated use `PrevailingMarketPrice$outboundSchema` instead. */
    PrevailingMarketPrice$.outboundSchema = PrevailingMarketPrice$outboundSchema;
})(PrevailingMarketPrice$ || (PrevailingMarketPrice$ = {}));
export function prevailingMarketPriceToJSON(prevailingMarketPrice) {
    return JSON.stringify(PrevailingMarketPrice$outboundSchema.parse(prevailingMarketPrice));
}
export function prevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PrevailingMarketPrice' from JSON`);
}
/** @internal */
export const Quantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const Quantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Quantity$;
(function (Quantity$) {
    /** @deprecated use `Quantity$inboundSchema` instead. */
    Quantity$.inboundSchema = Quantity$inboundSchema;
    /** @deprecated use `Quantity$outboundSchema` instead. */
    Quantity$.outboundSchema = Quantity$outboundSchema;
})(Quantity$ || (Quantity$ = {}));
export function quantityToJSON(quantity) {
    return JSON.stringify(Quantity$outboundSchema.parse(quantity));
}
export function quantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Quantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Quantity' from JSON`);
}
/** @internal */
export const TradingExecutions$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => AccruedInterestAmount$inboundSchema)).optional(),
    executed_prices: z.array(TradingExecutedPrice$inboundSchema).optional(),
    executed_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    gross_credit_amount: z.nullable(z.lazy(() => GrossCreditAmount$inboundSchema))
        .optional(),
    prevailing_market_price: z.nullable(z.lazy(() => PrevailingMarketPrice$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => Quantity$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "executed_prices": "executedPrices",
        "executed_time": "executedTime",
        "gross_credit_amount": "grossCreditAmount",
        "prevailing_market_price": "prevailingMarketPrice",
    });
});
/** @internal */
export const TradingExecutions$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => AccruedInterestAmount$outboundSchema)).optional(),
    executedPrices: z.array(TradingExecutedPrice$outboundSchema).optional(),
    executedTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    grossCreditAmount: z.nullable(z.lazy(() => GrossCreditAmount$outboundSchema))
        .optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => PrevailingMarketPrice$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => Quantity$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        executedPrices: "executed_prices",
        executedTime: "executed_time",
        grossCreditAmount: "gross_credit_amount",
        prevailingMarketPrice: "prevailing_market_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradingExecutions$;
(function (TradingExecutions$) {
    /** @deprecated use `TradingExecutions$inboundSchema` instead. */
    TradingExecutions$.inboundSchema = TradingExecutions$inboundSchema;
    /** @deprecated use `TradingExecutions$outboundSchema` instead. */
    TradingExecutions$.outboundSchema = TradingExecutions$outboundSchema;
})(TradingExecutions$ || (TradingExecutions$ = {}));
export function tradingExecutionsToJSON(tradingExecutions) {
    return JSON.stringify(TradingExecutions$outboundSchema.parse(tradingExecutions));
}
export function tradingExecutionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradingExecutions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradingExecutions' from JSON`);
}
//# sourceMappingURL=tradingexecutions.js.map