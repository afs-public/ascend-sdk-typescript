/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BondYieldCreate$inboundSchema, BondYieldCreate$outboundSchema, } from "./bondyieldcreate.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
import { PriceAdjustmentCreate$inboundSchema, PriceAdjustmentCreate$outboundSchema, } from "./priceadjustmentcreate.js";
/** @internal */
export const ExecutionCreate$inboundSchema = z.object({
    accrued_interest_amount: DecimalCreate$inboundSchema.optional(),
    bond_yield: z.array(BondYieldCreate$inboundSchema).optional(),
    commission_amount: DecimalCreate$inboundSchema.optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    external_id: z.string(),
    gross_amount: DecimalCreate$inboundSchema.optional(),
    memo: z.string().optional(),
    prevailing_market_price: DecimalCreate$inboundSchema.optional(),
    price: DecimalCreate$inboundSchema,
    price_adjustment: PriceAdjustmentCreate$inboundSchema.optional(),
    quantity: DecimalCreate$inboundSchema,
    street_execution_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "bond_yield": "bondYield",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "external_id": "externalId",
        "gross_amount": "grossAmount",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "street_execution_id": "streetExecutionId",
    });
});
/** @internal */
export const ExecutionCreate$outboundSchema = z.object({
    accruedInterestAmount: DecimalCreate$outboundSchema.optional(),
    bondYield: z.array(BondYieldCreate$outboundSchema).optional(),
    commissionAmount: DecimalCreate$outboundSchema.optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString())),
    externalId: z.string(),
    grossAmount: DecimalCreate$outboundSchema.optional(),
    memo: z.string().optional(),
    prevailingMarketPrice: DecimalCreate$outboundSchema.optional(),
    price: DecimalCreate$outboundSchema,
    priceAdjustment: PriceAdjustmentCreate$outboundSchema.optional(),
    quantity: DecimalCreate$outboundSchema,
    streetExecutionId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        bondYield: "bond_yield",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        externalId: "external_id",
        grossAmount: "gross_amount",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        streetExecutionId: "street_execution_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExecutionCreate$;
(function (ExecutionCreate$) {
    /** @deprecated use `ExecutionCreate$inboundSchema` instead. */
    ExecutionCreate$.inboundSchema = ExecutionCreate$inboundSchema;
    /** @deprecated use `ExecutionCreate$outboundSchema` instead. */
    ExecutionCreate$.outboundSchema = ExecutionCreate$outboundSchema;
})(ExecutionCreate$ || (ExecutionCreate$ = {}));
export function executionCreateToJSON(executionCreate) {
    return JSON.stringify(ExecutionCreate$outboundSchema.parse(executionCreate));
}
export function executionCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExecutionCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExecutionCreate' from JSON`);
}
//# sourceMappingURL=executioncreate.js.map