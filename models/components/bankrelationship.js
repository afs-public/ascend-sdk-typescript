/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The bank account type.
 */
export var BankRelationshipType;
(function (BankRelationshipType) {
    BankRelationshipType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    BankRelationshipType["Checking"] = "CHECKING";
    BankRelationshipType["Savings"] = "SAVINGS";
})(BankRelationshipType || (BankRelationshipType = {}));
/**
 * The high level state of the bank relationship.
 */
export var BankRelationshipStateState;
(function (BankRelationshipStateState) {
    BankRelationshipStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    BankRelationshipStateState["Pending"] = "PENDING";
    BankRelationshipStateState["Approved"] = "APPROVED";
    BankRelationshipStateState["Canceled"] = "CANCELED";
    BankRelationshipStateState["Rejected"] = "REJECTED";
})(BankRelationshipStateState || (BankRelationshipStateState = {}));
/**
 * The verification method of the bank relationship.
 */
export var BankRelationshipVerificationMethod;
(function (BankRelationshipVerificationMethod) {
    BankRelationshipVerificationMethod["VerificationMethodUnspecified"] = "VERIFICATION_METHOD_UNSPECIFIED";
    BankRelationshipVerificationMethod["MicroDeposit"] = "MICRO_DEPOSIT";
    BankRelationshipVerificationMethod["Yodlee"] = "YODLEE";
    BankRelationshipVerificationMethod["Quovo"] = "QUOVO";
    BankRelationshipVerificationMethod["Giact"] = "GIACT";
    BankRelationshipVerificationMethod["Synapse"] = "SYNAPSE";
    BankRelationshipVerificationMethod["Sophtron"] = "SOPHTRON";
    BankRelationshipVerificationMethod["InternalBank"] = "INTERNAL_BANK";
    BankRelationshipVerificationMethod["Mx"] = "MX";
    BankRelationshipVerificationMethod["Fiserv"] = "FISERV";
    BankRelationshipVerificationMethod["PlaidToken"] = "PLAID_TOKEN";
})(BankRelationshipVerificationMethod || (BankRelationshipVerificationMethod = {}));
/** @internal */
export const BankRelationshipType$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BankRelationshipType$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipType$;
(function (BankRelationshipType$) {
    /** @deprecated use `BankRelationshipType$inboundSchema` instead. */
    BankRelationshipType$.inboundSchema = BankRelationshipType$inboundSchema;
    /** @deprecated use `BankRelationshipType$outboundSchema` instead. */
    BankRelationshipType$.outboundSchema = BankRelationshipType$outboundSchema;
})(BankRelationshipType$ || (BankRelationshipType$ = {}));
/** @internal */
export const BankAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    owner: z.string().optional(),
    routing_number: z.string().optional(),
    type: BankRelationshipType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "routing_number": "routingNumber",
    });
});
/** @internal */
export const BankAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    owner: z.string().optional(),
    routingNumber: z.string().optional(),
    type: BankRelationshipType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        routingNumber: "routing_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankAccount$;
(function (BankAccount$) {
    /** @deprecated use `BankAccount$inboundSchema` instead. */
    BankAccount$.inboundSchema = BankAccount$inboundSchema;
    /** @deprecated use `BankAccount$outboundSchema` instead. */
    BankAccount$.outboundSchema = BankAccount$outboundSchema;
})(BankAccount$ || (BankAccount$ = {}));
export function bankAccountToJSON(bankAccount) {
    return JSON.stringify(BankAccount$outboundSchema.parse(bankAccount));
}
export function bankAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankAccount' from JSON`);
}
/** @internal */
export const BankRelationshipStateState$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BankRelationshipStateState$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipStateState$;
(function (BankRelationshipStateState$) {
    /** @deprecated use `BankRelationshipStateState$inboundSchema` instead. */
    BankRelationshipStateState$.inboundSchema = BankRelationshipStateState$inboundSchema;
    /** @deprecated use `BankRelationshipStateState$outboundSchema` instead. */
    BankRelationshipStateState$.outboundSchema = BankRelationshipStateState$outboundSchema;
})(BankRelationshipStateState$ || (BankRelationshipStateState$ = {}));
/** @internal */
export const BankRelationshipState$inboundSchema = z.object({
    actor: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: BankRelationshipStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const BankRelationshipState$outboundSchema = z.object({
    actor: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: BankRelationshipStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipState$;
(function (BankRelationshipState$) {
    /** @deprecated use `BankRelationshipState$inboundSchema` instead. */
    BankRelationshipState$.inboundSchema = BankRelationshipState$inboundSchema;
    /** @deprecated use `BankRelationshipState$outboundSchema` instead. */
    BankRelationshipState$.outboundSchema = BankRelationshipState$outboundSchema;
})(BankRelationshipState$ || (BankRelationshipState$ = {}));
export function bankRelationshipStateToJSON(bankRelationshipState) {
    return JSON.stringify(BankRelationshipState$outboundSchema.parse(bankRelationshipState));
}
export function bankRelationshipStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankRelationshipState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankRelationshipState' from JSON`);
}
/** @internal */
export const BankRelationshipVerificationMethod$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipVerificationMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BankRelationshipVerificationMethod$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipVerificationMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipVerificationMethod$;
(function (BankRelationshipVerificationMethod$) {
    /** @deprecated use `BankRelationshipVerificationMethod$inboundSchema` instead. */
    BankRelationshipVerificationMethod$.inboundSchema = BankRelationshipVerificationMethod$inboundSchema;
    /** @deprecated use `BankRelationshipVerificationMethod$outboundSchema` instead. */
    BankRelationshipVerificationMethod$.outboundSchema = BankRelationshipVerificationMethod$outboundSchema;
})(BankRelationshipVerificationMethod$ || (BankRelationshipVerificationMethod$ = {}));
/** @internal */
export const BankRelationship$inboundSchema = z.object({
    bank_account: z.nullable(z.lazy(() => BankAccount$inboundSchema)).optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    nickname: z.string().optional(),
    plaid_processor_token: z.string().optional(),
    state: z.nullable(z.lazy(() => BankRelationshipState$inboundSchema))
        .optional(),
    verification_method: BankRelationshipVerificationMethod$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "bank_account": "bankAccount",
        "create_time": "createTime",
        "plaid_processor_token": "plaidProcessorToken",
        "verification_method": "verificationMethod",
    });
});
/** @internal */
export const BankRelationship$outboundSchema = z.object({
    bankAccount: z.nullable(z.lazy(() => BankAccount$outboundSchema)).optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    name: z.string().optional(),
    nickname: z.string().optional(),
    plaidProcessorToken: z.string().optional(),
    state: z.nullable(z.lazy(() => BankRelationshipState$outboundSchema))
        .optional(),
    verificationMethod: BankRelationshipVerificationMethod$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        bankAccount: "bank_account",
        createTime: "create_time",
        plaidProcessorToken: "plaid_processor_token",
        verificationMethod: "verification_method",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationship$;
(function (BankRelationship$) {
    /** @deprecated use `BankRelationship$inboundSchema` instead. */
    BankRelationship$.inboundSchema = BankRelationship$inboundSchema;
    /** @deprecated use `BankRelationship$outboundSchema` instead. */
    BankRelationship$.outboundSchema = BankRelationship$outboundSchema;
})(BankRelationship$ || (BankRelationship$ = {}));
export function bankRelationshipToJSON(bankRelationship) {
    return JSON.stringify(BankRelationship$outboundSchema.parse(bankRelationship));
}
export function bankRelationshipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankRelationship$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankRelationship' from JSON`);
}
//# sourceMappingURL=bankrelationship.js.map