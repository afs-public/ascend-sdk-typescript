/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { TaxWithholdingMetadataCreate$inboundSchema, TaxWithholdingMetadataCreate$outboundSchema, } from "./taxwithholdingmetadatacreate.js";
/**
 * The purpose of the operating account.
 */
export var OperatingPurpose;
(function (OperatingPurpose) {
    OperatingPurpose["OperatingPurposeUnspecified"] = "OPERATING_PURPOSE_UNSPECIFIED";
    OperatingPurpose["Custody"] = "CUSTODY";
    OperatingPurpose["SecFee"] = "SEC_FEE";
    OperatingPurpose["TafFee"] = "TAF_FEE";
    OperatingPurpose["TefraWithholding"] = "TEFRA_WITHHOLDING";
    OperatingPurpose["Suspense"] = "SUSPENSE";
    OperatingPurpose["Allocation"] = "ALLOCATION";
    OperatingPurpose["Error"] = "ERROR";
    OperatingPurpose["Deposit"] = "DEPOSIT";
    OperatingPurpose["WriteOff"] = "WRITE_OFF";
    OperatingPurpose["UnsecuredReserve"] = "UNSECURED_RESERVE";
    OperatingPurpose["Payable"] = "PAYABLE";
    OperatingPurpose["Commission"] = "COMMISSION";
    OperatingPurpose["Escheatment"] = "ESCHEATMENT";
    OperatingPurpose["InterestRevenue"] = "INTEREST_REVENUE";
    OperatingPurpose["StreetDepository"] = "STREET_DEPOSITORY";
    OperatingPurpose["Inventory"] = "INVENTORY";
    OperatingPurpose["TaxWithholding"] = "TAX_WITHHOLDING";
    OperatingPurpose["Fee"] = "FEE";
    OperatingPurpose["PrincipalTrading"] = "PRINCIPAL_TRADING";
    OperatingPurpose["SafekeepingBookEntityDomestic"] = "SAFEKEEPING_BOOK_ENTITY_DOMESTIC";
    OperatingPurpose["Fail"] = "FAIL";
})(OperatingPurpose || (OperatingPurpose = {}));
/** @internal */
export const OperatingPurpose$inboundSchema = z
    .union([
    z.nativeEnum(OperatingPurpose),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const OperatingPurpose$outboundSchema = z.union([
    z.nativeEnum(OperatingPurpose),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OperatingPurpose$;
(function (OperatingPurpose$) {
    /** @deprecated use `OperatingPurpose$inboundSchema` instead. */
    OperatingPurpose$.inboundSchema = OperatingPurpose$inboundSchema;
    /** @deprecated use `OperatingPurpose$outboundSchema` instead. */
    OperatingPurpose$.outboundSchema = OperatingPurpose$outboundSchema;
})(OperatingPurpose$ || (OperatingPurpose$ = {}));
/** @internal */
export const OperatingEnrollmentMetadataCreate$inboundSchema = z.object({
    operating_purpose: OperatingPurpose$inboundSchema,
    subtitle: z.string().optional(),
    tax_withholding_metadata: TaxWithholdingMetadataCreate$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "operating_purpose": "operatingPurpose",
        "tax_withholding_metadata": "taxWithholdingMetadata",
    });
});
/** @internal */
export const OperatingEnrollmentMetadataCreate$outboundSchema = z.object({
    operatingPurpose: OperatingPurpose$outboundSchema,
    subtitle: z.string().optional(),
    taxWithholdingMetadata: TaxWithholdingMetadataCreate$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        operatingPurpose: "operating_purpose",
        taxWithholdingMetadata: "tax_withholding_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OperatingEnrollmentMetadataCreate$;
(function (OperatingEnrollmentMetadataCreate$) {
    /** @deprecated use `OperatingEnrollmentMetadataCreate$inboundSchema` instead. */
    OperatingEnrollmentMetadataCreate$.inboundSchema = OperatingEnrollmentMetadataCreate$inboundSchema;
    /** @deprecated use `OperatingEnrollmentMetadataCreate$outboundSchema` instead. */
    OperatingEnrollmentMetadataCreate$.outboundSchema = OperatingEnrollmentMetadataCreate$outboundSchema;
})(OperatingEnrollmentMetadataCreate$ || (OperatingEnrollmentMetadataCreate$ = {}));
export function operatingEnrollmentMetadataCreateToJSON(operatingEnrollmentMetadataCreate) {
    return JSON.stringify(OperatingEnrollmentMetadataCreate$outboundSchema.parse(operatingEnrollmentMetadataCreate));
}
export function operatingEnrollmentMetadataCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OperatingEnrollmentMetadataCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OperatingEnrollmentMetadataCreate' from JSON`);
}
//# sourceMappingURL=operatingenrollmentmetadatacreate.js.map