/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of retirement distribution.
 */
export var AchWithdrawalType;
(function (AchWithdrawalType) {
    AchWithdrawalType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    AchWithdrawalType["Normal"] = "NORMAL";
    AchWithdrawalType["Disability"] = "DISABILITY";
    AchWithdrawalType["Sosepp"] = "SOSEPP";
    AchWithdrawalType["Premature"] = "PREMATURE";
    AchWithdrawalType["Death"] = "DEATH";
    AchWithdrawalType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    AchWithdrawalType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    AchWithdrawalType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    AchWithdrawalType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    AchWithdrawalType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    AchWithdrawalType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    AchWithdrawalType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    AchWithdrawalType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    AchWithdrawalType["ManagementFee"] = "MANAGEMENT_FEE";
    AchWithdrawalType["PlanLoan401K"] = "PLAN_LOAN_401K";
    AchWithdrawalType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    AchWithdrawalType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    AchWithdrawalType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    AchWithdrawalType["Revocation"] = "REVOCATION";
    AchWithdrawalType["NonReportable"] = "NON_REPORTABLE";
})(AchWithdrawalType || (AchWithdrawalType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var AchWithdrawalStateState;
(function (AchWithdrawalStateState) {
    AchWithdrawalStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AchWithdrawalStateState["Processing"] = "PROCESSING";
    AchWithdrawalStateState["PendingReview"] = "PENDING_REVIEW";
    AchWithdrawalStateState["Posted"] = "POSTED";
    AchWithdrawalStateState["Completed"] = "COMPLETED";
    AchWithdrawalStateState["Rejected"] = "REJECTED";
    AchWithdrawalStateState["Canceled"] = "CANCELED";
    AchWithdrawalStateState["Returned"] = "RETURNED";
    AchWithdrawalStateState["Postponed"] = "POSTPONED";
})(AchWithdrawalStateState || (AchWithdrawalStateState = {}));
/** @internal */
export const AchWithdrawalAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AchWithdrawalAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalAmount$;
(function (AchWithdrawalAmount$) {
    /** @deprecated use `AchWithdrawalAmount$inboundSchema` instead. */
    AchWithdrawalAmount$.inboundSchema = AchWithdrawalAmount$inboundSchema;
    /** @deprecated use `AchWithdrawalAmount$outboundSchema` instead. */
    AchWithdrawalAmount$.outboundSchema = AchWithdrawalAmount$outboundSchema;
})(AchWithdrawalAmount$ || (AchWithdrawalAmount$ = {}));
export function achWithdrawalAmountToJSON(achWithdrawalAmount) {
    return JSON.stringify(AchWithdrawalAmount$outboundSchema.parse(achWithdrawalAmount));
}
export function achWithdrawalAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalAmount' from JSON`);
}
/** @internal */
export const AchWithdrawalRetirementDistributionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AchWithdrawalRetirementDistributionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalRetirementDistributionAmount$;
(function (AchWithdrawalRetirementDistributionAmount$) {
    /** @deprecated use `AchWithdrawalRetirementDistributionAmount$inboundSchema` instead. */
    AchWithdrawalRetirementDistributionAmount$.inboundSchema = AchWithdrawalRetirementDistributionAmount$inboundSchema;
    /** @deprecated use `AchWithdrawalRetirementDistributionAmount$outboundSchema` instead. */
    AchWithdrawalRetirementDistributionAmount$.outboundSchema = AchWithdrawalRetirementDistributionAmount$outboundSchema;
})(AchWithdrawalRetirementDistributionAmount$ || (AchWithdrawalRetirementDistributionAmount$ = {}));
export function achWithdrawalRetirementDistributionAmountToJSON(achWithdrawalRetirementDistributionAmount) {
    return JSON.stringify(AchWithdrawalRetirementDistributionAmount$outboundSchema.parse(achWithdrawalRetirementDistributionAmount));
}
export function achWithdrawalRetirementDistributionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalRetirementDistributionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalRetirementDistributionAmount' from JSON`);
}
/** @internal */
export const AchWithdrawalPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AchWithdrawalPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalPercentage$;
(function (AchWithdrawalPercentage$) {
    /** @deprecated use `AchWithdrawalPercentage$inboundSchema` instead. */
    AchWithdrawalPercentage$.inboundSchema = AchWithdrawalPercentage$inboundSchema;
    /** @deprecated use `AchWithdrawalPercentage$outboundSchema` instead. */
    AchWithdrawalPercentage$.outboundSchema = AchWithdrawalPercentage$outboundSchema;
})(AchWithdrawalPercentage$ || (AchWithdrawalPercentage$ = {}));
export function achWithdrawalPercentageToJSON(achWithdrawalPercentage) {
    return JSON.stringify(AchWithdrawalPercentage$outboundSchema.parse(achWithdrawalPercentage));
}
export function achWithdrawalPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalPercentage' from JSON`);
}
/** @internal */
export const FederalTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => AchWithdrawalPercentage$inboundSchema))
        .optional(),
});
/** @internal */
export const FederalTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => AchWithdrawalPercentage$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FederalTaxWithholding$;
(function (FederalTaxWithholding$) {
    /** @deprecated use `FederalTaxWithholding$inboundSchema` instead. */
    FederalTaxWithholding$.inboundSchema = FederalTaxWithholding$inboundSchema;
    /** @deprecated use `FederalTaxWithholding$outboundSchema` instead. */
    FederalTaxWithholding$.outboundSchema = FederalTaxWithholding$outboundSchema;
})(FederalTaxWithholding$ || (FederalTaxWithholding$ = {}));
export function federalTaxWithholdingToJSON(federalTaxWithholding) {
    return JSON.stringify(FederalTaxWithholding$outboundSchema.parse(federalTaxWithholding));
}
export function federalTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FederalTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FederalTaxWithholding' from JSON`);
}
/** @internal */
export const AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$;
(function (AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$) {
    /** @deprecated use `AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema` instead. */
    AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$.inboundSchema = AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema;
    /** @deprecated use `AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema` instead. */
    AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$.outboundSchema = AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema;
})(AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$ || (AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$ = {}));
export function achWithdrawalRetirementDistributionStateTaxWithholdingAmountToJSON(achWithdrawalRetirementDistributionStateTaxWithholdingAmount) {
    return JSON.stringify(AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema
        .parse(achWithdrawalRetirementDistributionStateTaxWithholdingAmount));
}
export function achWithdrawalRetirementDistributionStateTaxWithholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalRetirementDistributionStateTaxWithholdingAmount' from JSON`);
}
/** @internal */
export const AchWithdrawalRetirementDistributionPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AchWithdrawalRetirementDistributionPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalRetirementDistributionPercentage$;
(function (AchWithdrawalRetirementDistributionPercentage$) {
    /** @deprecated use `AchWithdrawalRetirementDistributionPercentage$inboundSchema` instead. */
    AchWithdrawalRetirementDistributionPercentage$.inboundSchema = AchWithdrawalRetirementDistributionPercentage$inboundSchema;
    /** @deprecated use `AchWithdrawalRetirementDistributionPercentage$outboundSchema` instead. */
    AchWithdrawalRetirementDistributionPercentage$.outboundSchema = AchWithdrawalRetirementDistributionPercentage$outboundSchema;
})(AchWithdrawalRetirementDistributionPercentage$ || (AchWithdrawalRetirementDistributionPercentage$ = {}));
export function achWithdrawalRetirementDistributionPercentageToJSON(achWithdrawalRetirementDistributionPercentage) {
    return JSON.stringify(AchWithdrawalRetirementDistributionPercentage$outboundSchema.parse(achWithdrawalRetirementDistributionPercentage));
}
export function achWithdrawalRetirementDistributionPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalRetirementDistributionPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalRetirementDistributionPercentage' from JSON`);
}
/** @internal */
export const StateTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionPercentage$inboundSchema)).optional(),
});
/** @internal */
export const StateTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => AchWithdrawalRetirementDistributionPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StateTaxWithholding$;
(function (StateTaxWithholding$) {
    /** @deprecated use `StateTaxWithholding$inboundSchema` instead. */
    StateTaxWithholding$.inboundSchema = StateTaxWithholding$inboundSchema;
    /** @deprecated use `StateTaxWithholding$outboundSchema` instead. */
    StateTaxWithholding$.outboundSchema = StateTaxWithholding$outboundSchema;
})(StateTaxWithholding$ || (StateTaxWithholding$ = {}));
export function stateTaxWithholdingToJSON(stateTaxWithholding) {
    return JSON.stringify(StateTaxWithholding$outboundSchema.parse(stateTaxWithholding));
}
export function stateTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StateTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StateTaxWithholding' from JSON`);
}
/** @internal */
export const AchWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(AchWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AchWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(AchWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalType$;
(function (AchWithdrawalType$) {
    /** @deprecated use `AchWithdrawalType$inboundSchema` instead. */
    AchWithdrawalType$.inboundSchema = AchWithdrawalType$inboundSchema;
    /** @deprecated use `AchWithdrawalType$outboundSchema` instead. */
    AchWithdrawalType$.outboundSchema = AchWithdrawalType$outboundSchema;
})(AchWithdrawalType$ || (AchWithdrawalType$ = {}));
/** @internal */
export const RetirementDistribution$inboundSchema = z.object({
    federal_tax_withholding: z.nullable(z.lazy(() => FederalTaxWithholding$inboundSchema)).optional(),
    receiving_institution: z.string().optional(),
    state_tax_withholding: z.nullable(z.lazy(() => StateTaxWithholding$inboundSchema)).optional(),
    state_withholding_waiver: z.boolean().optional(),
    tax_year: z.number().int().optional(),
    type: AchWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_withholding": "federalTaxWithholding",
        "receiving_institution": "receivingInstitution",
        "state_tax_withholding": "stateTaxWithholding",
        "state_withholding_waiver": "stateWithholdingWaiver",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const RetirementDistribution$outboundSchema = z.object({
    federalTaxWithholding: z.nullable(z.lazy(() => FederalTaxWithholding$outboundSchema)).optional(),
    receivingInstitution: z.string().optional(),
    stateTaxWithholding: z.nullable(z.lazy(() => StateTaxWithholding$outboundSchema)).optional(),
    stateWithholdingWaiver: z.boolean().optional(),
    taxYear: z.number().int().optional(),
    type: AchWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxWithholding: "federal_tax_withholding",
        receivingInstitution: "receiving_institution",
        stateTaxWithholding: "state_tax_withholding",
        stateWithholdingWaiver: "state_withholding_waiver",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetirementDistribution$;
(function (RetirementDistribution$) {
    /** @deprecated use `RetirementDistribution$inboundSchema` instead. */
    RetirementDistribution$.inboundSchema = RetirementDistribution$inboundSchema;
    /** @deprecated use `RetirementDistribution$outboundSchema` instead. */
    RetirementDistribution$.outboundSchema = RetirementDistribution$outboundSchema;
})(RetirementDistribution$ || (RetirementDistribution$ = {}));
export function retirementDistributionToJSON(retirementDistribution) {
    return JSON.stringify(RetirementDistribution$outboundSchema.parse(retirementDistribution));
}
export function retirementDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RetirementDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetirementDistribution' from JSON`);
}
/** @internal */
export const AchWithdrawalStateState$inboundSchema = z
    .union([
    z.nativeEnum(AchWithdrawalStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AchWithdrawalStateState$outboundSchema = z.union([
    z.nativeEnum(AchWithdrawalStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalStateState$;
(function (AchWithdrawalStateState$) {
    /** @deprecated use `AchWithdrawalStateState$inboundSchema` instead. */
    AchWithdrawalStateState$.inboundSchema = AchWithdrawalStateState$inboundSchema;
    /** @deprecated use `AchWithdrawalStateState$outboundSchema` instead. */
    AchWithdrawalStateState$.outboundSchema = AchWithdrawalStateState$outboundSchema;
})(AchWithdrawalStateState$ || (AchWithdrawalStateState$ = {}));
/** @internal */
export const AchWithdrawalState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: AchWithdrawalStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const AchWithdrawalState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: AchWithdrawalStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawalState$;
(function (AchWithdrawalState$) {
    /** @deprecated use `AchWithdrawalState$inboundSchema` instead. */
    AchWithdrawalState$.inboundSchema = AchWithdrawalState$inboundSchema;
    /** @deprecated use `AchWithdrawalState$outboundSchema` instead. */
    AchWithdrawalState$.outboundSchema = AchWithdrawalState$outboundSchema;
})(AchWithdrawalState$ || (AchWithdrawalState$ = {}));
export function achWithdrawalStateToJSON(achWithdrawalState) {
    return JSON.stringify(AchWithdrawalState$outboundSchema.parse(achWithdrawalState));
}
export function achWithdrawalStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawalState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawalState' from JSON`);
}
/** @internal */
export const AchWithdrawal$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalAmount$inboundSchema))
        .optional(),
    bank_relationship: z.string().optional(),
    client_transfer_id: z.string().optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    retirement_distribution: z.nullable(z.lazy(() => RetirementDistribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => AchWithdrawalState$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "bank_relationship": "bankRelationship",
        "client_transfer_id": "clientTransferId",
        "retirement_distribution": "retirementDistribution",
    });
});
/** @internal */
export const AchWithdrawal$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => AchWithdrawalAmount$outboundSchema))
        .optional(),
    bankRelationship: z.string().optional(),
    clientTransferId: z.string().optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    retirementDistribution: z.nullable(z.lazy(() => RetirementDistribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => AchWithdrawalState$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        bankRelationship: "bank_relationship",
        clientTransferId: "client_transfer_id",
        retirementDistribution: "retirement_distribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AchWithdrawal$;
(function (AchWithdrawal$) {
    /** @deprecated use `AchWithdrawal$inboundSchema` instead. */
    AchWithdrawal$.inboundSchema = AchWithdrawal$inboundSchema;
    /** @deprecated use `AchWithdrawal$outboundSchema` instead. */
    AchWithdrawal$.outboundSchema = AchWithdrawal$outboundSchema;
})(AchWithdrawal$ || (AchWithdrawal$ = {}));
export function achWithdrawalToJSON(achWithdrawal) {
    return JSON.stringify(AchWithdrawal$outboundSchema.parse(achWithdrawal));
}
export function achWithdrawalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AchWithdrawal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AchWithdrawal' from JSON`);
}
//# sourceMappingURL=achwithdrawal.js.map