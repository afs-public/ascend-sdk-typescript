/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
export var WithholdingState;
(function (WithholdingState) {
    WithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    WithholdingState["Ca"] = "CA";
    WithholdingState["Me"] = "ME";
    WithholdingState["Vt"] = "VT";
    WithholdingState["Al"] = "AL";
    WithholdingState["Ak"] = "AK";
    WithholdingState["Az"] = "AZ";
    WithholdingState["Ar"] = "AR";
    WithholdingState["Co"] = "CO";
    WithholdingState["Ct"] = "CT";
    WithholdingState["De"] = "DE";
    WithholdingState["Fl"] = "FL";
    WithholdingState["Ga"] = "GA";
    WithholdingState["Hi"] = "HI";
    WithholdingState["Id"] = "ID";
    WithholdingState["Il"] = "IL";
    WithholdingState["In"] = "IN";
    WithholdingState["Ia"] = "IA";
    WithholdingState["Ks"] = "KS";
    WithholdingState["Ky"] = "KY";
    WithholdingState["La"] = "LA";
    WithholdingState["Md"] = "MD";
    WithholdingState["Ma"] = "MA";
    WithholdingState["Mi"] = "MI";
    WithholdingState["Mn"] = "MN";
    WithholdingState["Ms"] = "MS";
    WithholdingState["Mo"] = "MO";
    WithholdingState["Mt"] = "MT";
    WithholdingState["Ne"] = "NE";
    WithholdingState["Nv"] = "NV";
    WithholdingState["Nh"] = "NH";
    WithholdingState["Nj"] = "NJ";
    WithholdingState["Nm"] = "NM";
    WithholdingState["Ny"] = "NY";
    WithholdingState["Nc"] = "NC";
    WithholdingState["Nd"] = "ND";
    WithholdingState["Oh"] = "OH";
    WithholdingState["Ok"] = "OK";
    WithholdingState["Or"] = "OR";
    WithholdingState["Pa"] = "PA";
    WithholdingState["Ri"] = "RI";
    WithholdingState["Sc"] = "SC";
    WithholdingState["Sd"] = "SD";
    WithholdingState["Tn"] = "TN";
    WithholdingState["Tx"] = "TX";
    WithholdingState["Ut"] = "UT";
    WithholdingState["Va"] = "VA";
    WithholdingState["Wa"] = "WA";
    WithholdingState["Wv"] = "WV";
    WithholdingState["Wi"] = "WI";
    WithholdingState["Wy"] = "WY";
    WithholdingState["Dc"] = "DC";
})(WithholdingState || (WithholdingState = {}));
/**
 * Describes the type of the withholding (Federal, State, etc.)
 */
export var WithholdingType1;
(function (WithholdingType1) {
    WithholdingType1["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    WithholdingType1["Federal"] = "FEDERAL";
    WithholdingType1["State"] = "STATE";
    WithholdingType1["ForeignSecurity"] = "FOREIGN_SECURITY";
    WithholdingType1["FederalIra"] = "FEDERAL_IRA";
    WithholdingType1["StateIra"] = "STATE_IRA";
    WithholdingType1["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(WithholdingType1 || (WithholdingType1 = {}));
/** @internal */
export const WithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingAmount$;
(function (WithholdingAmount$) {
    /** @deprecated use `WithholdingAmount$inboundSchema` instead. */
    WithholdingAmount$.inboundSchema = WithholdingAmount$inboundSchema;
    /** @deprecated use `WithholdingAmount$outboundSchema` instead. */
    WithholdingAmount$.outboundSchema = WithholdingAmount$outboundSchema;
})(WithholdingAmount$ || (WithholdingAmount$ = {}));
export function withholdingAmountToJSON(withholdingAmount) {
    return JSON.stringify(WithholdingAmount$outboundSchema.parse(withholdingAmount));
}
export function withholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WithholdingAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WithholdingAmount' from JSON`);
}
/** @internal */
export const WithholdingRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WithholdingRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingRate$;
(function (WithholdingRate$) {
    /** @deprecated use `WithholdingRate$inboundSchema` instead. */
    WithholdingRate$.inboundSchema = WithholdingRate$inboundSchema;
    /** @deprecated use `WithholdingRate$outboundSchema` instead. */
    WithholdingRate$.outboundSchema = WithholdingRate$outboundSchema;
})(WithholdingRate$ || (WithholdingRate$ = {}));
export function withholdingRateToJSON(withholdingRate) {
    return JSON.stringify(WithholdingRate$outboundSchema.parse(withholdingRate));
}
export function withholdingRateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WithholdingRate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WithholdingRate' from JSON`);
}
/** @internal */
export const WithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WithholdingState$outboundSchema = z.union([
    z.nativeEnum(WithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingState$;
(function (WithholdingState$) {
    /** @deprecated use `WithholdingState$inboundSchema` instead. */
    WithholdingState$.inboundSchema = WithholdingState$inboundSchema;
    /** @deprecated use `WithholdingState$outboundSchema` instead. */
    WithholdingState$.outboundSchema = WithholdingState$outboundSchema;
})(WithholdingState$ || (WithholdingState$ = {}));
/** @internal */
export const WithholdingType1$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingType1),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WithholdingType1$outboundSchema = z.union([
    z.nativeEnum(WithholdingType1),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WithholdingType1$;
(function (WithholdingType1$) {
    /** @deprecated use `WithholdingType1$inboundSchema` instead. */
    WithholdingType1$.inboundSchema = WithholdingType1$inboundSchema;
    /** @deprecated use `WithholdingType1$outboundSchema` instead. */
    WithholdingType1$.outboundSchema = WithholdingType1$outboundSchema;
})(WithholdingType1$ || (WithholdingType1$ = {}));
/** @internal */
export const Withholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WithholdingAmount$inboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => WithholdingRate$inboundSchema)).optional(),
    state: WithholdingState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: WithholdingType1$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const Withholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WithholdingAmount$outboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => WithholdingRate$outboundSchema)).optional(),
    state: WithholdingState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: WithholdingType1$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Withholding$;
(function (Withholding$) {
    /** @deprecated use `Withholding$inboundSchema` instead. */
    Withholding$.inboundSchema = Withholding$inboundSchema;
    /** @deprecated use `Withholding$outboundSchema` instead. */
    Withholding$.outboundSchema = Withholding$outboundSchema;
})(Withholding$ || (Withholding$ = {}));
export function withholdingToJSON(withholding) {
    return JSON.stringify(Withholding$outboundSchema.parse(withholding));
}
export function withholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Withholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Withholding' from JSON`);
}
//# sourceMappingURL=withholding.js.map