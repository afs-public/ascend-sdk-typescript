"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcceptTransferResponse$ = exports.AcceptTransferResponse$outboundSchema = exports.AcceptTransferResponse$inboundSchema = exports.Transfer$ = exports.Transfer$outboundSchema = exports.Transfer$inboundSchema = exports.AcceptTransferResponseTransferType$ = exports.AcceptTransferResponseTransferType$outboundSchema = exports.AcceptTransferResponseTransferType$inboundSchema = exports.AcceptTransferResponseState$ = exports.AcceptTransferResponseState$outboundSchema = exports.AcceptTransferResponseState$inboundSchema = exports.AcceptTransferResponseRejectCode$ = exports.AcceptTransferResponseRejectCode$outboundSchema = exports.AcceptTransferResponseRejectCode$inboundSchema = exports.AcceptTransferResponseReceiver$ = exports.AcceptTransferResponseReceiver$outboundSchema = exports.AcceptTransferResponseReceiver$inboundSchema = exports.AcceptTransferResponseTransferExternalAccount$ = exports.AcceptTransferResponseTransferExternalAccount$outboundSchema = exports.AcceptTransferResponseTransferExternalAccount$inboundSchema = exports.AcceptTransferResponseNsccStatus$ = exports.AcceptTransferResponseNsccStatus$outboundSchema = exports.AcceptTransferResponseNsccStatus$inboundSchema = exports.AcceptTransferResponseDirection$ = exports.AcceptTransferResponseDirection$outboundSchema = exports.AcceptTransferResponseDirection$inboundSchema = exports.AcceptTransferResponseDeliverer$ = exports.AcceptTransferResponseDeliverer$outboundSchema = exports.AcceptTransferResponseDeliverer$inboundSchema = exports.AcceptTransferResponseExternalAccount$ = exports.AcceptTransferResponseExternalAccount$outboundSchema = exports.AcceptTransferResponseExternalAccount$inboundSchema = exports.AcceptTransferResponseTransferType = exports.AcceptTransferResponseState = exports.AcceptTransferResponseRejectCode = exports.AcceptTransferResponseNsccStatus = exports.AcceptTransferResponseDirection = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const acatsasset_js_1 = require("./acatsasset.js");
/**
 * The direction of the transfer
 */
var AcceptTransferResponseDirection;
(function (AcceptTransferResponseDirection) {
    AcceptTransferResponseDirection["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    AcceptTransferResponseDirection["Outgoing"] = "OUTGOING";
    AcceptTransferResponseDirection["Incoming"] = "INCOMING";
})(AcceptTransferResponseDirection || (exports.AcceptTransferResponseDirection = AcceptTransferResponseDirection = {}));
/**
 * The NSCC transfer status
 */
var AcceptTransferResponseNsccStatus;
(function (AcceptTransferResponseNsccStatus) {
    AcceptTransferResponseNsccStatus["NsccStatusUnspecified"] = "NSCC_STATUS_UNSPECIFIED";
    AcceptTransferResponseNsccStatus["Request"] = "REQUEST";
    AcceptTransferResponseNsccStatus["RequestAdjust"] = "REQUEST_ADJUST";
    AcceptTransferResponseNsccStatus["RequestAdjustPast"] = "REQUEST_ADJUST_PAST";
    AcceptTransferResponseNsccStatus["RequestPast"] = "REQUEST_PAST";
    AcceptTransferResponseNsccStatus["RequestReject"] = "REQUEST_REJECT";
    AcceptTransferResponseNsccStatus["Review"] = "REVIEW";
    AcceptTransferResponseNsccStatus["ReviewAdjustDeliverer"] = "REVIEW_ADJUST_DELIVERER";
    AcceptTransferResponseNsccStatus["ReviewError"] = "REVIEW_ERROR";
    AcceptTransferResponseNsccStatus["ReviewAccelerate"] = "REVIEW_ACCELERATE";
    AcceptTransferResponseNsccStatus["ReviewAdjustReceiverAccelerate"] = "REVIEW_ADJUST_RECEIVER_ACCELERATE";
    AcceptTransferResponseNsccStatus["SettlePrep"] = "SETTLE_PREP";
    AcceptTransferResponseNsccStatus["SettleClose"] = "SETTLE_CLOSE";
    AcceptTransferResponseNsccStatus["ClosePurge"] = "CLOSE_PURGE";
    AcceptTransferResponseNsccStatus["PartialRequest"] = "PARTIAL_REQUEST";
    AcceptTransferResponseNsccStatus["MemoPurgePartialTransferRequestReceiver"] = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER";
    AcceptTransferResponseNsccStatus["Reject"] = "REJECT";
    AcceptTransferResponseNsccStatus["SystemPurge"] = "SYSTEM_PURGE";
})(AcceptTransferResponseNsccStatus || (exports.AcceptTransferResponseNsccStatus = AcceptTransferResponseNsccStatus = {}));
/**
 * The reject code
 */
var AcceptTransferResponseRejectCode;
(function (AcceptTransferResponseRejectCode) {
    AcceptTransferResponseRejectCode["RejectCodeUnspecified"] = "REJECT_CODE_UNSPECIFIED";
    AcceptTransferResponseRejectCode["RejectCodeSsnTaxIdMismatch"] = "REJECT_CODE_SSN_TAX_ID_MISMATCH";
    AcceptTransferResponseRejectCode["RejectCodeAccountTitleMismatch"] = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH";
    AcceptTransferResponseRejectCode["RejectCodeDocumentationNeeded"] = "REJECT_CODE_DOCUMENTATION_NEEDED";
    AcceptTransferResponseRejectCode["RejectCodeAccountFlat"] = "REJECT_CODE_ACCOUNT_FLAT";
    AcceptTransferResponseRejectCode["RejectCodeInvalidAccountNumber"] = "REJECT_CODE_INVALID_ACCOUNT_NUMBER";
    AcceptTransferResponseRejectCode["RejectCodeDuplicate"] = "REJECT_CODE_DUPLICATE";
    AcceptTransferResponseRejectCode["RejectCodeAccountInDistributionOrTransfer"] = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER";
    AcceptTransferResponseRejectCode["RejectCodeClientRescinded"] = "REJECT_CODE_CLIENT_RESCINDED";
    AcceptTransferResponseRejectCode["RejectCodeMissingAuthorizationSignature"] = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE";
    AcceptTransferResponseRejectCode["RejectCodeAccountViolatesCreditPolicyOfReceivingFirm"] = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM";
    AcceptTransferResponseRejectCode["RejectCodeUnrecognizedForResidualCreditBalance"] = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE";
    AcceptTransferResponseRejectCode["RejectCodePartialTransferDeliverer"] = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER";
    AcceptTransferResponseRejectCode["RejectCodeFailReversal"] = "REJECT_CODE_FAIL_REVERSAL";
    AcceptTransferResponseRejectCode["RejectCodeReclaim"] = "REJECT_CODE_RECLAIM";
    AcceptTransferResponseRejectCode["RejectCodeMutualFundCleanup"] = "REJECT_CODE_MUTUAL_FUND_CLEANUP";
})(AcceptTransferResponseRejectCode || (exports.AcceptTransferResponseRejectCode = AcceptTransferResponseRejectCode = {}));
/**
 * The transfer state
 */
var AcceptTransferResponseState;
(function (AcceptTransferResponseState) {
    AcceptTransferResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AcceptTransferResponseState["Received"] = "RECEIVED";
    AcceptTransferResponseState["Submitted"] = "SUBMITTED";
    AcceptTransferResponseState["Rejected"] = "REJECTED";
    AcceptTransferResponseState["PendingContraResponse"] = "PENDING_CONTRA_RESPONSE";
    AcceptTransferResponseState["Error"] = "ERROR";
    AcceptTransferResponseState["Accepted"] = "ACCEPTED";
    AcceptTransferResponseState["PendingReview"] = "PENDING_REVIEW";
    AcceptTransferResponseState["PendingRejection"] = "PENDING_REJECTION";
    AcceptTransferResponseState["PendingSettlement"] = "PENDING_SETTLEMENT";
    AcceptTransferResponseState["PendingBookkeeping"] = "PENDING_BOOKKEEPING";
    AcceptTransferResponseState["Completed"] = "COMPLETED";
    AcceptTransferResponseState["Purged"] = "PURGED";
})(AcceptTransferResponseState || (exports.AcceptTransferResponseState = AcceptTransferResponseState = {}));
/**
 * The type of transfer
 */
var AcceptTransferResponseTransferType;
(function (AcceptTransferResponseTransferType) {
    AcceptTransferResponseTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    AcceptTransferResponseTransferType["FailReversalBrokerToBrokerOnly"] = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY";
    AcceptTransferResponseTransferType["FullTransfer"] = "FULL_TRANSFER";
    AcceptTransferResponseTransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    AcceptTransferResponseTransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    AcceptTransferResponseTransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    AcceptTransferResponseTransferType["PositionTransferFundFirmToMutualFundCompanyOnly"] = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY";
    AcceptTransferResponseTransferType["Reclaim"] = "RECLAIM";
    AcceptTransferResponseTransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
})(AcceptTransferResponseTransferType || (exports.AcceptTransferResponseTransferType = AcceptTransferResponseTransferType = {}));
/** @internal */
exports.AcceptTransferResponseExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
exports.AcceptTransferResponseExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseExternalAccount$;
(function (AcceptTransferResponseExternalAccount$) {
    /** @deprecated use `AcceptTransferResponseExternalAccount$inboundSchema` instead. */
    AcceptTransferResponseExternalAccount$.inboundSchema = exports.AcceptTransferResponseExternalAccount$inboundSchema;
    /** @deprecated use `AcceptTransferResponseExternalAccount$outboundSchema` instead. */
    AcceptTransferResponseExternalAccount$.outboundSchema = exports.AcceptTransferResponseExternalAccount$outboundSchema;
})(AcceptTransferResponseExternalAccount$ || (exports.AcceptTransferResponseExternalAccount$ = AcceptTransferResponseExternalAccount$ = {}));
/** @internal */
exports.AcceptTransferResponseDeliverer$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => exports.AcceptTransferResponseExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
exports.AcceptTransferResponseDeliverer$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => exports.AcceptTransferResponseExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseDeliverer$;
(function (AcceptTransferResponseDeliverer$) {
    /** @deprecated use `AcceptTransferResponseDeliverer$inboundSchema` instead. */
    AcceptTransferResponseDeliverer$.inboundSchema = exports.AcceptTransferResponseDeliverer$inboundSchema;
    /** @deprecated use `AcceptTransferResponseDeliverer$outboundSchema` instead. */
    AcceptTransferResponseDeliverer$.outboundSchema = exports.AcceptTransferResponseDeliverer$outboundSchema;
})(AcceptTransferResponseDeliverer$ || (exports.AcceptTransferResponseDeliverer$ = AcceptTransferResponseDeliverer$ = {}));
/** @internal */
exports.AcceptTransferResponseDirection$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseDirection),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcceptTransferResponseDirection$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseDirection$;
(function (AcceptTransferResponseDirection$) {
    /** @deprecated use `AcceptTransferResponseDirection$inboundSchema` instead. */
    AcceptTransferResponseDirection$.inboundSchema = exports.AcceptTransferResponseDirection$inboundSchema;
    /** @deprecated use `AcceptTransferResponseDirection$outboundSchema` instead. */
    AcceptTransferResponseDirection$.outboundSchema = exports.AcceptTransferResponseDirection$outboundSchema;
})(AcceptTransferResponseDirection$ || (exports.AcceptTransferResponseDirection$ = AcceptTransferResponseDirection$ = {}));
/** @internal */
exports.AcceptTransferResponseNsccStatus$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseNsccStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcceptTransferResponseNsccStatus$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseNsccStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseNsccStatus$;
(function (AcceptTransferResponseNsccStatus$) {
    /** @deprecated use `AcceptTransferResponseNsccStatus$inboundSchema` instead. */
    AcceptTransferResponseNsccStatus$.inboundSchema = exports.AcceptTransferResponseNsccStatus$inboundSchema;
    /** @deprecated use `AcceptTransferResponseNsccStatus$outboundSchema` instead. */
    AcceptTransferResponseNsccStatus$.outboundSchema = exports.AcceptTransferResponseNsccStatus$outboundSchema;
})(AcceptTransferResponseNsccStatus$ || (exports.AcceptTransferResponseNsccStatus$ = AcceptTransferResponseNsccStatus$ = {}));
/** @internal */
exports.AcceptTransferResponseTransferExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
exports.AcceptTransferResponseTransferExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseTransferExternalAccount$;
(function (AcceptTransferResponseTransferExternalAccount$) {
    /** @deprecated use `AcceptTransferResponseTransferExternalAccount$inboundSchema` instead. */
    AcceptTransferResponseTransferExternalAccount$.inboundSchema = exports.AcceptTransferResponseTransferExternalAccount$inboundSchema;
    /** @deprecated use `AcceptTransferResponseTransferExternalAccount$outboundSchema` instead. */
    AcceptTransferResponseTransferExternalAccount$.outboundSchema = exports.AcceptTransferResponseTransferExternalAccount$outboundSchema;
})(AcceptTransferResponseTransferExternalAccount$ || (exports.AcceptTransferResponseTransferExternalAccount$ = AcceptTransferResponseTransferExternalAccount$ = {}));
/** @internal */
exports.AcceptTransferResponseReceiver$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => exports.AcceptTransferResponseTransferExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
exports.AcceptTransferResponseReceiver$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => exports.AcceptTransferResponseTransferExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseReceiver$;
(function (AcceptTransferResponseReceiver$) {
    /** @deprecated use `AcceptTransferResponseReceiver$inboundSchema` instead. */
    AcceptTransferResponseReceiver$.inboundSchema = exports.AcceptTransferResponseReceiver$inboundSchema;
    /** @deprecated use `AcceptTransferResponseReceiver$outboundSchema` instead. */
    AcceptTransferResponseReceiver$.outboundSchema = exports.AcceptTransferResponseReceiver$outboundSchema;
})(AcceptTransferResponseReceiver$ || (exports.AcceptTransferResponseReceiver$ = AcceptTransferResponseReceiver$ = {}));
/** @internal */
exports.AcceptTransferResponseRejectCode$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseRejectCode),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcceptTransferResponseRejectCode$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseRejectCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseRejectCode$;
(function (AcceptTransferResponseRejectCode$) {
    /** @deprecated use `AcceptTransferResponseRejectCode$inboundSchema` instead. */
    AcceptTransferResponseRejectCode$.inboundSchema = exports.AcceptTransferResponseRejectCode$inboundSchema;
    /** @deprecated use `AcceptTransferResponseRejectCode$outboundSchema` instead. */
    AcceptTransferResponseRejectCode$.outboundSchema = exports.AcceptTransferResponseRejectCode$outboundSchema;
})(AcceptTransferResponseRejectCode$ || (exports.AcceptTransferResponseRejectCode$ = AcceptTransferResponseRejectCode$ = {}));
/** @internal */
exports.AcceptTransferResponseState$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcceptTransferResponseState$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseState$;
(function (AcceptTransferResponseState$) {
    /** @deprecated use `AcceptTransferResponseState$inboundSchema` instead. */
    AcceptTransferResponseState$.inboundSchema = exports.AcceptTransferResponseState$inboundSchema;
    /** @deprecated use `AcceptTransferResponseState$outboundSchema` instead. */
    AcceptTransferResponseState$.outboundSchema = exports.AcceptTransferResponseState$outboundSchema;
})(AcceptTransferResponseState$ || (exports.AcceptTransferResponseState$ = AcceptTransferResponseState$ = {}));
/** @internal */
exports.AcceptTransferResponseTransferType$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseTransferType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcceptTransferResponseTransferType$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponseTransferType$;
(function (AcceptTransferResponseTransferType$) {
    /** @deprecated use `AcceptTransferResponseTransferType$inboundSchema` instead. */
    AcceptTransferResponseTransferType$.inboundSchema = exports.AcceptTransferResponseTransferType$inboundSchema;
    /** @deprecated use `AcceptTransferResponseTransferType$outboundSchema` instead. */
    AcceptTransferResponseTransferType$.outboundSchema = exports.AcceptTransferResponseTransferType$outboundSchema;
})(AcceptTransferResponseTransferType$ || (exports.AcceptTransferResponseTransferType$ = AcceptTransferResponseTransferType$ = {}));
/** @internal */
exports.Transfer$inboundSchema = z.object({
    acat_control_number: z.string().optional(),
    assets: z.array(acatsasset_js_1.AcatsAsset$inboundSchema).optional(),
    comment: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deliverer: z.nullable(z.lazy(() => exports.AcceptTransferResponseDeliverer$inboundSchema)).optional(),
    direction: exports.AcceptTransferResponseDirection$inboundSchema.optional(),
    name: z.string().optional(),
    nscc_status: exports.AcceptTransferResponseNsccStatus$inboundSchema.optional(),
    original_control_number: z.string().optional(),
    receiver: z.nullable(z.lazy(() => exports.AcceptTransferResponseReceiver$inboundSchema)).optional(),
    reject_code: exports.AcceptTransferResponseRejectCode$inboundSchema.optional(),
    state: exports.AcceptTransferResponseState$inboundSchema.optional(),
    state_reason: z.string().optional(),
    transfer_type: exports.AcceptTransferResponseTransferType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acat_control_number": "acatControlNumber",
        "create_time": "createTime",
        "nscc_status": "nsccStatus",
        "original_control_number": "originalControlNumber",
        "reject_code": "rejectCode",
        "state_reason": "stateReason",
        "transfer_type": "transferType",
    });
});
/** @internal */
exports.Transfer$outboundSchema = z.object({
    acatControlNumber: z.string().optional(),
    assets: z.array(acatsasset_js_1.AcatsAsset$outboundSchema).optional(),
    comment: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deliverer: z.nullable(z.lazy(() => exports.AcceptTransferResponseDeliverer$outboundSchema)).optional(),
    direction: exports.AcceptTransferResponseDirection$outboundSchema.optional(),
    name: z.string().optional(),
    nsccStatus: exports.AcceptTransferResponseNsccStatus$outboundSchema.optional(),
    originalControlNumber: z.string().optional(),
    receiver: z.nullable(z.lazy(() => exports.AcceptTransferResponseReceiver$outboundSchema)).optional(),
    rejectCode: exports.AcceptTransferResponseRejectCode$outboundSchema.optional(),
    state: exports.AcceptTransferResponseState$outboundSchema.optional(),
    stateReason: z.string().optional(),
    transferType: exports.AcceptTransferResponseTransferType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatControlNumber: "acat_control_number",
        createTime: "create_time",
        nsccStatus: "nscc_status",
        originalControlNumber: "original_control_number",
        rejectCode: "reject_code",
        stateReason: "state_reason",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Transfer$;
(function (Transfer$) {
    /** @deprecated use `Transfer$inboundSchema` instead. */
    Transfer$.inboundSchema = exports.Transfer$inboundSchema;
    /** @deprecated use `Transfer$outboundSchema` instead. */
    Transfer$.outboundSchema = exports.Transfer$outboundSchema;
})(Transfer$ || (exports.Transfer$ = Transfer$ = {}));
/** @internal */
exports.AcceptTransferResponse$inboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => exports.Transfer$inboundSchema)).optional(),
});
/** @internal */
exports.AcceptTransferResponse$outboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => exports.Transfer$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcceptTransferResponse$;
(function (AcceptTransferResponse$) {
    /** @deprecated use `AcceptTransferResponse$inboundSchema` instead. */
    AcceptTransferResponse$.inboundSchema = exports.AcceptTransferResponse$inboundSchema;
    /** @deprecated use `AcceptTransferResponse$outboundSchema` instead. */
    AcceptTransferResponse$.outboundSchema = exports.AcceptTransferResponse$outboundSchema;
})(AcceptTransferResponse$ || (exports.AcceptTransferResponse$ = AcceptTransferResponse$ = {}));
//# sourceMappingURL=accepttransferresponse.js.map