/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AcatsAsset$inboundSchema, AcatsAsset$outboundSchema, } from "./acatsasset.js";
/**
 * The direction of the transfer
 */
export var AcceptTransferResponseDirection;
(function (AcceptTransferResponseDirection) {
    AcceptTransferResponseDirection["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    AcceptTransferResponseDirection["Outgoing"] = "OUTGOING";
    AcceptTransferResponseDirection["Incoming"] = "INCOMING";
})(AcceptTransferResponseDirection || (AcceptTransferResponseDirection = {}));
/**
 * The NSCC transfer status
 */
export var AcceptTransferResponseNsccStatus;
(function (AcceptTransferResponseNsccStatus) {
    AcceptTransferResponseNsccStatus["NsccStatusUnspecified"] = "NSCC_STATUS_UNSPECIFIED";
    AcceptTransferResponseNsccStatus["Request"] = "REQUEST";
    AcceptTransferResponseNsccStatus["RequestAdjust"] = "REQUEST_ADJUST";
    AcceptTransferResponseNsccStatus["RequestAdjustPast"] = "REQUEST_ADJUST_PAST";
    AcceptTransferResponseNsccStatus["RequestPast"] = "REQUEST_PAST";
    AcceptTransferResponseNsccStatus["RequestReject"] = "REQUEST_REJECT";
    AcceptTransferResponseNsccStatus["Review"] = "REVIEW";
    AcceptTransferResponseNsccStatus["ReviewAdjustDeliverer"] = "REVIEW_ADJUST_DELIVERER";
    AcceptTransferResponseNsccStatus["ReviewError"] = "REVIEW_ERROR";
    AcceptTransferResponseNsccStatus["ReviewAccelerate"] = "REVIEW_ACCELERATE";
    AcceptTransferResponseNsccStatus["ReviewAdjustReceiverAccelerate"] = "REVIEW_ADJUST_RECEIVER_ACCELERATE";
    AcceptTransferResponseNsccStatus["SettlePrep"] = "SETTLE_PREP";
    AcceptTransferResponseNsccStatus["SettleClose"] = "SETTLE_CLOSE";
    AcceptTransferResponseNsccStatus["ClosePurge"] = "CLOSE_PURGE";
    AcceptTransferResponseNsccStatus["PartialRequest"] = "PARTIAL_REQUEST";
    AcceptTransferResponseNsccStatus["MemoPurgePartialTransferRequestReceiver"] = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER";
    AcceptTransferResponseNsccStatus["Reject"] = "REJECT";
    AcceptTransferResponseNsccStatus["SystemPurge"] = "SYSTEM_PURGE";
})(AcceptTransferResponseNsccStatus || (AcceptTransferResponseNsccStatus = {}));
/**
 * The reject code
 */
export var AcceptTransferResponseRejectCode;
(function (AcceptTransferResponseRejectCode) {
    AcceptTransferResponseRejectCode["RejectCodeUnspecified"] = "REJECT_CODE_UNSPECIFIED";
    AcceptTransferResponseRejectCode["RejectCodeSsnTaxIdMismatch"] = "REJECT_CODE_SSN_TAX_ID_MISMATCH";
    AcceptTransferResponseRejectCode["RejectCodeAccountTitleMismatch"] = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH";
    AcceptTransferResponseRejectCode["RejectCodeDocumentationNeeded"] = "REJECT_CODE_DOCUMENTATION_NEEDED";
    AcceptTransferResponseRejectCode["RejectCodeAccountFlat"] = "REJECT_CODE_ACCOUNT_FLAT";
    AcceptTransferResponseRejectCode["RejectCodeInvalidAccountNumber"] = "REJECT_CODE_INVALID_ACCOUNT_NUMBER";
    AcceptTransferResponseRejectCode["RejectCodeDuplicate"] = "REJECT_CODE_DUPLICATE";
    AcceptTransferResponseRejectCode["RejectCodeAccountInDistributionOrTransfer"] = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER";
    AcceptTransferResponseRejectCode["RejectCodeClientRescinded"] = "REJECT_CODE_CLIENT_RESCINDED";
    AcceptTransferResponseRejectCode["RejectCodeMissingAuthorizationSignature"] = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE";
    AcceptTransferResponseRejectCode["RejectCodeAccountViolatesCreditPolicyOfReceivingFirm"] = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM";
    AcceptTransferResponseRejectCode["RejectCodeUnrecognizedForResidualCreditBalance"] = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE";
    AcceptTransferResponseRejectCode["RejectCodePartialTransferDeliverer"] = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER";
    AcceptTransferResponseRejectCode["RejectCodeFailReversal"] = "REJECT_CODE_FAIL_REVERSAL";
    AcceptTransferResponseRejectCode["RejectCodeReclaim"] = "REJECT_CODE_RECLAIM";
    AcceptTransferResponseRejectCode["RejectCodeMutualFundCleanup"] = "REJECT_CODE_MUTUAL_FUND_CLEANUP";
})(AcceptTransferResponseRejectCode || (AcceptTransferResponseRejectCode = {}));
/**
 * The transfer state
 */
export var AcceptTransferResponseState;
(function (AcceptTransferResponseState) {
    AcceptTransferResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AcceptTransferResponseState["Received"] = "RECEIVED";
    AcceptTransferResponseState["Submitted"] = "SUBMITTED";
    AcceptTransferResponseState["Rejected"] = "REJECTED";
    AcceptTransferResponseState["PendingContraResponse"] = "PENDING_CONTRA_RESPONSE";
    AcceptTransferResponseState["Error"] = "ERROR";
    AcceptTransferResponseState["Accepted"] = "ACCEPTED";
    AcceptTransferResponseState["PendingReview"] = "PENDING_REVIEW";
    AcceptTransferResponseState["PendingRejection"] = "PENDING_REJECTION";
    AcceptTransferResponseState["PendingSettlement"] = "PENDING_SETTLEMENT";
    AcceptTransferResponseState["PendingBookkeeping"] = "PENDING_BOOKKEEPING";
    AcceptTransferResponseState["Completed"] = "COMPLETED";
    AcceptTransferResponseState["Purged"] = "PURGED";
})(AcceptTransferResponseState || (AcceptTransferResponseState = {}));
/**
 * The type of transfer
 */
export var AcceptTransferResponseTransferType;
(function (AcceptTransferResponseTransferType) {
    AcceptTransferResponseTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    AcceptTransferResponseTransferType["FailReversalBrokerToBrokerOnly"] = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY";
    AcceptTransferResponseTransferType["FullTransfer"] = "FULL_TRANSFER";
    AcceptTransferResponseTransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    AcceptTransferResponseTransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    AcceptTransferResponseTransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    AcceptTransferResponseTransferType["PositionTransferFundFirmToMutualFundCompanyOnly"] = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY";
    AcceptTransferResponseTransferType["Reclaim"] = "RECLAIM";
    AcceptTransferResponseTransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
})(AcceptTransferResponseTransferType || (AcceptTransferResponseTransferType = {}));
/** @internal */
export const AcceptTransferResponseExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const AcceptTransferResponseExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseExternalAccount$;
(function (AcceptTransferResponseExternalAccount$) {
    /** @deprecated use `AcceptTransferResponseExternalAccount$inboundSchema` instead. */
    AcceptTransferResponseExternalAccount$.inboundSchema = AcceptTransferResponseExternalAccount$inboundSchema;
    /** @deprecated use `AcceptTransferResponseExternalAccount$outboundSchema` instead. */
    AcceptTransferResponseExternalAccount$.outboundSchema = AcceptTransferResponseExternalAccount$outboundSchema;
})(AcceptTransferResponseExternalAccount$ || (AcceptTransferResponseExternalAccount$ = {}));
export function acceptTransferResponseExternalAccountToJSON(acceptTransferResponseExternalAccount) {
    return JSON.stringify(AcceptTransferResponseExternalAccount$outboundSchema.parse(acceptTransferResponseExternalAccount));
}
export function acceptTransferResponseExternalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptTransferResponseExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptTransferResponseExternalAccount' from JSON`);
}
/** @internal */
export const AcceptTransferResponseDeliverer$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => AcceptTransferResponseExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const AcceptTransferResponseDeliverer$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => AcceptTransferResponseExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseDeliverer$;
(function (AcceptTransferResponseDeliverer$) {
    /** @deprecated use `AcceptTransferResponseDeliverer$inboundSchema` instead. */
    AcceptTransferResponseDeliverer$.inboundSchema = AcceptTransferResponseDeliverer$inboundSchema;
    /** @deprecated use `AcceptTransferResponseDeliverer$outboundSchema` instead. */
    AcceptTransferResponseDeliverer$.outboundSchema = AcceptTransferResponseDeliverer$outboundSchema;
})(AcceptTransferResponseDeliverer$ || (AcceptTransferResponseDeliverer$ = {}));
export function acceptTransferResponseDelivererToJSON(acceptTransferResponseDeliverer) {
    return JSON.stringify(AcceptTransferResponseDeliverer$outboundSchema.parse(acceptTransferResponseDeliverer));
}
export function acceptTransferResponseDelivererFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptTransferResponseDeliverer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptTransferResponseDeliverer' from JSON`);
}
/** @internal */
export const AcceptTransferResponseDirection$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseDirection),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcceptTransferResponseDirection$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseDirection$;
(function (AcceptTransferResponseDirection$) {
    /** @deprecated use `AcceptTransferResponseDirection$inboundSchema` instead. */
    AcceptTransferResponseDirection$.inboundSchema = AcceptTransferResponseDirection$inboundSchema;
    /** @deprecated use `AcceptTransferResponseDirection$outboundSchema` instead. */
    AcceptTransferResponseDirection$.outboundSchema = AcceptTransferResponseDirection$outboundSchema;
})(AcceptTransferResponseDirection$ || (AcceptTransferResponseDirection$ = {}));
/** @internal */
export const AcceptTransferResponseNsccStatus$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseNsccStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcceptTransferResponseNsccStatus$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseNsccStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseNsccStatus$;
(function (AcceptTransferResponseNsccStatus$) {
    /** @deprecated use `AcceptTransferResponseNsccStatus$inboundSchema` instead. */
    AcceptTransferResponseNsccStatus$.inboundSchema = AcceptTransferResponseNsccStatus$inboundSchema;
    /** @deprecated use `AcceptTransferResponseNsccStatus$outboundSchema` instead. */
    AcceptTransferResponseNsccStatus$.outboundSchema = AcceptTransferResponseNsccStatus$outboundSchema;
})(AcceptTransferResponseNsccStatus$ || (AcceptTransferResponseNsccStatus$ = {}));
/** @internal */
export const AcceptTransferResponseTransferExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const AcceptTransferResponseTransferExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseTransferExternalAccount$;
(function (AcceptTransferResponseTransferExternalAccount$) {
    /** @deprecated use `AcceptTransferResponseTransferExternalAccount$inboundSchema` instead. */
    AcceptTransferResponseTransferExternalAccount$.inboundSchema = AcceptTransferResponseTransferExternalAccount$inboundSchema;
    /** @deprecated use `AcceptTransferResponseTransferExternalAccount$outboundSchema` instead. */
    AcceptTransferResponseTransferExternalAccount$.outboundSchema = AcceptTransferResponseTransferExternalAccount$outboundSchema;
})(AcceptTransferResponseTransferExternalAccount$ || (AcceptTransferResponseTransferExternalAccount$ = {}));
export function acceptTransferResponseTransferExternalAccountToJSON(acceptTransferResponseTransferExternalAccount) {
    return JSON.stringify(AcceptTransferResponseTransferExternalAccount$outboundSchema.parse(acceptTransferResponseTransferExternalAccount));
}
export function acceptTransferResponseTransferExternalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptTransferResponseTransferExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptTransferResponseTransferExternalAccount' from JSON`);
}
/** @internal */
export const AcceptTransferResponseReceiver$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => AcceptTransferResponseTransferExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const AcceptTransferResponseReceiver$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => AcceptTransferResponseTransferExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseReceiver$;
(function (AcceptTransferResponseReceiver$) {
    /** @deprecated use `AcceptTransferResponseReceiver$inboundSchema` instead. */
    AcceptTransferResponseReceiver$.inboundSchema = AcceptTransferResponseReceiver$inboundSchema;
    /** @deprecated use `AcceptTransferResponseReceiver$outboundSchema` instead. */
    AcceptTransferResponseReceiver$.outboundSchema = AcceptTransferResponseReceiver$outboundSchema;
})(AcceptTransferResponseReceiver$ || (AcceptTransferResponseReceiver$ = {}));
export function acceptTransferResponseReceiverToJSON(acceptTransferResponseReceiver) {
    return JSON.stringify(AcceptTransferResponseReceiver$outboundSchema.parse(acceptTransferResponseReceiver));
}
export function acceptTransferResponseReceiverFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptTransferResponseReceiver$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptTransferResponseReceiver' from JSON`);
}
/** @internal */
export const AcceptTransferResponseRejectCode$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseRejectCode),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcceptTransferResponseRejectCode$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseRejectCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseRejectCode$;
(function (AcceptTransferResponseRejectCode$) {
    /** @deprecated use `AcceptTransferResponseRejectCode$inboundSchema` instead. */
    AcceptTransferResponseRejectCode$.inboundSchema = AcceptTransferResponseRejectCode$inboundSchema;
    /** @deprecated use `AcceptTransferResponseRejectCode$outboundSchema` instead. */
    AcceptTransferResponseRejectCode$.outboundSchema = AcceptTransferResponseRejectCode$outboundSchema;
})(AcceptTransferResponseRejectCode$ || (AcceptTransferResponseRejectCode$ = {}));
/** @internal */
export const AcceptTransferResponseState$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcceptTransferResponseState$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseState$;
(function (AcceptTransferResponseState$) {
    /** @deprecated use `AcceptTransferResponseState$inboundSchema` instead. */
    AcceptTransferResponseState$.inboundSchema = AcceptTransferResponseState$inboundSchema;
    /** @deprecated use `AcceptTransferResponseState$outboundSchema` instead. */
    AcceptTransferResponseState$.outboundSchema = AcceptTransferResponseState$outboundSchema;
})(AcceptTransferResponseState$ || (AcceptTransferResponseState$ = {}));
/** @internal */
export const AcceptTransferResponseTransferType$inboundSchema = z
    .union([
    z.nativeEnum(AcceptTransferResponseTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AcceptTransferResponseTransferType$outboundSchema = z.union([
    z.nativeEnum(AcceptTransferResponseTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponseTransferType$;
(function (AcceptTransferResponseTransferType$) {
    /** @deprecated use `AcceptTransferResponseTransferType$inboundSchema` instead. */
    AcceptTransferResponseTransferType$.inboundSchema = AcceptTransferResponseTransferType$inboundSchema;
    /** @deprecated use `AcceptTransferResponseTransferType$outboundSchema` instead. */
    AcceptTransferResponseTransferType$.outboundSchema = AcceptTransferResponseTransferType$outboundSchema;
})(AcceptTransferResponseTransferType$ || (AcceptTransferResponseTransferType$ = {}));
/** @internal */
export const Transfer$inboundSchema = z.object({
    acat_control_number: z.string().optional(),
    assets: z.array(AcatsAsset$inboundSchema).optional(),
    comment: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deliverer: z.nullable(z.lazy(() => AcceptTransferResponseDeliverer$inboundSchema)).optional(),
    direction: AcceptTransferResponseDirection$inboundSchema.optional(),
    name: z.string().optional(),
    nscc_status: AcceptTransferResponseNsccStatus$inboundSchema.optional(),
    original_control_number: z.string().optional(),
    receiver: z.nullable(z.lazy(() => AcceptTransferResponseReceiver$inboundSchema)).optional(),
    reject_code: AcceptTransferResponseRejectCode$inboundSchema.optional(),
    state: AcceptTransferResponseState$inboundSchema.optional(),
    state_reason: z.string().optional(),
    transfer_type: AcceptTransferResponseTransferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "acat_control_number": "acatControlNumber",
        "create_time": "createTime",
        "nscc_status": "nsccStatus",
        "original_control_number": "originalControlNumber",
        "reject_code": "rejectCode",
        "state_reason": "stateReason",
        "transfer_type": "transferType",
    });
});
/** @internal */
export const Transfer$outboundSchema = z.object({
    acatControlNumber: z.string().optional(),
    assets: z.array(AcatsAsset$outboundSchema).optional(),
    comment: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deliverer: z.nullable(z.lazy(() => AcceptTransferResponseDeliverer$outboundSchema)).optional(),
    direction: AcceptTransferResponseDirection$outboundSchema.optional(),
    name: z.string().optional(),
    nsccStatus: AcceptTransferResponseNsccStatus$outboundSchema.optional(),
    originalControlNumber: z.string().optional(),
    receiver: z.nullable(z.lazy(() => AcceptTransferResponseReceiver$outboundSchema)).optional(),
    rejectCode: AcceptTransferResponseRejectCode$outboundSchema.optional(),
    state: AcceptTransferResponseState$outboundSchema.optional(),
    stateReason: z.string().optional(),
    transferType: AcceptTransferResponseTransferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        acatControlNumber: "acat_control_number",
        createTime: "create_time",
        nsccStatus: "nscc_status",
        originalControlNumber: "original_control_number",
        rejectCode: "reject_code",
        stateReason: "state_reason",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Transfer$;
(function (Transfer$) {
    /** @deprecated use `Transfer$inboundSchema` instead. */
    Transfer$.inboundSchema = Transfer$inboundSchema;
    /** @deprecated use `Transfer$outboundSchema` instead. */
    Transfer$.outboundSchema = Transfer$outboundSchema;
})(Transfer$ || (Transfer$ = {}));
export function transferToJSON(transfer) {
    return JSON.stringify(Transfer$outboundSchema.parse(transfer));
}
export function transferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Transfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Transfer' from JSON`);
}
/** @internal */
export const AcceptTransferResponse$inboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => Transfer$inboundSchema)).optional(),
});
/** @internal */
export const AcceptTransferResponse$outboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => Transfer$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptTransferResponse$;
(function (AcceptTransferResponse$) {
    /** @deprecated use `AcceptTransferResponse$inboundSchema` instead. */
    AcceptTransferResponse$.inboundSchema = AcceptTransferResponse$inboundSchema;
    /** @deprecated use `AcceptTransferResponse$outboundSchema` instead. */
    AcceptTransferResponse$.outboundSchema = AcceptTransferResponse$outboundSchema;
})(AcceptTransferResponse$ || (AcceptTransferResponse$ = {}));
export function acceptTransferResponseToJSON(acceptTransferResponse) {
    return JSON.stringify(AcceptTransferResponse$outboundSchema.parse(acceptTransferResponse));
}
export function acceptTransferResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptTransferResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptTransferResponse' from JSON`);
}
//# sourceMappingURL=accepttransferresponse.js.map