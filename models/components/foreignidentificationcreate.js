/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
/**
 * Identification type
 */
export var Type;
(function (Type) {
    Type["IdentificationTypeUnspecified"] = "IDENTIFICATION_TYPE_UNSPECIFIED";
    Type["Passport"] = "PASSPORT";
    Type["NationalId"] = "NATIONAL_ID";
    Type["DriversLicense"] = "DRIVERS_LICENSE";
})(Type || (Type = {}));
/** @internal */
export const Type$inboundSchema = z
    .union([
    z.nativeEnum(Type),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Type$outboundSchema = z.union([
    z.nativeEnum(Type),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const ForeignIdentificationCreate$inboundSchema = z.object({
    expiration_date: DateCreate$inboundSchema.optional(),
    ftin: z.boolean(),
    identification_number: z.string(),
    issue_date: DateCreate$inboundSchema.optional(),
    issuing_region_code: z.string(),
    type: Type$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "expiration_date": "expirationDate",
        "identification_number": "identificationNumber",
        "issue_date": "issueDate",
        "issuing_region_code": "issuingRegionCode",
    });
});
/** @internal */
export const ForeignIdentificationCreate$outboundSchema = z.object({
    expirationDate: DateCreate$outboundSchema.optional(),
    ftin: z.boolean(),
    identificationNumber: z.string(),
    issueDate: DateCreate$outboundSchema.optional(),
    issuingRegionCode: z.string(),
    type: Type$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        expirationDate: "expiration_date",
        identificationNumber: "identification_number",
        issueDate: "issue_date",
        issuingRegionCode: "issuing_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignIdentificationCreate$;
(function (ForeignIdentificationCreate$) {
    /** @deprecated use `ForeignIdentificationCreate$inboundSchema` instead. */
    ForeignIdentificationCreate$.inboundSchema = ForeignIdentificationCreate$inboundSchema;
    /** @deprecated use `ForeignIdentificationCreate$outboundSchema` instead. */
    ForeignIdentificationCreate$.outboundSchema = ForeignIdentificationCreate$outboundSchema;
})(ForeignIdentificationCreate$ || (ForeignIdentificationCreate$ = {}));
export function foreignIdentificationCreateToJSON(foreignIdentificationCreate) {
    return JSON.stringify(ForeignIdentificationCreate$outboundSchema.parse(foreignIdentificationCreate));
}
export function foreignIdentificationCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignIdentificationCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignIdentificationCreate' from JSON`);
}
//# sourceMappingURL=foreignidentificationcreate.js.map