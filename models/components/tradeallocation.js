/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BondYield$inboundSchema, BondYield$outboundSchema, } from "./bondyield.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
/**
 * Type of the asset being traded.
 */
export var TradeAllocationAssetType;
(function (TradeAllocationAssetType) {
    TradeAllocationAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeAllocationAssetType["Equity"] = "EQUITY";
    TradeAllocationAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeAllocationAssetType || (TradeAllocationAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var TradeAllocationBrokerCapacity;
(function (TradeAllocationBrokerCapacity) {
    TradeAllocationBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeAllocationBrokerCapacity["Agency"] = "AGENCY";
    TradeAllocationBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeAllocationBrokerCapacity["Mixed"] = "MIXED";
})(TradeAllocationBrokerCapacity || (TradeAllocationBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var TradeAllocationIdentifierType;
(function (TradeAllocationIdentifierType) {
    TradeAllocationIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeAllocationIdentifierType["AssetId"] = "ASSET_ID";
    TradeAllocationIdentifierType["Symbol"] = "SYMBOL";
    TradeAllocationIdentifierType["Cusip"] = "CUSIP";
    TradeAllocationIdentifierType["Isin"] = "ISIN";
})(TradeAllocationIdentifierType || (TradeAllocationIdentifierType = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
export var TradeAllocationPriceAdjustmentType;
(function (TradeAllocationPriceAdjustmentType) {
    TradeAllocationPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    TradeAllocationPriceAdjustmentType["Markup"] = "MARKUP";
    TradeAllocationPriceAdjustmentType["Markdown"] = "MARKDOWN";
    TradeAllocationPriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(TradeAllocationPriceAdjustmentType || (TradeAllocationPriceAdjustmentType = {}));
/**
 * Side modifier for the trade allocation.
 */
export var TradeAllocationSideModifier;
(function (TradeAllocationSideModifier) {
    TradeAllocationSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    TradeAllocationSideModifier["Short"] = "SHORT";
    TradeAllocationSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    TradeAllocationSideModifier["ShortCover"] = "SHORT_COVER";
    TradeAllocationSideModifier["Open"] = "OPEN";
    TradeAllocationSideModifier["Close"] = "CLOSE";
})(TradeAllocationSideModifier || (TradeAllocationSideModifier = {}));
export var TradeAllocationSpecialInstructions;
(function (TradeAllocationSpecialInstructions) {
    TradeAllocationSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    TradeAllocationSpecialInstructions["Rule144"] = "RULE_144";
    TradeAllocationSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    TradeAllocationSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    TradeAllocationSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    TradeAllocationSpecialInstructions["CoverShort"] = "COVER_SHORT";
    TradeAllocationSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    TradeAllocationSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    TradeAllocationSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    TradeAllocationSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    TradeAllocationSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    TradeAllocationSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    TradeAllocationSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    TradeAllocationSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    TradeAllocationSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    TradeAllocationSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    TradeAllocationSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    TradeAllocationSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    TradeAllocationSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    TradeAllocationSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    TradeAllocationSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    TradeAllocationSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    TradeAllocationSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    TradeAllocationSpecialInstructions["Solicited"] = "SOLICITED";
    TradeAllocationSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    TradeAllocationSpecialInstructions["XDividend"] = "X_DIVIDEND";
    TradeAllocationSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    TradeAllocationSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    TradeAllocationSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    TradeAllocationSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    TradeAllocationSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    TradeAllocationSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    TradeAllocationSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    TradeAllocationSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    TradeAllocationSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    TradeAllocationSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    TradeAllocationSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    TradeAllocationSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    TradeAllocationSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    TradeAllocationSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    TradeAllocationSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    TradeAllocationSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    TradeAllocationSpecialInstructions["StockReward"] = "STOCK_REWARD";
    TradeAllocationSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    TradeAllocationSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    TradeAllocationSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    TradeAllocationSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(TradeAllocationSpecialInstructions || (TradeAllocationSpecialInstructions = {}));
/**
 * The state that the trade allocation is in.
 */
export var TradeAllocationState;
(function (TradeAllocationState) {
    TradeAllocationState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TradeAllocationState["Creating"] = "CREATING";
    TradeAllocationState["Rebooking"] = "REBOOKING";
    TradeAllocationState["Canceling"] = "CANCELING";
    TradeAllocationState["Booked"] = "BOOKED";
    TradeAllocationState["Rebooked"] = "REBOOKED";
    TradeAllocationState["Canceled"] = "CANCELED";
    TradeAllocationState["Failed"] = "FAILED";
})(TradeAllocationState || (TradeAllocationState = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
export var TradeAllocationToSide;
(function (TradeAllocationToSide) {
    TradeAllocationToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    TradeAllocationToSide["Buy"] = "BUY";
    TradeAllocationToSide["Sell"] = "SELL";
})(TradeAllocationToSide || (TradeAllocationToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
export var TradeAllocationWhenIssued;
(function (TradeAllocationWhenIssued) {
    TradeAllocationWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    TradeAllocationWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    TradeAllocationWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(TradeAllocationWhenIssued || (TradeAllocationWhenIssued = {}));
/** @internal */
export const TradeAllocationAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationAccruedInterestAmount$;
(function (TradeAllocationAccruedInterestAmount$) {
    /** @deprecated use `TradeAllocationAccruedInterestAmount$inboundSchema` instead. */
    TradeAllocationAccruedInterestAmount$.inboundSchema = TradeAllocationAccruedInterestAmount$inboundSchema;
    /** @deprecated use `TradeAllocationAccruedInterestAmount$outboundSchema` instead. */
    TradeAllocationAccruedInterestAmount$.outboundSchema = TradeAllocationAccruedInterestAmount$outboundSchema;
})(TradeAllocationAccruedInterestAmount$ || (TradeAllocationAccruedInterestAmount$ = {}));
export function tradeAllocationAccruedInterestAmountToJSON(tradeAllocationAccruedInterestAmount) {
    return JSON.stringify(TradeAllocationAccruedInterestAmount$outboundSchema.parse(tradeAllocationAccruedInterestAmount));
}
export function tradeAllocationAccruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationAccruedInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationAccruedInterestAmount' from JSON`);
}
/** @internal */
export const TradeAllocationAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationAssetType$;
(function (TradeAllocationAssetType$) {
    /** @deprecated use `TradeAllocationAssetType$inboundSchema` instead. */
    TradeAllocationAssetType$.inboundSchema = TradeAllocationAssetType$inboundSchema;
    /** @deprecated use `TradeAllocationAssetType$outboundSchema` instead. */
    TradeAllocationAssetType$.outboundSchema = TradeAllocationAssetType$outboundSchema;
})(TradeAllocationAssetType$ || (TradeAllocationAssetType$ = {}));
/** @internal */
export const TradeAllocationBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationBrokerCapacity$;
(function (TradeAllocationBrokerCapacity$) {
    /** @deprecated use `TradeAllocationBrokerCapacity$inboundSchema` instead. */
    TradeAllocationBrokerCapacity$.inboundSchema = TradeAllocationBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeAllocationBrokerCapacity$outboundSchema` instead. */
    TradeAllocationBrokerCapacity$.outboundSchema = TradeAllocationBrokerCapacity$outboundSchema;
})(TradeAllocationBrokerCapacity$ || (TradeAllocationBrokerCapacity$ = {}));
/** @internal */
export const TradeAllocationCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationCommissionAmount$;
(function (TradeAllocationCommissionAmount$) {
    /** @deprecated use `TradeAllocationCommissionAmount$inboundSchema` instead. */
    TradeAllocationCommissionAmount$.inboundSchema = TradeAllocationCommissionAmount$inboundSchema;
    /** @deprecated use `TradeAllocationCommissionAmount$outboundSchema` instead. */
    TradeAllocationCommissionAmount$.outboundSchema = TradeAllocationCommissionAmount$outboundSchema;
})(TradeAllocationCommissionAmount$ || (TradeAllocationCommissionAmount$ = {}));
export function tradeAllocationCommissionAmountToJSON(tradeAllocationCommissionAmount) {
    return JSON.stringify(TradeAllocationCommissionAmount$outboundSchema.parse(tradeAllocationCommissionAmount));
}
export function tradeAllocationCommissionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationCommissionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationCommissionAmount' from JSON`);
}
/** @internal */
export const TradeAllocationGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationGrossAmount$;
(function (TradeAllocationGrossAmount$) {
    /** @deprecated use `TradeAllocationGrossAmount$inboundSchema` instead. */
    TradeAllocationGrossAmount$.inboundSchema = TradeAllocationGrossAmount$inboundSchema;
    /** @deprecated use `TradeAllocationGrossAmount$outboundSchema` instead. */
    TradeAllocationGrossAmount$.outboundSchema = TradeAllocationGrossAmount$outboundSchema;
})(TradeAllocationGrossAmount$ || (TradeAllocationGrossAmount$ = {}));
export function tradeAllocationGrossAmountToJSON(tradeAllocationGrossAmount) {
    return JSON.stringify(TradeAllocationGrossAmount$outboundSchema.parse(tradeAllocationGrossAmount));
}
export function tradeAllocationGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationGrossAmount' from JSON`);
}
/** @internal */
export const TradeAllocationIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationIdentifierType$;
(function (TradeAllocationIdentifierType$) {
    /** @deprecated use `TradeAllocationIdentifierType$inboundSchema` instead. */
    TradeAllocationIdentifierType$.inboundSchema = TradeAllocationIdentifierType$inboundSchema;
    /** @deprecated use `TradeAllocationIdentifierType$outboundSchema` instead. */
    TradeAllocationIdentifierType$.outboundSchema = TradeAllocationIdentifierType$outboundSchema;
})(TradeAllocationIdentifierType$ || (TradeAllocationIdentifierType$ = {}));
/** @internal */
export const TradeAllocationPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationPrevailingMarketPrice$;
(function (TradeAllocationPrevailingMarketPrice$) {
    /** @deprecated use `TradeAllocationPrevailingMarketPrice$inboundSchema` instead. */
    TradeAllocationPrevailingMarketPrice$.inboundSchema = TradeAllocationPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `TradeAllocationPrevailingMarketPrice$outboundSchema` instead. */
    TradeAllocationPrevailingMarketPrice$.outboundSchema = TradeAllocationPrevailingMarketPrice$outboundSchema;
})(TradeAllocationPrevailingMarketPrice$ || (TradeAllocationPrevailingMarketPrice$ = {}));
export function tradeAllocationPrevailingMarketPriceToJSON(tradeAllocationPrevailingMarketPrice) {
    return JSON.stringify(TradeAllocationPrevailingMarketPrice$outboundSchema.parse(tradeAllocationPrevailingMarketPrice));
}
export function tradeAllocationPrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationPrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationPrevailingMarketPrice' from JSON`);
}
/** @internal */
export const TradeAllocationPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationPrice$;
(function (TradeAllocationPrice$) {
    /** @deprecated use `TradeAllocationPrice$inboundSchema` instead. */
    TradeAllocationPrice$.inboundSchema = TradeAllocationPrice$inboundSchema;
    /** @deprecated use `TradeAllocationPrice$outboundSchema` instead. */
    TradeAllocationPrice$.outboundSchema = TradeAllocationPrice$outboundSchema;
})(TradeAllocationPrice$ || (TradeAllocationPrice$ = {}));
export function tradeAllocationPriceToJSON(tradeAllocationPrice) {
    return JSON.stringify(TradeAllocationPrice$outboundSchema.parse(tradeAllocationPrice));
}
export function tradeAllocationPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationPrice' from JSON`);
}
/** @internal */
export const TradeAllocationPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationPriceAdjustmentAmount$;
(function (TradeAllocationPriceAdjustmentAmount$) {
    /** @deprecated use `TradeAllocationPriceAdjustmentAmount$inboundSchema` instead. */
    TradeAllocationPriceAdjustmentAmount$.inboundSchema = TradeAllocationPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustmentAmount$outboundSchema` instead. */
    TradeAllocationPriceAdjustmentAmount$.outboundSchema = TradeAllocationPriceAdjustmentAmount$outboundSchema;
})(TradeAllocationPriceAdjustmentAmount$ || (TradeAllocationPriceAdjustmentAmount$ = {}));
export function tradeAllocationPriceAdjustmentAmountToJSON(tradeAllocationPriceAdjustmentAmount) {
    return JSON.stringify(TradeAllocationPriceAdjustmentAmount$outboundSchema.parse(tradeAllocationPriceAdjustmentAmount));
}
export function tradeAllocationPriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationPriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationPriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const TradeAllocationPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationPriceAdjustmentType$;
(function (TradeAllocationPriceAdjustmentType$) {
    /** @deprecated use `TradeAllocationPriceAdjustmentType$inboundSchema` instead. */
    TradeAllocationPriceAdjustmentType$.inboundSchema = TradeAllocationPriceAdjustmentType$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustmentType$outboundSchema` instead. */
    TradeAllocationPriceAdjustmentType$.outboundSchema = TradeAllocationPriceAdjustmentType$outboundSchema;
})(TradeAllocationPriceAdjustmentType$ || (TradeAllocationPriceAdjustmentType$ = {}));
/** @internal */
export const TradeAllocationPriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => TradeAllocationPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: TradeAllocationPriceAdjustmentType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const TradeAllocationPriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => TradeAllocationPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: TradeAllocationPriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationPriceAdjustment$;
(function (TradeAllocationPriceAdjustment$) {
    /** @deprecated use `TradeAllocationPriceAdjustment$inboundSchema` instead. */
    TradeAllocationPriceAdjustment$.inboundSchema = TradeAllocationPriceAdjustment$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustment$outboundSchema` instead. */
    TradeAllocationPriceAdjustment$.outboundSchema = TradeAllocationPriceAdjustment$outboundSchema;
})(TradeAllocationPriceAdjustment$ || (TradeAllocationPriceAdjustment$ = {}));
export function tradeAllocationPriceAdjustmentToJSON(tradeAllocationPriceAdjustment) {
    return JSON.stringify(TradeAllocationPriceAdjustment$outboundSchema.parse(tradeAllocationPriceAdjustment));
}
export function tradeAllocationPriceAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationPriceAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationPriceAdjustment' from JSON`);
}
/** @internal */
export const TradeAllocationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TradeAllocationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationQuantity$;
(function (TradeAllocationQuantity$) {
    /** @deprecated use `TradeAllocationQuantity$inboundSchema` instead. */
    TradeAllocationQuantity$.inboundSchema = TradeAllocationQuantity$inboundSchema;
    /** @deprecated use `TradeAllocationQuantity$outboundSchema` instead. */
    TradeAllocationQuantity$.outboundSchema = TradeAllocationQuantity$outboundSchema;
})(TradeAllocationQuantity$ || (TradeAllocationQuantity$ = {}));
export function tradeAllocationQuantityToJSON(tradeAllocationQuantity) {
    return JSON.stringify(TradeAllocationQuantity$outboundSchema.parse(tradeAllocationQuantity));
}
export function tradeAllocationQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationQuantity' from JSON`);
}
/** @internal */
export const TradeAllocationSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const TradeAllocationSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationSettlementDate$;
(function (TradeAllocationSettlementDate$) {
    /** @deprecated use `TradeAllocationSettlementDate$inboundSchema` instead. */
    TradeAllocationSettlementDate$.inboundSchema = TradeAllocationSettlementDate$inboundSchema;
    /** @deprecated use `TradeAllocationSettlementDate$outboundSchema` instead. */
    TradeAllocationSettlementDate$.outboundSchema = TradeAllocationSettlementDate$outboundSchema;
})(TradeAllocationSettlementDate$ || (TradeAllocationSettlementDate$ = {}));
export function tradeAllocationSettlementDateToJSON(tradeAllocationSettlementDate) {
    return JSON.stringify(TradeAllocationSettlementDate$outboundSchema.parse(tradeAllocationSettlementDate));
}
export function tradeAllocationSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocationSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocationSettlementDate' from JSON`);
}
/** @internal */
export const TradeAllocationSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationSideModifier$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationSideModifier$;
(function (TradeAllocationSideModifier$) {
    /** @deprecated use `TradeAllocationSideModifier$inboundSchema` instead. */
    TradeAllocationSideModifier$.inboundSchema = TradeAllocationSideModifier$inboundSchema;
    /** @deprecated use `TradeAllocationSideModifier$outboundSchema` instead. */
    TradeAllocationSideModifier$.outboundSchema = TradeAllocationSideModifier$outboundSchema;
})(TradeAllocationSideModifier$ || (TradeAllocationSideModifier$ = {}));
/** @internal */
export const TradeAllocationSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationSpecialInstructions$;
(function (TradeAllocationSpecialInstructions$) {
    /** @deprecated use `TradeAllocationSpecialInstructions$inboundSchema` instead. */
    TradeAllocationSpecialInstructions$.inboundSchema = TradeAllocationSpecialInstructions$inboundSchema;
    /** @deprecated use `TradeAllocationSpecialInstructions$outboundSchema` instead. */
    TradeAllocationSpecialInstructions$.outboundSchema = TradeAllocationSpecialInstructions$outboundSchema;
})(TradeAllocationSpecialInstructions$ || (TradeAllocationSpecialInstructions$ = {}));
/** @internal */
export const TradeAllocationState$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationState$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationState$;
(function (TradeAllocationState$) {
    /** @deprecated use `TradeAllocationState$inboundSchema` instead. */
    TradeAllocationState$.inboundSchema = TradeAllocationState$inboundSchema;
    /** @deprecated use `TradeAllocationState$outboundSchema` instead. */
    TradeAllocationState$.outboundSchema = TradeAllocationState$outboundSchema;
})(TradeAllocationState$ || (TradeAllocationState$ = {}));
/** @internal */
export const TradeAllocationToSide$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationToSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationToSide$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationToSide$;
(function (TradeAllocationToSide$) {
    /** @deprecated use `TradeAllocationToSide$inboundSchema` instead. */
    TradeAllocationToSide$.inboundSchema = TradeAllocationToSide$inboundSchema;
    /** @deprecated use `TradeAllocationToSide$outboundSchema` instead. */
    TradeAllocationToSide$.outboundSchema = TradeAllocationToSide$outboundSchema;
})(TradeAllocationToSide$ || (TradeAllocationToSide$ = {}));
/** @internal */
export const TradeAllocationWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TradeAllocationWhenIssued$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocationWhenIssued$;
(function (TradeAllocationWhenIssued$) {
    /** @deprecated use `TradeAllocationWhenIssued$inboundSchema` instead. */
    TradeAllocationWhenIssued$.inboundSchema = TradeAllocationWhenIssued$inboundSchema;
    /** @deprecated use `TradeAllocationWhenIssued$outboundSchema` instead. */
    TradeAllocationWhenIssued$.outboundSchema = TradeAllocationWhenIssued$outboundSchema;
})(TradeAllocationWhenIssued$ || (TradeAllocationWhenIssued$ = {}));
/** @internal */
export const TradeAllocation$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => TradeAllocationAccruedInterestAmount$inboundSchema)).optional(),
    additional_instructions: z.string().optional(),
    asset_type: TradeAllocationAssetType$inboundSchema.optional(),
    bond_yield: z.array(BondYield$inboundSchema).optional(),
    broker_capacity: TradeAllocationBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    commission_amount: z.nullable(z.lazy(() => TradeAllocationCommissionAmount$inboundSchema)).optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    from_account_id: z.string().optional(),
    from_activity_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => TradeAllocationGrossAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: TradeAllocationIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => TradeAllocationPrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => TradeAllocationPrice$inboundSchema))
        .optional(),
    price_adjustment: z.nullable(z.lazy(() => TradeAllocationPriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => TradeAllocationQuantity$inboundSchema))
        .optional(),
    settlement_date: z.nullable(z.lazy(() => TradeAllocationSettlementDate$inboundSchema)).optional(),
    side_modifier: TradeAllocationSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(TradeAllocationSpecialInstructions$inboundSchema).optional(),
    state: TradeAllocationState$inboundSchema.optional(),
    to_account_id: z.string().optional(),
    to_activity_id: z.string().optional(),
    to_side: TradeAllocationToSide$inboundSchema.optional(),
    trade_allocation_id: z.string().optional(),
    when_issued: TradeAllocationWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "from_activity_id": "fromActivityId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_activity_id": "toActivityId",
        "to_side": "toSide",
        "trade_allocation_id": "tradeAllocationId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const TradeAllocation$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => TradeAllocationAccruedInterestAmount$outboundSchema)).optional(),
    additionalInstructions: z.string().optional(),
    assetType: TradeAllocationAssetType$outboundSchema.optional(),
    bondYield: z.array(BondYield$outboundSchema).optional(),
    brokerCapacity: TradeAllocationBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    commissionAmount: z.nullable(z.lazy(() => TradeAllocationCommissionAmount$outboundSchema)).optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    fromAccountId: z.string().optional(),
    fromActivityId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => TradeAllocationGrossAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: TradeAllocationIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => TradeAllocationPrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => TradeAllocationPrice$outboundSchema))
        .optional(),
    priceAdjustment: z.nullable(z.lazy(() => TradeAllocationPriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => TradeAllocationQuantity$outboundSchema))
        .optional(),
    settlementDate: z.nullable(z.lazy(() => TradeAllocationSettlementDate$outboundSchema)).optional(),
    sideModifier: TradeAllocationSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(TradeAllocationSpecialInstructions$outboundSchema).optional(),
    state: TradeAllocationState$outboundSchema.optional(),
    toAccountId: z.string().optional(),
    toActivityId: z.string().optional(),
    toSide: TradeAllocationToSide$outboundSchema.optional(),
    tradeAllocationId: z.string().optional(),
    whenIssued: TradeAllocationWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        fromActivityId: "from_activity_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toActivityId: "to_activity_id",
        toSide: "to_side",
        tradeAllocationId: "trade_allocation_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TradeAllocation$;
(function (TradeAllocation$) {
    /** @deprecated use `TradeAllocation$inboundSchema` instead. */
    TradeAllocation$.inboundSchema = TradeAllocation$inboundSchema;
    /** @deprecated use `TradeAllocation$outboundSchema` instead. */
    TradeAllocation$.outboundSchema = TradeAllocation$outboundSchema;
})(TradeAllocation$ || (TradeAllocation$ = {}));
export function tradeAllocationToJSON(tradeAllocation) {
    return JSON.stringify(TradeAllocation$outboundSchema.parse(tradeAllocation));
}
export function tradeAllocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TradeAllocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TradeAllocation' from JSON`);
}
//# sourceMappingURL=tradeallocation.js.map