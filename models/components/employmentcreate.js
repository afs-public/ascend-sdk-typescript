/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
/**
 * Classifies in what capacity (or if) the underlying natural person holds a job
 */
export var EmploymentStatus;
(function (EmploymentStatus) {
    EmploymentStatus["StatusUnspecified"] = "STATUS_UNSPECIFIED";
    EmploymentStatus["Employed"] = "EMPLOYED";
    EmploymentStatus["SelfEmployed"] = "SELF_EMPLOYED";
    EmploymentStatus["Unemployed"] = "UNEMPLOYED";
    EmploymentStatus["Retired"] = "RETIRED";
    EmploymentStatus["Student"] = "STUDENT";
})(EmploymentStatus || (EmploymentStatus = {}));
/** @internal */
export const EmploymentStatus$inboundSchema = z
    .union([
    z.nativeEnum(EmploymentStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EmploymentStatus$outboundSchema = z.union([
    z.nativeEnum(EmploymentStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmploymentStatus$;
(function (EmploymentStatus$) {
    /** @deprecated use `EmploymentStatus$inboundSchema` instead. */
    EmploymentStatus$.inboundSchema = EmploymentStatus$inboundSchema;
    /** @deprecated use `EmploymentStatus$outboundSchema` instead. */
    EmploymentStatus$.outboundSchema = EmploymentStatus$outboundSchema;
})(EmploymentStatus$ || (EmploymentStatus$ = {}));
/** @internal */
export const EmploymentCreate$inboundSchema = z.object({
    employer: z.string().optional(),
    employer_address: PostalAddressCreate$inboundSchema.optional(),
    employment_status: EmploymentStatus$inboundSchema,
    occupation: z.string().optional(),
    start_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "employer_address": "employerAddress",
        "employment_status": "employmentStatus",
        "start_year": "startYear",
    });
});
/** @internal */
export const EmploymentCreate$outboundSchema = z.object({
    employer: z.string().optional(),
    employerAddress: PostalAddressCreate$outboundSchema.optional(),
    employmentStatus: EmploymentStatus$outboundSchema,
    occupation: z.string().optional(),
    startYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        employerAddress: "employer_address",
        employmentStatus: "employment_status",
        startYear: "start_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmploymentCreate$;
(function (EmploymentCreate$) {
    /** @deprecated use `EmploymentCreate$inboundSchema` instead. */
    EmploymentCreate$.inboundSchema = EmploymentCreate$inboundSchema;
    /** @deprecated use `EmploymentCreate$outboundSchema` instead. */
    EmploymentCreate$.outboundSchema = EmploymentCreate$outboundSchema;
})(EmploymentCreate$ || (EmploymentCreate$ = {}));
export function employmentCreateToJSON(employmentCreate) {
    return JSON.stringify(EmploymentCreate$outboundSchema.parse(employmentCreate));
}
export function employmentCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmploymentCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmploymentCreate' from JSON`);
}
//# sourceMappingURL=employmentcreate.js.map