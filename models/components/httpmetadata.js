/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const HTTPMetadata$inboundSchema = z.object({
    Response: z.instanceof(Response),
    Request: z.instanceof(Request),
}).transform((v) => {
    return remap$(v, {
        "Response": "response",
        "Request": "request",
    });
});
/** @internal */
export const HTTPMetadata$outboundSchema = z.object({
    response: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    request: z.instanceof(Request).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
}).transform((v) => {
    return remap$(v, {
        response: "Response",
        request: "Request",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HTTPMetadata$;
(function (HTTPMetadata$) {
    /** @deprecated use `HTTPMetadata$inboundSchema` instead. */
    HTTPMetadata$.inboundSchema = HTTPMetadata$inboundSchema;
    /** @deprecated use `HTTPMetadata$outboundSchema` instead. */
    HTTPMetadata$.outboundSchema = HTTPMetadata$outboundSchema;
})(HTTPMetadata$ || (HTTPMetadata$ = {}));
export function httpMetadataToJSON(httpMetadata) {
    return JSON.stringify(HTTPMetadata$outboundSchema.parse(httpMetadata));
}
export function httpMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => HTTPMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'HTTPMetadata' from JSON`);
}
//# sourceMappingURL=httpmetadata.js.map