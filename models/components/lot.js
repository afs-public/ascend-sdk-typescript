/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LotPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const LotPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LotPrice$;
(function (LotPrice$) {
    /** @deprecated use `LotPrice$inboundSchema` instead. */
    LotPrice$.inboundSchema = LotPrice$inboundSchema;
    /** @deprecated use `LotPrice$outboundSchema` instead. */
    LotPrice$.outboundSchema = LotPrice$outboundSchema;
})(LotPrice$ || (LotPrice$ = {}));
export function lotPriceToJSON(lotPrice) {
    return JSON.stringify(LotPrice$outboundSchema.parse(lotPrice));
}
export function lotPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LotPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LotPrice' from JSON`);
}
/** @internal */
export const LotMoney$inboundSchema = z.object({
    currency_code: z.string().optional(),
    price: z.nullable(z.lazy(() => LotPrice$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "currency_code": "currencyCode",
    });
});
/** @internal */
export const LotMoney$outboundSchema = z.object({
    currencyCode: z.string().optional(),
    price: z.nullable(z.lazy(() => LotPrice$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        currencyCode: "currency_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LotMoney$;
(function (LotMoney$) {
    /** @deprecated use `LotMoney$inboundSchema` instead. */
    LotMoney$.inboundSchema = LotMoney$inboundSchema;
    /** @deprecated use `LotMoney$outboundSchema` instead. */
    LotMoney$.outboundSchema = LotMoney$outboundSchema;
})(LotMoney$ || (LotMoney$ = {}));
export function lotMoneyToJSON(lotMoney) {
    return JSON.stringify(LotMoney$outboundSchema.parse(lotMoney));
}
export function lotMoneyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LotMoney$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LotMoney' from JSON`);
}
/** @internal */
export const LotQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const LotQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LotQuantity$;
(function (LotQuantity$) {
    /** @deprecated use `LotQuantity$inboundSchema` instead. */
    LotQuantity$.inboundSchema = LotQuantity$inboundSchema;
    /** @deprecated use `LotQuantity$outboundSchema` instead. */
    LotQuantity$.outboundSchema = LotQuantity$outboundSchema;
})(LotQuantity$ || (LotQuantity$ = {}));
export function lotQuantityToJSON(lotQuantity) {
    return JSON.stringify(LotQuantity$outboundSchema.parse(lotQuantity));
}
export function lotQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LotQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LotQuantity' from JSON`);
}
/** @internal */
export const LotTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const LotTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LotTradeDate$;
(function (LotTradeDate$) {
    /** @deprecated use `LotTradeDate$inboundSchema` instead. */
    LotTradeDate$.inboundSchema = LotTradeDate$inboundSchema;
    /** @deprecated use `LotTradeDate$outboundSchema` instead. */
    LotTradeDate$.outboundSchema = LotTradeDate$outboundSchema;
})(LotTradeDate$ || (LotTradeDate$ = {}));
export function lotTradeDateToJSON(lotTradeDate) {
    return JSON.stringify(LotTradeDate$outboundSchema.parse(lotTradeDate));
}
export function lotTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LotTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LotTradeDate' from JSON`);
}
/** @internal */
export const Lot$inboundSchema = z
    .object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => LotMoney$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => LotQuantity$inboundSchema)).optional(),
    trade_date: z.nullable(z.lazy(() => LotTradeDate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "trade_date": "tradeDate",
    });
});
/** @internal */
export const Lot$outboundSchema = z
    .object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => LotMoney$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => LotQuantity$outboundSchema)).optional(),
    tradeDate: z.nullable(z.lazy(() => LotTradeDate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        tradeDate: "trade_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Lot$;
(function (Lot$) {
    /** @deprecated use `Lot$inboundSchema` instead. */
    Lot$.inboundSchema = Lot$inboundSchema;
    /** @deprecated use `Lot$outboundSchema` instead. */
    Lot$.outboundSchema = Lot$outboundSchema;
})(Lot$ || (Lot$ = {}));
export function lotToJSON(lot) {
    return JSON.stringify(Lot$outboundSchema.parse(lot));
}
export function lotFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Lot$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Lot' from JSON`);
}
//# sourceMappingURL=lot.js.map