/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The name of the program that the ICT withdrawal is associated with.
 */
export var IctWithdrawalProgram;
(function (IctWithdrawalProgram) {
    IctWithdrawalProgram["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    IctWithdrawalProgram["BrokerPartner"] = "BROKER_PARTNER";
    IctWithdrawalProgram["DepositOnly"] = "DEPOSIT_ONLY";
    IctWithdrawalProgram["BankingPartner"] = "BANKING_PARTNER";
    IctWithdrawalProgram["MoneyTransmitter"] = "MONEY_TRANSMITTER";
    IctWithdrawalProgram["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    IctWithdrawalProgram["DigitalPartner"] = "DIGITAL_PARTNER";
})(IctWithdrawalProgram || (IctWithdrawalProgram = {}));
/**
 * The type of retirement distribution.
 */
export var IctWithdrawalType;
(function (IctWithdrawalType) {
    IctWithdrawalType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    IctWithdrawalType["Normal"] = "NORMAL";
    IctWithdrawalType["Disability"] = "DISABILITY";
    IctWithdrawalType["Sosepp"] = "SOSEPP";
    IctWithdrawalType["Premature"] = "PREMATURE";
    IctWithdrawalType["Death"] = "DEATH";
    IctWithdrawalType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    IctWithdrawalType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    IctWithdrawalType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    IctWithdrawalType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    IctWithdrawalType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    IctWithdrawalType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    IctWithdrawalType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    IctWithdrawalType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    IctWithdrawalType["ManagementFee"] = "MANAGEMENT_FEE";
    IctWithdrawalType["PlanLoan401K"] = "PLAN_LOAN_401K";
    IctWithdrawalType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    IctWithdrawalType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    IctWithdrawalType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    IctWithdrawalType["Revocation"] = "REVOCATION";
    IctWithdrawalType["NonReportable"] = "NON_REPORTABLE";
})(IctWithdrawalType || (IctWithdrawalType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var IctWithdrawalStateState;
(function (IctWithdrawalStateState) {
    IctWithdrawalStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctWithdrawalStateState["Processing"] = "PROCESSING";
    IctWithdrawalStateState["PendingReview"] = "PENDING_REVIEW";
    IctWithdrawalStateState["Posted"] = "POSTED";
    IctWithdrawalStateState["Completed"] = "COMPLETED";
    IctWithdrawalStateState["Rejected"] = "REJECTED";
    IctWithdrawalStateState["Canceled"] = "CANCELED";
    IctWithdrawalStateState["Returned"] = "RETURNED";
    IctWithdrawalStateState["Postponed"] = "POSTPONED";
})(IctWithdrawalStateState || (IctWithdrawalStateState = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var IctWithdrawalTransferStateState;
(function (IctWithdrawalTransferStateState) {
    IctWithdrawalTransferStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctWithdrawalTransferStateState["Processing"] = "PROCESSING";
    IctWithdrawalTransferStateState["PendingReview"] = "PENDING_REVIEW";
    IctWithdrawalTransferStateState["Posted"] = "POSTED";
    IctWithdrawalTransferStateState["Completed"] = "COMPLETED";
    IctWithdrawalTransferStateState["Rejected"] = "REJECTED";
    IctWithdrawalTransferStateState["Canceled"] = "CANCELED";
    IctWithdrawalTransferStateState["Returned"] = "RETURNED";
    IctWithdrawalTransferStateState["Postponed"] = "POSTPONED";
})(IctWithdrawalTransferStateState || (IctWithdrawalTransferStateState = {}));
/** @internal */
export const IctWithdrawalAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctWithdrawalAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalAmount$;
(function (IctWithdrawalAmount$) {
    /** @deprecated use `IctWithdrawalAmount$inboundSchema` instead. */
    IctWithdrawalAmount$.inboundSchema = IctWithdrawalAmount$inboundSchema;
    /** @deprecated use `IctWithdrawalAmount$outboundSchema` instead. */
    IctWithdrawalAmount$.outboundSchema = IctWithdrawalAmount$outboundSchema;
})(IctWithdrawalAmount$ || (IctWithdrawalAmount$ = {}));
export function ictWithdrawalAmountToJSON(ictWithdrawalAmount) {
    return JSON.stringify(IctWithdrawalAmount$outboundSchema.parse(ictWithdrawalAmount));
}
export function ictWithdrawalAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalAmount' from JSON`);
}
/** @internal */
export const IctWithdrawalProgram$inboundSchema = z
    .union([
    z.nativeEnum(IctWithdrawalProgram),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctWithdrawalProgram$outboundSchema = z.union([
    z.nativeEnum(IctWithdrawalProgram),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalProgram$;
(function (IctWithdrawalProgram$) {
    /** @deprecated use `IctWithdrawalProgram$inboundSchema` instead. */
    IctWithdrawalProgram$.inboundSchema = IctWithdrawalProgram$inboundSchema;
    /** @deprecated use `IctWithdrawalProgram$outboundSchema` instead. */
    IctWithdrawalProgram$.outboundSchema = IctWithdrawalProgram$outboundSchema;
})(IctWithdrawalProgram$ || (IctWithdrawalProgram$ = {}));
/** @internal */
export const IctWithdrawalRetirementDistributionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctWithdrawalRetirementDistributionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalRetirementDistributionAmount$;
(function (IctWithdrawalRetirementDistributionAmount$) {
    /** @deprecated use `IctWithdrawalRetirementDistributionAmount$inboundSchema` instead. */
    IctWithdrawalRetirementDistributionAmount$.inboundSchema = IctWithdrawalRetirementDistributionAmount$inboundSchema;
    /** @deprecated use `IctWithdrawalRetirementDistributionAmount$outboundSchema` instead. */
    IctWithdrawalRetirementDistributionAmount$.outboundSchema = IctWithdrawalRetirementDistributionAmount$outboundSchema;
})(IctWithdrawalRetirementDistributionAmount$ || (IctWithdrawalRetirementDistributionAmount$ = {}));
export function ictWithdrawalRetirementDistributionAmountToJSON(ictWithdrawalRetirementDistributionAmount) {
    return JSON.stringify(IctWithdrawalRetirementDistributionAmount$outboundSchema.parse(ictWithdrawalRetirementDistributionAmount));
}
export function ictWithdrawalRetirementDistributionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalRetirementDistributionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalRetirementDistributionAmount' from JSON`);
}
/** @internal */
export const IctWithdrawalPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctWithdrawalPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalPercentage$;
(function (IctWithdrawalPercentage$) {
    /** @deprecated use `IctWithdrawalPercentage$inboundSchema` instead. */
    IctWithdrawalPercentage$.inboundSchema = IctWithdrawalPercentage$inboundSchema;
    /** @deprecated use `IctWithdrawalPercentage$outboundSchema` instead. */
    IctWithdrawalPercentage$.outboundSchema = IctWithdrawalPercentage$outboundSchema;
})(IctWithdrawalPercentage$ || (IctWithdrawalPercentage$ = {}));
export function ictWithdrawalPercentageToJSON(ictWithdrawalPercentage) {
    return JSON.stringify(IctWithdrawalPercentage$outboundSchema.parse(ictWithdrawalPercentage));
}
export function ictWithdrawalPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalPercentage' from JSON`);
}
/** @internal */
export const IctWithdrawalFederalTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => IctWithdrawalPercentage$inboundSchema))
        .optional(),
});
/** @internal */
export const IctWithdrawalFederalTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => IctWithdrawalPercentage$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalFederalTaxWithholding$;
(function (IctWithdrawalFederalTaxWithholding$) {
    /** @deprecated use `IctWithdrawalFederalTaxWithholding$inboundSchema` instead. */
    IctWithdrawalFederalTaxWithholding$.inboundSchema = IctWithdrawalFederalTaxWithholding$inboundSchema;
    /** @deprecated use `IctWithdrawalFederalTaxWithholding$outboundSchema` instead. */
    IctWithdrawalFederalTaxWithholding$.outboundSchema = IctWithdrawalFederalTaxWithholding$outboundSchema;
})(IctWithdrawalFederalTaxWithholding$ || (IctWithdrawalFederalTaxWithholding$ = {}));
export function ictWithdrawalFederalTaxWithholdingToJSON(ictWithdrawalFederalTaxWithholding) {
    return JSON.stringify(IctWithdrawalFederalTaxWithholding$outboundSchema.parse(ictWithdrawalFederalTaxWithholding));
}
export function ictWithdrawalFederalTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalFederalTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalFederalTaxWithholding' from JSON`);
}
/** @internal */
export const IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$;
(function (IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$) {
    /** @deprecated use `IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema` instead. */
    IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$.inboundSchema = IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema;
    /** @deprecated use `IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema` instead. */
    IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$.outboundSchema = IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema;
})(IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$ || (IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$ = {}));
export function ictWithdrawalRetirementDistributionStateTaxWithholdingAmountToJSON(ictWithdrawalRetirementDistributionStateTaxWithholdingAmount) {
    return JSON.stringify(IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema
        .parse(ictWithdrawalRetirementDistributionStateTaxWithholdingAmount));
}
export function ictWithdrawalRetirementDistributionStateTaxWithholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalRetirementDistributionStateTaxWithholdingAmount' from JSON`);
}
/** @internal */
export const IctWithdrawalRetirementDistributionPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const IctWithdrawalRetirementDistributionPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalRetirementDistributionPercentage$;
(function (IctWithdrawalRetirementDistributionPercentage$) {
    /** @deprecated use `IctWithdrawalRetirementDistributionPercentage$inboundSchema` instead. */
    IctWithdrawalRetirementDistributionPercentage$.inboundSchema = IctWithdrawalRetirementDistributionPercentage$inboundSchema;
    /** @deprecated use `IctWithdrawalRetirementDistributionPercentage$outboundSchema` instead. */
    IctWithdrawalRetirementDistributionPercentage$.outboundSchema = IctWithdrawalRetirementDistributionPercentage$outboundSchema;
})(IctWithdrawalRetirementDistributionPercentage$ || (IctWithdrawalRetirementDistributionPercentage$ = {}));
export function ictWithdrawalRetirementDistributionPercentageToJSON(ictWithdrawalRetirementDistributionPercentage) {
    return JSON.stringify(IctWithdrawalRetirementDistributionPercentage$outboundSchema.parse(ictWithdrawalRetirementDistributionPercentage));
}
export function ictWithdrawalRetirementDistributionPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalRetirementDistributionPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalRetirementDistributionPercentage' from JSON`);
}
/** @internal */
export const IctWithdrawalStateTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionPercentage$inboundSchema)).optional(),
});
/** @internal */
export const IctWithdrawalStateTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionStateTaxWithholdingAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => IctWithdrawalRetirementDistributionPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalStateTaxWithholding$;
(function (IctWithdrawalStateTaxWithholding$) {
    /** @deprecated use `IctWithdrawalStateTaxWithholding$inboundSchema` instead. */
    IctWithdrawalStateTaxWithholding$.inboundSchema = IctWithdrawalStateTaxWithholding$inboundSchema;
    /** @deprecated use `IctWithdrawalStateTaxWithholding$outboundSchema` instead. */
    IctWithdrawalStateTaxWithholding$.outboundSchema = IctWithdrawalStateTaxWithholding$outboundSchema;
})(IctWithdrawalStateTaxWithholding$ || (IctWithdrawalStateTaxWithholding$ = {}));
export function ictWithdrawalStateTaxWithholdingToJSON(ictWithdrawalStateTaxWithholding) {
    return JSON.stringify(IctWithdrawalStateTaxWithholding$outboundSchema.parse(ictWithdrawalStateTaxWithholding));
}
export function ictWithdrawalStateTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalStateTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalStateTaxWithholding' from JSON`);
}
/** @internal */
export const IctWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(IctWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(IctWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalType$;
(function (IctWithdrawalType$) {
    /** @deprecated use `IctWithdrawalType$inboundSchema` instead. */
    IctWithdrawalType$.inboundSchema = IctWithdrawalType$inboundSchema;
    /** @deprecated use `IctWithdrawalType$outboundSchema` instead. */
    IctWithdrawalType$.outboundSchema = IctWithdrawalType$outboundSchema;
})(IctWithdrawalType$ || (IctWithdrawalType$ = {}));
/** @internal */
export const IctWithdrawalRetirementDistribution$inboundSchema = z.object({
    federal_tax_withholding: z.nullable(z.lazy(() => IctWithdrawalFederalTaxWithholding$inboundSchema)).optional(),
    receiving_institution: z.string().optional(),
    state_tax_withholding: z.nullable(z.lazy(() => IctWithdrawalStateTaxWithholding$inboundSchema)).optional(),
    state_withholding_waiver: z.boolean().optional(),
    tax_year: z.number().int().optional(),
    type: IctWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_withholding": "federalTaxWithholding",
        "receiving_institution": "receivingInstitution",
        "state_tax_withholding": "stateTaxWithholding",
        "state_withholding_waiver": "stateWithholdingWaiver",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const IctWithdrawalRetirementDistribution$outboundSchema = z.object({
    federalTaxWithholding: z.nullable(z.lazy(() => IctWithdrawalFederalTaxWithholding$outboundSchema)).optional(),
    receivingInstitution: z.string().optional(),
    stateTaxWithholding: z.nullable(z.lazy(() => IctWithdrawalStateTaxWithholding$outboundSchema)).optional(),
    stateWithholdingWaiver: z.boolean().optional(),
    taxYear: z.number().int().optional(),
    type: IctWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxWithholding: "federal_tax_withholding",
        receivingInstitution: "receiving_institution",
        stateTaxWithholding: "state_tax_withholding",
        stateWithholdingWaiver: "state_withholding_waiver",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalRetirementDistribution$;
(function (IctWithdrawalRetirementDistribution$) {
    /** @deprecated use `IctWithdrawalRetirementDistribution$inboundSchema` instead. */
    IctWithdrawalRetirementDistribution$.inboundSchema = IctWithdrawalRetirementDistribution$inboundSchema;
    /** @deprecated use `IctWithdrawalRetirementDistribution$outboundSchema` instead. */
    IctWithdrawalRetirementDistribution$.outboundSchema = IctWithdrawalRetirementDistribution$outboundSchema;
})(IctWithdrawalRetirementDistribution$ || (IctWithdrawalRetirementDistribution$ = {}));
export function ictWithdrawalRetirementDistributionToJSON(ictWithdrawalRetirementDistribution) {
    return JSON.stringify(IctWithdrawalRetirementDistribution$outboundSchema.parse(ictWithdrawalRetirementDistribution));
}
export function ictWithdrawalRetirementDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalRetirementDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalRetirementDistribution' from JSON`);
}
/** @internal */
export const IctWithdrawalStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctWithdrawalStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctWithdrawalStateState$outboundSchema = z.union([
    z.nativeEnum(IctWithdrawalStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalStateState$;
(function (IctWithdrawalStateState$) {
    /** @deprecated use `IctWithdrawalStateState$inboundSchema` instead. */
    IctWithdrawalStateState$.inboundSchema = IctWithdrawalStateState$inboundSchema;
    /** @deprecated use `IctWithdrawalStateState$outboundSchema` instead. */
    IctWithdrawalStateState$.outboundSchema = IctWithdrawalStateState$outboundSchema;
})(IctWithdrawalStateState$ || (IctWithdrawalStateState$ = {}));
/** @internal */
export const IctWithdrawalState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctWithdrawalStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const IctWithdrawalState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctWithdrawalStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalState$;
(function (IctWithdrawalState$) {
    /** @deprecated use `IctWithdrawalState$inboundSchema` instead. */
    IctWithdrawalState$.inboundSchema = IctWithdrawalState$inboundSchema;
    /** @deprecated use `IctWithdrawalState$outboundSchema` instead. */
    IctWithdrawalState$.outboundSchema = IctWithdrawalState$outboundSchema;
})(IctWithdrawalState$ || (IctWithdrawalState$ = {}));
export function ictWithdrawalStateToJSON(ictWithdrawalState) {
    return JSON.stringify(IctWithdrawalState$outboundSchema.parse(ictWithdrawalState));
}
export function ictWithdrawalStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalState' from JSON`);
}
/** @internal */
export const IctWithdrawalTransferStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctWithdrawalTransferStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IctWithdrawalTransferStateState$outboundSchema = z.union([
    z.nativeEnum(IctWithdrawalTransferStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTransferStateState$;
(function (IctWithdrawalTransferStateState$) {
    /** @deprecated use `IctWithdrawalTransferStateState$inboundSchema` instead. */
    IctWithdrawalTransferStateState$.inboundSchema = IctWithdrawalTransferStateState$inboundSchema;
    /** @deprecated use `IctWithdrawalTransferStateState$outboundSchema` instead. */
    IctWithdrawalTransferStateState$.outboundSchema = IctWithdrawalTransferStateState$outboundSchema;
})(IctWithdrawalTransferStateState$ || (IctWithdrawalTransferStateState$ = {}));
/** @internal */
export const IctWithdrawalTransferState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctWithdrawalTransferStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const IctWithdrawalTransferState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: IctWithdrawalTransferStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTransferState$;
(function (IctWithdrawalTransferState$) {
    /** @deprecated use `IctWithdrawalTransferState$inboundSchema` instead. */
    IctWithdrawalTransferState$.inboundSchema = IctWithdrawalTransferState$inboundSchema;
    /** @deprecated use `IctWithdrawalTransferState$outboundSchema` instead. */
    IctWithdrawalTransferState$.outboundSchema = IctWithdrawalTransferState$outboundSchema;
})(IctWithdrawalTransferState$ || (IctWithdrawalTransferState$ = {}));
export function ictWithdrawalTransferStateToJSON(ictWithdrawalTransferState) {
    return JSON.stringify(IctWithdrawalTransferState$outboundSchema.parse(ictWithdrawalTransferState));
}
export function ictWithdrawalTransferStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalTransferState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalTransferState' from JSON`);
}
/** @internal */
export const IctWithdrawalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctWithdrawalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalAddress$;
(function (IctWithdrawalAddress$) {
    /** @deprecated use `IctWithdrawalAddress$inboundSchema` instead. */
    IctWithdrawalAddress$.inboundSchema = IctWithdrawalAddress$inboundSchema;
    /** @deprecated use `IctWithdrawalAddress$outboundSchema` instead. */
    IctWithdrawalAddress$.outboundSchema = IctWithdrawalAddress$outboundSchema;
})(IctWithdrawalAddress$ || (IctWithdrawalAddress$ = {}));
export function ictWithdrawalAddressToJSON(ictWithdrawalAddress) {
    return JSON.stringify(IctWithdrawalAddress$outboundSchema.parse(ictWithdrawalAddress));
}
export function ictWithdrawalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalAddress' from JSON`);
}
/** @internal */
export const IctWithdrawalEntityOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalAddress$inboundSchema))
        .optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
export const IctWithdrawalEntityOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalAddress$outboundSchema))
        .optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalEntityOriginatingParty$;
(function (IctWithdrawalEntityOriginatingParty$) {
    /** @deprecated use `IctWithdrawalEntityOriginatingParty$inboundSchema` instead. */
    IctWithdrawalEntityOriginatingParty$.inboundSchema = IctWithdrawalEntityOriginatingParty$inboundSchema;
    /** @deprecated use `IctWithdrawalEntityOriginatingParty$outboundSchema` instead. */
    IctWithdrawalEntityOriginatingParty$.outboundSchema = IctWithdrawalEntityOriginatingParty$outboundSchema;
})(IctWithdrawalEntityOriginatingParty$ || (IctWithdrawalEntityOriginatingParty$ = {}));
export function ictWithdrawalEntityOriginatingPartyToJSON(ictWithdrawalEntityOriginatingParty) {
    return JSON.stringify(IctWithdrawalEntityOriginatingParty$outboundSchema.parse(ictWithdrawalEntityOriginatingParty));
}
export function ictWithdrawalEntityOriginatingPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalEntityOriginatingParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalEntityOriginatingParty' from JSON`);
}
/** @internal */
export const IctWithdrawalTravelRuleAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctWithdrawalTravelRuleAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTravelRuleAddress$;
(function (IctWithdrawalTravelRuleAddress$) {
    /** @deprecated use `IctWithdrawalTravelRuleAddress$inboundSchema` instead. */
    IctWithdrawalTravelRuleAddress$.inboundSchema = IctWithdrawalTravelRuleAddress$inboundSchema;
    /** @deprecated use `IctWithdrawalTravelRuleAddress$outboundSchema` instead. */
    IctWithdrawalTravelRuleAddress$.outboundSchema = IctWithdrawalTravelRuleAddress$outboundSchema;
})(IctWithdrawalTravelRuleAddress$ || (IctWithdrawalTravelRuleAddress$ = {}));
export function ictWithdrawalTravelRuleAddressToJSON(ictWithdrawalTravelRuleAddress) {
    return JSON.stringify(IctWithdrawalTravelRuleAddress$outboundSchema.parse(ictWithdrawalTravelRuleAddress));
}
export function ictWithdrawalTravelRuleAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalTravelRuleAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalTravelRuleAddress' from JSON`);
}
/** @internal */
export const IctWithdrawalEntityRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleAddress$inboundSchema)).optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
export const IctWithdrawalEntityRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleAddress$outboundSchema)).optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalEntityRecipientParty$;
(function (IctWithdrawalEntityRecipientParty$) {
    /** @deprecated use `IctWithdrawalEntityRecipientParty$inboundSchema` instead. */
    IctWithdrawalEntityRecipientParty$.inboundSchema = IctWithdrawalEntityRecipientParty$inboundSchema;
    /** @deprecated use `IctWithdrawalEntityRecipientParty$outboundSchema` instead. */
    IctWithdrawalEntityRecipientParty$.outboundSchema = IctWithdrawalEntityRecipientParty$outboundSchema;
})(IctWithdrawalEntityRecipientParty$ || (IctWithdrawalEntityRecipientParty$ = {}));
export function ictWithdrawalEntityRecipientPartyToJSON(ictWithdrawalEntityRecipientParty) {
    return JSON.stringify(IctWithdrawalEntityRecipientParty$outboundSchema.parse(ictWithdrawalEntityRecipientParty));
}
export function ictWithdrawalEntityRecipientPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalEntityRecipientParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalEntityRecipientParty' from JSON`);
}
/** @internal */
export const IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$;
(function (IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$) {
    /** @deprecated use `IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$inboundSchema` instead. */
    IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$.inboundSchema = IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$inboundSchema;
    /** @deprecated use `IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$outboundSchema` instead. */
    IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$.outboundSchema = IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$outboundSchema;
})(IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$ || (IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$ = {}));
export function ictWithdrawalTravelRuleIndividualOriginatingPartyAddressToJSON(ictWithdrawalTravelRuleIndividualOriginatingPartyAddress) {
    return JSON.stringify(IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$outboundSchema
        .parse(ictWithdrawalTravelRuleIndividualOriginatingPartyAddress));
}
export function ictWithdrawalTravelRuleIndividualOriginatingPartyAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalTravelRuleIndividualOriginatingPartyAddress' from JSON`);
}
/** @internal */
export const IctWithdrawalIndividualOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$inboundSchema)).optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
export const IctWithdrawalIndividualOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleIndividualOriginatingPartyAddress$outboundSchema)).optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalIndividualOriginatingParty$;
(function (IctWithdrawalIndividualOriginatingParty$) {
    /** @deprecated use `IctWithdrawalIndividualOriginatingParty$inboundSchema` instead. */
    IctWithdrawalIndividualOriginatingParty$.inboundSchema = IctWithdrawalIndividualOriginatingParty$inboundSchema;
    /** @deprecated use `IctWithdrawalIndividualOriginatingParty$outboundSchema` instead. */
    IctWithdrawalIndividualOriginatingParty$.outboundSchema = IctWithdrawalIndividualOriginatingParty$outboundSchema;
})(IctWithdrawalIndividualOriginatingParty$ || (IctWithdrawalIndividualOriginatingParty$ = {}));
export function ictWithdrawalIndividualOriginatingPartyToJSON(ictWithdrawalIndividualOriginatingParty) {
    return JSON.stringify(IctWithdrawalIndividualOriginatingParty$outboundSchema.parse(ictWithdrawalIndividualOriginatingParty));
}
export function ictWithdrawalIndividualOriginatingPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalIndividualOriginatingParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalIndividualOriginatingParty' from JSON`);
}
/** @internal */
export const IctWithdrawalTravelRuleIndividualRecipientPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const IctWithdrawalTravelRuleIndividualRecipientPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTravelRuleIndividualRecipientPartyAddress$;
(function (IctWithdrawalTravelRuleIndividualRecipientPartyAddress$) {
    /** @deprecated use `IctWithdrawalTravelRuleIndividualRecipientPartyAddress$inboundSchema` instead. */
    IctWithdrawalTravelRuleIndividualRecipientPartyAddress$.inboundSchema = IctWithdrawalTravelRuleIndividualRecipientPartyAddress$inboundSchema;
    /** @deprecated use `IctWithdrawalTravelRuleIndividualRecipientPartyAddress$outboundSchema` instead. */
    IctWithdrawalTravelRuleIndividualRecipientPartyAddress$.outboundSchema = IctWithdrawalTravelRuleIndividualRecipientPartyAddress$outboundSchema;
})(IctWithdrawalTravelRuleIndividualRecipientPartyAddress$ || (IctWithdrawalTravelRuleIndividualRecipientPartyAddress$ = {}));
export function ictWithdrawalTravelRuleIndividualRecipientPartyAddressToJSON(ictWithdrawalTravelRuleIndividualRecipientPartyAddress) {
    return JSON.stringify(IctWithdrawalTravelRuleIndividualRecipientPartyAddress$outboundSchema.parse(ictWithdrawalTravelRuleIndividualRecipientPartyAddress));
}
export function ictWithdrawalTravelRuleIndividualRecipientPartyAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalTravelRuleIndividualRecipientPartyAddress$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalTravelRuleIndividualRecipientPartyAddress' from JSON`);
}
/** @internal */
export const IctWithdrawalIndividualRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleIndividualRecipientPartyAddress$inboundSchema)).optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
export const IctWithdrawalIndividualRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => IctWithdrawalTravelRuleIndividualRecipientPartyAddress$outboundSchema)).optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalIndividualRecipientParty$;
(function (IctWithdrawalIndividualRecipientParty$) {
    /** @deprecated use `IctWithdrawalIndividualRecipientParty$inboundSchema` instead. */
    IctWithdrawalIndividualRecipientParty$.inboundSchema = IctWithdrawalIndividualRecipientParty$inboundSchema;
    /** @deprecated use `IctWithdrawalIndividualRecipientParty$outboundSchema` instead. */
    IctWithdrawalIndividualRecipientParty$.outboundSchema = IctWithdrawalIndividualRecipientParty$outboundSchema;
})(IctWithdrawalIndividualRecipientParty$ || (IctWithdrawalIndividualRecipientParty$ = {}));
export function ictWithdrawalIndividualRecipientPartyToJSON(ictWithdrawalIndividualRecipientParty) {
    return JSON.stringify(IctWithdrawalIndividualRecipientParty$outboundSchema.parse(ictWithdrawalIndividualRecipientParty));
}
export function ictWithdrawalIndividualRecipientPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalIndividualRecipientParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalIndividualRecipientParty' from JSON`);
}
/** @internal */
export const IctWithdrawalOriginatingInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const IctWithdrawalOriginatingInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalOriginatingInstitution$;
(function (IctWithdrawalOriginatingInstitution$) {
    /** @deprecated use `IctWithdrawalOriginatingInstitution$inboundSchema` instead. */
    IctWithdrawalOriginatingInstitution$.inboundSchema = IctWithdrawalOriginatingInstitution$inboundSchema;
    /** @deprecated use `IctWithdrawalOriginatingInstitution$outboundSchema` instead. */
    IctWithdrawalOriginatingInstitution$.outboundSchema = IctWithdrawalOriginatingInstitution$outboundSchema;
})(IctWithdrawalOriginatingInstitution$ || (IctWithdrawalOriginatingInstitution$ = {}));
export function ictWithdrawalOriginatingInstitutionToJSON(ictWithdrawalOriginatingInstitution) {
    return JSON.stringify(IctWithdrawalOriginatingInstitution$outboundSchema.parse(ictWithdrawalOriginatingInstitution));
}
export function ictWithdrawalOriginatingInstitutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalOriginatingInstitution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalOriginatingInstitution' from JSON`);
}
/** @internal */
export const IctWithdrawalRecipientInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const IctWithdrawalRecipientInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalRecipientInstitution$;
(function (IctWithdrawalRecipientInstitution$) {
    /** @deprecated use `IctWithdrawalRecipientInstitution$inboundSchema` instead. */
    IctWithdrawalRecipientInstitution$.inboundSchema = IctWithdrawalRecipientInstitution$inboundSchema;
    /** @deprecated use `IctWithdrawalRecipientInstitution$outboundSchema` instead. */
    IctWithdrawalRecipientInstitution$.outboundSchema = IctWithdrawalRecipientInstitution$outboundSchema;
})(IctWithdrawalRecipientInstitution$ || (IctWithdrawalRecipientInstitution$ = {}));
export function ictWithdrawalRecipientInstitutionToJSON(ictWithdrawalRecipientInstitution) {
    return JSON.stringify(IctWithdrawalRecipientInstitution$outboundSchema.parse(ictWithdrawalRecipientInstitution));
}
export function ictWithdrawalRecipientInstitutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalRecipientInstitution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalRecipientInstitution' from JSON`);
}
/** @internal */
export const IctWithdrawalTravelRule$inboundSchema = z.object({
    entity_originating_party: z.nullable(z.lazy(() => IctWithdrawalEntityOriginatingParty$inboundSchema)).optional(),
    entity_recipient_party: z.nullable(z.lazy(() => IctWithdrawalEntityRecipientParty$inboundSchema)).optional(),
    individual_originating_party: z.nullable(z.lazy(() => IctWithdrawalIndividualOriginatingParty$inboundSchema)).optional(),
    individual_recipient_party: z.nullable(z.lazy(() => IctWithdrawalIndividualRecipientParty$inboundSchema)).optional(),
    originating_institution: z.nullable(z.lazy(() => IctWithdrawalOriginatingInstitution$inboundSchema)).optional(),
    recipient_institution: z.nullable(z.lazy(() => IctWithdrawalRecipientInstitution$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "entity_originating_party": "entityOriginatingParty",
        "entity_recipient_party": "entityRecipientParty",
        "individual_originating_party": "individualOriginatingParty",
        "individual_recipient_party": "individualRecipientParty",
        "originating_institution": "originatingInstitution",
        "recipient_institution": "recipientInstitution",
    });
});
/** @internal */
export const IctWithdrawalTravelRule$outboundSchema = z.object({
    entityOriginatingParty: z.nullable(z.lazy(() => IctWithdrawalEntityOriginatingParty$outboundSchema)).optional(),
    entityRecipientParty: z.nullable(z.lazy(() => IctWithdrawalEntityRecipientParty$outboundSchema)).optional(),
    individualOriginatingParty: z.nullable(z.lazy(() => IctWithdrawalIndividualOriginatingParty$outboundSchema)).optional(),
    individualRecipientParty: z.nullable(z.lazy(() => IctWithdrawalIndividualRecipientParty$outboundSchema)).optional(),
    originatingInstitution: z.nullable(z.lazy(() => IctWithdrawalOriginatingInstitution$outboundSchema)).optional(),
    recipientInstitution: z.nullable(z.lazy(() => IctWithdrawalRecipientInstitution$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        entityOriginatingParty: "entity_originating_party",
        entityRecipientParty: "entity_recipient_party",
        individualOriginatingParty: "individual_originating_party",
        individualRecipientParty: "individual_recipient_party",
        originatingInstitution: "originating_institution",
        recipientInstitution: "recipient_institution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawalTravelRule$;
(function (IctWithdrawalTravelRule$) {
    /** @deprecated use `IctWithdrawalTravelRule$inboundSchema` instead. */
    IctWithdrawalTravelRule$.inboundSchema = IctWithdrawalTravelRule$inboundSchema;
    /** @deprecated use `IctWithdrawalTravelRule$outboundSchema` instead. */
    IctWithdrawalTravelRule$.outboundSchema = IctWithdrawalTravelRule$outboundSchema;
})(IctWithdrawalTravelRule$ || (IctWithdrawalTravelRule$ = {}));
export function ictWithdrawalTravelRuleToJSON(ictWithdrawalTravelRule) {
    return JSON.stringify(IctWithdrawalTravelRule$outboundSchema.parse(ictWithdrawalTravelRule));
}
export function ictWithdrawalTravelRuleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawalTravelRule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawalTravelRule' from JSON`);
}
/** @internal */
export const IctWithdrawal$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalAmount$inboundSchema))
        .optional(),
    client_transfer_id: z.string().optional(),
    name: z.string().optional(),
    program: IctWithdrawalProgram$inboundSchema.optional(),
    retirement_distribution: z.nullable(z.lazy(() => IctWithdrawalRetirementDistribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => IctWithdrawalState$inboundSchema)).optional(),
    transfer_state: z.nullable(z.lazy(() => IctWithdrawalTransferState$inboundSchema)).optional(),
    travel_rule: z.nullable(z.lazy(() => IctWithdrawalTravelRule$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "retirement_distribution": "retirementDistribution",
        "transfer_state": "transferState",
        "travel_rule": "travelRule",
    });
});
/** @internal */
export const IctWithdrawal$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => IctWithdrawalAmount$outboundSchema))
        .optional(),
    clientTransferId: z.string().optional(),
    name: z.string().optional(),
    program: IctWithdrawalProgram$outboundSchema.optional(),
    retirementDistribution: z.nullable(z.lazy(() => IctWithdrawalRetirementDistribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => IctWithdrawalState$outboundSchema)).optional(),
    transferState: z.nullable(z.lazy(() => IctWithdrawalTransferState$outboundSchema)).optional(),
    travelRule: z.nullable(z.lazy(() => IctWithdrawalTravelRule$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        retirementDistribution: "retirement_distribution",
        transferState: "transfer_state",
        travelRule: "travel_rule",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctWithdrawal$;
(function (IctWithdrawal$) {
    /** @deprecated use `IctWithdrawal$inboundSchema` instead. */
    IctWithdrawal$.inboundSchema = IctWithdrawal$inboundSchema;
    /** @deprecated use `IctWithdrawal$outboundSchema` instead. */
    IctWithdrawal$.outboundSchema = IctWithdrawal$outboundSchema;
})(IctWithdrawal$ || (IctWithdrawal$ = {}));
export function ictWithdrawalToJSON(ictWithdrawal) {
    return JSON.stringify(IctWithdrawal$outboundSchema.parse(ictWithdrawal));
}
export function ictWithdrawalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctWithdrawal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctWithdrawal' from JSON`);
}
//# sourceMappingURL=ictwithdrawal.js.map