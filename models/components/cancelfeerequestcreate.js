/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CancelFeeRequestCreate$inboundSchema = z.object({
    name: z.string(),
    reason: z.string().optional(),
});
/** @internal */
export const CancelFeeRequestCreate$outboundSchema = z.object({
    name: z.string(),
    reason: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelFeeRequestCreate$;
(function (CancelFeeRequestCreate$) {
    /** @deprecated use `CancelFeeRequestCreate$inboundSchema` instead. */
    CancelFeeRequestCreate$.inboundSchema = CancelFeeRequestCreate$inboundSchema;
    /** @deprecated use `CancelFeeRequestCreate$outboundSchema` instead. */
    CancelFeeRequestCreate$.outboundSchema = CancelFeeRequestCreate$outboundSchema;
})(CancelFeeRequestCreate$ || (CancelFeeRequestCreate$ = {}));
export function cancelFeeRequestCreateToJSON(cancelFeeRequestCreate) {
    return JSON.stringify(CancelFeeRequestCreate$outboundSchema.parse(cancelFeeRequestCreate));
}
export function cancelFeeRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelFeeRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelFeeRequestCreate' from JSON`);
}
//# sourceMappingURL=cancelfeerequestcreate.js.map