/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of retirement contribution.
 */
export var CheckDepositType;
(function (CheckDepositType) {
    CheckDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    CheckDepositType["Regular"] = "REGULAR";
    CheckDepositType["Employee"] = "EMPLOYEE";
    CheckDepositType["Employer"] = "EMPLOYER";
    CheckDepositType["Recharacterization"] = "RECHARACTERIZATION";
    CheckDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    CheckDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    CheckDepositType["Transfer"] = "TRANSFER";
    CheckDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    CheckDepositType["Conversion"] = "CONVERSION";
    CheckDepositType["Repayment"] = "REPAYMENT";
    CheckDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(CheckDepositType || (CheckDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var CheckDepositStateState;
(function (CheckDepositStateState) {
    CheckDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    CheckDepositStateState["Processing"] = "PROCESSING";
    CheckDepositStateState["PendingReview"] = "PENDING_REVIEW";
    CheckDepositStateState["Posted"] = "POSTED";
    CheckDepositStateState["Completed"] = "COMPLETED";
    CheckDepositStateState["Rejected"] = "REJECTED";
    CheckDepositStateState["Canceled"] = "CANCELED";
    CheckDepositStateState["Returned"] = "RETURNED";
    CheckDepositStateState["Postponed"] = "POSTPONED";
})(CheckDepositStateState || (CheckDepositStateState = {}));
/** @internal */
export const CheckDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CheckDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDepositAmount$;
(function (CheckDepositAmount$) {
    /** @deprecated use `CheckDepositAmount$inboundSchema` instead. */
    CheckDepositAmount$.inboundSchema = CheckDepositAmount$inboundSchema;
    /** @deprecated use `CheckDepositAmount$outboundSchema` instead. */
    CheckDepositAmount$.outboundSchema = CheckDepositAmount$outboundSchema;
})(CheckDepositAmount$ || (CheckDepositAmount$ = {}));
export function checkDepositAmountToJSON(checkDepositAmount) {
    return JSON.stringify(CheckDepositAmount$outboundSchema.parse(checkDepositAmount));
}
export function checkDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositAmount' from JSON`);
}
/** @internal */
export const CheckDepositType$inboundSchema = z
    .union([
    z.nativeEnum(CheckDepositType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CheckDepositType$outboundSchema = z.union([
    z.nativeEnum(CheckDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDepositType$;
(function (CheckDepositType$) {
    /** @deprecated use `CheckDepositType$inboundSchema` instead. */
    CheckDepositType$.inboundSchema = CheckDepositType$inboundSchema;
    /** @deprecated use `CheckDepositType$outboundSchema` instead. */
    CheckDepositType$.outboundSchema = CheckDepositType$outboundSchema;
})(CheckDepositType$ || (CheckDepositType$ = {}));
/** @internal */
export const CheckDepositRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: CheckDepositType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
export const CheckDepositRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: CheckDepositType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDepositRetirementContribution$;
(function (CheckDepositRetirementContribution$) {
    /** @deprecated use `CheckDepositRetirementContribution$inboundSchema` instead. */
    CheckDepositRetirementContribution$.inboundSchema = CheckDepositRetirementContribution$inboundSchema;
    /** @deprecated use `CheckDepositRetirementContribution$outboundSchema` instead. */
    CheckDepositRetirementContribution$.outboundSchema = CheckDepositRetirementContribution$outboundSchema;
})(CheckDepositRetirementContribution$ || (CheckDepositRetirementContribution$ = {}));
export function checkDepositRetirementContributionToJSON(checkDepositRetirementContribution) {
    return JSON.stringify(CheckDepositRetirementContribution$outboundSchema.parse(checkDepositRetirementContribution));
}
export function checkDepositRetirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDepositRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositRetirementContribution' from JSON`);
}
/** @internal */
export const CheckDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(CheckDepositStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CheckDepositStateState$outboundSchema = z.union([
    z.nativeEnum(CheckDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDepositStateState$;
(function (CheckDepositStateState$) {
    /** @deprecated use `CheckDepositStateState$inboundSchema` instead. */
    CheckDepositStateState$.inboundSchema = CheckDepositStateState$inboundSchema;
    /** @deprecated use `CheckDepositStateState$outboundSchema` instead. */
    CheckDepositStateState$.outboundSchema = CheckDepositStateState$outboundSchema;
})(CheckDepositStateState$ || (CheckDepositStateState$ = {}));
/** @internal */
export const CheckDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: CheckDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const CheckDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: CheckDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDepositState$;
(function (CheckDepositState$) {
    /** @deprecated use `CheckDepositState$inboundSchema` instead. */
    CheckDepositState$.inboundSchema = CheckDepositState$inboundSchema;
    /** @deprecated use `CheckDepositState$outboundSchema` instead. */
    CheckDepositState$.outboundSchema = CheckDepositState$outboundSchema;
})(CheckDepositState$ || (CheckDepositState$ = {}));
export function checkDepositStateToJSON(checkDepositState) {
    return JSON.stringify(CheckDepositState$outboundSchema.parse(checkDepositState));
}
export function checkDepositStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDepositState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositState' from JSON`);
}
/** @internal */
export const CheckDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CheckDepositAmount$inboundSchema)).optional(),
    name: z.string().optional(),
    retirement_contribution: z.nullable(z.lazy(() => CheckDepositRetirementContribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => CheckDepositState$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "retirement_contribution": "retirementContribution",
    });
});
/** @internal */
export const CheckDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => CheckDepositAmount$outboundSchema))
        .optional(),
    name: z.string().optional(),
    retirementContribution: z.nullable(z.lazy(() => CheckDepositRetirementContribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => CheckDepositState$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        retirementContribution: "retirement_contribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDeposit$;
(function (CheckDeposit$) {
    /** @deprecated use `CheckDeposit$inboundSchema` instead. */
    CheckDeposit$.inboundSchema = CheckDeposit$inboundSchema;
    /** @deprecated use `CheckDeposit$outboundSchema` instead. */
    CheckDeposit$.outboundSchema = CheckDeposit$outboundSchema;
})(CheckDeposit$ || (CheckDeposit$ = {}));
export function checkDepositToJSON(checkDeposit) {
    return JSON.stringify(CheckDeposit$outboundSchema.parse(checkDeposit));
}
export function checkDepositFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDeposit' from JSON`);
}
//# sourceMappingURL=checkdeposit.js.map