"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckDeposit$ = exports.CheckDeposit$outboundSchema = exports.CheckDeposit$inboundSchema = exports.CheckDepositState$ = exports.CheckDepositState$outboundSchema = exports.CheckDepositState$inboundSchema = exports.CheckDepositStateState$ = exports.CheckDepositStateState$outboundSchema = exports.CheckDepositStateState$inboundSchema = exports.CheckDepositRetirementContribution$ = exports.CheckDepositRetirementContribution$outboundSchema = exports.CheckDepositRetirementContribution$inboundSchema = exports.CheckDepositType$ = exports.CheckDepositType$outboundSchema = exports.CheckDepositType$inboundSchema = exports.CheckDepositAmount$ = exports.CheckDepositAmount$outboundSchema = exports.CheckDepositAmount$inboundSchema = exports.CheckDepositStateState = exports.CheckDepositType = void 0;
exports.checkDepositAmountToJSON = checkDepositAmountToJSON;
exports.checkDepositAmountFromJSON = checkDepositAmountFromJSON;
exports.checkDepositRetirementContributionToJSON = checkDepositRetirementContributionToJSON;
exports.checkDepositRetirementContributionFromJSON = checkDepositRetirementContributionFromJSON;
exports.checkDepositStateToJSON = checkDepositStateToJSON;
exports.checkDepositStateFromJSON = checkDepositStateFromJSON;
exports.checkDepositToJSON = checkDepositToJSON;
exports.checkDepositFromJSON = checkDepositFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The type of retirement contribution.
 */
var CheckDepositType;
(function (CheckDepositType) {
    CheckDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    CheckDepositType["Regular"] = "REGULAR";
    CheckDepositType["Employee"] = "EMPLOYEE";
    CheckDepositType["Employer"] = "EMPLOYER";
    CheckDepositType["Recharacterization"] = "RECHARACTERIZATION";
    CheckDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    CheckDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    CheckDepositType["Transfer"] = "TRANSFER";
    CheckDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    CheckDepositType["Conversion"] = "CONVERSION";
    CheckDepositType["Repayment"] = "REPAYMENT";
    CheckDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(CheckDepositType || (exports.CheckDepositType = CheckDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
var CheckDepositStateState;
(function (CheckDepositStateState) {
    CheckDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    CheckDepositStateState["Processing"] = "PROCESSING";
    CheckDepositStateState["PendingReview"] = "PENDING_REVIEW";
    CheckDepositStateState["Posted"] = "POSTED";
    CheckDepositStateState["Completed"] = "COMPLETED";
    CheckDepositStateState["Rejected"] = "REJECTED";
    CheckDepositStateState["Canceled"] = "CANCELED";
    CheckDepositStateState["Returned"] = "RETURNED";
    CheckDepositStateState["Postponed"] = "POSTPONED";
})(CheckDepositStateState || (exports.CheckDepositStateState = CheckDepositStateState = {}));
/** @internal */
exports.CheckDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CheckDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDepositAmount$;
(function (CheckDepositAmount$) {
    /** @deprecated use `CheckDepositAmount$inboundSchema` instead. */
    CheckDepositAmount$.inboundSchema = exports.CheckDepositAmount$inboundSchema;
    /** @deprecated use `CheckDepositAmount$outboundSchema` instead. */
    CheckDepositAmount$.outboundSchema = exports.CheckDepositAmount$outboundSchema;
})(CheckDepositAmount$ || (exports.CheckDepositAmount$ = CheckDepositAmount$ = {}));
function checkDepositAmountToJSON(checkDepositAmount) {
    return JSON.stringify(exports.CheckDepositAmount$outboundSchema.parse(checkDepositAmount));
}
function checkDepositAmountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositAmount' from JSON`);
}
/** @internal */
exports.CheckDepositType$inboundSchema = z
    .union([
    z.nativeEnum(CheckDepositType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CheckDepositType$outboundSchema = z.union([
    z.nativeEnum(CheckDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDepositType$;
(function (CheckDepositType$) {
    /** @deprecated use `CheckDepositType$inboundSchema` instead. */
    CheckDepositType$.inboundSchema = exports.CheckDepositType$inboundSchema;
    /** @deprecated use `CheckDepositType$outboundSchema` instead. */
    CheckDepositType$.outboundSchema = exports.CheckDepositType$outboundSchema;
})(CheckDepositType$ || (exports.CheckDepositType$ = CheckDepositType$ = {}));
/** @internal */
exports.CheckDepositRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: exports.CheckDepositType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.CheckDepositRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: exports.CheckDepositType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDepositRetirementContribution$;
(function (CheckDepositRetirementContribution$) {
    /** @deprecated use `CheckDepositRetirementContribution$inboundSchema` instead. */
    CheckDepositRetirementContribution$.inboundSchema = exports.CheckDepositRetirementContribution$inboundSchema;
    /** @deprecated use `CheckDepositRetirementContribution$outboundSchema` instead. */
    CheckDepositRetirementContribution$.outboundSchema = exports.CheckDepositRetirementContribution$outboundSchema;
})(CheckDepositRetirementContribution$ || (exports.CheckDepositRetirementContribution$ = CheckDepositRetirementContribution$ = {}));
function checkDepositRetirementContributionToJSON(checkDepositRetirementContribution) {
    return JSON.stringify(exports.CheckDepositRetirementContribution$outboundSchema.parse(checkDepositRetirementContribution));
}
function checkDepositRetirementContributionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckDepositRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositRetirementContribution' from JSON`);
}
/** @internal */
exports.CheckDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(CheckDepositStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CheckDepositStateState$outboundSchema = z.union([
    z.nativeEnum(CheckDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDepositStateState$;
(function (CheckDepositStateState$) {
    /** @deprecated use `CheckDepositStateState$inboundSchema` instead. */
    CheckDepositStateState$.inboundSchema = exports.CheckDepositStateState$inboundSchema;
    /** @deprecated use `CheckDepositStateState$outboundSchema` instead. */
    CheckDepositStateState$.outboundSchema = exports.CheckDepositStateState$outboundSchema;
})(CheckDepositStateState$ || (exports.CheckDepositStateState$ = CheckDepositStateState$ = {}));
/** @internal */
exports.CheckDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.CheckDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.CheckDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.CheckDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDepositState$;
(function (CheckDepositState$) {
    /** @deprecated use `CheckDepositState$inboundSchema` instead. */
    CheckDepositState$.inboundSchema = exports.CheckDepositState$inboundSchema;
    /** @deprecated use `CheckDepositState$outboundSchema` instead. */
    CheckDepositState$.outboundSchema = exports.CheckDepositState$outboundSchema;
})(CheckDepositState$ || (exports.CheckDepositState$ = CheckDepositState$ = {}));
function checkDepositStateToJSON(checkDepositState) {
    return JSON.stringify(exports.CheckDepositState$outboundSchema.parse(checkDepositState));
}
function checkDepositStateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckDepositState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDepositState' from JSON`);
}
/** @internal */
exports.CheckDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.CheckDepositAmount$inboundSchema)).optional(),
    name: z.string().optional(),
    retirement_contribution: z.nullable(z.lazy(() => exports.CheckDepositRetirementContribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => exports.CheckDepositState$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "retirement_contribution": "retirementContribution",
    });
});
/** @internal */
exports.CheckDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.CheckDepositAmount$outboundSchema))
        .optional(),
    name: z.string().optional(),
    retirementContribution: z.nullable(z.lazy(() => exports.CheckDepositRetirementContribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => exports.CheckDepositState$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        retirementContribution: "retirement_contribution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckDeposit$;
(function (CheckDeposit$) {
    /** @deprecated use `CheckDeposit$inboundSchema` instead. */
    CheckDeposit$.inboundSchema = exports.CheckDeposit$inboundSchema;
    /** @deprecated use `CheckDeposit$outboundSchema` instead. */
    CheckDeposit$.outboundSchema = exports.CheckDeposit$outboundSchema;
})(CheckDeposit$ || (exports.CheckDeposit$ = CheckDeposit$ = {}));
function checkDepositToJSON(checkDeposit) {
    return JSON.stringify(exports.CheckDeposit$outboundSchema.parse(checkDeposit));
}
function checkDepositFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckDeposit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDeposit' from JSON`);
}
//# sourceMappingURL=checkdeposit.js.map