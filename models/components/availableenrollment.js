/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { LegalAgreement$inboundSchema, LegalAgreement$outboundSchema, } from "./legalagreement.js";
/**
 * The enrollment type.
 */
export var EnrollmentType;
(function (EnrollmentType) {
    EnrollmentType["EnrollmentTypeUnspecified"] = "ENROLLMENT_TYPE_UNSPECIFIED";
    EnrollmentType["RegistrationIndividual"] = "REGISTRATION_INDIVIDUAL";
    EnrollmentType["LendingFullyPaidStockLoan"] = "LENDING_FULLY_PAID_STOCK_LOAN";
    EnrollmentType["BeneficiaryDesignation"] = "BENEFICIARY_DESIGNATION";
    EnrollmentType["RegistrationJointWros"] = "REGISTRATION_JOINT_WROS";
    EnrollmentType["RegistrationJointTic"] = "REGISTRATION_JOINT_TIC";
    EnrollmentType["RegistrationJointTbe"] = "REGISTRATION_JOINT_TBE";
    EnrollmentType["RegistrationJointCp"] = "REGISTRATION_JOINT_CP";
    EnrollmentType["RegistrationEstate"] = "REGISTRATION_ESTATE";
    EnrollmentType["RegistrationIraTraditional"] = "REGISTRATION_IRA_TRADITIONAL";
    EnrollmentType["RegistrationIraSimple"] = "REGISTRATION_IRA_SIMPLE";
    EnrollmentType["RegistrationIraSep"] = "REGISTRATION_IRA_SEP";
    EnrollmentType["RegistrationIraRoth"] = "REGISTRATION_IRA_ROTH";
    EnrollmentType["RegistrationIraRollover"] = "REGISTRATION_IRA_ROLLOVER";
    EnrollmentType["RegistrationTrust"] = "REGISTRATION_TRUST";
    EnrollmentType["RegistrationCorporation"] = "REGISTRATION_CORPORATION";
    EnrollmentType["RegistrationLlc"] = "REGISTRATION_LLC";
    EnrollmentType["CashFdicCashSweep"] = "CASH_FDIC_CASH_SWEEP";
    EnrollmentType["RetirementBeneficiaryDesignation"] = "RETIREMENT_BENEFICIARY_DESIGNATION";
    EnrollmentType["DividendReinvestmentPlan"] = "DIVIDEND_REINVESTMENT_PLAN";
    EnrollmentType["RegistrationIraBeneficiaryTraditional"] = "REGISTRATION_IRA_BENEFICIARY_TRADITIONAL";
    EnrollmentType["RegistrationIraBeneficiaryRoth"] = "REGISTRATION_IRA_BENEFICIARY_ROTH";
    EnrollmentType["RegistrationIndividualForeign"] = "REGISTRATION_INDIVIDUAL_FOREIGN";
    EnrollmentType["RegistrationCustodial"] = "REGISTRATION_CUSTODIAL";
    EnrollmentType["VirtualAccountNumber"] = "VIRTUAL_ACCOUNT_NUMBER";
})(EnrollmentType || (EnrollmentType = {}));
/** @internal */
export const EnrollmentType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentType$;
(function (EnrollmentType$) {
    /** @deprecated use `EnrollmentType$inboundSchema` instead. */
    EnrollmentType$.inboundSchema = EnrollmentType$inboundSchema;
    /** @deprecated use `EnrollmentType$outboundSchema` instead. */
    EnrollmentType$.outboundSchema = EnrollmentType$outboundSchema;
})(EnrollmentType$ || (EnrollmentType$ = {}));
/** @internal */
export const AvailableEnrollment$inboundSchema = z.object({
    agreements: z.array(LegalAgreement$inboundSchema).optional(),
    enrollment_type: EnrollmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "enrollment_type": "enrollmentType",
    });
});
/** @internal */
export const AvailableEnrollment$outboundSchema = z.object({
    agreements: z.array(LegalAgreement$outboundSchema).optional(),
    enrollmentType: EnrollmentType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        enrollmentType: "enrollment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AvailableEnrollment$;
(function (AvailableEnrollment$) {
    /** @deprecated use `AvailableEnrollment$inboundSchema` instead. */
    AvailableEnrollment$.inboundSchema = AvailableEnrollment$inboundSchema;
    /** @deprecated use `AvailableEnrollment$outboundSchema` instead. */
    AvailableEnrollment$.outboundSchema = AvailableEnrollment$outboundSchema;
})(AvailableEnrollment$ || (AvailableEnrollment$ = {}));
export function availableEnrollmentToJSON(availableEnrollment) {
    return JSON.stringify(AvailableEnrollment$outboundSchema.parse(availableEnrollment));
}
export function availableEnrollmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AvailableEnrollment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AvailableEnrollment' from JSON`);
}
//# sourceMappingURL=availableenrollment.js.map