/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BondYield$inboundSchema, BondYield$outboundSchema, } from "./bondyield.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
/**
 * Type of the asset being traded.
 */
export var RebookTradeAllocationResponseAssetType;
(function (RebookTradeAllocationResponseAssetType) {
    RebookTradeAllocationResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseAssetType["Equity"] = "EQUITY";
    RebookTradeAllocationResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeAllocationResponseAssetType || (RebookTradeAllocationResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var RebookTradeAllocationResponseBrokerCapacity;
(function (RebookTradeAllocationResponseBrokerCapacity) {
    RebookTradeAllocationResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeAllocationResponseBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeAllocationResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeAllocationResponseBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeAllocationResponseBrokerCapacity || (RebookTradeAllocationResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var RebookTradeAllocationResponseIdentifierType;
(function (RebookTradeAllocationResponseIdentifierType) {
    RebookTradeAllocationResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeAllocationResponseIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeAllocationResponseIdentifierType["Cusip"] = "CUSIP";
    RebookTradeAllocationResponseIdentifierType["Isin"] = "ISIN";
})(RebookTradeAllocationResponseIdentifierType || (RebookTradeAllocationResponseIdentifierType = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
export var RebookTradeAllocationResponsePriceAdjustmentType;
(function (RebookTradeAllocationResponsePriceAdjustmentType) {
    RebookTradeAllocationResponsePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponsePriceAdjustmentType["Markup"] = "MARKUP";
    RebookTradeAllocationResponsePriceAdjustmentType["Markdown"] = "MARKDOWN";
    RebookTradeAllocationResponsePriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(RebookTradeAllocationResponsePriceAdjustmentType || (RebookTradeAllocationResponsePriceAdjustmentType = {}));
/**
 * Side modifier for the trade allocation.
 */
export var RebookTradeAllocationResponseSideModifier;
(function (RebookTradeAllocationResponseSideModifier) {
    RebookTradeAllocationResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeAllocationResponseSideModifier["Short"] = "SHORT";
    RebookTradeAllocationResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeAllocationResponseSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeAllocationResponseSideModifier["Open"] = "OPEN";
    RebookTradeAllocationResponseSideModifier["Close"] = "CLOSE";
})(RebookTradeAllocationResponseSideModifier || (RebookTradeAllocationResponseSideModifier = {}));
export var RebookTradeAllocationResponseSpecialInstructions;
(function (RebookTradeAllocationResponseSpecialInstructions) {
    RebookTradeAllocationResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeAllocationResponseSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeAllocationResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeAllocationResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeAllocationResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeAllocationResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeAllocationResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeAllocationResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeAllocationResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeAllocationResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeAllocationResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeAllocationResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeAllocationResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeAllocationResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeAllocationResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeAllocationResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeAllocationResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeAllocationResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeAllocationResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeAllocationResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeAllocationResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeAllocationResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeAllocationResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeAllocationResponseSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeAllocationResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeAllocationResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeAllocationResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeAllocationResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeAllocationResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeAllocationResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeAllocationResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeAllocationResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeAllocationResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeAllocationResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeAllocationResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeAllocationResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeAllocationResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeAllocationResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeAllocationResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeAllocationResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeAllocationResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeAllocationResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeAllocationResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeAllocationResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeAllocationResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeAllocationResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeAllocationResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeAllocationResponseSpecialInstructions || (RebookTradeAllocationResponseSpecialInstructions = {}));
/**
 * The state that the trade allocation is in.
 */
export var RebookTradeAllocationResponseState;
(function (RebookTradeAllocationResponseState) {
    RebookTradeAllocationResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    RebookTradeAllocationResponseState["Creating"] = "CREATING";
    RebookTradeAllocationResponseState["Rebooking"] = "REBOOKING";
    RebookTradeAllocationResponseState["Canceling"] = "CANCELING";
    RebookTradeAllocationResponseState["Booked"] = "BOOKED";
    RebookTradeAllocationResponseState["Rebooked"] = "REBOOKED";
    RebookTradeAllocationResponseState["Canceled"] = "CANCELED";
    RebookTradeAllocationResponseState["Failed"] = "FAILED";
})(RebookTradeAllocationResponseState || (RebookTradeAllocationResponseState = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
export var RebookTradeAllocationResponseToSide;
(function (RebookTradeAllocationResponseToSide) {
    RebookTradeAllocationResponseToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeAllocationResponseToSide["Buy"] = "BUY";
    RebookTradeAllocationResponseToSide["Sell"] = "SELL";
})(RebookTradeAllocationResponseToSide || (RebookTradeAllocationResponseToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
export var RebookTradeAllocationResponseWhenIssued;
(function (RebookTradeAllocationResponseWhenIssued) {
    RebookTradeAllocationResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeAllocationResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeAllocationResponseWhenIssued || (RebookTradeAllocationResponseWhenIssued = {}));
/**
 * Type of the asset being traded.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationAssetType;
(function (RebookTradeAllocationResponseOriginalTradeAllocationAssetType) {
    RebookTradeAllocationResponseOriginalTradeAllocationAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationAssetType["Equity"] = "EQUITY";
    RebookTradeAllocationResponseOriginalTradeAllocationAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeAllocationResponseOriginalTradeAllocationAssetType || (RebookTradeAllocationResponseOriginalTradeAllocationAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity;
(function (RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity) {
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity || (RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType;
(function (RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType) {
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType["Cusip"] = "CUSIP";
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType["Isin"] = "ISIN";
})(RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType || (RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType) {
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType["Markup"] = "MARKUP";
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType["Markdown"] = "MARKDOWN";
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType || (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType = {}));
/**
 * Side modifier for the trade allocation.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationSideModifier;
(function (RebookTradeAllocationResponseOriginalTradeAllocationSideModifier) {
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["Short"] = "SHORT";
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["Open"] = "OPEN";
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier["Close"] = "CLOSE";
})(RebookTradeAllocationResponseOriginalTradeAllocationSideModifier || (RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = {}));
export var RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions;
(function (RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions) {
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions || (RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = {}));
/**
 * The state that the trade allocation is in.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationState;
(function (RebookTradeAllocationResponseOriginalTradeAllocationState) {
    RebookTradeAllocationResponseOriginalTradeAllocationState["StateUnspecified"] = "STATE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Creating"] = "CREATING";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Rebooking"] = "REBOOKING";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Canceling"] = "CANCELING";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Booked"] = "BOOKED";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Rebooked"] = "REBOOKED";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Canceled"] = "CANCELED";
    RebookTradeAllocationResponseOriginalTradeAllocationState["Failed"] = "FAILED";
})(RebookTradeAllocationResponseOriginalTradeAllocationState || (RebookTradeAllocationResponseOriginalTradeAllocationState = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationToSide;
(function (RebookTradeAllocationResponseOriginalTradeAllocationToSide) {
    RebookTradeAllocationResponseOriginalTradeAllocationToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationToSide["Buy"] = "BUY";
    RebookTradeAllocationResponseOriginalTradeAllocationToSide["Sell"] = "SELL";
})(RebookTradeAllocationResponseOriginalTradeAllocationToSide || (RebookTradeAllocationResponseOriginalTradeAllocationToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued;
(function (RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued) {
    RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued || (RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued = {}));
/** @internal */
export const RebookTradeAllocationResponseAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseAccruedInterestAmount$;
(function (RebookTradeAllocationResponseAccruedInterestAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseAccruedInterestAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseAccruedInterestAmount$.inboundSchema = RebookTradeAllocationResponseAccruedInterestAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseAccruedInterestAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseAccruedInterestAmount$.outboundSchema = RebookTradeAllocationResponseAccruedInterestAmount$outboundSchema;
})(RebookTradeAllocationResponseAccruedInterestAmount$ || (RebookTradeAllocationResponseAccruedInterestAmount$ = {}));
export function rebookTradeAllocationResponseAccruedInterestAmountToJSON(rebookTradeAllocationResponseAccruedInterestAmount) {
    return JSON.stringify(RebookTradeAllocationResponseAccruedInterestAmount$outboundSchema.parse(rebookTradeAllocationResponseAccruedInterestAmount));
}
export function rebookTradeAllocationResponseAccruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseAccruedInterestAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseAccruedInterestAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseAssetType$;
(function (RebookTradeAllocationResponseAssetType$) {
    /** @deprecated use `RebookTradeAllocationResponseAssetType$inboundSchema` instead. */
    RebookTradeAllocationResponseAssetType$.inboundSchema = RebookTradeAllocationResponseAssetType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseAssetType$outboundSchema` instead. */
    RebookTradeAllocationResponseAssetType$.outboundSchema = RebookTradeAllocationResponseAssetType$outboundSchema;
})(RebookTradeAllocationResponseAssetType$ || (RebookTradeAllocationResponseAssetType$ = {}));
/** @internal */
export const RebookTradeAllocationResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseBrokerCapacity$;
(function (RebookTradeAllocationResponseBrokerCapacity$) {
    /** @deprecated use `RebookTradeAllocationResponseBrokerCapacity$inboundSchema` instead. */
    RebookTradeAllocationResponseBrokerCapacity$.inboundSchema = RebookTradeAllocationResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseBrokerCapacity$outboundSchema` instead. */
    RebookTradeAllocationResponseBrokerCapacity$.outboundSchema = RebookTradeAllocationResponseBrokerCapacity$outboundSchema;
})(RebookTradeAllocationResponseBrokerCapacity$ || (RebookTradeAllocationResponseBrokerCapacity$ = {}));
/** @internal */
export const RebookTradeAllocationResponseCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseCommissionAmount$;
(function (RebookTradeAllocationResponseCommissionAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseCommissionAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseCommissionAmount$.inboundSchema = RebookTradeAllocationResponseCommissionAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseCommissionAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseCommissionAmount$.outboundSchema = RebookTradeAllocationResponseCommissionAmount$outboundSchema;
})(RebookTradeAllocationResponseCommissionAmount$ || (RebookTradeAllocationResponseCommissionAmount$ = {}));
export function rebookTradeAllocationResponseCommissionAmountToJSON(rebookTradeAllocationResponseCommissionAmount) {
    return JSON.stringify(RebookTradeAllocationResponseCommissionAmount$outboundSchema.parse(rebookTradeAllocationResponseCommissionAmount));
}
export function rebookTradeAllocationResponseCommissionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseCommissionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseCommissionAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseGrossAmount$;
(function (RebookTradeAllocationResponseGrossAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseGrossAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseGrossAmount$.inboundSchema = RebookTradeAllocationResponseGrossAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseGrossAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseGrossAmount$.outboundSchema = RebookTradeAllocationResponseGrossAmount$outboundSchema;
})(RebookTradeAllocationResponseGrossAmount$ || (RebookTradeAllocationResponseGrossAmount$ = {}));
export function rebookTradeAllocationResponseGrossAmountToJSON(rebookTradeAllocationResponseGrossAmount) {
    return JSON.stringify(RebookTradeAllocationResponseGrossAmount$outboundSchema.parse(rebookTradeAllocationResponseGrossAmount));
}
export function rebookTradeAllocationResponseGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseGrossAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseGrossAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseIdentifierType$;
(function (RebookTradeAllocationResponseIdentifierType$) {
    /** @deprecated use `RebookTradeAllocationResponseIdentifierType$inboundSchema` instead. */
    RebookTradeAllocationResponseIdentifierType$.inboundSchema = RebookTradeAllocationResponseIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseIdentifierType$outboundSchema` instead. */
    RebookTradeAllocationResponseIdentifierType$.outboundSchema = RebookTradeAllocationResponseIdentifierType$outboundSchema;
})(RebookTradeAllocationResponseIdentifierType$ || (RebookTradeAllocationResponseIdentifierType$ = {}));
/** @internal */
export const RebookTradeAllocationResponsePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponsePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponsePrevailingMarketPrice$;
(function (RebookTradeAllocationResponsePrevailingMarketPrice$) {
    /** @deprecated use `RebookTradeAllocationResponsePrevailingMarketPrice$inboundSchema` instead. */
    RebookTradeAllocationResponsePrevailingMarketPrice$.inboundSchema = RebookTradeAllocationResponsePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponsePrevailingMarketPrice$outboundSchema` instead. */
    RebookTradeAllocationResponsePrevailingMarketPrice$.outboundSchema = RebookTradeAllocationResponsePrevailingMarketPrice$outboundSchema;
})(RebookTradeAllocationResponsePrevailingMarketPrice$ || (RebookTradeAllocationResponsePrevailingMarketPrice$ = {}));
export function rebookTradeAllocationResponsePrevailingMarketPriceToJSON(rebookTradeAllocationResponsePrevailingMarketPrice) {
    return JSON.stringify(RebookTradeAllocationResponsePrevailingMarketPrice$outboundSchema.parse(rebookTradeAllocationResponsePrevailingMarketPrice));
}
export function rebookTradeAllocationResponsePrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponsePrevailingMarketPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponsePrevailingMarketPrice' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponsePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponsePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponsePrice$;
(function (RebookTradeAllocationResponsePrice$) {
    /** @deprecated use `RebookTradeAllocationResponsePrice$inboundSchema` instead. */
    RebookTradeAllocationResponsePrice$.inboundSchema = RebookTradeAllocationResponsePrice$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponsePrice$outboundSchema` instead. */
    RebookTradeAllocationResponsePrice$.outboundSchema = RebookTradeAllocationResponsePrice$outboundSchema;
})(RebookTradeAllocationResponsePrice$ || (RebookTradeAllocationResponsePrice$ = {}));
export function rebookTradeAllocationResponsePriceToJSON(rebookTradeAllocationResponsePrice) {
    return JSON.stringify(RebookTradeAllocationResponsePrice$outboundSchema.parse(rebookTradeAllocationResponsePrice));
}
export function rebookTradeAllocationResponsePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponsePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponsePrice' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponsePriceAdjustmentAmount$;
(function (RebookTradeAllocationResponsePriceAdjustmentAmount$) {
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustmentAmount$inboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustmentAmount$.inboundSchema = RebookTradeAllocationResponsePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustmentAmount$outboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustmentAmount$.outboundSchema = RebookTradeAllocationResponsePriceAdjustmentAmount$outboundSchema;
})(RebookTradeAllocationResponsePriceAdjustmentAmount$ || (RebookTradeAllocationResponsePriceAdjustmentAmount$ = {}));
export function rebookTradeAllocationResponsePriceAdjustmentAmountToJSON(rebookTradeAllocationResponsePriceAdjustmentAmount) {
    return JSON.stringify(RebookTradeAllocationResponsePriceAdjustmentAmount$outboundSchema.parse(rebookTradeAllocationResponsePriceAdjustmentAmount));
}
export function rebookTradeAllocationResponsePriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponsePriceAdjustmentAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponsePriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponsePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponsePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponsePriceAdjustmentType$;
(function (RebookTradeAllocationResponsePriceAdjustmentType$) {
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustmentType$inboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustmentType$.inboundSchema = RebookTradeAllocationResponsePriceAdjustmentType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustmentType$outboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustmentType$.outboundSchema = RebookTradeAllocationResponsePriceAdjustmentType$outboundSchema;
})(RebookTradeAllocationResponsePriceAdjustmentType$ || (RebookTradeAllocationResponsePriceAdjustmentType$ = {}));
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponsePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: RebookTradeAllocationResponsePriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const RebookTradeAllocationResponsePriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponsePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: RebookTradeAllocationResponsePriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponsePriceAdjustment$;
(function (RebookTradeAllocationResponsePriceAdjustment$) {
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustment$inboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustment$.inboundSchema = RebookTradeAllocationResponsePriceAdjustment$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponsePriceAdjustment$outboundSchema` instead. */
    RebookTradeAllocationResponsePriceAdjustment$.outboundSchema = RebookTradeAllocationResponsePriceAdjustment$outboundSchema;
})(RebookTradeAllocationResponsePriceAdjustment$ || (RebookTradeAllocationResponsePriceAdjustment$ = {}));
export function rebookTradeAllocationResponsePriceAdjustmentToJSON(rebookTradeAllocationResponsePriceAdjustment) {
    return JSON.stringify(RebookTradeAllocationResponsePriceAdjustment$outboundSchema.parse(rebookTradeAllocationResponsePriceAdjustment));
}
export function rebookTradeAllocationResponsePriceAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponsePriceAdjustment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponsePriceAdjustment' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseQuantity$;
(function (RebookTradeAllocationResponseQuantity$) {
    /** @deprecated use `RebookTradeAllocationResponseQuantity$inboundSchema` instead. */
    RebookTradeAllocationResponseQuantity$.inboundSchema = RebookTradeAllocationResponseQuantity$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseQuantity$outboundSchema` instead. */
    RebookTradeAllocationResponseQuantity$.outboundSchema = RebookTradeAllocationResponseQuantity$outboundSchema;
})(RebookTradeAllocationResponseQuantity$ || (RebookTradeAllocationResponseQuantity$ = {}));
export function rebookTradeAllocationResponseQuantityToJSON(rebookTradeAllocationResponseQuantity) {
    return JSON.stringify(RebookTradeAllocationResponseQuantity$outboundSchema.parse(rebookTradeAllocationResponseQuantity));
}
export function rebookTradeAllocationResponseQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseQuantity' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseSettlementDate$;
(function (RebookTradeAllocationResponseSettlementDate$) {
    /** @deprecated use `RebookTradeAllocationResponseSettlementDate$inboundSchema` instead. */
    RebookTradeAllocationResponseSettlementDate$.inboundSchema = RebookTradeAllocationResponseSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseSettlementDate$outboundSchema` instead. */
    RebookTradeAllocationResponseSettlementDate$.outboundSchema = RebookTradeAllocationResponseSettlementDate$outboundSchema;
})(RebookTradeAllocationResponseSettlementDate$ || (RebookTradeAllocationResponseSettlementDate$ = {}));
export function rebookTradeAllocationResponseSettlementDateToJSON(rebookTradeAllocationResponseSettlementDate) {
    return JSON.stringify(RebookTradeAllocationResponseSettlementDate$outboundSchema.parse(rebookTradeAllocationResponseSettlementDate));
}
export function rebookTradeAllocationResponseSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseSettlementDate' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseSideModifier$;
(function (RebookTradeAllocationResponseSideModifier$) {
    /** @deprecated use `RebookTradeAllocationResponseSideModifier$inboundSchema` instead. */
    RebookTradeAllocationResponseSideModifier$.inboundSchema = RebookTradeAllocationResponseSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseSideModifier$outboundSchema` instead. */
    RebookTradeAllocationResponseSideModifier$.outboundSchema = RebookTradeAllocationResponseSideModifier$outboundSchema;
})(RebookTradeAllocationResponseSideModifier$ || (RebookTradeAllocationResponseSideModifier$ = {}));
/** @internal */
export const RebookTradeAllocationResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseSpecialInstructions$;
(function (RebookTradeAllocationResponseSpecialInstructions$) {
    /** @deprecated use `RebookTradeAllocationResponseSpecialInstructions$inboundSchema` instead. */
    RebookTradeAllocationResponseSpecialInstructions$.inboundSchema = RebookTradeAllocationResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseSpecialInstructions$outboundSchema` instead. */
    RebookTradeAllocationResponseSpecialInstructions$.outboundSchema = RebookTradeAllocationResponseSpecialInstructions$outboundSchema;
})(RebookTradeAllocationResponseSpecialInstructions$ || (RebookTradeAllocationResponseSpecialInstructions$ = {}));
/** @internal */
export const RebookTradeAllocationResponseState$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseState$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseState$;
(function (RebookTradeAllocationResponseState$) {
    /** @deprecated use `RebookTradeAllocationResponseState$inboundSchema` instead. */
    RebookTradeAllocationResponseState$.inboundSchema = RebookTradeAllocationResponseState$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseState$outboundSchema` instead. */
    RebookTradeAllocationResponseState$.outboundSchema = RebookTradeAllocationResponseState$outboundSchema;
})(RebookTradeAllocationResponseState$ || (RebookTradeAllocationResponseState$ = {}));
/** @internal */
export const RebookTradeAllocationResponseToSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseToSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseToSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseToSide$;
(function (RebookTradeAllocationResponseToSide$) {
    /** @deprecated use `RebookTradeAllocationResponseToSide$inboundSchema` instead. */
    RebookTradeAllocationResponseToSide$.inboundSchema = RebookTradeAllocationResponseToSide$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseToSide$outboundSchema` instead. */
    RebookTradeAllocationResponseToSide$.outboundSchema = RebookTradeAllocationResponseToSide$outboundSchema;
})(RebookTradeAllocationResponseToSide$ || (RebookTradeAllocationResponseToSide$ = {}));
/** @internal */
export const RebookTradeAllocationResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseWhenIssued$;
(function (RebookTradeAllocationResponseWhenIssued$) {
    /** @deprecated use `RebookTradeAllocationResponseWhenIssued$inboundSchema` instead. */
    RebookTradeAllocationResponseWhenIssued$.inboundSchema = RebookTradeAllocationResponseWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseWhenIssued$outboundSchema` instead. */
    RebookTradeAllocationResponseWhenIssued$.outboundSchema = RebookTradeAllocationResponseWhenIssued$outboundSchema;
})(RebookTradeAllocationResponseWhenIssued$ || (RebookTradeAllocationResponseWhenIssued$ = {}));
/** @internal */
export const NewTradeAllocation$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseAccruedInterestAmount$inboundSchema)).optional(),
    additional_instructions: z.string().optional(),
    asset_type: RebookTradeAllocationResponseAssetType$inboundSchema.optional(),
    bond_yield: z.array(BondYield$inboundSchema).optional(),
    broker_capacity: RebookTradeAllocationResponseBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    commission_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseCommissionAmount$inboundSchema)).optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    from_account_id: z.string().optional(),
    from_activity_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseGrossAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: RebookTradeAllocationResponseIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => RebookTradeAllocationResponsePrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookTradeAllocationResponsePrice$inboundSchema)).optional(),
    price_adjustment: z.nullable(z.lazy(() => RebookTradeAllocationResponsePriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookTradeAllocationResponseQuantity$inboundSchema)).optional(),
    settlement_date: z.nullable(z.lazy(() => RebookTradeAllocationResponseSettlementDate$inboundSchema)).optional(),
    side_modifier: RebookTradeAllocationResponseSideModifier$inboundSchema
        .optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(RebookTradeAllocationResponseSpecialInstructions$inboundSchema).optional(),
    state: RebookTradeAllocationResponseState$inboundSchema.optional(),
    to_account_id: z.string().optional(),
    to_activity_id: z.string().optional(),
    to_side: RebookTradeAllocationResponseToSide$inboundSchema.optional(),
    trade_allocation_id: z.string().optional(),
    when_issued: RebookTradeAllocationResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "from_activity_id": "fromActivityId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_activity_id": "toActivityId",
        "to_side": "toSide",
        "trade_allocation_id": "tradeAllocationId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const NewTradeAllocation$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseAccruedInterestAmount$outboundSchema)).optional(),
    additionalInstructions: z.string().optional(),
    assetType: RebookTradeAllocationResponseAssetType$outboundSchema.optional(),
    bondYield: z.array(BondYield$outboundSchema).optional(),
    brokerCapacity: RebookTradeAllocationResponseBrokerCapacity$outboundSchema
        .optional(),
    clientOrderId: z.string().optional(),
    commissionAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseCommissionAmount$outboundSchema)).optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    fromAccountId: z.string().optional(),
    fromActivityId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseGrossAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: RebookTradeAllocationResponseIdentifierType$outboundSchema
        .optional(),
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => RebookTradeAllocationResponsePrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookTradeAllocationResponsePrice$outboundSchema)).optional(),
    priceAdjustment: z.nullable(z.lazy(() => RebookTradeAllocationResponsePriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookTradeAllocationResponseQuantity$outboundSchema)).optional(),
    settlementDate: z.nullable(z.lazy(() => RebookTradeAllocationResponseSettlementDate$outboundSchema)).optional(),
    sideModifier: RebookTradeAllocationResponseSideModifier$outboundSchema
        .optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(RebookTradeAllocationResponseSpecialInstructions$outboundSchema).optional(),
    state: RebookTradeAllocationResponseState$outboundSchema.optional(),
    toAccountId: z.string().optional(),
    toActivityId: z.string().optional(),
    toSide: RebookTradeAllocationResponseToSide$outboundSchema.optional(),
    tradeAllocationId: z.string().optional(),
    whenIssued: RebookTradeAllocationResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        fromActivityId: "from_activity_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toActivityId: "to_activity_id",
        toSide: "to_side",
        tradeAllocationId: "trade_allocation_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewTradeAllocation$;
(function (NewTradeAllocation$) {
    /** @deprecated use `NewTradeAllocation$inboundSchema` instead. */
    NewTradeAllocation$.inboundSchema = NewTradeAllocation$inboundSchema;
    /** @deprecated use `NewTradeAllocation$outboundSchema` instead. */
    NewTradeAllocation$.outboundSchema = NewTradeAllocation$outboundSchema;
})(NewTradeAllocation$ || (NewTradeAllocation$ = {}));
export function newTradeAllocationToJSON(newTradeAllocation) {
    return JSON.stringify(NewTradeAllocation$outboundSchema.parse(newTradeAllocation));
}
export function newTradeAllocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewTradeAllocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewTradeAllocation' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$ || (RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmountToJSON(rebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationAssetType$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationAssetType$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationAssetType$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationAssetType$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationAssetType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationAssetType$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationAssetType$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationAssetType$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationAssetType$ || (RebookTradeAllocationResponseOriginalTradeAllocationAssetType$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$ || (RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$ || (RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationCommissionAmountToJSON(rebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationCommissionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$ || (RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationGrossAmountToJSON(rebookTradeAllocationResponseOriginalTradeAllocationGrossAmount) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationGrossAmount));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationGrossAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$ || (RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$ || (RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPriceToJSON(rebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPrice$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPrice$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPrice$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPrice$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPrice$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPrice$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPrice$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPrice$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationPrice$ || (RebookTradeAllocationResponseOriginalTradeAllocationPrice$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceToJSON(rebookTradeAllocationResponseOriginalTradeAllocationPrice) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationPrice$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationPrice));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationPrice$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationPrice' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$ || (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmountToJSON(rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$ || (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$ || (RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentToJSON(rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationQuantity$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationQuantity$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationQuantity$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationQuantity$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationQuantity$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationQuantity$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationQuantity$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationQuantity$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationQuantity$ || (RebookTradeAllocationResponseOriginalTradeAllocationQuantity$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationQuantityToJSON(rebookTradeAllocationResponseOriginalTradeAllocationQuantity) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationQuantity$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationQuantity));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationQuantity$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationQuantity' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$ || (RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$ = {}));
export function rebookTradeAllocationResponseOriginalTradeAllocationSettlementDateToJSON(rebookTradeAllocationResponseOriginalTradeAllocationSettlementDate) {
    return JSON.stringify(RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$outboundSchema
        .parse(rebookTradeAllocationResponseOriginalTradeAllocationSettlementDate));
}
export function rebookTradeAllocationResponseOriginalTradeAllocationSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$ || (RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$ || (RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationState$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationState$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationState$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationState$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationState$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationState$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationState$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationState$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationState$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationState$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationState$ || (RebookTradeAllocationResponseOriginalTradeAllocationState$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationToSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationToSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationToSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationToSide$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationToSide$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationToSide$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationToSide$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationToSide$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationToSide$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationToSide$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationToSide$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationToSide$ || (RebookTradeAllocationResponseOriginalTradeAllocationToSide$ = {}));
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$;
(function (RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$) {
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$inboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$.inboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$outboundSchema` instead. */
    RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$.outboundSchema = RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$outboundSchema;
})(RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$ || (RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$ = {}));
/** @internal */
export const OriginalTradeAllocation$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$inboundSchema)).optional(),
    additional_instructions: z.string().optional(),
    asset_type: RebookTradeAllocationResponseOriginalTradeAllocationAssetType$inboundSchema
        .optional(),
    bond_yield: z.array(BondYield$inboundSchema).optional(),
    broker_capacity: RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    commission_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$inboundSchema)).optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    from_account_id: z.string().optional(),
    from_activity_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPrice$inboundSchema)).optional(),
    price_adjustment: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationQuantity$inboundSchema)).optional(),
    settlement_date: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$inboundSchema)).optional(),
    side_modifier: RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$inboundSchema
        .optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$inboundSchema).optional(),
    state: RebookTradeAllocationResponseOriginalTradeAllocationState$inboundSchema
        .optional(),
    to_account_id: z.string().optional(),
    to_activity_id: z.string().optional(),
    to_side: RebookTradeAllocationResponseOriginalTradeAllocationToSide$inboundSchema
        .optional(),
    trade_allocation_id: z.string().optional(),
    when_issued: RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "from_activity_id": "fromActivityId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_activity_id": "toActivityId",
        "to_side": "toSide",
        "trade_allocation_id": "tradeAllocationId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const OriginalTradeAllocation$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount$outboundSchema)).optional(),
    additionalInstructions: z.string().optional(),
    assetType: RebookTradeAllocationResponseOriginalTradeAllocationAssetType$outboundSchema
        .optional(),
    bondYield: z.array(BondYield$outboundSchema).optional(),
    brokerCapacity: RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity$outboundSchema
        .optional(),
    clientOrderId: z.string().optional(),
    commissionAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount$outboundSchema)).optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    fromAccountId: z.string().optional(),
    fromActivityId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType$outboundSchema
        .optional(),
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPrice$outboundSchema)).optional(),
    priceAdjustment: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationQuantity$outboundSchema)).optional(),
    settlementDate: z.nullable(z.lazy(() => RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate$outboundSchema)).optional(),
    sideModifier: RebookTradeAllocationResponseOriginalTradeAllocationSideModifier$outboundSchema
        .optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions$outboundSchema).optional(),
    state: RebookTradeAllocationResponseOriginalTradeAllocationState$outboundSchema
        .optional(),
    toAccountId: z.string().optional(),
    toActivityId: z.string().optional(),
    toSide: RebookTradeAllocationResponseOriginalTradeAllocationToSide$outboundSchema
        .optional(),
    tradeAllocationId: z.string().optional(),
    whenIssued: RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        fromActivityId: "from_activity_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toActivityId: "to_activity_id",
        toSide: "to_side",
        tradeAllocationId: "trade_allocation_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OriginalTradeAllocation$;
(function (OriginalTradeAllocation$) {
    /** @deprecated use `OriginalTradeAllocation$inboundSchema` instead. */
    OriginalTradeAllocation$.inboundSchema = OriginalTradeAllocation$inboundSchema;
    /** @deprecated use `OriginalTradeAllocation$outboundSchema` instead. */
    OriginalTradeAllocation$.outboundSchema = OriginalTradeAllocation$outboundSchema;
})(OriginalTradeAllocation$ || (OriginalTradeAllocation$ = {}));
export function originalTradeAllocationToJSON(originalTradeAllocation) {
    return JSON.stringify(OriginalTradeAllocation$outboundSchema.parse(originalTradeAllocation));
}
export function originalTradeAllocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OriginalTradeAllocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OriginalTradeAllocation' from JSON`);
}
/** @internal */
export const RebookTradeAllocationResponse$inboundSchema = z.object({
    new_trade_allocation: z.nullable(z.lazy(() => NewTradeAllocation$inboundSchema)).optional(),
    original_trade_allocation: z.nullable(z.lazy(() => OriginalTradeAllocation$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "new_trade_allocation": "newTradeAllocation",
        "original_trade_allocation": "originalTradeAllocation",
    });
});
/** @internal */
export const RebookTradeAllocationResponse$outboundSchema = z.object({
    newTradeAllocation: z.nullable(z.lazy(() => NewTradeAllocation$outboundSchema)).optional(),
    originalTradeAllocation: z.nullable(z.lazy(() => OriginalTradeAllocation$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        newTradeAllocation: "new_trade_allocation",
        originalTradeAllocation: "original_trade_allocation",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeAllocationResponse$;
(function (RebookTradeAllocationResponse$) {
    /** @deprecated use `RebookTradeAllocationResponse$inboundSchema` instead. */
    RebookTradeAllocationResponse$.inboundSchema = RebookTradeAllocationResponse$inboundSchema;
    /** @deprecated use `RebookTradeAllocationResponse$outboundSchema` instead. */
    RebookTradeAllocationResponse$.outboundSchema = RebookTradeAllocationResponse$outboundSchema;
})(RebookTradeAllocationResponse$ || (RebookTradeAllocationResponse$ = {}));
export function rebookTradeAllocationResponseToJSON(rebookTradeAllocationResponse) {
    return JSON.stringify(RebookTradeAllocationResponse$outboundSchema.parse(rebookTradeAllocationResponse));
}
export function rebookTradeAllocationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeAllocationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeAllocationResponse' from JSON`);
}
//# sourceMappingURL=rebooktradeallocationresponse.js.map