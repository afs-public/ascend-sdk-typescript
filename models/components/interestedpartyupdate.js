/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PostalAddressUpdate$inboundSchema, PostalAddressUpdate$outboundSchema, } from "./postaladdressupdate.js";
/**
 * Delivery method instruction for account statements for a given Interested Party; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var InterestedPartyUpdateStatementDeliveryPreference;
(function (InterestedPartyUpdateStatementDeliveryPreference) {
    InterestedPartyUpdateStatementDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyUpdateStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyUpdateStatementDeliveryPreference || (InterestedPartyUpdateStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Interested Party record; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var InterestedPartyUpdateTradeConfirmationDeliveryPreference;
(function (InterestedPartyUpdateTradeConfirmationDeliveryPreference) {
    InterestedPartyUpdateTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyUpdateTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyUpdateTradeConfirmationDeliveryPreference || (InterestedPartyUpdateTradeConfirmationDeliveryPreference = {}));
/** @internal */
export const InterestedPartyUpdateStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyUpdateStatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InterestedPartyUpdateStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyUpdateStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyUpdateStatementDeliveryPreference$;
(function (InterestedPartyUpdateStatementDeliveryPreference$) {
    /** @deprecated use `InterestedPartyUpdateStatementDeliveryPreference$inboundSchema` instead. */
    InterestedPartyUpdateStatementDeliveryPreference$.inboundSchema = InterestedPartyUpdateStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyUpdateStatementDeliveryPreference$outboundSchema` instead. */
    InterestedPartyUpdateStatementDeliveryPreference$.outboundSchema = InterestedPartyUpdateStatementDeliveryPreference$outboundSchema;
})(InterestedPartyUpdateStatementDeliveryPreference$ || (InterestedPartyUpdateStatementDeliveryPreference$ = {}));
/** @internal */
export const InterestedPartyUpdateTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyUpdateTradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InterestedPartyUpdateTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyUpdateTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyUpdateTradeConfirmationDeliveryPreference$;
(function (InterestedPartyUpdateTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `InterestedPartyUpdateTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    InterestedPartyUpdateTradeConfirmationDeliveryPreference$.inboundSchema = InterestedPartyUpdateTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyUpdateTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    InterestedPartyUpdateTradeConfirmationDeliveryPreference$.outboundSchema = InterestedPartyUpdateTradeConfirmationDeliveryPreference$outboundSchema;
})(InterestedPartyUpdateTradeConfirmationDeliveryPreference$ || (InterestedPartyUpdateTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const InterestedPartyUpdate$inboundSchema = z.object({
    mailing_address: PostalAddressUpdate$inboundSchema.optional(),
    recipient: z.string().optional(),
    statement_delivery_preference: InterestedPartyUpdateStatementDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: InterestedPartyUpdateTradeConfirmationDeliveryPreference$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "mailing_address": "mailingAddress",
        "statement_delivery_preference": "statementDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const InterestedPartyUpdate$outboundSchema = z.object({
    mailingAddress: PostalAddressUpdate$outboundSchema.optional(),
    recipient: z.string().optional(),
    statementDeliveryPreference: InterestedPartyUpdateStatementDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: InterestedPartyUpdateTradeConfirmationDeliveryPreference$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        mailingAddress: "mailing_address",
        statementDeliveryPreference: "statement_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyUpdate$;
(function (InterestedPartyUpdate$) {
    /** @deprecated use `InterestedPartyUpdate$inboundSchema` instead. */
    InterestedPartyUpdate$.inboundSchema = InterestedPartyUpdate$inboundSchema;
    /** @deprecated use `InterestedPartyUpdate$outboundSchema` instead. */
    InterestedPartyUpdate$.outboundSchema = InterestedPartyUpdate$outboundSchema;
})(InterestedPartyUpdate$ || (InterestedPartyUpdate$ = {}));
export function interestedPartyUpdateToJSON(interestedPartyUpdate) {
    return JSON.stringify(InterestedPartyUpdate$outboundSchema.parse(interestedPartyUpdate));
}
export function interestedPartyUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestedPartyUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestedPartyUpdate' from JSON`);
}
//# sourceMappingURL=interestedpartyupdate.js.map