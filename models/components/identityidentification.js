/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * **Field Dependencies:**
 *
 * @remarks
 *
 * An SSN or ITIN is required when `check_types` is `DATABASE`
 *
 * Required if `check_types` is `DATABASE`.
 *
 * Otherwise, must be empty.
 */
export var IdentityIdentificationType;
(function (IdentityIdentificationType) {
    IdentityIdentificationType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    IdentityIdentificationType["Ssn"] = "SSN";
    IdentityIdentificationType["Passport"] = "PASSPORT";
    IdentityIdentificationType["DriversLicense"] = "DRIVERS_LICENSE";
    IdentityIdentificationType["Itin"] = "ITIN";
})(IdentityIdentificationType || (IdentityIdentificationType = {}));
/** @internal */
export const IdentityIdentificationType$inboundSchema = z
    .union([
    z.nativeEnum(IdentityIdentificationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const IdentityIdentificationType$outboundSchema = z.union([
    z.nativeEnum(IdentityIdentificationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityIdentificationType$;
(function (IdentityIdentificationType$) {
    /** @deprecated use `IdentityIdentificationType$inboundSchema` instead. */
    IdentityIdentificationType$.inboundSchema = IdentityIdentificationType$inboundSchema;
    /** @deprecated use `IdentityIdentificationType$outboundSchema` instead. */
    IdentityIdentificationType$.outboundSchema = IdentityIdentificationType$outboundSchema;
})(IdentityIdentificationType$ || (IdentityIdentificationType$ = {}));
/** @internal */
export const IdentityIdentification$inboundSchema = z.object({
    administrative_area: z.string().optional(),
    region_code: z.string().optional(),
    type: IdentityIdentificationType$inboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "administrative_area": "administrativeArea",
        "region_code": "regionCode",
    });
});
/** @internal */
export const IdentityIdentification$outboundSchema = z.object({
    administrativeArea: z.string().optional(),
    regionCode: z.string().optional(),
    type: IdentityIdentificationType$outboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        administrativeArea: "administrative_area",
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IdentityIdentification$;
(function (IdentityIdentification$) {
    /** @deprecated use `IdentityIdentification$inboundSchema` instead. */
    IdentityIdentification$.inboundSchema = IdentityIdentification$inboundSchema;
    /** @deprecated use `IdentityIdentification$outboundSchema` instead. */
    IdentityIdentification$.outboundSchema = IdentityIdentification$outboundSchema;
})(IdentityIdentification$ || (IdentityIdentification$ = {}));
export function identityIdentificationToJSON(identityIdentification) {
    return JSON.stringify(IdentityIdentification$outboundSchema.parse(identityIdentification));
}
export function identityIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IdentityIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IdentityIdentification' from JSON`);
}
//# sourceMappingURL=identityidentification.js.map