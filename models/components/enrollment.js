/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { Beneficiary$inboundSchema, Beneficiary$outboundSchema, } from "./beneficiary.js";
import { ForeignBondTradingDetail$inboundSchema, ForeignBondTradingDetail$outboundSchema, } from "./foreignbondtradingdetail.js";
import { RelatedPep$inboundSchema, RelatedPep$outboundSchema, } from "./relatedpep.js";
/**
 * The consent method for the enrollment. Defaults to ESIGNATURE.
 */
export var ConsentMethod;
(function (ConsentMethod) {
    ConsentMethod["ConsentMethodUnspecified"] = "CONSENT_METHOD_UNSPECIFIED";
    ConsentMethod["Esignature"] = "ESIGNATURE";
    ConsentMethod["WetSignature"] = "WET_SIGNATURE";
    ConsentMethod["NegativeConsentConversion"] = "NEGATIVE_CONSENT_CONVERSION";
    ConsentMethod["InternalConversion"] = "INTERNAL_CONVERSION";
})(ConsentMethod || (ConsentMethod = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * The client determined account risk rating of the entity customer
 */
export var EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating;
(function (EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating) {
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating["DeterminedAccountRiskRatingUnspecified"] = "DETERMINED_ACCOUNT_RISK_RATING_UNSPECIFIED";
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating["Low"] = "LOW";
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating["Medium"] = "MEDIUM";
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating["High"] = "HIGH";
})(EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating || (EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating = {}));
/**
 * The primary account activity type
 */
export var EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType;
(function (EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType) {
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType["PrimaryAccountActivityTypeUnspecified"] = "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED";
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType["ActiveTrading"] = "ACTIVE_TRADING";
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType["ShortTermInvesting"] = "SHORT_TERM_INVESTING";
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType["LongTermInvesting"] = "LONG_TERM_INVESTING";
})(EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType || (EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType = {}));
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export var EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency;
(function (EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency) {
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency["WithdrawalFrequencyUnspecified"] = "WITHDRAWAL_FREQUENCY_UNSPECIFIED";
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency["Frequent"] = "FREQUENT";
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency["Occasional"] = "OCCASIONAL";
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency["Rare"] = "RARE";
})(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency || (EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentCorporationEnrollmentMetadataFdicCashSweep;
(function (EnrollmentCorporationEnrollmentMetadataFdicCashSweep) {
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentCorporationEnrollmentMetadataFdicCashSweep || (EnrollmentCorporationEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentDividendReinvestmentPlan;
(function (EnrollmentDividendReinvestmentPlan) {
    EnrollmentDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentDividendReinvestmentPlan || (EnrollmentDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentFdicCashSweep;
(function (EnrollmentFdicCashSweep) {
    EnrollmentFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentFdicCashSweep || (EnrollmentFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep;
(function (EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep) {
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep || (EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep = {}));
/**
 * The primary account activity type
 */
export var EnrollmentPrimaryAccountActivityType;
(function (EnrollmentPrimaryAccountActivityType) {
    EnrollmentPrimaryAccountActivityType["PrimaryAccountActivityTypeUnspecified"] = "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED";
    EnrollmentPrimaryAccountActivityType["ActiveTrading"] = "ACTIVE_TRADING";
    EnrollmentPrimaryAccountActivityType["ShortTermInvesting"] = "SHORT_TERM_INVESTING";
    EnrollmentPrimaryAccountActivityType["LongTermInvesting"] = "LONG_TERM_INVESTING";
})(EnrollmentPrimaryAccountActivityType || (EnrollmentPrimaryAccountActivityType = {}));
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export var EnrollmentWithdrawalFrequency;
(function (EnrollmentWithdrawalFrequency) {
    EnrollmentWithdrawalFrequency["WithdrawalFrequencyUnspecified"] = "WITHDRAWAL_FREQUENCY_UNSPECIFIED";
    EnrollmentWithdrawalFrequency["Frequent"] = "FREQUENT";
    EnrollmentWithdrawalFrequency["Occasional"] = "OCCASIONAL";
    EnrollmentWithdrawalFrequency["Rare"] = "RARE";
})(EnrollmentWithdrawalFrequency || (EnrollmentWithdrawalFrequency = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep;
(function (EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep) {
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep || (EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep = {}));
/**
 * The primary account activity type
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType;
(function (EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType) {
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType["PrimaryAccountActivityTypeUnspecified"] = "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED";
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType["ActiveTrading"] = "ACTIVE_TRADING";
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType["ShortTermInvesting"] = "SHORT_TERM_INVESTING";
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType["LongTermInvesting"] = "LONG_TERM_INVESTING";
})(EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType || (EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType = {}));
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency;
(function (EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency) {
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency["WithdrawalFrequencyUnspecified"] = "WITHDRAWAL_FREQUENCY_UNSPECIFIED";
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency["Frequent"] = "FREQUENT";
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency["Occasional"] = "OCCASIONAL";
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency["Rare"] = "RARE";
})(EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency || (EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIndividualEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIndividualEnrollmentMetadataFdicCashSweep) {
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIndividualEnrollmentMetadataFdicCashSweep || (EnrollmentIndividualEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep || (EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep || (EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraRothEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraRothEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraRothEnrollmentMetadataFdicCashSweep || (EnrollmentIraRothEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraSepEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraSepEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraSepEnrollmentMetadataFdicCashSweep || (EnrollmentIraSepEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep || (EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep;
(function (EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep) {
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep || (EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep) {
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep || (EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep = {}));
/**
 * The legal residency state of a married couple
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple) {
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["LegalResidencyStateOfMarriedCoupleUnspecified"] = "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ak"] = "AK";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Az"] = "AZ";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ar"] = "AR";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ca"] = "CA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["De"] = "DE";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Fl"] = "FL";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Hi"] = "HI";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Id"] = "ID";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Il"] = "IL";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["In"] = "IN";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ky"] = "KY";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["La"] = "LA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Md"] = "MD";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ma"] = "MA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Mi"] = "MI";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ms"] = "MS";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Mo"] = "MO";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Nv"] = "NV";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Nj"] = "NJ";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Nm"] = "NM";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ny"] = "NY";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Nc"] = "NC";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Oh"] = "OH";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ok"] = "OK";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Or"] = "OR";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Pa"] = "PA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Ri"] = "RI";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Tn"] = "TN";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Tx"] = "TX";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Vt"] = "VT";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Va"] = "VA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Wa"] = "WA";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Wi"] = "WI";
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple["Wy"] = "WY";
})(EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple || (EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep;
(function (EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep) {
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep || (EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep = {}));
/**
 * The legal residency state of a married couple
 */
export var EnrollmentLegalResidencyStateOfMarriedCouple;
(function (EnrollmentLegalResidencyStateOfMarriedCouple) {
    EnrollmentLegalResidencyStateOfMarriedCouple["LegalResidencyStateOfMarriedCoupleUnspecified"] = "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ak"] = "AK";
    EnrollmentLegalResidencyStateOfMarriedCouple["Az"] = "AZ";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ar"] = "AR";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ca"] = "CA";
    EnrollmentLegalResidencyStateOfMarriedCouple["De"] = "DE";
    EnrollmentLegalResidencyStateOfMarriedCouple["Fl"] = "FL";
    EnrollmentLegalResidencyStateOfMarriedCouple["Hi"] = "HI";
    EnrollmentLegalResidencyStateOfMarriedCouple["Id"] = "ID";
    EnrollmentLegalResidencyStateOfMarriedCouple["Il"] = "IL";
    EnrollmentLegalResidencyStateOfMarriedCouple["In"] = "IN";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ky"] = "KY";
    EnrollmentLegalResidencyStateOfMarriedCouple["La"] = "LA";
    EnrollmentLegalResidencyStateOfMarriedCouple["Md"] = "MD";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ma"] = "MA";
    EnrollmentLegalResidencyStateOfMarriedCouple["Mi"] = "MI";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ms"] = "MS";
    EnrollmentLegalResidencyStateOfMarriedCouple["Mo"] = "MO";
    EnrollmentLegalResidencyStateOfMarriedCouple["Nv"] = "NV";
    EnrollmentLegalResidencyStateOfMarriedCouple["Nj"] = "NJ";
    EnrollmentLegalResidencyStateOfMarriedCouple["Nm"] = "NM";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ny"] = "NY";
    EnrollmentLegalResidencyStateOfMarriedCouple["Nc"] = "NC";
    EnrollmentLegalResidencyStateOfMarriedCouple["Oh"] = "OH";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ok"] = "OK";
    EnrollmentLegalResidencyStateOfMarriedCouple["Or"] = "OR";
    EnrollmentLegalResidencyStateOfMarriedCouple["Pa"] = "PA";
    EnrollmentLegalResidencyStateOfMarriedCouple["Ri"] = "RI";
    EnrollmentLegalResidencyStateOfMarriedCouple["Tn"] = "TN";
    EnrollmentLegalResidencyStateOfMarriedCouple["Tx"] = "TX";
    EnrollmentLegalResidencyStateOfMarriedCouple["Vt"] = "VT";
    EnrollmentLegalResidencyStateOfMarriedCouple["Va"] = "VA";
    EnrollmentLegalResidencyStateOfMarriedCouple["Wa"] = "WA";
    EnrollmentLegalResidencyStateOfMarriedCouple["Wi"] = "WI";
    EnrollmentLegalResidencyStateOfMarriedCouple["Wy"] = "WY";
})(EnrollmentLegalResidencyStateOfMarriedCouple || (EnrollmentLegalResidencyStateOfMarriedCouple = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep;
(function (EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep) {
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep || (EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep;
(function (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep) {
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep || (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * The client determined account risk rating of the entity customer
 */
export var EnrollmentDeterminedAccountRiskRating;
(function (EnrollmentDeterminedAccountRiskRating) {
    EnrollmentDeterminedAccountRiskRating["DeterminedAccountRiskRatingUnspecified"] = "DETERMINED_ACCOUNT_RISK_RATING_UNSPECIFIED";
    EnrollmentDeterminedAccountRiskRating["Low"] = "LOW";
    EnrollmentDeterminedAccountRiskRating["Medium"] = "MEDIUM";
    EnrollmentDeterminedAccountRiskRating["High"] = "HIGH";
})(EnrollmentDeterminedAccountRiskRating || (EnrollmentDeterminedAccountRiskRating = {}));
/**
 * The primary account activity type
 */
export var EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType;
(function (EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType) {
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType["PrimaryAccountActivityTypeUnspecified"] = "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED";
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType["ActiveTrading"] = "ACTIVE_TRADING";
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType["ShortTermInvesting"] = "SHORT_TERM_INVESTING";
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType["LongTermInvesting"] = "LONG_TERM_INVESTING";
})(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType || (EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType = {}));
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export var EnrollmentLlcEnrollmentMetadataWithdrawalFrequency;
(function (EnrollmentLlcEnrollmentMetadataWithdrawalFrequency) {
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency["WithdrawalFrequencyUnspecified"] = "WITHDRAWAL_FREQUENCY_UNSPECIFIED";
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency["Frequent"] = "FREQUENT";
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency["Occasional"] = "OCCASIONAL";
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency["Rare"] = "RARE";
})(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency || (EnrollmentLlcEnrollmentMetadataWithdrawalFrequency = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentLlcEnrollmentMetadataFdicCashSweep;
(function (EnrollmentLlcEnrollmentMetadataFdicCashSweep) {
    EnrollmentLlcEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentLlcEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentLlcEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentLlcEnrollmentMetadataFdicCashSweep || (EnrollmentLlcEnrollmentMetadataFdicCashSweep = {}));
/**
 * The purpose of the operating account.
 */
export var EnrollmentOperatingPurpose;
(function (EnrollmentOperatingPurpose) {
    EnrollmentOperatingPurpose["OperatingPurposeUnspecified"] = "OPERATING_PURPOSE_UNSPECIFIED";
    EnrollmentOperatingPurpose["Custody"] = "CUSTODY";
    EnrollmentOperatingPurpose["SecFee"] = "SEC_FEE";
    EnrollmentOperatingPurpose["TafFee"] = "TAF_FEE";
    EnrollmentOperatingPurpose["TefraWithholding"] = "TEFRA_WITHHOLDING";
    EnrollmentOperatingPurpose["Suspense"] = "SUSPENSE";
    EnrollmentOperatingPurpose["Allocation"] = "ALLOCATION";
    EnrollmentOperatingPurpose["Error"] = "ERROR";
    EnrollmentOperatingPurpose["Deposit"] = "DEPOSIT";
    EnrollmentOperatingPurpose["WriteOff"] = "WRITE_OFF";
    EnrollmentOperatingPurpose["UnsecuredReserve"] = "UNSECURED_RESERVE";
    EnrollmentOperatingPurpose["Payable"] = "PAYABLE";
    EnrollmentOperatingPurpose["Commission"] = "COMMISSION";
    EnrollmentOperatingPurpose["Escheatment"] = "ESCHEATMENT";
    EnrollmentOperatingPurpose["InterestRevenue"] = "INTEREST_REVENUE";
    EnrollmentOperatingPurpose["StreetDepository"] = "STREET_DEPOSITORY";
    EnrollmentOperatingPurpose["Inventory"] = "INVENTORY";
    EnrollmentOperatingPurpose["TaxWithholding"] = "TAX_WITHHOLDING";
    EnrollmentOperatingPurpose["Fee"] = "FEE";
    EnrollmentOperatingPurpose["PrincipalTrading"] = "PRINCIPAL_TRADING";
    EnrollmentOperatingPurpose["SafekeepingBookEntityDomestic"] = "SAFEKEEPING_BOOK_ENTITY_DOMESTIC";
    EnrollmentOperatingPurpose["Fail"] = "FAIL";
})(EnrollmentOperatingPurpose || (EnrollmentOperatingPurpose = {}));
/**
 * Tax Authority for Enrollment
 */
export var EnrollmentTaxAuthority;
(function (EnrollmentTaxAuthority) {
    EnrollmentTaxAuthority["TaxAuthorityUnspecified"] = "TAX_AUTHORITY_UNSPECIFIED";
    EnrollmentTaxAuthority["Al"] = "AL";
    EnrollmentTaxAuthority["Ak"] = "AK";
    EnrollmentTaxAuthority["Az"] = "AZ";
    EnrollmentTaxAuthority["Ar"] = "AR";
    EnrollmentTaxAuthority["Ca"] = "CA";
    EnrollmentTaxAuthority["Co"] = "CO";
    EnrollmentTaxAuthority["Ct"] = "CT";
    EnrollmentTaxAuthority["De"] = "DE";
    EnrollmentTaxAuthority["Fl"] = "FL";
    EnrollmentTaxAuthority["Ga"] = "GA";
    EnrollmentTaxAuthority["Hi"] = "HI";
    EnrollmentTaxAuthority["Id"] = "ID";
    EnrollmentTaxAuthority["Il"] = "IL";
    EnrollmentTaxAuthority["In"] = "IN";
    EnrollmentTaxAuthority["Ia"] = "IA";
    EnrollmentTaxAuthority["Ks"] = "KS";
    EnrollmentTaxAuthority["Ky"] = "KY";
    EnrollmentTaxAuthority["La"] = "LA";
    EnrollmentTaxAuthority["Me"] = "ME";
    EnrollmentTaxAuthority["Md"] = "MD";
    EnrollmentTaxAuthority["Ma"] = "MA";
    EnrollmentTaxAuthority["Mi"] = "MI";
    EnrollmentTaxAuthority["Mn"] = "MN";
    EnrollmentTaxAuthority["Ms"] = "MS";
    EnrollmentTaxAuthority["Mo"] = "MO";
    EnrollmentTaxAuthority["Mt"] = "MT";
    EnrollmentTaxAuthority["Ne"] = "NE";
    EnrollmentTaxAuthority["Nv"] = "NV";
    EnrollmentTaxAuthority["Nh"] = "NH";
    EnrollmentTaxAuthority["Nj"] = "NJ";
    EnrollmentTaxAuthority["Nm"] = "NM";
    EnrollmentTaxAuthority["Ny"] = "NY";
    EnrollmentTaxAuthority["Nc"] = "NC";
    EnrollmentTaxAuthority["Nd"] = "ND";
    EnrollmentTaxAuthority["Oh"] = "OH";
    EnrollmentTaxAuthority["Ok"] = "OK";
    EnrollmentTaxAuthority["Or"] = "OR";
    EnrollmentTaxAuthority["Pa"] = "PA";
    EnrollmentTaxAuthority["Ri"] = "RI";
    EnrollmentTaxAuthority["Sc"] = "SC";
    EnrollmentTaxAuthority["Sd"] = "SD";
    EnrollmentTaxAuthority["Tn"] = "TN";
    EnrollmentTaxAuthority["Tx"] = "TX";
    EnrollmentTaxAuthority["Ut"] = "UT";
    EnrollmentTaxAuthority["Vt"] = "VT";
    EnrollmentTaxAuthority["Va"] = "VA";
    EnrollmentTaxAuthority["Wa"] = "WA";
    EnrollmentTaxAuthority["Wv"] = "WV";
    EnrollmentTaxAuthority["Wi"] = "WI";
    EnrollmentTaxAuthority["Wy"] = "WY";
    EnrollmentTaxAuthority["Irs"] = "IRS";
})(EnrollmentTaxAuthority || (EnrollmentTaxAuthority = {}));
/**
 * A designation used by the custodian to determine how much federal income tax should be withheld from the proceeds of a sale
 */
export var EnrollmentWithholdingType;
(function (EnrollmentWithholdingType) {
    EnrollmentWithholdingType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    EnrollmentWithholdingType["Backup"] = "BACKUP";
    EnrollmentWithholdingType["BackupProceeds"] = "BACKUP_PROCEEDS";
    EnrollmentWithholdingType["BackupDividendsAndInterest"] = "BACKUP_DIVIDENDS_AND_INTEREST";
    EnrollmentWithholdingType["Ira"] = "IRA";
})(EnrollmentWithholdingType || (EnrollmentWithholdingType = {}));
/**
 * Requested options level
 */
export var EnrollmentOptionsLevel;
(function (EnrollmentOptionsLevel) {
    EnrollmentOptionsLevel["OptionsLevelUnspecified"] = "OPTIONS_LEVEL_UNSPECIFIED";
    EnrollmentOptionsLevel["OptionsLevel2LongOptions"] = "OPTIONS_LEVEL_2_LONG_OPTIONS";
})(EnrollmentOptionsLevel || (EnrollmentOptionsLevel = {}));
/**
 * Indicates where in the enrollment is in the process; May be `PENDING_AGREEMENT`, `ACTIVE`, `INACTIVE`, `PROCESSING`, or `EXPIRED`
 */
export var EnrollmentState;
(function (EnrollmentState) {
    EnrollmentState["EnrollmentStateUnspecified"] = "ENROLLMENT_STATE_UNSPECIFIED";
    EnrollmentState["Active"] = "ACTIVE";
    EnrollmentState["Inactive"] = "INACTIVE";
    EnrollmentState["PendingAgreement"] = "PENDING_AGREEMENT";
    EnrollmentState["Processing"] = "PROCESSING";
    EnrollmentState["Expired"] = "EXPIRED";
})(EnrollmentState || (EnrollmentState = {}));
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export var EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan;
(function (EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan) {
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan["AutoEnrollDividendReinvestmentUnspecified"] = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED";
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentEnroll"] = "DIVIDEND_REINVESTMENT_ENROLL";
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan["DividendReinvestmentDecline"] = "DIVIDEND_REINVESTMENT_DECLINE";
})(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan || (EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan = {}));
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export var EnrollmentTrustEnrollmentMetadataFdicCashSweep;
(function (EnrollmentTrustEnrollmentMetadataFdicCashSweep) {
    EnrollmentTrustEnrollmentMetadataFdicCashSweep["AutoEnrollFdicCashSweepUnspecified"] = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED";
    EnrollmentTrustEnrollmentMetadataFdicCashSweep["FdicCashSweepEnroll"] = "FDIC_CASH_SWEEP_ENROLL";
    EnrollmentTrustEnrollmentMetadataFdicCashSweep["FdicCashSweepDecline"] = "FDIC_CASH_SWEEP_DECLINE";
})(EnrollmentTrustEnrollmentMetadataFdicCashSweep || (EnrollmentTrustEnrollmentMetadataFdicCashSweep = {}));
/**
 * Trust account is opened on behalf of
 */
export var EnrollmentOpenedOnBehalfOf;
(function (EnrollmentOpenedOnBehalfOf) {
    EnrollmentOpenedOnBehalfOf["OpenedOnBehalfOfUnspecified"] = "OPENED_ON_BEHALF_OF_UNSPECIFIED";
    EnrollmentOpenedOnBehalfOf["PersonalTrust"] = "PERSONAL_TRUST";
    EnrollmentOpenedOnBehalfOf["BusinessTrust"] = "BUSINESS_TRUST";
    EnrollmentOpenedOnBehalfOf["ThirdPartyAdministrator"] = "THIRD_PARTY_ADMINISTRATOR";
})(EnrollmentOpenedOnBehalfOf || (EnrollmentOpenedOnBehalfOf = {}));
/**
 * Describes the name of the enrollment; Expressed as an enum
 */
export var EnrollmentType1;
(function (EnrollmentType1) {
    EnrollmentType1["EnrollmentTypeUnspecified"] = "ENROLLMENT_TYPE_UNSPECIFIED";
    EnrollmentType1["RegistrationIndividual"] = "REGISTRATION_INDIVIDUAL";
    EnrollmentType1["LendingFullyPaidStockLoan"] = "LENDING_FULLY_PAID_STOCK_LOAN";
    EnrollmentType1["BeneficiaryDesignation"] = "BENEFICIARY_DESIGNATION";
    EnrollmentType1["RegistrationJointWros"] = "REGISTRATION_JOINT_WROS";
    EnrollmentType1["RegistrationJointTic"] = "REGISTRATION_JOINT_TIC";
    EnrollmentType1["RegistrationJointTbe"] = "REGISTRATION_JOINT_TBE";
    EnrollmentType1["RegistrationJointCp"] = "REGISTRATION_JOINT_CP";
    EnrollmentType1["RegistrationEstate"] = "REGISTRATION_ESTATE";
    EnrollmentType1["RegistrationIraTraditional"] = "REGISTRATION_IRA_TRADITIONAL";
    EnrollmentType1["RegistrationIraSimple"] = "REGISTRATION_IRA_SIMPLE";
    EnrollmentType1["RegistrationIraSep"] = "REGISTRATION_IRA_SEP";
    EnrollmentType1["RegistrationIraRoth"] = "REGISTRATION_IRA_ROTH";
    EnrollmentType1["RegistrationIraRollover"] = "REGISTRATION_IRA_ROLLOVER";
    EnrollmentType1["RegistrationTrust"] = "REGISTRATION_TRUST";
    EnrollmentType1["RegistrationCorporation"] = "REGISTRATION_CORPORATION";
    EnrollmentType1["RegistrationLlc"] = "REGISTRATION_LLC";
    EnrollmentType1["CashFdicCashSweep"] = "CASH_FDIC_CASH_SWEEP";
    EnrollmentType1["RetirementBeneficiaryDesignation"] = "RETIREMENT_BENEFICIARY_DESIGNATION";
    EnrollmentType1["DividendReinvestmentPlan"] = "DIVIDEND_REINVESTMENT_PLAN";
    EnrollmentType1["RegistrationIraBeneficiaryTraditional"] = "REGISTRATION_IRA_BENEFICIARY_TRADITIONAL";
    EnrollmentType1["RegistrationIraBeneficiaryRoth"] = "REGISTRATION_IRA_BENEFICIARY_ROTH";
    EnrollmentType1["RegistrationIndividualForeign"] = "REGISTRATION_INDIVIDUAL_FOREIGN";
    EnrollmentType1["RegistrationCustodial"] = "REGISTRATION_CUSTODIAL";
    EnrollmentType1["VirtualAccountNumber"] = "VIRTUAL_ACCOUNT_NUMBER";
})(EnrollmentType1 || (EnrollmentType1 = {}));
/** @internal */
export const BeneficiaryEnrollmentMetadata$inboundSchema = z.object({
    contingent_beneficiaries: z.array(Beneficiary$inboundSchema).optional(),
    primary_beneficiaries: z.array(Beneficiary$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "contingent_beneficiaries": "contingentBeneficiaries",
        "primary_beneficiaries": "primaryBeneficiaries",
    });
});
/** @internal */
export const BeneficiaryEnrollmentMetadata$outboundSchema = z.object({
    contingentBeneficiaries: z.array(Beneficiary$outboundSchema).optional(),
    primaryBeneficiaries: z.array(Beneficiary$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        contingentBeneficiaries: "contingent_beneficiaries",
        primaryBeneficiaries: "primary_beneficiaries",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BeneficiaryEnrollmentMetadata$;
(function (BeneficiaryEnrollmentMetadata$) {
    /** @deprecated use `BeneficiaryEnrollmentMetadata$inboundSchema` instead. */
    BeneficiaryEnrollmentMetadata$.inboundSchema = BeneficiaryEnrollmentMetadata$inboundSchema;
    /** @deprecated use `BeneficiaryEnrollmentMetadata$outboundSchema` instead. */
    BeneficiaryEnrollmentMetadata$.outboundSchema = BeneficiaryEnrollmentMetadata$outboundSchema;
})(BeneficiaryEnrollmentMetadata$ || (BeneficiaryEnrollmentMetadata$ = {}));
export function beneficiaryEnrollmentMetadataToJSON(beneficiaryEnrollmentMetadata) {
    return JSON.stringify(BeneficiaryEnrollmentMetadata$outboundSchema.parse(beneficiaryEnrollmentMetadata));
}
export function beneficiaryEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BeneficiaryEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BeneficiaryEnrollmentMetadata' from JSON`);
}
/** @internal */
export const ConsentMethod$inboundSchema = z
    .union([
    z.nativeEnum(ConsentMethod),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ConsentMethod$outboundSchema = z.union([
    z.nativeEnum(ConsentMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConsentMethod$;
(function (ConsentMethod$) {
    /** @deprecated use `ConsentMethod$inboundSchema` instead. */
    ConsentMethod$.inboundSchema = ConsentMethod$inboundSchema;
    /** @deprecated use `ConsentMethod$outboundSchema` instead. */
    ConsentMethod$.outboundSchema = ConsentMethod$outboundSchema;
})(ConsentMethod$ || (ConsentMethod$ = {}));
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const InitialDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const InitialDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InitialDepositAmount$;
(function (InitialDepositAmount$) {
    /** @deprecated use `InitialDepositAmount$inboundSchema` instead. */
    InitialDepositAmount$.inboundSchema = InitialDepositAmount$inboundSchema;
    /** @deprecated use `InitialDepositAmount$outboundSchema` instead. */
    InitialDepositAmount$.outboundSchema = InitialDepositAmount$outboundSchema;
})(InitialDepositAmount$ || (InitialDepositAmount$ = {}));
export function initialDepositAmountToJSON(initialDepositAmount) {
    return JSON.stringify(InitialDepositAmount$outboundSchema.parse(initialDepositAmount));
}
export function initialDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InitialDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InitialDepositAmount' from JSON`);
}
/** @internal */
export const DepositedFunds$inboundSchema = z.object({
    initial_deposit_amount: z.nullable(z.lazy(() => InitialDepositAmount$inboundSchema)).optional(),
    initial_deposit_source: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "initial_deposit_amount": "initialDepositAmount",
        "initial_deposit_source": "initialDepositSource",
    });
});
/** @internal */
export const DepositedFunds$outboundSchema = z.object({
    initialDepositAmount: z.nullable(z.lazy(() => InitialDepositAmount$outboundSchema)).optional(),
    initialDepositSource: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        initialDepositAmount: "initial_deposit_amount",
        initialDepositSource: "initial_deposit_source",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DepositedFunds$;
(function (DepositedFunds$) {
    /** @deprecated use `DepositedFunds$inboundSchema` instead. */
    DepositedFunds$.inboundSchema = DepositedFunds$inboundSchema;
    /** @deprecated use `DepositedFunds$outboundSchema` instead. */
    DepositedFunds$.outboundSchema = DepositedFunds$outboundSchema;
})(DepositedFunds$ || (DepositedFunds$ = {}));
export function depositedFundsToJSON(depositedFunds) {
    return JSON.stringify(DepositedFunds$outboundSchema.parse(depositedFunds));
}
export function depositedFundsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DepositedFunds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DepositedFunds' from JSON`);
}
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$;
(function (EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$) {
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$.inboundSchema = EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema;
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$.outboundSchema = EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema;
})(EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$ || (EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$ = {}));
/** @internal */
export const OtherAccounts$inboundSchema = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_names": "accountNames",
        "account_numbers": "accountNumbers",
        "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
});
/** @internal */
export const OtherAccounts$outboundSchema = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNames: "account_names",
        accountNumbers: "account_numbers",
        ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OtherAccounts$;
(function (OtherAccounts$) {
    /** @deprecated use `OtherAccounts$inboundSchema` instead. */
    OtherAccounts$.inboundSchema = OtherAccounts$inboundSchema;
    /** @deprecated use `OtherAccounts$outboundSchema` instead. */
    OtherAccounts$.outboundSchema = OtherAccounts$outboundSchema;
})(OtherAccounts$ || (OtherAccounts$ = {}));
export function otherAccountsToJSON(otherAccounts) {
    return JSON.stringify(OtherAccounts$outboundSchema.parse(otherAccounts));
}
export function otherAccountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OtherAccounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OtherAccounts' from JSON`);
}
/** @internal */
export const FinancialProfile$inboundSchema = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(z.lazy(() => OtherAccounts$inboundSchema))
        .optional(),
    primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "banking_relationships": "bankingRelationships",
        "other_accounts": "otherAccounts",
        "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
});
/** @internal */
export const FinancialProfile$outboundSchema = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(z.lazy(() => OtherAccounts$outboundSchema))
        .optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        bankingRelationships: "banking_relationships",
        otherAccounts: "other_accounts",
        primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FinancialProfile$;
(function (FinancialProfile$) {
    /** @deprecated use `FinancialProfile$inboundSchema` instead. */
    FinancialProfile$.inboundSchema = FinancialProfile$inboundSchema;
    /** @deprecated use `FinancialProfile$outboundSchema` instead. */
    FinancialProfile$.outboundSchema = FinancialProfile$outboundSchema;
})(FinancialProfile$ || (FinancialProfile$ = {}));
export function financialProfileToJSON(financialProfile) {
    return JSON.stringify(FinancialProfile$outboundSchema.parse(financialProfile));
}
export function financialProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FinancialProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FinancialProfile' from JSON`);
}
/** @internal */
export const ForeignBondTradingDetails$inboundSchema = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading": "foreignBondTrading",
        "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
});
/** @internal */
export const ForeignBondTradingDetails$outboundSchema = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTrading: "foreign_bond_trading",
        foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignBondTradingDetails$;
(function (ForeignBondTradingDetails$) {
    /** @deprecated use `ForeignBondTradingDetails$inboundSchema` instead. */
    ForeignBondTradingDetails$.inboundSchema = ForeignBondTradingDetails$inboundSchema;
    /** @deprecated use `ForeignBondTradingDetails$outboundSchema` instead. */
    ForeignBondTradingDetails$.outboundSchema = ForeignBondTradingDetails$outboundSchema;
})(ForeignBondTradingDetails$ || (ForeignBondTradingDetails$ = {}));
export function foreignBondTradingDetailsToJSON(foreignBondTradingDetails) {
    return JSON.stringify(ForeignBondTradingDetails$outboundSchema.parse(foreignBondTradingDetails));
}
export function foreignBondTradingDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignBondTradingDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignBondTradingDetails' from JSON`);
}
/** @internal */
export const LowPricedSecuritiesPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const LowPricedSecuritiesPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LowPricedSecuritiesPercentage$;
(function (LowPricedSecuritiesPercentage$) {
    /** @deprecated use `LowPricedSecuritiesPercentage$inboundSchema` instead. */
    LowPricedSecuritiesPercentage$.inboundSchema = LowPricedSecuritiesPercentage$inboundSchema;
    /** @deprecated use `LowPricedSecuritiesPercentage$outboundSchema` instead. */
    LowPricedSecuritiesPercentage$.outboundSchema = LowPricedSecuritiesPercentage$outboundSchema;
})(LowPricedSecuritiesPercentage$ || (LowPricedSecuritiesPercentage$ = {}));
export function lowPricedSecuritiesPercentageToJSON(lowPricedSecuritiesPercentage) {
    return JSON.stringify(LowPricedSecuritiesPercentage$outboundSchema.parse(lowPricedSecuritiesPercentage));
}
export function lowPricedSecuritiesPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LowPricedSecuritiesPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LowPricedSecuritiesPercentage' from JSON`);
}
/** @internal */
export const LowPricedSecurities$inboundSchema = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(z.lazy(() => LowPricedSecuritiesPercentage$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "low_priced_securities": "lowPricedSecurities",
        "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
});
/** @internal */
export const LowPricedSecurities$outboundSchema = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(z.lazy(() => LowPricedSecuritiesPercentage$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        lowPricedSecurities: "low_priced_securities",
        lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LowPricedSecurities$;
(function (LowPricedSecurities$) {
    /** @deprecated use `LowPricedSecurities$inboundSchema` instead. */
    LowPricedSecurities$.inboundSchema = LowPricedSecurities$inboundSchema;
    /** @deprecated use `LowPricedSecurities$outboundSchema` instead. */
    LowPricedSecurities$.outboundSchema = LowPricedSecurities$outboundSchema;
})(LowPricedSecurities$ || (LowPricedSecurities$ = {}));
export function lowPricedSecuritiesToJSON(lowPricedSecurities) {
    return JSON.stringify(LowPricedSecurities$outboundSchema.parse(lowPricedSecurities));
}
export function lowPricedSecuritiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LowPricedSecurities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LowPricedSecurities' from JSON`);
}
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$;
(function (EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$) {
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$.inboundSchema = EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$.outboundSchema = EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
})(EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$ || (EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$ = {}));
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$;
(function (EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$) {
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$.inboundSchema = EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema;
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$.outboundSchema = EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema;
})(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$ || (EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$ = {}));
/** @internal */
export const PlannedActivity$inboundSchema = z.object({
    foreign_bond_trading_details: z.nullable(z.lazy(() => ForeignBondTradingDetails$inboundSchema)).optional(),
    low_priced_securities: z.nullable(z.lazy(() => LowPricedSecurities$inboundSchema)).optional(),
    primary_account_activity_type: EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
        .optional(),
    withdrawal_frequency: EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading_details": "foreignBondTradingDetails",
        "low_priced_securities": "lowPricedSecurities",
        "primary_account_activity_type": "primaryAccountActivityType",
        "withdrawal_frequency": "withdrawalFrequency",
    });
});
/** @internal */
export const PlannedActivity$outboundSchema = z.object({
    foreignBondTradingDetails: z.nullable(z.lazy(() => ForeignBondTradingDetails$outboundSchema)).optional(),
    lowPricedSecurities: z.nullable(z.lazy(() => LowPricedSecurities$outboundSchema)).optional(),
    primaryAccountActivityType: EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
        .optional(),
    withdrawalFrequency: EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTradingDetails: "foreign_bond_trading_details",
        lowPricedSecurities: "low_priced_securities",
        primaryAccountActivityType: "primary_account_activity_type",
        withdrawalFrequency: "withdrawal_frequency",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PlannedActivity$;
(function (PlannedActivity$) {
    /** @deprecated use `PlannedActivity$inboundSchema` instead. */
    PlannedActivity$.inboundSchema = PlannedActivity$inboundSchema;
    /** @deprecated use `PlannedActivity$outboundSchema` instead. */
    PlannedActivity$.outboundSchema = PlannedActivity$outboundSchema;
})(PlannedActivity$ || (PlannedActivity$ = {}));
export function plannedActivityToJSON(plannedActivity) {
    return JSON.stringify(PlannedActivity$outboundSchema.parse(plannedActivity));
}
export function plannedActivityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PlannedActivity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PlannedActivity' from JSON`);
}
/** @internal */
export const RelatedPepDetails$inboundSchema = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
        "related_peps": "relatedPeps",
    });
});
/** @internal */
export const RelatedPepDetails$outboundSchema = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
        relatedPeps: "related_peps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RelatedPepDetails$;
(function (RelatedPepDetails$) {
    /** @deprecated use `RelatedPepDetails$inboundSchema` instead. */
    RelatedPepDetails$.inboundSchema = RelatedPepDetails$inboundSchema;
    /** @deprecated use `RelatedPepDetails$outboundSchema` instead. */
    RelatedPepDetails$.outboundSchema = RelatedPepDetails$outboundSchema;
})(RelatedPepDetails$ || (RelatedPepDetails$ = {}));
export function relatedPepDetailsToJSON(relatedPepDetails) {
    return JSON.stringify(RelatedPepDetails$outboundSchema.parse(relatedPepDetails));
}
export function relatedPepDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RelatedPepDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RelatedPepDetails' from JSON`);
}
/** @internal */
export const EddAccountEnrollmentMetadata$inboundSchema = z.object({
    deposited_funds: z.nullable(z.lazy(() => DepositedFunds$inboundSchema))
        .optional(),
    determined_account_risk_rating: EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema
        .optional(),
    financial_profile: z.nullable(z.lazy(() => FinancialProfile$inboundSchema))
        .optional(),
    planned_activity: z.nullable(z.lazy(() => PlannedActivity$inboundSchema))
        .optional(),
    related_pep_details: z.nullable(z.lazy(() => RelatedPepDetails$inboundSchema))
        .optional(),
    scope_of_business: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "deposited_funds": "depositedFunds",
        "determined_account_risk_rating": "determinedAccountRiskRating",
        "financial_profile": "financialProfile",
        "planned_activity": "plannedActivity",
        "related_pep_details": "relatedPepDetails",
        "scope_of_business": "scopeOfBusiness",
    });
});
/** @internal */
export const EddAccountEnrollmentMetadata$outboundSchema = z.object({
    depositedFunds: z.nullable(z.lazy(() => DepositedFunds$outboundSchema))
        .optional(),
    determinedAccountRiskRating: EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema
        .optional(),
    financialProfile: z.nullable(z.lazy(() => FinancialProfile$outboundSchema))
        .optional(),
    plannedActivity: z.nullable(z.lazy(() => PlannedActivity$outboundSchema))
        .optional(),
    relatedPepDetails: z.nullable(z.lazy(() => RelatedPepDetails$outboundSchema))
        .optional(),
    scopeOfBusiness: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        depositedFunds: "deposited_funds",
        determinedAccountRiskRating: "determined_account_risk_rating",
        financialProfile: "financial_profile",
        plannedActivity: "planned_activity",
        relatedPepDetails: "related_pep_details",
        scopeOfBusiness: "scope_of_business",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EddAccountEnrollmentMetadata$;
(function (EddAccountEnrollmentMetadata$) {
    /** @deprecated use `EddAccountEnrollmentMetadata$inboundSchema` instead. */
    EddAccountEnrollmentMetadata$.inboundSchema = EddAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `EddAccountEnrollmentMetadata$outboundSchema` instead. */
    EddAccountEnrollmentMetadata$.outboundSchema = EddAccountEnrollmentMetadata$outboundSchema;
})(EddAccountEnrollmentMetadata$ || (EddAccountEnrollmentMetadata$ = {}));
export function eddAccountEnrollmentMetadataToJSON(eddAccountEnrollmentMetadata) {
    return JSON.stringify(EddAccountEnrollmentMetadata$outboundSchema.parse(eddAccountEnrollmentMetadata));
}
export function eddAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EddAccountEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EddAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentCorporationEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentCorporationEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentCorporationEnrollmentMetadataFdicCashSweep$ || (EnrollmentCorporationEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const CorporationEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    edd_account_enrollment_metadata: z.nullable(z.lazy(() => EddAccountEnrollmentMetadata$inboundSchema)).optional(),
    fdic_cash_sweep: EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "edd_account_enrollment_metadata": "eddAccountEnrollmentMetadata",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const CorporationEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    eddAccountEnrollmentMetadata: z.nullable(z.lazy(() => EddAccountEnrollmentMetadata$outboundSchema)).optional(),
    fdicCashSweep: EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        eddAccountEnrollmentMetadata: "edd_account_enrollment_metadata",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CorporationEnrollmentMetadata$;
(function (CorporationEnrollmentMetadata$) {
    /** @deprecated use `CorporationEnrollmentMetadata$inboundSchema` instead. */
    CorporationEnrollmentMetadata$.inboundSchema = CorporationEnrollmentMetadata$inboundSchema;
    /** @deprecated use `CorporationEnrollmentMetadata$outboundSchema` instead. */
    CorporationEnrollmentMetadata$.outboundSchema = CorporationEnrollmentMetadata$outboundSchema;
})(CorporationEnrollmentMetadata$ || (CorporationEnrollmentMetadata$ = {}));
export function corporationEnrollmentMetadataToJSON(corporationEnrollmentMetadata) {
    return JSON.stringify(CorporationEnrollmentMetadata$outboundSchema.parse(corporationEnrollmentMetadata));
}
export function corporationEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CorporationEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CorporationEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentDividendReinvestmentPlan$;
(function (EnrollmentDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentDividendReinvestmentPlan$.inboundSchema = EnrollmentDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentDividendReinvestmentPlan$.outboundSchema = EnrollmentDividendReinvestmentPlan$outboundSchema;
})(EnrollmentDividendReinvestmentPlan$ || (EnrollmentDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentFdicCashSweep$;
(function (EnrollmentFdicCashSweep$) {
    /** @deprecated use `EnrollmentFdicCashSweep$inboundSchema` instead. */
    EnrollmentFdicCashSweep$.inboundSchema = EnrollmentFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentFdicCashSweep$outboundSchema` instead. */
    EnrollmentFdicCashSweep$.outboundSchema = EnrollmentFdicCashSweep$outboundSchema;
})(EnrollmentFdicCashSweep$ || (EnrollmentFdicCashSweep$ = {}));
/** @internal */
export const CustodialEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const CustodialEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentFdicCashSweep$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustodialEnrollmentMetadata$;
(function (CustodialEnrollmentMetadata$) {
    /** @deprecated use `CustodialEnrollmentMetadata$inboundSchema` instead. */
    CustodialEnrollmentMetadata$.inboundSchema = CustodialEnrollmentMetadata$inboundSchema;
    /** @deprecated use `CustodialEnrollmentMetadata$outboundSchema` instead. */
    CustodialEnrollmentMetadata$.outboundSchema = CustodialEnrollmentMetadata$outboundSchema;
})(CustodialEnrollmentMetadata$ || (CustodialEnrollmentMetadata$ = {}));
export function custodialEnrollmentMetadataToJSON(custodialEnrollmentMetadata) {
    return JSON.stringify(CustodialEnrollmentMetadata$outboundSchema.parse(custodialEnrollmentMetadata));
}
export function custodialEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustodialEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustodialEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EstateEnrollmentMetadata$inboundSchema = z.object({
    certificate_of_appointment_document_id: z.string().optional(),
    dividend_reinvestment_plan: EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "certificate_of_appointment_document_id": "certificateOfAppointmentDocumentId",
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    });
});
/** @internal */
export const EstateEnrollmentMetadata$outboundSchema = z.object({
    certificateOfAppointmentDocumentId: z.string().optional(),
    dividendReinvestmentPlan: EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        certificateOfAppointmentDocumentId: "certificate_of_appointment_document_id",
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EstateEnrollmentMetadata$;
(function (EstateEnrollmentMetadata$) {
    /** @deprecated use `EstateEnrollmentMetadata$inboundSchema` instead. */
    EstateEnrollmentMetadata$.inboundSchema = EstateEnrollmentMetadata$inboundSchema;
    /** @deprecated use `EstateEnrollmentMetadata$outboundSchema` instead. */
    EstateEnrollmentMetadata$.outboundSchema = EstateEnrollmentMetadata$outboundSchema;
})(EstateEnrollmentMetadata$ || (EstateEnrollmentMetadata$ = {}));
export function estateEnrollmentMetadataToJSON(estateEnrollmentMetadata) {
    return JSON.stringify(EstateEnrollmentMetadata$outboundSchema.parse(estateEnrollmentMetadata));
}
export function estateEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EstateEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EstateEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$ || (EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const EnrollmentInitialDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentInitialDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentInitialDepositAmount$;
(function (EnrollmentInitialDepositAmount$) {
    /** @deprecated use `EnrollmentInitialDepositAmount$inboundSchema` instead. */
    EnrollmentInitialDepositAmount$.inboundSchema = EnrollmentInitialDepositAmount$inboundSchema;
    /** @deprecated use `EnrollmentInitialDepositAmount$outboundSchema` instead. */
    EnrollmentInitialDepositAmount$.outboundSchema = EnrollmentInitialDepositAmount$outboundSchema;
})(EnrollmentInitialDepositAmount$ || (EnrollmentInitialDepositAmount$ = {}));
export function enrollmentInitialDepositAmountToJSON(enrollmentInitialDepositAmount) {
    return JSON.stringify(EnrollmentInitialDepositAmount$outboundSchema.parse(enrollmentInitialDepositAmount));
}
export function enrollmentInitialDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentInitialDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentInitialDepositAmount' from JSON`);
}
/** @internal */
export const EnrollmentDepositedFunds$inboundSchema = z.object({
    initial_deposit_amount: z.nullable(z.lazy(() => EnrollmentInitialDepositAmount$inboundSchema)).optional(),
    initial_deposit_source: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "initial_deposit_amount": "initialDepositAmount",
        "initial_deposit_source": "initialDepositSource",
    });
});
/** @internal */
export const EnrollmentDepositedFunds$outboundSchema = z.object({
    initialDepositAmount: z.nullable(z.lazy(() => EnrollmentInitialDepositAmount$outboundSchema)).optional(),
    initialDepositSource: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        initialDepositAmount: "initial_deposit_amount",
        initialDepositSource: "initial_deposit_source",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentDepositedFunds$;
(function (EnrollmentDepositedFunds$) {
    /** @deprecated use `EnrollmentDepositedFunds$inboundSchema` instead. */
    EnrollmentDepositedFunds$.inboundSchema = EnrollmentDepositedFunds$inboundSchema;
    /** @deprecated use `EnrollmentDepositedFunds$outboundSchema` instead. */
    EnrollmentDepositedFunds$.outboundSchema = EnrollmentDepositedFunds$outboundSchema;
})(EnrollmentDepositedFunds$ || (EnrollmentDepositedFunds$ = {}));
export function enrollmentDepositedFundsToJSON(enrollmentDepositedFunds) {
    return JSON.stringify(EnrollmentDepositedFunds$outboundSchema.parse(enrollmentDepositedFunds));
}
export function enrollmentDepositedFundsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentDepositedFunds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentDepositedFunds' from JSON`);
}
/** @internal */
export const EnrollmentOtherAccounts$inboundSchema = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_names": "accountNames",
        "account_numbers": "accountNumbers",
        "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
});
/** @internal */
export const EnrollmentOtherAccounts$outboundSchema = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNames: "account_names",
        accountNumbers: "account_numbers",
        ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentOtherAccounts$;
(function (EnrollmentOtherAccounts$) {
    /** @deprecated use `EnrollmentOtherAccounts$inboundSchema` instead. */
    EnrollmentOtherAccounts$.inboundSchema = EnrollmentOtherAccounts$inboundSchema;
    /** @deprecated use `EnrollmentOtherAccounts$outboundSchema` instead. */
    EnrollmentOtherAccounts$.outboundSchema = EnrollmentOtherAccounts$outboundSchema;
})(EnrollmentOtherAccounts$ || (EnrollmentOtherAccounts$ = {}));
export function enrollmentOtherAccountsToJSON(enrollmentOtherAccounts) {
    return JSON.stringify(EnrollmentOtherAccounts$outboundSchema.parse(enrollmentOtherAccounts));
}
export function enrollmentOtherAccountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentOtherAccounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentOtherAccounts' from JSON`);
}
/** @internal */
export const EnrollmentFinancialProfile$inboundSchema = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(z.lazy(() => EnrollmentOtherAccounts$inboundSchema)).optional(),
    primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "banking_relationships": "bankingRelationships",
        "other_accounts": "otherAccounts",
        "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
});
/** @internal */
export const EnrollmentFinancialProfile$outboundSchema = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(z.lazy(() => EnrollmentOtherAccounts$outboundSchema)).optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        bankingRelationships: "banking_relationships",
        otherAccounts: "other_accounts",
        primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentFinancialProfile$;
(function (EnrollmentFinancialProfile$) {
    /** @deprecated use `EnrollmentFinancialProfile$inboundSchema` instead. */
    EnrollmentFinancialProfile$.inboundSchema = EnrollmentFinancialProfile$inboundSchema;
    /** @deprecated use `EnrollmentFinancialProfile$outboundSchema` instead. */
    EnrollmentFinancialProfile$.outboundSchema = EnrollmentFinancialProfile$outboundSchema;
})(EnrollmentFinancialProfile$ || (EnrollmentFinancialProfile$ = {}));
export function enrollmentFinancialProfileToJSON(enrollmentFinancialProfile) {
    return JSON.stringify(EnrollmentFinancialProfile$outboundSchema.parse(enrollmentFinancialProfile));
}
export function enrollmentFinancialProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentFinancialProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentFinancialProfile' from JSON`);
}
/** @internal */
export const EnrollmentForeignBondTradingDetails$inboundSchema = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading": "foreignBondTrading",
        "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
});
/** @internal */
export const EnrollmentForeignBondTradingDetails$outboundSchema = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTrading: "foreign_bond_trading",
        foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignBondTradingDetails$;
(function (EnrollmentForeignBondTradingDetails$) {
    /** @deprecated use `EnrollmentForeignBondTradingDetails$inboundSchema` instead. */
    EnrollmentForeignBondTradingDetails$.inboundSchema = EnrollmentForeignBondTradingDetails$inboundSchema;
    /** @deprecated use `EnrollmentForeignBondTradingDetails$outboundSchema` instead. */
    EnrollmentForeignBondTradingDetails$.outboundSchema = EnrollmentForeignBondTradingDetails$outboundSchema;
})(EnrollmentForeignBondTradingDetails$ || (EnrollmentForeignBondTradingDetails$ = {}));
export function enrollmentForeignBondTradingDetailsToJSON(enrollmentForeignBondTradingDetails) {
    return JSON.stringify(EnrollmentForeignBondTradingDetails$outboundSchema.parse(enrollmentForeignBondTradingDetails));
}
export function enrollmentForeignBondTradingDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignBondTradingDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignBondTradingDetails' from JSON`);
}
/** @internal */
export const EnrollmentLowPricedSecuritiesPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentLowPricedSecuritiesPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLowPricedSecuritiesPercentage$;
(function (EnrollmentLowPricedSecuritiesPercentage$) {
    /** @deprecated use `EnrollmentLowPricedSecuritiesPercentage$inboundSchema` instead. */
    EnrollmentLowPricedSecuritiesPercentage$.inboundSchema = EnrollmentLowPricedSecuritiesPercentage$inboundSchema;
    /** @deprecated use `EnrollmentLowPricedSecuritiesPercentage$outboundSchema` instead. */
    EnrollmentLowPricedSecuritiesPercentage$.outboundSchema = EnrollmentLowPricedSecuritiesPercentage$outboundSchema;
})(EnrollmentLowPricedSecuritiesPercentage$ || (EnrollmentLowPricedSecuritiesPercentage$ = {}));
export function enrollmentLowPricedSecuritiesPercentageToJSON(enrollmentLowPricedSecuritiesPercentage) {
    return JSON.stringify(EnrollmentLowPricedSecuritiesPercentage$outboundSchema.parse(enrollmentLowPricedSecuritiesPercentage));
}
export function enrollmentLowPricedSecuritiesPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLowPricedSecuritiesPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLowPricedSecuritiesPercentage' from JSON`);
}
/** @internal */
export const EnrollmentLowPricedSecurities$inboundSchema = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(z.lazy(() => EnrollmentLowPricedSecuritiesPercentage$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "low_priced_securities": "lowPricedSecurities",
        "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
});
/** @internal */
export const EnrollmentLowPricedSecurities$outboundSchema = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(z.lazy(() => EnrollmentLowPricedSecuritiesPercentage$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        lowPricedSecurities: "low_priced_securities",
        lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLowPricedSecurities$;
(function (EnrollmentLowPricedSecurities$) {
    /** @deprecated use `EnrollmentLowPricedSecurities$inboundSchema` instead. */
    EnrollmentLowPricedSecurities$.inboundSchema = EnrollmentLowPricedSecurities$inboundSchema;
    /** @deprecated use `EnrollmentLowPricedSecurities$outboundSchema` instead. */
    EnrollmentLowPricedSecurities$.outboundSchema = EnrollmentLowPricedSecurities$outboundSchema;
})(EnrollmentLowPricedSecurities$ || (EnrollmentLowPricedSecurities$ = {}));
export function enrollmentLowPricedSecuritiesToJSON(enrollmentLowPricedSecurities) {
    return JSON.stringify(EnrollmentLowPricedSecurities$outboundSchema.parse(enrollmentLowPricedSecurities));
}
export function enrollmentLowPricedSecuritiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLowPricedSecurities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLowPricedSecurities' from JSON`);
}
/** @internal */
export const EnrollmentPrimaryAccountActivityType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentPrimaryAccountActivityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentPrimaryAccountActivityType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentPrimaryAccountActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentPrimaryAccountActivityType$;
(function (EnrollmentPrimaryAccountActivityType$) {
    /** @deprecated use `EnrollmentPrimaryAccountActivityType$inboundSchema` instead. */
    EnrollmentPrimaryAccountActivityType$.inboundSchema = EnrollmentPrimaryAccountActivityType$inboundSchema;
    /** @deprecated use `EnrollmentPrimaryAccountActivityType$outboundSchema` instead. */
    EnrollmentPrimaryAccountActivityType$.outboundSchema = EnrollmentPrimaryAccountActivityType$outboundSchema;
})(EnrollmentPrimaryAccountActivityType$ || (EnrollmentPrimaryAccountActivityType$ = {}));
/** @internal */
export const EnrollmentWithdrawalFrequency$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentWithdrawalFrequency),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentWithdrawalFrequency$outboundSchema = z.union([
    z.nativeEnum(EnrollmentWithdrawalFrequency),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentWithdrawalFrequency$;
(function (EnrollmentWithdrawalFrequency$) {
    /** @deprecated use `EnrollmentWithdrawalFrequency$inboundSchema` instead. */
    EnrollmentWithdrawalFrequency$.inboundSchema = EnrollmentWithdrawalFrequency$inboundSchema;
    /** @deprecated use `EnrollmentWithdrawalFrequency$outboundSchema` instead. */
    EnrollmentWithdrawalFrequency$.outboundSchema = EnrollmentWithdrawalFrequency$outboundSchema;
})(EnrollmentWithdrawalFrequency$ || (EnrollmentWithdrawalFrequency$ = {}));
/** @internal */
export const EnrollmentPlannedActivity$inboundSchema = z.object({
    foreign_bond_trading_details: z.nullable(z.lazy(() => EnrollmentForeignBondTradingDetails$inboundSchema)).optional(),
    low_priced_securities: z.nullable(z.lazy(() => EnrollmentLowPricedSecurities$inboundSchema)).optional(),
    primary_account_activity_type: EnrollmentPrimaryAccountActivityType$inboundSchema.optional(),
    withdrawal_frequency: EnrollmentWithdrawalFrequency$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading_details": "foreignBondTradingDetails",
        "low_priced_securities": "lowPricedSecurities",
        "primary_account_activity_type": "primaryAccountActivityType",
        "withdrawal_frequency": "withdrawalFrequency",
    });
});
/** @internal */
export const EnrollmentPlannedActivity$outboundSchema = z.object({
    foreignBondTradingDetails: z.nullable(z.lazy(() => EnrollmentForeignBondTradingDetails$outboundSchema)).optional(),
    lowPricedSecurities: z.nullable(z.lazy(() => EnrollmentLowPricedSecurities$outboundSchema)).optional(),
    primaryAccountActivityType: EnrollmentPrimaryAccountActivityType$outboundSchema.optional(),
    withdrawalFrequency: EnrollmentWithdrawalFrequency$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTradingDetails: "foreign_bond_trading_details",
        lowPricedSecurities: "low_priced_securities",
        primaryAccountActivityType: "primary_account_activity_type",
        withdrawalFrequency: "withdrawal_frequency",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentPlannedActivity$;
(function (EnrollmentPlannedActivity$) {
    /** @deprecated use `EnrollmentPlannedActivity$inboundSchema` instead. */
    EnrollmentPlannedActivity$.inboundSchema = EnrollmentPlannedActivity$inboundSchema;
    /** @deprecated use `EnrollmentPlannedActivity$outboundSchema` instead. */
    EnrollmentPlannedActivity$.outboundSchema = EnrollmentPlannedActivity$outboundSchema;
})(EnrollmentPlannedActivity$ || (EnrollmentPlannedActivity$ = {}));
export function enrollmentPlannedActivityToJSON(enrollmentPlannedActivity) {
    return JSON.stringify(EnrollmentPlannedActivity$outboundSchema.parse(enrollmentPlannedActivity));
}
export function enrollmentPlannedActivityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentPlannedActivity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentPlannedActivity' from JSON`);
}
/** @internal */
export const EnrollmentRelatedPepDetails$inboundSchema = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
        "related_peps": "relatedPeps",
    });
});
/** @internal */
export const EnrollmentRelatedPepDetails$outboundSchema = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
        relatedPeps: "related_peps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentRelatedPepDetails$;
(function (EnrollmentRelatedPepDetails$) {
    /** @deprecated use `EnrollmentRelatedPepDetails$inboundSchema` instead. */
    EnrollmentRelatedPepDetails$.inboundSchema = EnrollmentRelatedPepDetails$inboundSchema;
    /** @deprecated use `EnrollmentRelatedPepDetails$outboundSchema` instead. */
    EnrollmentRelatedPepDetails$.outboundSchema = EnrollmentRelatedPepDetails$outboundSchema;
})(EnrollmentRelatedPepDetails$ || (EnrollmentRelatedPepDetails$ = {}));
export function enrollmentRelatedPepDetailsToJSON(enrollmentRelatedPepDetails) {
    return JSON.stringify(EnrollmentRelatedPepDetails$outboundSchema.parse(enrollmentRelatedPepDetails));
}
export function enrollmentRelatedPepDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentRelatedPepDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentRelatedPepDetails' from JSON`);
}
/** @internal */
export const ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema = z.object({
    deposited_funds: z.nullable(z.lazy(() => EnrollmentDepositedFunds$inboundSchema)).optional(),
    financial_profile: z.nullable(z.lazy(() => EnrollmentFinancialProfile$inboundSchema)).optional(),
    planned_activity: z.nullable(z.lazy(() => EnrollmentPlannedActivity$inboundSchema)).optional(),
    related_pep_details: z.nullable(z.lazy(() => EnrollmentRelatedPepDetails$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "deposited_funds": "depositedFunds",
        "financial_profile": "financialProfile",
        "planned_activity": "plannedActivity",
        "related_pep_details": "relatedPepDetails",
    });
});
/** @internal */
export const ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema = z.object({
    depositedFunds: z.nullable(z.lazy(() => EnrollmentDepositedFunds$outboundSchema)).optional(),
    financialProfile: z.nullable(z.lazy(() => EnrollmentFinancialProfile$outboundSchema)).optional(),
    plannedActivity: z.nullable(z.lazy(() => EnrollmentPlannedActivity$outboundSchema)).optional(),
    relatedPepDetails: z.nullable(z.lazy(() => EnrollmentRelatedPepDetails$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        depositedFunds: "deposited_funds",
        financialProfile: "financial_profile",
        plannedActivity: "planned_activity",
        relatedPepDetails: "related_pep_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignNaturalPersonAccountEnrollmentMetadata$;
(function (ForeignNaturalPersonAccountEnrollmentMetadata$) {
    /** @deprecated use `ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema` instead. */
    ForeignNaturalPersonAccountEnrollmentMetadata$.inboundSchema = ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema` instead. */
    ForeignNaturalPersonAccountEnrollmentMetadata$.outboundSchema = ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema;
})(ForeignNaturalPersonAccountEnrollmentMetadata$ || (ForeignNaturalPersonAccountEnrollmentMetadata$ = {}));
export function foreignNaturalPersonAccountEnrollmentMetadataToJSON(foreignNaturalPersonAccountEnrollmentMetadata) {
    return JSON.stringify(ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema.parse(foreignNaturalPersonAccountEnrollmentMetadata));
}
export function foreignNaturalPersonAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignNaturalPersonAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const ForeignIndividualAccountEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    foreign_natural_person_account_enrollment_metadata: z.nullable(z.lazy(() => ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "foreign_natural_person_account_enrollment_metadata": "foreignNaturalPersonAccountEnrollmentMetadata",
    });
});
/** @internal */
export const ForeignIndividualAccountEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    foreignNaturalPersonAccountEnrollmentMetadata: z.nullable(z.lazy(() => ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        foreignNaturalPersonAccountEnrollmentMetadata: "foreign_natural_person_account_enrollment_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignIndividualAccountEnrollmentMetadata$;
(function (ForeignIndividualAccountEnrollmentMetadata$) {
    /** @deprecated use `ForeignIndividualAccountEnrollmentMetadata$inboundSchema` instead. */
    ForeignIndividualAccountEnrollmentMetadata$.inboundSchema = ForeignIndividualAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `ForeignIndividualAccountEnrollmentMetadata$outboundSchema` instead. */
    ForeignIndividualAccountEnrollmentMetadata$.outboundSchema = ForeignIndividualAccountEnrollmentMetadata$outboundSchema;
})(ForeignIndividualAccountEnrollmentMetadata$ || (ForeignIndividualAccountEnrollmentMetadata$ = {}));
export function foreignIndividualAccountEnrollmentMetadataToJSON(foreignIndividualAccountEnrollmentMetadata) {
    return JSON.stringify(ForeignIndividualAccountEnrollmentMetadata$outboundSchema.parse(foreignIndividualAccountEnrollmentMetadata));
}
export function foreignIndividualAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignIndividualAccountEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignIndividualAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$ || (EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$ || (EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmountToJSON(enrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount));
}
export function enrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema = z.object({
    initial_deposit_amount: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema)).optional(),
    initial_deposit_source: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "initial_deposit_amount": "initialDepositAmount",
        "initial_deposit_source": "initialDepositSource",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema = z.object({
    initialDepositAmount: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema)).optional(),
    initialDepositSource: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        initialDepositAmount: "initial_deposit_amount",
        initialDepositSource: "initial_deposit_source",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$ || (EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataDepositedFundsToJSON(enrollmentForeignJointAccountEnrollmentMetadataDepositedFunds) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataDepositedFunds));
}
export function enrollmentForeignJointAccountEnrollmentMetadataDepositedFundsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_names": "accountNames",
        "account_numbers": "accountNumbers",
        "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNames: "account_names",
        accountNumbers: "account_numbers",
        ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$ || (EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataOtherAccountsToJSON(enrollmentForeignJointAccountEnrollmentMetadataOtherAccounts) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataOtherAccounts));
}
export function enrollmentForeignJointAccountEnrollmentMetadataOtherAccountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema)).optional(),
    primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "banking_relationships": "bankingRelationships",
        "other_accounts": "otherAccounts",
        "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema)).optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        bankingRelationships: "banking_relationships",
        otherAccounts: "other_accounts",
        primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$ || (EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataFinancialProfileToJSON(enrollmentForeignJointAccountEnrollmentMetadataFinancialProfile) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataFinancialProfile));
}
export function enrollmentForeignJointAccountEnrollmentMetadataFinancialProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading": "foreignBondTrading",
        "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTrading: "foreign_bond_trading",
        foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$ || (EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetailsToJSON(enrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails));
}
export function enrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$ || (EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentageToJSON(enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage));
}
export function enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "low_priced_securities": "lowPricedSecurities",
        "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        lowPricedSecurities: "low_priced_securities",
        lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$ || (EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesToJSON(enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities));
}
export function enrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$ || (EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$ = {}));
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema = z.union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$ || (EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$ = {}));
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema = z.object({
    foreign_bond_trading_details: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema)).optional(),
    low_priced_securities: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema)).optional(),
    primary_account_activity_type: EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
        .optional(),
    withdrawal_frequency: EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading_details": "foreignBondTradingDetails",
        "low_priced_securities": "lowPricedSecurities",
        "primary_account_activity_type": "primaryAccountActivityType",
        "withdrawal_frequency": "withdrawalFrequency",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema = z.object({
    foreignBondTradingDetails: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema)).optional(),
    lowPricedSecurities: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema)).optional(),
    primaryAccountActivityType: EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
        .optional(),
    withdrawalFrequency: EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTradingDetails: "foreign_bond_trading_details",
        lowPricedSecurities: "low_priced_securities",
        primaryAccountActivityType: "primary_account_activity_type",
        withdrawalFrequency: "withdrawal_frequency",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$ || (EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataPlannedActivityToJSON(enrollmentForeignJointAccountEnrollmentMetadataPlannedActivity) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataPlannedActivity));
}
export function enrollmentForeignJointAccountEnrollmentMetadataPlannedActivityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity' from JSON`);
}
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
        "related_peps": "relatedPeps",
    });
});
/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
        relatedPeps: "related_peps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$;
(function (EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$) {
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$.inboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema;
    /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema` instead. */
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$.outboundSchema = EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema;
})(EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$ || (EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$ = {}));
export function enrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetailsToJSON(enrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails) {
    return JSON.stringify(EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema
        .parse(enrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails));
}
export function enrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails' from JSON`);
}
/** @internal */
export const EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema = z.object({
    deposited_funds: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema)).optional(),
    financial_profile: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema)).optional(),
    planned_activity: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema)).optional(),
    related_pep_details: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "deposited_funds": "depositedFunds",
        "financial_profile": "financialProfile",
        "planned_activity": "plannedActivity",
        "related_pep_details": "relatedPepDetails",
    });
});
/** @internal */
export const EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema = z.object({
    depositedFunds: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema)).optional(),
    financialProfile: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema)).optional(),
    plannedActivity: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema)).optional(),
    relatedPepDetails: z.nullable(z.lazy(() => EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        depositedFunds: "deposited_funds",
        financialProfile: "financial_profile",
        plannedActivity: "planned_activity",
        relatedPepDetails: "related_pep_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$;
(function (EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$) {
    /** @deprecated use `EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema` instead. */
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$.inboundSchema = EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema` instead. */
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$.outboundSchema = EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema;
})(EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$ || (EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$ = {}));
export function enrollmentForeignNaturalPersonAccountEnrollmentMetadataToJSON(enrollmentForeignNaturalPersonAccountEnrollmentMetadata) {
    return JSON.stringify(EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema
        .parse(enrollmentForeignNaturalPersonAccountEnrollmentMetadata));
}
export function enrollmentForeignNaturalPersonAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentForeignNaturalPersonAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const ForeignJointAccountEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    foreign_natural_person_account_enrollment_metadata: z.nullable(z.lazy(() => EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "foreign_natural_person_account_enrollment_metadata": "foreignNaturalPersonAccountEnrollmentMetadata",
    });
});
/** @internal */
export const ForeignJointAccountEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    foreignNaturalPersonAccountEnrollmentMetadata: z.nullable(z.lazy(() => EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        foreignNaturalPersonAccountEnrollmentMetadata: "foreign_natural_person_account_enrollment_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForeignJointAccountEnrollmentMetadata$;
(function (ForeignJointAccountEnrollmentMetadata$) {
    /** @deprecated use `ForeignJointAccountEnrollmentMetadata$inboundSchema` instead. */
    ForeignJointAccountEnrollmentMetadata$.inboundSchema = ForeignJointAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `ForeignJointAccountEnrollmentMetadata$outboundSchema` instead. */
    ForeignJointAccountEnrollmentMetadata$.outboundSchema = ForeignJointAccountEnrollmentMetadata$outboundSchema;
})(ForeignJointAccountEnrollmentMetadata$ || (ForeignJointAccountEnrollmentMetadata$ = {}));
export function foreignJointAccountEnrollmentMetadataToJSON(foreignJointAccountEnrollmentMetadata) {
    return JSON.stringify(ForeignJointAccountEnrollmentMetadata$outboundSchema.parse(foreignJointAccountEnrollmentMetadata));
}
export function foreignJointAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ForeignJointAccountEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForeignJointAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const FpslEnrollmentMetadata$inboundSchema = z.object({
    customer_percentage: z.number().optional(),
    firm_percentage: z.number().optional(),
    fpsl_msla_minimum_rate: z.number().optional(),
    introducing_broker_percentage: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        "customer_percentage": "customerPercentage",
        "firm_percentage": "firmPercentage",
        "fpsl_msla_minimum_rate": "fpslMslaMinimumRate",
        "introducing_broker_percentage": "introducingBrokerPercentage",
    });
});
/** @internal */
export const FpslEnrollmentMetadata$outboundSchema = z.object({
    customerPercentage: z.number().optional(),
    firmPercentage: z.number().optional(),
    fpslMslaMinimumRate: z.number().optional(),
    introducingBrokerPercentage: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        customerPercentage: "customer_percentage",
        firmPercentage: "firm_percentage",
        fpslMslaMinimumRate: "fpsl_msla_minimum_rate",
        introducingBrokerPercentage: "introducing_broker_percentage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FpslEnrollmentMetadata$;
(function (FpslEnrollmentMetadata$) {
    /** @deprecated use `FpslEnrollmentMetadata$inboundSchema` instead. */
    FpslEnrollmentMetadata$.inboundSchema = FpslEnrollmentMetadata$inboundSchema;
    /** @deprecated use `FpslEnrollmentMetadata$outboundSchema` instead. */
    FpslEnrollmentMetadata$.outboundSchema = FpslEnrollmentMetadata$outboundSchema;
})(FpslEnrollmentMetadata$ || (FpslEnrollmentMetadata$ = {}));
export function fpslEnrollmentMetadataToJSON(fpslEnrollmentMetadata) {
    return JSON.stringify(FpslEnrollmentMetadata$outboundSchema.parse(fpslEnrollmentMetadata));
}
export function fpslEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FpslEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FpslEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIndividualEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIndividualEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIndividualEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIndividualEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIndividualEnrollmentMetadataFdicCashSweep$ || (EnrollmentIndividualEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IndividualEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IndividualEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IndividualEnrollmentMetadata$;
(function (IndividualEnrollmentMetadata$) {
    /** @deprecated use `IndividualEnrollmentMetadata$inboundSchema` instead. */
    IndividualEnrollmentMetadata$.inboundSchema = IndividualEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IndividualEnrollmentMetadata$outboundSchema` instead. */
    IndividualEnrollmentMetadata$.outboundSchema = IndividualEnrollmentMetadata$outboundSchema;
})(IndividualEnrollmentMetadata$ || (IndividualEnrollmentMetadata$ = {}));
export function individualEnrollmentMetadataToJSON(individualEnrollmentMetadata) {
    return JSON.stringify(IndividualEnrollmentMetadata$outboundSchema.parse(individualEnrollmentMetadata));
}
export function individualEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IndividualEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IndividualEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const InheritedFromOwnerBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InheritedFromOwnerBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InheritedFromOwnerBirthDate$;
(function (InheritedFromOwnerBirthDate$) {
    /** @deprecated use `InheritedFromOwnerBirthDate$inboundSchema` instead. */
    InheritedFromOwnerBirthDate$.inboundSchema = InheritedFromOwnerBirthDate$inboundSchema;
    /** @deprecated use `InheritedFromOwnerBirthDate$outboundSchema` instead. */
    InheritedFromOwnerBirthDate$.outboundSchema = InheritedFromOwnerBirthDate$outboundSchema;
})(InheritedFromOwnerBirthDate$ || (InheritedFromOwnerBirthDate$ = {}));
export function inheritedFromOwnerBirthDateToJSON(inheritedFromOwnerBirthDate) {
    return JSON.stringify(InheritedFromOwnerBirthDate$outboundSchema.parse(inheritedFromOwnerBirthDate));
}
export function inheritedFromOwnerBirthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InheritedFromOwnerBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InheritedFromOwnerBirthDate' from JSON`);
}
/** @internal */
export const InheritedFromOwnerDeathDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const InheritedFromOwnerDeathDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InheritedFromOwnerDeathDate$;
(function (InheritedFromOwnerDeathDate$) {
    /** @deprecated use `InheritedFromOwnerDeathDate$inboundSchema` instead. */
    InheritedFromOwnerDeathDate$.inboundSchema = InheritedFromOwnerDeathDate$inboundSchema;
    /** @deprecated use `InheritedFromOwnerDeathDate$outboundSchema` instead. */
    InheritedFromOwnerDeathDate$.outboundSchema = InheritedFromOwnerDeathDate$outboundSchema;
})(InheritedFromOwnerDeathDate$ || (InheritedFromOwnerDeathDate$ = {}));
export function inheritedFromOwnerDeathDateToJSON(inheritedFromOwnerDeathDate) {
    return JSON.stringify(InheritedFromOwnerDeathDate$outboundSchema.parse(inheritedFromOwnerDeathDate));
}
export function inheritedFromOwnerDeathDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InheritedFromOwnerDeathDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InheritedFromOwnerDeathDate' from JSON`);
}
/** @internal */
export const IraBeneficiaryEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    inherited_from_owner_birth_date: z.nullable(z.lazy(() => InheritedFromOwnerBirthDate$inboundSchema)).optional(),
    inherited_from_owner_death_date: z.nullable(z.lazy(() => InheritedFromOwnerDeathDate$inboundSchema)).optional(),
    inherited_from_owner_name: z.string().optional(),
    inheritor_is_decedents_spouse: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "inherited_from_owner_birth_date": "inheritedFromOwnerBirthDate",
        "inherited_from_owner_death_date": "inheritedFromOwnerDeathDate",
        "inherited_from_owner_name": "inheritedFromOwnerName",
        "inheritor_is_decedents_spouse": "inheritorIsDecedentsSpouse",
    });
});
/** @internal */
export const IraBeneficiaryEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    inheritedFromOwnerBirthDate: z.nullable(z.lazy(() => InheritedFromOwnerBirthDate$outboundSchema)).optional(),
    inheritedFromOwnerDeathDate: z.nullable(z.lazy(() => InheritedFromOwnerDeathDate$outboundSchema)).optional(),
    inheritedFromOwnerName: z.string().optional(),
    inheritorIsDecedentsSpouse: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        inheritedFromOwnerBirthDate: "inherited_from_owner_birth_date",
        inheritedFromOwnerDeathDate: "inherited_from_owner_death_date",
        inheritedFromOwnerName: "inherited_from_owner_name",
        inheritorIsDecedentsSpouse: "inheritor_is_decedents_spouse",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraBeneficiaryEnrollmentMetadata$;
(function (IraBeneficiaryEnrollmentMetadata$) {
    /** @deprecated use `IraBeneficiaryEnrollmentMetadata$inboundSchema` instead. */
    IraBeneficiaryEnrollmentMetadata$.inboundSchema = IraBeneficiaryEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraBeneficiaryEnrollmentMetadata$outboundSchema` instead. */
    IraBeneficiaryEnrollmentMetadata$.outboundSchema = IraBeneficiaryEnrollmentMetadata$outboundSchema;
})(IraBeneficiaryEnrollmentMetadata$ || (IraBeneficiaryEnrollmentMetadata$ = {}));
export function iraBeneficiaryEnrollmentMetadataToJSON(iraBeneficiaryEnrollmentMetadata) {
    return JSON.stringify(IraBeneficiaryEnrollmentMetadata$outboundSchema.parse(iraBeneficiaryEnrollmentMetadata));
}
export function iraBeneficiaryEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraBeneficiaryEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraBeneficiaryEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IraRolloverEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IraRolloverEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraRolloverEnrollmentMetadata$;
(function (IraRolloverEnrollmentMetadata$) {
    /** @deprecated use `IraRolloverEnrollmentMetadata$inboundSchema` instead. */
    IraRolloverEnrollmentMetadata$.inboundSchema = IraRolloverEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraRolloverEnrollmentMetadata$outboundSchema` instead. */
    IraRolloverEnrollmentMetadata$.outboundSchema = IraRolloverEnrollmentMetadata$outboundSchema;
})(IraRolloverEnrollmentMetadata$ || (IraRolloverEnrollmentMetadata$ = {}));
export function iraRolloverEnrollmentMetadataToJSON(iraRolloverEnrollmentMetadata) {
    return JSON.stringify(IraRolloverEnrollmentMetadata$outboundSchema.parse(iraRolloverEnrollmentMetadata));
}
export function iraRolloverEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraRolloverEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraRolloverEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraRothEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraRothEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraRothEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraRothEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IraRothEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IraRothEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraRothEnrollmentMetadata$;
(function (IraRothEnrollmentMetadata$) {
    /** @deprecated use `IraRothEnrollmentMetadata$inboundSchema` instead. */
    IraRothEnrollmentMetadata$.inboundSchema = IraRothEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraRothEnrollmentMetadata$outboundSchema` instead. */
    IraRothEnrollmentMetadata$.outboundSchema = IraRothEnrollmentMetadata$outboundSchema;
})(IraRothEnrollmentMetadata$ || (IraRothEnrollmentMetadata$ = {}));
export function iraRothEnrollmentMetadataToJSON(iraRothEnrollmentMetadata) {
    return JSON.stringify(IraRothEnrollmentMetadata$outboundSchema.parse(iraRothEnrollmentMetadata));
}
export function iraRothEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraRothEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraRothEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraSepEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraSepEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraSepEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraSepEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IraSepEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IraSepEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraSepEnrollmentMetadata$;
(function (IraSepEnrollmentMetadata$) {
    /** @deprecated use `IraSepEnrollmentMetadata$inboundSchema` instead. */
    IraSepEnrollmentMetadata$.inboundSchema = IraSepEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraSepEnrollmentMetadata$outboundSchema` instead. */
    IraSepEnrollmentMetadata$.outboundSchema = IraSepEnrollmentMetadata$outboundSchema;
})(IraSepEnrollmentMetadata$ || (IraSepEnrollmentMetadata$ = {}));
export function iraSepEnrollmentMetadataToJSON(iraSepEnrollmentMetadata) {
    return JSON.stringify(IraSepEnrollmentMetadata$outboundSchema.parse(iraSepEnrollmentMetadata));
}
export function iraSepEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraSepEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraSepEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IraSimpleEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IraSimpleEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraSimpleEnrollmentMetadata$;
(function (IraSimpleEnrollmentMetadata$) {
    /** @deprecated use `IraSimpleEnrollmentMetadata$inboundSchema` instead. */
    IraSimpleEnrollmentMetadata$.inboundSchema = IraSimpleEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraSimpleEnrollmentMetadata$outboundSchema` instead. */
    IraSimpleEnrollmentMetadata$.outboundSchema = IraSimpleEnrollmentMetadata$outboundSchema;
})(IraSimpleEnrollmentMetadata$ || (IraSimpleEnrollmentMetadata$ = {}));
export function iraSimpleEnrollmentMetadataToJSON(iraSimpleEnrollmentMetadata) {
    return JSON.stringify(IraSimpleEnrollmentMetadata$outboundSchema.parse(iraSimpleEnrollmentMetadata));
}
export function iraSimpleEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraSimpleEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraSimpleEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$ || (EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const IraTraditionalEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const IraTraditionalEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IraTraditionalEnrollmentMetadata$;
(function (IraTraditionalEnrollmentMetadata$) {
    /** @deprecated use `IraTraditionalEnrollmentMetadata$inboundSchema` instead. */
    IraTraditionalEnrollmentMetadata$.inboundSchema = IraTraditionalEnrollmentMetadata$inboundSchema;
    /** @deprecated use `IraTraditionalEnrollmentMetadata$outboundSchema` instead. */
    IraTraditionalEnrollmentMetadata$.outboundSchema = IraTraditionalEnrollmentMetadata$outboundSchema;
})(IraTraditionalEnrollmentMetadata$ || (IraTraditionalEnrollmentMetadata$ = {}));
export function iraTraditionalEnrollmentMetadataToJSON(iraTraditionalEnrollmentMetadata) {
    return JSON.stringify(IraTraditionalEnrollmentMetadata$outboundSchema.parse(iraTraditionalEnrollmentMetadata));
}
export function iraTraditionalEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IraTraditionalEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IraTraditionalEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$ || (EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$;
(function (EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$) {
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$.inboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema;
    /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema` instead. */
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$.outboundSchema = EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema;
})(EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$ || (EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$ = {}));
/** @internal */
export const JointCommunityPropertyEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    legal_residency_state_of_married_couple: EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "legal_residency_state_of_married_couple": "legalResidencyStateOfMarriedCouple",
    });
});
/** @internal */
export const JointCommunityPropertyEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    legalResidencyStateOfMarriedCouple: EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        legalResidencyStateOfMarriedCouple: "legal_residency_state_of_married_couple",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JointCommunityPropertyEnrollmentMetadata$;
(function (JointCommunityPropertyEnrollmentMetadata$) {
    /** @deprecated use `JointCommunityPropertyEnrollmentMetadata$inboundSchema` instead. */
    JointCommunityPropertyEnrollmentMetadata$.inboundSchema = JointCommunityPropertyEnrollmentMetadata$inboundSchema;
    /** @deprecated use `JointCommunityPropertyEnrollmentMetadata$outboundSchema` instead. */
    JointCommunityPropertyEnrollmentMetadata$.outboundSchema = JointCommunityPropertyEnrollmentMetadata$outboundSchema;
})(JointCommunityPropertyEnrollmentMetadata$ || (JointCommunityPropertyEnrollmentMetadata$ = {}));
export function jointCommunityPropertyEnrollmentMetadataToJSON(jointCommunityPropertyEnrollmentMetadata) {
    return JSON.stringify(JointCommunityPropertyEnrollmentMetadata$outboundSchema.parse(jointCommunityPropertyEnrollmentMetadata));
}
export function jointCommunityPropertyEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JointCommunityPropertyEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JointCommunityPropertyEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$ || (EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentLegalResidencyStateOfMarriedCouple),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema = z.union([
    z.nativeEnum(EnrollmentLegalResidencyStateOfMarriedCouple),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLegalResidencyStateOfMarriedCouple$;
(function (EnrollmentLegalResidencyStateOfMarriedCouple$) {
    /** @deprecated use `EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema` instead. */
    EnrollmentLegalResidencyStateOfMarriedCouple$.inboundSchema = EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema;
    /** @deprecated use `EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema` instead. */
    EnrollmentLegalResidencyStateOfMarriedCouple$.outboundSchema = EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema;
})(EnrollmentLegalResidencyStateOfMarriedCouple$ || (EnrollmentLegalResidencyStateOfMarriedCouple$ = {}));
/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    legal_residency_state_of_married_couple: EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "legal_residency_state_of_married_couple": "legalResidencyStateOfMarriedCouple",
    });
});
/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    legalResidencyStateOfMarriedCouple: EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        legalResidencyStateOfMarriedCouple: "legal_residency_state_of_married_couple",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JointTenantsByEntiretyEnrollmentMetadata$;
(function (JointTenantsByEntiretyEnrollmentMetadata$) {
    /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadata$inboundSchema` instead. */
    JointTenantsByEntiretyEnrollmentMetadata$.inboundSchema = JointTenantsByEntiretyEnrollmentMetadata$inboundSchema;
    /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadata$outboundSchema` instead. */
    JointTenantsByEntiretyEnrollmentMetadata$.outboundSchema = JointTenantsByEntiretyEnrollmentMetadata$outboundSchema;
})(JointTenantsByEntiretyEnrollmentMetadata$ || (JointTenantsByEntiretyEnrollmentMetadata$ = {}));
export function jointTenantsByEntiretyEnrollmentMetadataToJSON(jointTenantsByEntiretyEnrollmentMetadata) {
    return JSON.stringify(JointTenantsByEntiretyEnrollmentMetadata$outboundSchema.parse(jointTenantsByEntiretyEnrollmentMetadata));
}
export function jointTenantsByEntiretyEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JointTenantsByEntiretyEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JointTenantsByEntiretyEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$ || (EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const JointTenantsInCommonEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const JointTenantsInCommonEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JointTenantsInCommonEnrollmentMetadata$;
(function (JointTenantsInCommonEnrollmentMetadata$) {
    /** @deprecated use `JointTenantsInCommonEnrollmentMetadata$inboundSchema` instead. */
    JointTenantsInCommonEnrollmentMetadata$.inboundSchema = JointTenantsInCommonEnrollmentMetadata$inboundSchema;
    /** @deprecated use `JointTenantsInCommonEnrollmentMetadata$outboundSchema` instead. */
    JointTenantsInCommonEnrollmentMetadata$.outboundSchema = JointTenantsInCommonEnrollmentMetadata$outboundSchema;
})(JointTenantsInCommonEnrollmentMetadata$ || (JointTenantsInCommonEnrollmentMetadata$ = {}));
export function jointTenantsInCommonEnrollmentMetadataToJSON(jointTenantsInCommonEnrollmentMetadata) {
    return JSON.stringify(JointTenantsInCommonEnrollmentMetadata$outboundSchema.parse(jointTenantsInCommonEnrollmentMetadata));
}
export function jointTenantsInCommonEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JointTenantsInCommonEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JointTenantsInCommonEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$ || (EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JointWithRightsOfSurvivorshipEnrollmentMetadata$;
(function (JointWithRightsOfSurvivorshipEnrollmentMetadata$) {
    /** @deprecated use `JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema` instead. */
    JointWithRightsOfSurvivorshipEnrollmentMetadata$.inboundSchema = JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema;
    /** @deprecated use `JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema` instead. */
    JointWithRightsOfSurvivorshipEnrollmentMetadata$.outboundSchema = JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema;
})(JointWithRightsOfSurvivorshipEnrollmentMetadata$ || (JointWithRightsOfSurvivorshipEnrollmentMetadata$ = {}));
export function jointWithRightsOfSurvivorshipEnrollmentMetadataToJSON(jointWithRightsOfSurvivorshipEnrollmentMetadata) {
    return JSON.stringify(JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema.parse(jointWithRightsOfSurvivorshipEnrollmentMetadata));
}
export function jointWithRightsOfSurvivorshipEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JointWithRightsOfSurvivorshipEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataInitialDepositAmount$;
(function (EnrollmentLlcEnrollmentMetadataInitialDepositAmount$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$.inboundSchema = EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$.outboundSchema = EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataInitialDepositAmount$ || (EnrollmentLlcEnrollmentMetadataInitialDepositAmount$ = {}));
export function enrollmentLlcEnrollmentMetadataInitialDepositAmountToJSON(enrollmentLlcEnrollmentMetadataInitialDepositAmount) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema.parse(enrollmentLlcEnrollmentMetadataInitialDepositAmount));
}
export function enrollmentLlcEnrollmentMetadataInitialDepositAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataInitialDepositAmount' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema = z.object({
    initial_deposit_amount: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema)).optional(),
    initial_deposit_source: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "initial_deposit_amount": "initialDepositAmount",
        "initial_deposit_source": "initialDepositSource",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema = z.object({
    initialDepositAmount: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema)).optional(),
    initialDepositSource: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        initialDepositAmount: "initial_deposit_amount",
        initialDepositSource: "initial_deposit_source",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataDepositedFunds$;
(function (EnrollmentLlcEnrollmentMetadataDepositedFunds$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataDepositedFunds$.inboundSchema = EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataDepositedFunds$.outboundSchema = EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataDepositedFunds$ || (EnrollmentLlcEnrollmentMetadataDepositedFunds$ = {}));
export function enrollmentLlcEnrollmentMetadataDepositedFundsToJSON(enrollmentLlcEnrollmentMetadataDepositedFunds) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema.parse(enrollmentLlcEnrollmentMetadataDepositedFunds));
}
export function enrollmentLlcEnrollmentMetadataDepositedFundsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataDepositedFunds' from JSON`);
}
/** @internal */
export const EnrollmentDeterminedAccountRiskRating$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentDeterminedAccountRiskRating),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentDeterminedAccountRiskRating$outboundSchema = z.union([
    z.nativeEnum(EnrollmentDeterminedAccountRiskRating),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentDeterminedAccountRiskRating$;
(function (EnrollmentDeterminedAccountRiskRating$) {
    /** @deprecated use `EnrollmentDeterminedAccountRiskRating$inboundSchema` instead. */
    EnrollmentDeterminedAccountRiskRating$.inboundSchema = EnrollmentDeterminedAccountRiskRating$inboundSchema;
    /** @deprecated use `EnrollmentDeterminedAccountRiskRating$outboundSchema` instead. */
    EnrollmentDeterminedAccountRiskRating$.outboundSchema = EnrollmentDeterminedAccountRiskRating$outboundSchema;
})(EnrollmentDeterminedAccountRiskRating$ || (EnrollmentDeterminedAccountRiskRating$ = {}));
/** @internal */
export const EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_names": "accountNames",
        "account_numbers": "accountNumbers",
        "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNames: "account_names",
        accountNumbers: "account_numbers",
        ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataOtherAccounts$;
(function (EnrollmentLlcEnrollmentMetadataOtherAccounts$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataOtherAccounts$.inboundSchema = EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataOtherAccounts$.outboundSchema = EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataOtherAccounts$ || (EnrollmentLlcEnrollmentMetadataOtherAccounts$ = {}));
export function enrollmentLlcEnrollmentMetadataOtherAccountsToJSON(enrollmentLlcEnrollmentMetadataOtherAccounts) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema.parse(enrollmentLlcEnrollmentMetadataOtherAccounts));
}
export function enrollmentLlcEnrollmentMetadataOtherAccountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataOtherAccounts' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema)).optional(),
    primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "banking_relationships": "bankingRelationships",
        "other_accounts": "otherAccounts",
        "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema)).optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        bankingRelationships: "banking_relationships",
        otherAccounts: "other_accounts",
        primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataFinancialProfile$;
(function (EnrollmentLlcEnrollmentMetadataFinancialProfile$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataFinancialProfile$.inboundSchema = EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataFinancialProfile$.outboundSchema = EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataFinancialProfile$ || (EnrollmentLlcEnrollmentMetadataFinancialProfile$ = {}));
export function enrollmentLlcEnrollmentMetadataFinancialProfileToJSON(enrollmentLlcEnrollmentMetadataFinancialProfile) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema.parse(enrollmentLlcEnrollmentMetadataFinancialProfile));
}
export function enrollmentLlcEnrollmentMetadataFinancialProfileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataFinancialProfile' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading": "foreignBondTrading",
        "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTrading: "foreign_bond_trading",
        foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$;
(function (EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$.inboundSchema = EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$.outboundSchema = EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$ || (EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$ = {}));
export function enrollmentLlcEnrollmentMetadataForeignBondTradingDetailsToJSON(enrollmentLlcEnrollmentMetadataForeignBondTradingDetails) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema
        .parse(enrollmentLlcEnrollmentMetadataForeignBondTradingDetails));
}
export function enrollmentLlcEnrollmentMetadataForeignBondTradingDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$;
(function (EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$.inboundSchema = EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$.outboundSchema = EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$ || (EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$ = {}));
export function enrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentageToJSON(enrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema
        .parse(enrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage));
}
export function enrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "low_priced_securities": "lowPricedSecurities",
        "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        lowPricedSecurities: "low_priced_securities",
        lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataLowPricedSecurities$;
(function (EnrollmentLlcEnrollmentMetadataLowPricedSecurities$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$.inboundSchema = EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$.outboundSchema = EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataLowPricedSecurities$ || (EnrollmentLlcEnrollmentMetadataLowPricedSecurities$ = {}));
export function enrollmentLlcEnrollmentMetadataLowPricedSecuritiesToJSON(enrollmentLlcEnrollmentMetadataLowPricedSecurities) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema.parse(enrollmentLlcEnrollmentMetadataLowPricedSecurities));
}
export function enrollmentLlcEnrollmentMetadataLowPricedSecuritiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataLowPricedSecurities' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$;
(function (EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$.inboundSchema = EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$.outboundSchema = EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$ || (EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$ = {}));
/** @internal */
export const EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$;
(function (EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$.inboundSchema = EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$.outboundSchema = EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$ || (EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$ = {}));
/** @internal */
export const EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema = z.object({
    foreign_bond_trading_details: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema)).optional(),
    low_priced_securities: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema)).optional(),
    primary_account_activity_type: EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
        .optional(),
    withdrawal_frequency: EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "foreign_bond_trading_details": "foreignBondTradingDetails",
        "low_priced_securities": "lowPricedSecurities",
        "primary_account_activity_type": "primaryAccountActivityType",
        "withdrawal_frequency": "withdrawalFrequency",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema = z.object({
    foreignBondTradingDetails: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema)).optional(),
    lowPricedSecurities: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema)).optional(),
    primaryAccountActivityType: EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
        .optional(),
    withdrawalFrequency: EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        foreignBondTradingDetails: "foreign_bond_trading_details",
        lowPricedSecurities: "low_priced_securities",
        primaryAccountActivityType: "primary_account_activity_type",
        withdrawalFrequency: "withdrawal_frequency",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataPlannedActivity$;
(function (EnrollmentLlcEnrollmentMetadataPlannedActivity$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataPlannedActivity$.inboundSchema = EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataPlannedActivity$.outboundSchema = EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataPlannedActivity$ || (EnrollmentLlcEnrollmentMetadataPlannedActivity$ = {}));
export function enrollmentLlcEnrollmentMetadataPlannedActivityToJSON(enrollmentLlcEnrollmentMetadataPlannedActivity) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema.parse(enrollmentLlcEnrollmentMetadataPlannedActivity));
}
export function enrollmentLlcEnrollmentMetadataPlannedActivityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataPlannedActivity' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
        "related_peps": "relatedPeps",
    });
});
/** @internal */
export const EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
        relatedPeps: "related_peps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataRelatedPepDetails$;
(function (EnrollmentLlcEnrollmentMetadataRelatedPepDetails$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$.inboundSchema = EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$.outboundSchema = EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataRelatedPepDetails$ || (EnrollmentLlcEnrollmentMetadataRelatedPepDetails$ = {}));
export function enrollmentLlcEnrollmentMetadataRelatedPepDetailsToJSON(enrollmentLlcEnrollmentMetadataRelatedPepDetails) {
    return JSON.stringify(EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema.parse(enrollmentLlcEnrollmentMetadataRelatedPepDetails));
}
export function enrollmentLlcEnrollmentMetadataRelatedPepDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentLlcEnrollmentMetadataRelatedPepDetails' from JSON`);
}
/** @internal */
export const EnrollmentEddAccountEnrollmentMetadata$inboundSchema = z.object({
    deposited_funds: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema)).optional(),
    determined_account_risk_rating: EnrollmentDeterminedAccountRiskRating$inboundSchema.optional(),
    financial_profile: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema)).optional(),
    planned_activity: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema)).optional(),
    related_pep_details: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema)).optional(),
    scope_of_business: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "deposited_funds": "depositedFunds",
        "determined_account_risk_rating": "determinedAccountRiskRating",
        "financial_profile": "financialProfile",
        "planned_activity": "plannedActivity",
        "related_pep_details": "relatedPepDetails",
        "scope_of_business": "scopeOfBusiness",
    });
});
/** @internal */
export const EnrollmentEddAccountEnrollmentMetadata$outboundSchema = z.object({
    depositedFunds: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema)).optional(),
    determinedAccountRiskRating: EnrollmentDeterminedAccountRiskRating$outboundSchema.optional(),
    financialProfile: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema)).optional(),
    plannedActivity: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema)).optional(),
    relatedPepDetails: z.nullable(z.lazy(() => EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema)).optional(),
    scopeOfBusiness: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        depositedFunds: "deposited_funds",
        determinedAccountRiskRating: "determined_account_risk_rating",
        financialProfile: "financial_profile",
        plannedActivity: "planned_activity",
        relatedPepDetails: "related_pep_details",
        scopeOfBusiness: "scope_of_business",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentEddAccountEnrollmentMetadata$;
(function (EnrollmentEddAccountEnrollmentMetadata$) {
    /** @deprecated use `EnrollmentEddAccountEnrollmentMetadata$inboundSchema` instead. */
    EnrollmentEddAccountEnrollmentMetadata$.inboundSchema = EnrollmentEddAccountEnrollmentMetadata$inboundSchema;
    /** @deprecated use `EnrollmentEddAccountEnrollmentMetadata$outboundSchema` instead. */
    EnrollmentEddAccountEnrollmentMetadata$.outboundSchema = EnrollmentEddAccountEnrollmentMetadata$outboundSchema;
})(EnrollmentEddAccountEnrollmentMetadata$ || (EnrollmentEddAccountEnrollmentMetadata$ = {}));
export function enrollmentEddAccountEnrollmentMetadataToJSON(enrollmentEddAccountEnrollmentMetadata) {
    return JSON.stringify(EnrollmentEddAccountEnrollmentMetadata$outboundSchema.parse(enrollmentEddAccountEnrollmentMetadata));
}
export function enrollmentEddAccountEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnrollmentEddAccountEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnrollmentEddAccountEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentLlcEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentLlcEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentLlcEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentLlcEnrollmentMetadataFdicCashSweep$ || (EnrollmentLlcEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const LlcEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    edd_account_enrollment_metadata: z.nullable(z.lazy(() => EnrollmentEddAccountEnrollmentMetadata$inboundSchema)).optional(),
    fdic_cash_sweep: EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "edd_account_enrollment_metadata": "eddAccountEnrollmentMetadata",
        "fdic_cash_sweep": "fdicCashSweep",
    });
});
/** @internal */
export const LlcEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    eddAccountEnrollmentMetadata: z.nullable(z.lazy(() => EnrollmentEddAccountEnrollmentMetadata$outboundSchema)).optional(),
    fdicCashSweep: EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        eddAccountEnrollmentMetadata: "edd_account_enrollment_metadata",
        fdicCashSweep: "fdic_cash_sweep",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LlcEnrollmentMetadata$;
(function (LlcEnrollmentMetadata$) {
    /** @deprecated use `LlcEnrollmentMetadata$inboundSchema` instead. */
    LlcEnrollmentMetadata$.inboundSchema = LlcEnrollmentMetadata$inboundSchema;
    /** @deprecated use `LlcEnrollmentMetadata$outboundSchema` instead. */
    LlcEnrollmentMetadata$.outboundSchema = LlcEnrollmentMetadata$outboundSchema;
})(LlcEnrollmentMetadata$ || (LlcEnrollmentMetadata$ = {}));
export function llcEnrollmentMetadataToJSON(llcEnrollmentMetadata) {
    return JSON.stringify(LlcEnrollmentMetadata$outboundSchema.parse(llcEnrollmentMetadata));
}
export function llcEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LlcEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LlcEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentOperatingPurpose$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentOperatingPurpose),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentOperatingPurpose$outboundSchema = z.union([
    z.nativeEnum(EnrollmentOperatingPurpose),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentOperatingPurpose$;
(function (EnrollmentOperatingPurpose$) {
    /** @deprecated use `EnrollmentOperatingPurpose$inboundSchema` instead. */
    EnrollmentOperatingPurpose$.inboundSchema = EnrollmentOperatingPurpose$inboundSchema;
    /** @deprecated use `EnrollmentOperatingPurpose$outboundSchema` instead. */
    EnrollmentOperatingPurpose$.outboundSchema = EnrollmentOperatingPurpose$outboundSchema;
})(EnrollmentOperatingPurpose$ || (EnrollmentOperatingPurpose$ = {}));
/** @internal */
export const EnrollmentTaxAuthority$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentTaxAuthority),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentTaxAuthority$outboundSchema = z.union([
    z.nativeEnum(EnrollmentTaxAuthority),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentTaxAuthority$;
(function (EnrollmentTaxAuthority$) {
    /** @deprecated use `EnrollmentTaxAuthority$inboundSchema` instead. */
    EnrollmentTaxAuthority$.inboundSchema = EnrollmentTaxAuthority$inboundSchema;
    /** @deprecated use `EnrollmentTaxAuthority$outboundSchema` instead. */
    EnrollmentTaxAuthority$.outboundSchema = EnrollmentTaxAuthority$outboundSchema;
})(EnrollmentTaxAuthority$ || (EnrollmentTaxAuthority$ = {}));
/** @internal */
export const EnrollmentWithholdingType$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentWithholdingType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentWithholdingType$outboundSchema = z.union([
    z.nativeEnum(EnrollmentWithholdingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentWithholdingType$;
(function (EnrollmentWithholdingType$) {
    /** @deprecated use `EnrollmentWithholdingType$inboundSchema` instead. */
    EnrollmentWithholdingType$.inboundSchema = EnrollmentWithholdingType$inboundSchema;
    /** @deprecated use `EnrollmentWithholdingType$outboundSchema` instead. */
    EnrollmentWithholdingType$.outboundSchema = EnrollmentWithholdingType$outboundSchema;
})(EnrollmentWithholdingType$ || (EnrollmentWithholdingType$ = {}));
/** @internal */
export const TaxWithholdingMetadata$inboundSchema = z.object({
    tax_authority: EnrollmentTaxAuthority$inboundSchema.optional(),
    withholding_type: EnrollmentWithholdingType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_authority": "taxAuthority",
        "withholding_type": "withholdingType",
    });
});
/** @internal */
export const TaxWithholdingMetadata$outboundSchema = z.object({
    taxAuthority: EnrollmentTaxAuthority$outboundSchema.optional(),
    withholdingType: EnrollmentWithholdingType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxAuthority: "tax_authority",
        withholdingType: "withholding_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxWithholdingMetadata$;
(function (TaxWithholdingMetadata$) {
    /** @deprecated use `TaxWithholdingMetadata$inboundSchema` instead. */
    TaxWithholdingMetadata$.inboundSchema = TaxWithholdingMetadata$inboundSchema;
    /** @deprecated use `TaxWithholdingMetadata$outboundSchema` instead. */
    TaxWithholdingMetadata$.outboundSchema = TaxWithholdingMetadata$outboundSchema;
})(TaxWithholdingMetadata$ || (TaxWithholdingMetadata$ = {}));
export function taxWithholdingMetadataToJSON(taxWithholdingMetadata) {
    return JSON.stringify(TaxWithholdingMetadata$outboundSchema.parse(taxWithholdingMetadata));
}
export function taxWithholdingMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TaxWithholdingMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TaxWithholdingMetadata' from JSON`);
}
/** @internal */
export const OperatingEnrollmentMetadata$inboundSchema = z.object({
    operating_purpose: EnrollmentOperatingPurpose$inboundSchema.optional(),
    subtitle: z.string().optional(),
    tax_withholding_metadata: z.nullable(z.lazy(() => TaxWithholdingMetadata$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "operating_purpose": "operatingPurpose",
        "tax_withholding_metadata": "taxWithholdingMetadata",
    });
});
/** @internal */
export const OperatingEnrollmentMetadata$outboundSchema = z.object({
    operatingPurpose: EnrollmentOperatingPurpose$outboundSchema.optional(),
    subtitle: z.string().optional(),
    taxWithholdingMetadata: z.nullable(z.lazy(() => TaxWithholdingMetadata$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        operatingPurpose: "operating_purpose",
        taxWithholdingMetadata: "tax_withholding_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OperatingEnrollmentMetadata$;
(function (OperatingEnrollmentMetadata$) {
    /** @deprecated use `OperatingEnrollmentMetadata$inboundSchema` instead. */
    OperatingEnrollmentMetadata$.inboundSchema = OperatingEnrollmentMetadata$inboundSchema;
    /** @deprecated use `OperatingEnrollmentMetadata$outboundSchema` instead. */
    OperatingEnrollmentMetadata$.outboundSchema = OperatingEnrollmentMetadata$outboundSchema;
})(OperatingEnrollmentMetadata$ || (OperatingEnrollmentMetadata$ = {}));
export function operatingEnrollmentMetadataToJSON(operatingEnrollmentMetadata) {
    return JSON.stringify(OperatingEnrollmentMetadata$outboundSchema.parse(operatingEnrollmentMetadata));
}
export function operatingEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OperatingEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OperatingEnrollmentMetadata' from JSON`);
}
/** @internal */
export const InvestmentVehicleExperience$inboundSchema = z.object({
    commodities_average_annual_trade_count: z.number().int().optional(),
    corporate_bonds_average_annual_trade_count: z.number().int().optional(),
    funds_average_annual_trade_count: z.number().int().optional(),
    government_bonds_average_annual_trade_count: z.number().int().optional(),
    margin_average_annual_trade_count: z.number().int().optional(),
    municipal_bonds_average_annual_trade_count: z.number().int().optional(),
    options_average_annual_trade_count: z.number().int().optional(),
    stocks_average_annual_trade_count: z.number().int().optional(),
    tax_shelters_average_annual_trade_count: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "commodities_average_annual_trade_count": "commoditiesAverageAnnualTradeCount",
        "corporate_bonds_average_annual_trade_count": "corporateBondsAverageAnnualTradeCount",
        "funds_average_annual_trade_count": "fundsAverageAnnualTradeCount",
        "government_bonds_average_annual_trade_count": "governmentBondsAverageAnnualTradeCount",
        "margin_average_annual_trade_count": "marginAverageAnnualTradeCount",
        "municipal_bonds_average_annual_trade_count": "municipalBondsAverageAnnualTradeCount",
        "options_average_annual_trade_count": "optionsAverageAnnualTradeCount",
        "stocks_average_annual_trade_count": "stocksAverageAnnualTradeCount",
        "tax_shelters_average_annual_trade_count": "taxSheltersAverageAnnualTradeCount",
    });
});
/** @internal */
export const InvestmentVehicleExperience$outboundSchema = z.object({
    commoditiesAverageAnnualTradeCount: z.number().int().optional(),
    corporateBondsAverageAnnualTradeCount: z.number().int().optional(),
    fundsAverageAnnualTradeCount: z.number().int().optional(),
    governmentBondsAverageAnnualTradeCount: z.number().int().optional(),
    marginAverageAnnualTradeCount: z.number().int().optional(),
    municipalBondsAverageAnnualTradeCount: z.number().int().optional(),
    optionsAverageAnnualTradeCount: z.number().int().optional(),
    stocksAverageAnnualTradeCount: z.number().int().optional(),
    taxSheltersAverageAnnualTradeCount: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        commoditiesAverageAnnualTradeCount: "commodities_average_annual_trade_count",
        corporateBondsAverageAnnualTradeCount: "corporate_bonds_average_annual_trade_count",
        fundsAverageAnnualTradeCount: "funds_average_annual_trade_count",
        governmentBondsAverageAnnualTradeCount: "government_bonds_average_annual_trade_count",
        marginAverageAnnualTradeCount: "margin_average_annual_trade_count",
        municipalBondsAverageAnnualTradeCount: "municipal_bonds_average_annual_trade_count",
        optionsAverageAnnualTradeCount: "options_average_annual_trade_count",
        stocksAverageAnnualTradeCount: "stocks_average_annual_trade_count",
        taxSheltersAverageAnnualTradeCount: "tax_shelters_average_annual_trade_count",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestmentVehicleExperience$;
(function (InvestmentVehicleExperience$) {
    /** @deprecated use `InvestmentVehicleExperience$inboundSchema` instead. */
    InvestmentVehicleExperience$.inboundSchema = InvestmentVehicleExperience$inboundSchema;
    /** @deprecated use `InvestmentVehicleExperience$outboundSchema` instead. */
    InvestmentVehicleExperience$.outboundSchema = InvestmentVehicleExperience$outboundSchema;
})(InvestmentVehicleExperience$ || (InvestmentVehicleExperience$ = {}));
export function investmentVehicleExperienceToJSON(investmentVehicleExperience) {
    return JSON.stringify(InvestmentVehicleExperience$outboundSchema.parse(investmentVehicleExperience));
}
export function investmentVehicleExperienceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestmentVehicleExperience$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestmentVehicleExperience' from JSON`);
}
/** @internal */
export const EnrollmentOptionsLevel$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentOptionsLevel),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentOptionsLevel$outboundSchema = z.union([
    z.nativeEnum(EnrollmentOptionsLevel),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentOptionsLevel$;
(function (EnrollmentOptionsLevel$) {
    /** @deprecated use `EnrollmentOptionsLevel$inboundSchema` instead. */
    EnrollmentOptionsLevel$.inboundSchema = EnrollmentOptionsLevel$inboundSchema;
    /** @deprecated use `EnrollmentOptionsLevel$outboundSchema` instead. */
    EnrollmentOptionsLevel$.outboundSchema = EnrollmentOptionsLevel$outboundSchema;
})(EnrollmentOptionsLevel$ || (EnrollmentOptionsLevel$ = {}));
/** @internal */
export const OrdersOptionsTradingEnrollmentMetadata$inboundSchema = z.object({
    investment_vehicle_experience: z.nullable(z.lazy(() => InvestmentVehicleExperience$inboundSchema)).optional(),
    options_level: EnrollmentOptionsLevel$inboundSchema.optional(),
    total_years_options_trading_experience: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "investment_vehicle_experience": "investmentVehicleExperience",
        "options_level": "optionsLevel",
        "total_years_options_trading_experience": "totalYearsOptionsTradingExperience",
    });
});
/** @internal */
export const OrdersOptionsTradingEnrollmentMetadata$outboundSchema = z.object({
    investmentVehicleExperience: z.nullable(z.lazy(() => InvestmentVehicleExperience$outboundSchema)).optional(),
    optionsLevel: EnrollmentOptionsLevel$outboundSchema.optional(),
    totalYearsOptionsTradingExperience: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        investmentVehicleExperience: "investment_vehicle_experience",
        optionsLevel: "options_level",
        totalYearsOptionsTradingExperience: "total_years_options_trading_experience",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrdersOptionsTradingEnrollmentMetadata$;
(function (OrdersOptionsTradingEnrollmentMetadata$) {
    /** @deprecated use `OrdersOptionsTradingEnrollmentMetadata$inboundSchema` instead. */
    OrdersOptionsTradingEnrollmentMetadata$.inboundSchema = OrdersOptionsTradingEnrollmentMetadata$inboundSchema;
    /** @deprecated use `OrdersOptionsTradingEnrollmentMetadata$outboundSchema` instead. */
    OrdersOptionsTradingEnrollmentMetadata$.outboundSchema = OrdersOptionsTradingEnrollmentMetadata$outboundSchema;
})(OrdersOptionsTradingEnrollmentMetadata$ || (OrdersOptionsTradingEnrollmentMetadata$ = {}));
export function ordersOptionsTradingEnrollmentMetadataToJSON(ordersOptionsTradingEnrollmentMetadata) {
    return JSON.stringify(OrdersOptionsTradingEnrollmentMetadata$outboundSchema.parse(ordersOptionsTradingEnrollmentMetadata));
}
export function ordersOptionsTradingEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrdersOptionsTradingEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrdersOptionsTradingEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentState$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentState$outboundSchema = z.union([
    z.nativeEnum(EnrollmentState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentState$;
(function (EnrollmentState$) {
    /** @deprecated use `EnrollmentState$inboundSchema` instead. */
    EnrollmentState$.inboundSchema = EnrollmentState$inboundSchema;
    /** @deprecated use `EnrollmentState$outboundSchema` instead. */
    EnrollmentState$.outboundSchema = EnrollmentState$outboundSchema;
})(EnrollmentState$ || (EnrollmentState$ = {}));
/** @internal */
export const EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema = z.union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$;
(function (EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$) {
    /** @deprecated use `EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$.inboundSchema = EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
    /** @deprecated use `EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$.outboundSchema = EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
})(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$ || (EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$ = {}));
/** @internal */
export const EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema = z.union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentTrustEnrollmentMetadataFdicCashSweep$;
(function (EnrollmentTrustEnrollmentMetadataFdicCashSweep$) {
    /** @deprecated use `EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
    EnrollmentTrustEnrollmentMetadataFdicCashSweep$.inboundSchema = EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema;
    /** @deprecated use `EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
    EnrollmentTrustEnrollmentMetadataFdicCashSweep$.outboundSchema = EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema;
})(EnrollmentTrustEnrollmentMetadataFdicCashSweep$ || (EnrollmentTrustEnrollmentMetadataFdicCashSweep$ = {}));
/** @internal */
export const EnrollmentOpenedOnBehalfOf$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentOpenedOnBehalfOf),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentOpenedOnBehalfOf$outboundSchema = z.union([
    z.nativeEnum(EnrollmentOpenedOnBehalfOf),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentOpenedOnBehalfOf$;
(function (EnrollmentOpenedOnBehalfOf$) {
    /** @deprecated use `EnrollmentOpenedOnBehalfOf$inboundSchema` instead. */
    EnrollmentOpenedOnBehalfOf$.inboundSchema = EnrollmentOpenedOnBehalfOf$inboundSchema;
    /** @deprecated use `EnrollmentOpenedOnBehalfOf$outboundSchema` instead. */
    EnrollmentOpenedOnBehalfOf$.outboundSchema = EnrollmentOpenedOnBehalfOf$outboundSchema;
})(EnrollmentOpenedOnBehalfOf$ || (EnrollmentOpenedOnBehalfOf$ = {}));
/** @internal */
export const TrustEnrollmentMetadata$inboundSchema = z.object({
    dividend_reinvestment_plan: EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep: EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
    opened_on_behalf_of: EnrollmentOpenedOnBehalfOf$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "opened_on_behalf_of": "openedOnBehalfOf",
    });
});
/** @internal */
export const TrustEnrollmentMetadata$outboundSchema = z.object({
    dividendReinvestmentPlan: EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep: EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    openedOnBehalfOf: EnrollmentOpenedOnBehalfOf$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        dividendReinvestmentPlan: "dividend_reinvestment_plan",
        fdicCashSweep: "fdic_cash_sweep",
        openedOnBehalfOf: "opened_on_behalf_of",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustEnrollmentMetadata$;
(function (TrustEnrollmentMetadata$) {
    /** @deprecated use `TrustEnrollmentMetadata$inboundSchema` instead. */
    TrustEnrollmentMetadata$.inboundSchema = TrustEnrollmentMetadata$inboundSchema;
    /** @deprecated use `TrustEnrollmentMetadata$outboundSchema` instead. */
    TrustEnrollmentMetadata$.outboundSchema = TrustEnrollmentMetadata$outboundSchema;
})(TrustEnrollmentMetadata$ || (TrustEnrollmentMetadata$ = {}));
export function trustEnrollmentMetadataToJSON(trustEnrollmentMetadata) {
    return JSON.stringify(TrustEnrollmentMetadata$outboundSchema.parse(trustEnrollmentMetadata));
}
export function trustEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustEnrollmentMetadata' from JSON`);
}
/** @internal */
export const EnrollmentType1$inboundSchema = z
    .union([
    z.nativeEnum(EnrollmentType1),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const EnrollmentType1$outboundSchema = z.union([
    z.nativeEnum(EnrollmentType1),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnrollmentType1$;
(function (EnrollmentType1$) {
    /** @deprecated use `EnrollmentType1$inboundSchema` instead. */
    EnrollmentType1$.inboundSchema = EnrollmentType1$inboundSchema;
    /** @deprecated use `EnrollmentType1$outboundSchema` instead. */
    EnrollmentType1$.outboundSchema = EnrollmentType1$outboundSchema;
})(EnrollmentType1$ || (EnrollmentType1$ = {}));
/** @internal */
export const VirtualAccountNumberEnrollmentMetadata$inboundSchema = z.object({
    routing_number: z.string().optional(),
    virtual_account_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "routing_number": "routingNumber",
        "virtual_account_number": "virtualAccountNumber",
    });
});
/** @internal */
export const VirtualAccountNumberEnrollmentMetadata$outboundSchema = z.object({
    routingNumber: z.string().optional(),
    virtualAccountNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        routingNumber: "routing_number",
        virtualAccountNumber: "virtual_account_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VirtualAccountNumberEnrollmentMetadata$;
(function (VirtualAccountNumberEnrollmentMetadata$) {
    /** @deprecated use `VirtualAccountNumberEnrollmentMetadata$inboundSchema` instead. */
    VirtualAccountNumberEnrollmentMetadata$.inboundSchema = VirtualAccountNumberEnrollmentMetadata$inboundSchema;
    /** @deprecated use `VirtualAccountNumberEnrollmentMetadata$outboundSchema` instead. */
    VirtualAccountNumberEnrollmentMetadata$.outboundSchema = VirtualAccountNumberEnrollmentMetadata$outboundSchema;
})(VirtualAccountNumberEnrollmentMetadata$ || (VirtualAccountNumberEnrollmentMetadata$ = {}));
export function virtualAccountNumberEnrollmentMetadataToJSON(virtualAccountNumberEnrollmentMetadata) {
    return JSON.stringify(VirtualAccountNumberEnrollmentMetadata$outboundSchema.parse(virtualAccountNumberEnrollmentMetadata));
}
export function virtualAccountNumberEnrollmentMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VirtualAccountNumberEnrollmentMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VirtualAccountNumberEnrollmentMetadata' from JSON`);
}
/** @internal */
export const Enrollment$inboundSchema = z.object({
    beneficiary_enrollment_metadata: z.nullable(z.lazy(() => BeneficiaryEnrollmentMetadata$inboundSchema)).optional(),
    consent_method: ConsentMethod$inboundSchema.optional(),
    corporation_enrollment_metadata: z.nullable(z.lazy(() => CorporationEnrollmentMetadata$inboundSchema)).optional(),
    custodial_enrollment_metadata: z.nullable(z.lazy(() => CustodialEnrollmentMetadata$inboundSchema)).optional(),
    enrollment_id: z.string().optional(),
    enrollment_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    estate_enrollment_metadata: z.nullable(z.lazy(() => EstateEnrollmentMetadata$inboundSchema)).optional(),
    foreign_individual_account_enrollment_metadata: z.nullable(z.lazy(() => ForeignIndividualAccountEnrollmentMetadata$inboundSchema)).optional(),
    foreign_joint_account_enrollment_metadata: z.nullable(z.lazy(() => ForeignJointAccountEnrollmentMetadata$inboundSchema)).optional(),
    fpsl_enrollment_metadata: z.nullable(z.lazy(() => FpslEnrollmentMetadata$inboundSchema)).optional(),
    individual_enrollment_metadata: z.nullable(z.lazy(() => IndividualEnrollmentMetadata$inboundSchema)).optional(),
    ira_beneficiary_enrollment_metadata: z.nullable(z.lazy(() => IraBeneficiaryEnrollmentMetadata$inboundSchema)).optional(),
    ira_rollover_enrollment_metadata: z.nullable(z.lazy(() => IraRolloverEnrollmentMetadata$inboundSchema)).optional(),
    ira_roth_enrollment_metadata: z.nullable(z.lazy(() => IraRothEnrollmentMetadata$inboundSchema)).optional(),
    ira_sep_enrollment_metadata: z.nullable(z.lazy(() => IraSepEnrollmentMetadata$inboundSchema)).optional(),
    ira_simple_enrollment_metadata: z.nullable(z.lazy(() => IraSimpleEnrollmentMetadata$inboundSchema)).optional(),
    ira_traditional_enrollment_metadata: z.nullable(z.lazy(() => IraTraditionalEnrollmentMetadata$inboundSchema)).optional(),
    joint_community_property_enrollment_metadata: z.nullable(z.lazy(() => JointCommunityPropertyEnrollmentMetadata$inboundSchema)).optional(),
    joint_tenants_by_entirety_enrollment_metadata: z.nullable(z.lazy(() => JointTenantsByEntiretyEnrollmentMetadata$inboundSchema)).optional(),
    joint_tenants_in_common_enrollment_metadata: z.nullable(z.lazy(() => JointTenantsInCommonEnrollmentMetadata$inboundSchema)).optional(),
    joint_with_rights_of_survivorship_enrollment_metadata: z.nullable(z.lazy(() => JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema)).optional(),
    llc_enrollment_metadata: z.nullable(z.lazy(() => LlcEnrollmentMetadata$inboundSchema)).optional(),
    name: z.string().optional(),
    operating_enrollment_metadata: z.nullable(z.lazy(() => OperatingEnrollmentMetadata$inboundSchema)).optional(),
    orders_options_trading_enrollment_metadata: z.nullable(z.lazy(() => OrdersOptionsTradingEnrollmentMetadata$inboundSchema)).optional(),
    principal_approver_id: z.string().optional(),
    state: EnrollmentState$inboundSchema.optional(),
    trust_enrollment_metadata: z.nullable(z.lazy(() => TrustEnrollmentMetadata$inboundSchema)).optional(),
    type: EnrollmentType1$inboundSchema.optional(),
    unenrollment_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    virtual_account_number_enrollment_metadata: z.nullable(z.lazy(() => VirtualAccountNumberEnrollmentMetadata$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "beneficiary_enrollment_metadata": "beneficiaryEnrollmentMetadata",
        "consent_method": "consentMethod",
        "corporation_enrollment_metadata": "corporationEnrollmentMetadata",
        "custodial_enrollment_metadata": "custodialEnrollmentMetadata",
        "enrollment_id": "enrollmentId",
        "enrollment_time": "enrollmentTime",
        "estate_enrollment_metadata": "estateEnrollmentMetadata",
        "foreign_individual_account_enrollment_metadata": "foreignIndividualAccountEnrollmentMetadata",
        "foreign_joint_account_enrollment_metadata": "foreignJointAccountEnrollmentMetadata",
        "fpsl_enrollment_metadata": "fpslEnrollmentMetadata",
        "individual_enrollment_metadata": "individualEnrollmentMetadata",
        "ira_beneficiary_enrollment_metadata": "iraBeneficiaryEnrollmentMetadata",
        "ira_rollover_enrollment_metadata": "iraRolloverEnrollmentMetadata",
        "ira_roth_enrollment_metadata": "iraRothEnrollmentMetadata",
        "ira_sep_enrollment_metadata": "iraSepEnrollmentMetadata",
        "ira_simple_enrollment_metadata": "iraSimpleEnrollmentMetadata",
        "ira_traditional_enrollment_metadata": "iraTraditionalEnrollmentMetadata",
        "joint_community_property_enrollment_metadata": "jointCommunityPropertyEnrollmentMetadata",
        "joint_tenants_by_entirety_enrollment_metadata": "jointTenantsByEntiretyEnrollmentMetadata",
        "joint_tenants_in_common_enrollment_metadata": "jointTenantsInCommonEnrollmentMetadata",
        "joint_with_rights_of_survivorship_enrollment_metadata": "jointWithRightsOfSurvivorshipEnrollmentMetadata",
        "llc_enrollment_metadata": "llcEnrollmentMetadata",
        "operating_enrollment_metadata": "operatingEnrollmentMetadata",
        "orders_options_trading_enrollment_metadata": "ordersOptionsTradingEnrollmentMetadata",
        "principal_approver_id": "principalApproverId",
        "trust_enrollment_metadata": "trustEnrollmentMetadata",
        "unenrollment_time": "unenrollmentTime",
        "virtual_account_number_enrollment_metadata": "virtualAccountNumberEnrollmentMetadata",
    });
});
/** @internal */
export const Enrollment$outboundSchema = z.object({
    beneficiaryEnrollmentMetadata: z.nullable(z.lazy(() => BeneficiaryEnrollmentMetadata$outboundSchema)).optional(),
    consentMethod: ConsentMethod$outboundSchema.optional(),
    corporationEnrollmentMetadata: z.nullable(z.lazy(() => CorporationEnrollmentMetadata$outboundSchema)).optional(),
    custodialEnrollmentMetadata: z.nullable(z.lazy(() => CustodialEnrollmentMetadata$outboundSchema)).optional(),
    enrollmentId: z.string().optional(),
    enrollmentTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    estateEnrollmentMetadata: z.nullable(z.lazy(() => EstateEnrollmentMetadata$outboundSchema)).optional(),
    foreignIndividualAccountEnrollmentMetadata: z.nullable(z.lazy(() => ForeignIndividualAccountEnrollmentMetadata$outboundSchema)).optional(),
    foreignJointAccountEnrollmentMetadata: z.nullable(z.lazy(() => ForeignJointAccountEnrollmentMetadata$outboundSchema)).optional(),
    fpslEnrollmentMetadata: z.nullable(z.lazy(() => FpslEnrollmentMetadata$outboundSchema)).optional(),
    individualEnrollmentMetadata: z.nullable(z.lazy(() => IndividualEnrollmentMetadata$outboundSchema)).optional(),
    iraBeneficiaryEnrollmentMetadata: z.nullable(z.lazy(() => IraBeneficiaryEnrollmentMetadata$outboundSchema)).optional(),
    iraRolloverEnrollmentMetadata: z.nullable(z.lazy(() => IraRolloverEnrollmentMetadata$outboundSchema)).optional(),
    iraRothEnrollmentMetadata: z.nullable(z.lazy(() => IraRothEnrollmentMetadata$outboundSchema)).optional(),
    iraSepEnrollmentMetadata: z.nullable(z.lazy(() => IraSepEnrollmentMetadata$outboundSchema)).optional(),
    iraSimpleEnrollmentMetadata: z.nullable(z.lazy(() => IraSimpleEnrollmentMetadata$outboundSchema)).optional(),
    iraTraditionalEnrollmentMetadata: z.nullable(z.lazy(() => IraTraditionalEnrollmentMetadata$outboundSchema)).optional(),
    jointCommunityPropertyEnrollmentMetadata: z.nullable(z.lazy(() => JointCommunityPropertyEnrollmentMetadata$outboundSchema)).optional(),
    jointTenantsByEntiretyEnrollmentMetadata: z.nullable(z.lazy(() => JointTenantsByEntiretyEnrollmentMetadata$outboundSchema)).optional(),
    jointTenantsInCommonEnrollmentMetadata: z.nullable(z.lazy(() => JointTenantsInCommonEnrollmentMetadata$outboundSchema)).optional(),
    jointWithRightsOfSurvivorshipEnrollmentMetadata: z.nullable(z.lazy(() => JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema)).optional(),
    llcEnrollmentMetadata: z.nullable(z.lazy(() => LlcEnrollmentMetadata$outboundSchema)).optional(),
    name: z.string().optional(),
    operatingEnrollmentMetadata: z.nullable(z.lazy(() => OperatingEnrollmentMetadata$outboundSchema)).optional(),
    ordersOptionsTradingEnrollmentMetadata: z.nullable(z.lazy(() => OrdersOptionsTradingEnrollmentMetadata$outboundSchema)).optional(),
    principalApproverId: z.string().optional(),
    state: EnrollmentState$outboundSchema.optional(),
    trustEnrollmentMetadata: z.nullable(z.lazy(() => TrustEnrollmentMetadata$outboundSchema)).optional(),
    type: EnrollmentType1$outboundSchema.optional(),
    unenrollmentTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    virtualAccountNumberEnrollmentMetadata: z.nullable(z.lazy(() => VirtualAccountNumberEnrollmentMetadata$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        beneficiaryEnrollmentMetadata: "beneficiary_enrollment_metadata",
        consentMethod: "consent_method",
        corporationEnrollmentMetadata: "corporation_enrollment_metadata",
        custodialEnrollmentMetadata: "custodial_enrollment_metadata",
        enrollmentId: "enrollment_id",
        enrollmentTime: "enrollment_time",
        estateEnrollmentMetadata: "estate_enrollment_metadata",
        foreignIndividualAccountEnrollmentMetadata: "foreign_individual_account_enrollment_metadata",
        foreignJointAccountEnrollmentMetadata: "foreign_joint_account_enrollment_metadata",
        fpslEnrollmentMetadata: "fpsl_enrollment_metadata",
        individualEnrollmentMetadata: "individual_enrollment_metadata",
        iraBeneficiaryEnrollmentMetadata: "ira_beneficiary_enrollment_metadata",
        iraRolloverEnrollmentMetadata: "ira_rollover_enrollment_metadata",
        iraRothEnrollmentMetadata: "ira_roth_enrollment_metadata",
        iraSepEnrollmentMetadata: "ira_sep_enrollment_metadata",
        iraSimpleEnrollmentMetadata: "ira_simple_enrollment_metadata",
        iraTraditionalEnrollmentMetadata: "ira_traditional_enrollment_metadata",
        jointCommunityPropertyEnrollmentMetadata: "joint_community_property_enrollment_metadata",
        jointTenantsByEntiretyEnrollmentMetadata: "joint_tenants_by_entirety_enrollment_metadata",
        jointTenantsInCommonEnrollmentMetadata: "joint_tenants_in_common_enrollment_metadata",
        jointWithRightsOfSurvivorshipEnrollmentMetadata: "joint_with_rights_of_survivorship_enrollment_metadata",
        llcEnrollmentMetadata: "llc_enrollment_metadata",
        operatingEnrollmentMetadata: "operating_enrollment_metadata",
        ordersOptionsTradingEnrollmentMetadata: "orders_options_trading_enrollment_metadata",
        principalApproverId: "principal_approver_id",
        trustEnrollmentMetadata: "trust_enrollment_metadata",
        unenrollmentTime: "unenrollment_time",
        virtualAccountNumberEnrollmentMetadata: "virtual_account_number_enrollment_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Enrollment$;
(function (Enrollment$) {
    /** @deprecated use `Enrollment$inboundSchema` instead. */
    Enrollment$.inboundSchema = Enrollment$inboundSchema;
    /** @deprecated use `Enrollment$outboundSchema` instead. */
    Enrollment$.outboundSchema = Enrollment$outboundSchema;
})(Enrollment$ || (Enrollment$ = {}));
export function enrollmentToJSON(enrollment) {
    return JSON.stringify(Enrollment$outboundSchema.parse(enrollment));
}
export function enrollmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Enrollment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Enrollment' from JSON`);
}
//# sourceMappingURL=enrollment.js.map