/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The bank account type.
 */
export var BankAccountUpdateType;
(function (BankAccountUpdateType) {
    BankAccountUpdateType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    BankAccountUpdateType["Checking"] = "CHECKING";
    BankAccountUpdateType["Savings"] = "SAVINGS";
})(BankAccountUpdateType || (BankAccountUpdateType = {}));
/** @internal */
export const BankAccountUpdateType$inboundSchema = z
    .union([
    z.nativeEnum(BankAccountUpdateType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BankAccountUpdateType$outboundSchema = z.union([
    z.nativeEnum(BankAccountUpdateType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankAccountUpdateType$;
(function (BankAccountUpdateType$) {
    /** @deprecated use `BankAccountUpdateType$inboundSchema` instead. */
    BankAccountUpdateType$.inboundSchema = BankAccountUpdateType$inboundSchema;
    /** @deprecated use `BankAccountUpdateType$outboundSchema` instead. */
    BankAccountUpdateType$.outboundSchema = BankAccountUpdateType$outboundSchema;
})(BankAccountUpdateType$ || (BankAccountUpdateType$ = {}));
/** @internal */
export const BankAccountUpdate$inboundSchema = z.object({
    account_number: z.string().optional(),
    owner: z.string().optional(),
    routing_number: z.string().optional(),
    type: BankAccountUpdateType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "routing_number": "routingNumber",
    });
});
/** @internal */
export const BankAccountUpdate$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    owner: z.string().optional(),
    routingNumber: z.string().optional(),
    type: BankAccountUpdateType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        routingNumber: "routing_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankAccountUpdate$;
(function (BankAccountUpdate$) {
    /** @deprecated use `BankAccountUpdate$inboundSchema` instead. */
    BankAccountUpdate$.inboundSchema = BankAccountUpdate$inboundSchema;
    /** @deprecated use `BankAccountUpdate$outboundSchema` instead. */
    BankAccountUpdate$.outboundSchema = BankAccountUpdate$outboundSchema;
})(BankAccountUpdate$ || (BankAccountUpdate$ = {}));
export function bankAccountUpdateToJSON(bankAccountUpdate) {
    return JSON.stringify(BankAccountUpdate$outboundSchema.parse(bankAccountUpdate));
}
export function bankAccountUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankAccountUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankAccountUpdate' from JSON`);
}
//# sourceMappingURL=bankaccountupdate.js.map