/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ImmediateFamilyMember$inboundSchema, ImmediateFamilyMember$outboundSchema, } from "./immediatefamilymember.js";
/** @internal */
export const RelatedPep$inboundSchema = z.object({
    immediate_family_members: z.array(ImmediateFamilyMember$inboundSchema)
        .optional(),
    organization: z.string().optional(),
    pep_name: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "immediate_family_members": "immediateFamilyMembers",
        "pep_name": "pepName",
    });
});
/** @internal */
export const RelatedPep$outboundSchema = z.object({
    immediateFamilyMembers: z.array(ImmediateFamilyMember$outboundSchema)
        .optional(),
    organization: z.string().optional(),
    pepName: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        immediateFamilyMembers: "immediate_family_members",
        pepName: "pep_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RelatedPep$;
(function (RelatedPep$) {
    /** @deprecated use `RelatedPep$inboundSchema` instead. */
    RelatedPep$.inboundSchema = RelatedPep$inboundSchema;
    /** @deprecated use `RelatedPep$outboundSchema` instead. */
    RelatedPep$.outboundSchema = RelatedPep$outboundSchema;
})(RelatedPep$ || (RelatedPep$ = {}));
export function relatedPepToJSON(relatedPep) {
    return JSON.stringify(RelatedPep$outboundSchema.parse(relatedPep));
}
export function relatedPepFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RelatedPep$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RelatedPep' from JSON`);
}
//# sourceMappingURL=relatedpep.js.map