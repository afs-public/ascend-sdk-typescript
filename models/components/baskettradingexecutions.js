/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BasketTradingExecutedPrice$inboundSchema, BasketTradingExecutedPrice$outboundSchema, } from "./baskettradingexecutedprice.js";
/** @internal */
export const BasketTradingExecutionsQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketTradingExecutionsQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketTradingExecutionsQuantity$;
(function (BasketTradingExecutionsQuantity$) {
    /** @deprecated use `BasketTradingExecutionsQuantity$inboundSchema` instead. */
    BasketTradingExecutionsQuantity$.inboundSchema = BasketTradingExecutionsQuantity$inboundSchema;
    /** @deprecated use `BasketTradingExecutionsQuantity$outboundSchema` instead. */
    BasketTradingExecutionsQuantity$.outboundSchema = BasketTradingExecutionsQuantity$outboundSchema;
})(BasketTradingExecutionsQuantity$ || (BasketTradingExecutionsQuantity$ = {}));
export function basketTradingExecutionsQuantityToJSON(basketTradingExecutionsQuantity) {
    return JSON.stringify(BasketTradingExecutionsQuantity$outboundSchema.parse(basketTradingExecutionsQuantity));
}
export function basketTradingExecutionsQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketTradingExecutionsQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketTradingExecutionsQuantity' from JSON`);
}
/** @internal */
export const BasketTradingExecutions$inboundSchema = z.object({
    executed_prices: z.array(BasketTradingExecutedPrice$inboundSchema).optional(),
    executed_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    quantity: z.nullable(z.lazy(() => BasketTradingExecutionsQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "executed_prices": "executedPrices",
        "executed_time": "executedTime",
    });
});
/** @internal */
export const BasketTradingExecutions$outboundSchema = z.object({
    executedPrices: z.array(BasketTradingExecutedPrice$outboundSchema).optional(),
    executedTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    quantity: z.nullable(z.lazy(() => BasketTradingExecutionsQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        executedPrices: "executed_prices",
        executedTime: "executed_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketTradingExecutions$;
(function (BasketTradingExecutions$) {
    /** @deprecated use `BasketTradingExecutions$inboundSchema` instead. */
    BasketTradingExecutions$.inboundSchema = BasketTradingExecutions$inboundSchema;
    /** @deprecated use `BasketTradingExecutions$outboundSchema` instead. */
    BasketTradingExecutions$.outboundSchema = BasketTradingExecutions$outboundSchema;
})(BasketTradingExecutions$ || (BasketTradingExecutions$ = {}));
export function basketTradingExecutionsToJSON(basketTradingExecutions) {
    return JSON.stringify(BasketTradingExecutions$outboundSchema.parse(basketTradingExecutions));
}
export function basketTradingExecutionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketTradingExecutions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketTradingExecutions' from JSON`);
}
//# sourceMappingURL=baskettradingexecutions.js.map