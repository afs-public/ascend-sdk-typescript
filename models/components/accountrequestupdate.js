/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AccountTaxProfileUpdate$inboundSchema, AccountTaxProfileUpdate$outboundSchema, } from "./accounttaxprofileupdate.js";
import { IdentifierUpdate$inboundSchema, IdentifierUpdate$outboundSchema, } from "./identifierupdate.js";
import { InterestedPartyUpdate$inboundSchema, InterestedPartyUpdate$outboundSchema, } from "./interestedpartyupdate.js";
import { InvestmentProfileUpdate$inboundSchema, InvestmentProfileUpdate$outboundSchema, } from "./investmentprofileupdate.js";
import { PartyRequestUpdate$inboundSchema, PartyRequestUpdate$outboundSchema, } from "./partyrequestupdate.js";
import { TrustedContactUpdate$inboundSchema, TrustedContactUpdate$outboundSchema, } from "./trustedcontactupdate.js";
/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
export var AccountRequestUpdateCatAccountHolderType;
(function (AccountRequestUpdateCatAccountHolderType) {
    AccountRequestUpdateCatAccountHolderType["CatAccountHolderTypeUnspecified"] = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED";
    AccountRequestUpdateCatAccountHolderType["AInstitutionalCustomer"] = "A_INSTITUTIONAL_CUSTOMER";
    AccountRequestUpdateCatAccountHolderType["EEmployeeAccount"] = "E_EMPLOYEE_ACCOUNT";
    AccountRequestUpdateCatAccountHolderType["FForeign"] = "F_FOREIGN";
    AccountRequestUpdateCatAccountHolderType["IIndividual"] = "I_INDIVIDUAL";
    AccountRequestUpdateCatAccountHolderType["OMarketMaking"] = "O_MARKET_MAKING";
    AccountRequestUpdateCatAccountHolderType["VAgencyAveragePriceAccount"] = "V_AGENCY_AVERAGE_PRICE_ACCOUNT";
    AccountRequestUpdateCatAccountHolderType["POtherProprietary"] = "P_OTHER_PROPRIETARY";
    AccountRequestUpdateCatAccountHolderType["XErrorAccount"] = "X_ERROR_ACCOUNT";
})(AccountRequestUpdateCatAccountHolderType || (AccountRequestUpdateCatAccountHolderType = {}));
/** @internal */
export const AccountRequestUpdateCatAccountHolderType$inboundSchema = z
    .union([
    z.nativeEnum(AccountRequestUpdateCatAccountHolderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const AccountRequestUpdateCatAccountHolderType$outboundSchema = z.union([
    z.nativeEnum(AccountRequestUpdateCatAccountHolderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountRequestUpdateCatAccountHolderType$;
(function (AccountRequestUpdateCatAccountHolderType$) {
    /** @deprecated use `AccountRequestUpdateCatAccountHolderType$inboundSchema` instead. */
    AccountRequestUpdateCatAccountHolderType$.inboundSchema = AccountRequestUpdateCatAccountHolderType$inboundSchema;
    /** @deprecated use `AccountRequestUpdateCatAccountHolderType$outboundSchema` instead. */
    AccountRequestUpdateCatAccountHolderType$.outboundSchema = AccountRequestUpdateCatAccountHolderType$outboundSchema;
})(AccountRequestUpdateCatAccountHolderType$ || (AccountRequestUpdateCatAccountHolderType$ = {}));
/** @internal */
export const AccountRequestUpdate$inboundSchema = z.object({
    accepts_issuer_direct_communication: z.boolean().optional(),
    advised: z.boolean().optional(),
    cat_account_holder_type: AccountRequestUpdateCatAccountHolderType$inboundSchema.optional(),
    identifiers: z.array(IdentifierUpdate$inboundSchema).optional(),
    interested_parties: z.array(InterestedPartyUpdate$inboundSchema).optional(),
    investment_profile: InvestmentProfileUpdate$inboundSchema.optional(),
    managed: z.boolean().optional(),
    parties: z.array(PartyRequestUpdate$inboundSchema).optional(),
    primary_registered_rep_id: z.string().optional(),
    tax_profile: AccountTaxProfileUpdate$inboundSchema.optional(),
    trusted_contacts: z.array(TrustedContactUpdate$inboundSchema).optional(),
    wrap_fee_billed: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "accepts_issuer_direct_communication": "acceptsIssuerDirectCommunication",
        "cat_account_holder_type": "catAccountHolderType",
        "interested_parties": "interestedParties",
        "investment_profile": "investmentProfile",
        "primary_registered_rep_id": "primaryRegisteredRepId",
        "tax_profile": "taxProfile",
        "trusted_contacts": "trustedContacts",
        "wrap_fee_billed": "wrapFeeBilled",
    });
});
/** @internal */
export const AccountRequestUpdate$outboundSchema = z.object({
    acceptsIssuerDirectCommunication: z.boolean().optional(),
    advised: z.boolean().optional(),
    catAccountHolderType: AccountRequestUpdateCatAccountHolderType$outboundSchema
        .optional(),
    identifiers: z.array(IdentifierUpdate$outboundSchema).optional(),
    interestedParties: z.array(InterestedPartyUpdate$outboundSchema).optional(),
    investmentProfile: InvestmentProfileUpdate$outboundSchema.optional(),
    managed: z.boolean().optional(),
    parties: z.array(PartyRequestUpdate$outboundSchema).optional(),
    primaryRegisteredRepId: z.string().optional(),
    taxProfile: AccountTaxProfileUpdate$outboundSchema.optional(),
    trustedContacts: z.array(TrustedContactUpdate$outboundSchema).optional(),
    wrapFeeBilled: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        acceptsIssuerDirectCommunication: "accepts_issuer_direct_communication",
        catAccountHolderType: "cat_account_holder_type",
        interestedParties: "interested_parties",
        investmentProfile: "investment_profile",
        primaryRegisteredRepId: "primary_registered_rep_id",
        taxProfile: "tax_profile",
        trustedContacts: "trusted_contacts",
        wrapFeeBilled: "wrap_fee_billed",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountRequestUpdate$;
(function (AccountRequestUpdate$) {
    /** @deprecated use `AccountRequestUpdate$inboundSchema` instead. */
    AccountRequestUpdate$.inboundSchema = AccountRequestUpdate$inboundSchema;
    /** @deprecated use `AccountRequestUpdate$outboundSchema` instead. */
    AccountRequestUpdate$.outboundSchema = AccountRequestUpdate$outboundSchema;
})(AccountRequestUpdate$ || (AccountRequestUpdate$ = {}));
export function accountRequestUpdateToJSON(accountRequestUpdate) {
    return JSON.stringify(AccountRequestUpdate$outboundSchema.parse(accountRequestUpdate));
}
export function accountRequestUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountRequestUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountRequestUpdate' from JSON`);
}
//# sourceMappingURL=accountrequestupdate.js.map