/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { WatchlistMatchUpdate$inboundSchema, WatchlistMatchUpdate$outboundSchema, } from "./watchlistmatchupdate.js";
/**
 * The screen state of one screening within an investigation, one of:
 *
 * @remarks
 * - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
 * - `PENDING` - Screen result is pending.
 * - `PASSED` - Screen result has passed.
 * - `FAILED` - Screen result has failed.
 * - `NEEDS_REVIEW` - Screen result needs manual review.
 * - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
 * - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
 */
export var InvestigationUpdateIdentityVerification;
(function (InvestigationUpdateIdentityVerification) {
    InvestigationUpdateIdentityVerification["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    InvestigationUpdateIdentityVerification["Pending"] = "PENDING";
    InvestigationUpdateIdentityVerification["Passed"] = "PASSED";
    InvestigationUpdateIdentityVerification["Failed"] = "FAILED";
    InvestigationUpdateIdentityVerification["NeedsReview"] = "NEEDS_REVIEW";
    InvestigationUpdateIdentityVerification["DeferredReview"] = "DEFERRED_REVIEW";
    InvestigationUpdateIdentityVerification["OutOfScope"] = "OUT_OF_SCOPE";
})(InvestigationUpdateIdentityVerification || (InvestigationUpdateIdentityVerification = {}));
/**
 * The state of an investigation request, one of:
 *
 * @remarks
 * - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
 * - `OPEN` - The investigation request is open.
 * - `CLOSED` - The investigation request is closed.
 */
export var InvestigationUpdateInvestigationRequestState;
(function (InvestigationUpdateInvestigationRequestState) {
    InvestigationUpdateInvestigationRequestState["InvestigationRequestStateUnspecified"] = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED";
    InvestigationUpdateInvestigationRequestState["Open"] = "OPEN";
    InvestigationUpdateInvestigationRequestState["Closed"] = "CLOSED";
})(InvestigationUpdateInvestigationRequestState || (InvestigationUpdateInvestigationRequestState = {}));
/** @internal */
export const InvestigationUpdateIdentityVerification$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationUpdateIdentityVerification),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InvestigationUpdateIdentityVerification$outboundSchema = z.union([
    z.nativeEnum(InvestigationUpdateIdentityVerification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationUpdateIdentityVerification$;
(function (InvestigationUpdateIdentityVerification$) {
    /** @deprecated use `InvestigationUpdateIdentityVerification$inboundSchema` instead. */
    InvestigationUpdateIdentityVerification$.inboundSchema = InvestigationUpdateIdentityVerification$inboundSchema;
    /** @deprecated use `InvestigationUpdateIdentityVerification$outboundSchema` instead. */
    InvestigationUpdateIdentityVerification$.outboundSchema = InvestigationUpdateIdentityVerification$outboundSchema;
})(InvestigationUpdateIdentityVerification$ || (InvestigationUpdateIdentityVerification$ = {}));
/** @internal */
export const InvestigationUpdateInvestigationRequestState$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationUpdateInvestigationRequestState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InvestigationUpdateInvestigationRequestState$outboundSchema = z.union([
    z.nativeEnum(InvestigationUpdateInvestigationRequestState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationUpdateInvestigationRequestState$;
(function (InvestigationUpdateInvestigationRequestState$) {
    /** @deprecated use `InvestigationUpdateInvestigationRequestState$inboundSchema` instead. */
    InvestigationUpdateInvestigationRequestState$.inboundSchema = InvestigationUpdateInvestigationRequestState$inboundSchema;
    /** @deprecated use `InvestigationUpdateInvestigationRequestState$outboundSchema` instead. */
    InvestigationUpdateInvestigationRequestState$.outboundSchema = InvestigationUpdateInvestigationRequestState$outboundSchema;
})(InvestigationUpdateInvestigationRequestState$ || (InvestigationUpdateInvestigationRequestState$ = {}));
/** @internal */
export const InvestigationUpdate$inboundSchema = z.object({
    client_id: z.string().optional(),
    comment: z.string().optional(),
    identity_verification: InvestigationUpdateIdentityVerification$inboundSchema
        .optional(),
    investigation_request_state: InvestigationUpdateInvestigationRequestState$inboundSchema.optional(),
    watchlist_matches: z.array(WatchlistMatchUpdate$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "identity_verification": "identityVerification",
        "investigation_request_state": "investigationRequestState",
        "watchlist_matches": "watchlistMatches",
    });
});
/** @internal */
export const InvestigationUpdate$outboundSchema = z.object({
    clientId: z.string().optional(),
    comment: z.string().optional(),
    identityVerification: InvestigationUpdateIdentityVerification$outboundSchema
        .optional(),
    investigationRequestState: InvestigationUpdateInvestigationRequestState$outboundSchema.optional(),
    watchlistMatches: z.array(WatchlistMatchUpdate$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        identityVerification: "identity_verification",
        investigationRequestState: "investigation_request_state",
        watchlistMatches: "watchlist_matches",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationUpdate$;
(function (InvestigationUpdate$) {
    /** @deprecated use `InvestigationUpdate$inboundSchema` instead. */
    InvestigationUpdate$.inboundSchema = InvestigationUpdate$inboundSchema;
    /** @deprecated use `InvestigationUpdate$outboundSchema` instead. */
    InvestigationUpdate$.outboundSchema = InvestigationUpdate$outboundSchema;
})(InvestigationUpdate$ || (InvestigationUpdate$ = {}));
export function investigationUpdateToJSON(investigationUpdate) {
    return JSON.stringify(InvestigationUpdate$outboundSchema.parse(investigationUpdate));
}
export function investigationUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationUpdate' from JSON`);
}
//# sourceMappingURL=investigationupdate.js.map