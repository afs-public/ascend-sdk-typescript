"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvestigationUpdate$ = exports.InvestigationUpdate$outboundSchema = exports.InvestigationUpdate$inboundSchema = exports.InvestigationUpdateInvestigationRequestState$ = exports.InvestigationUpdateInvestigationRequestState$outboundSchema = exports.InvestigationUpdateInvestigationRequestState$inboundSchema = exports.InvestigationUpdateIdentityVerification$ = exports.InvestigationUpdateIdentityVerification$outboundSchema = exports.InvestigationUpdateIdentityVerification$inboundSchema = exports.InvestigationUpdateInvestigationRequestState = exports.InvestigationUpdateIdentityVerification = void 0;
exports.investigationUpdateToJSON = investigationUpdateToJSON;
exports.investigationUpdateFromJSON = investigationUpdateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
const watchlistmatchupdate_js_1 = require("./watchlistmatchupdate.js");
/**
 * The screen state of one screening within an investigation, one of:
 *
 * @remarks
 * - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
 * - `PENDING` - Screen result is pending.
 * - `PASSED` - Screen result has passed.
 * - `FAILED` - Screen result has failed.
 * - `NEEDS_REVIEW` - Screen result needs manual review.
 * - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
 * - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
 */
var InvestigationUpdateIdentityVerification;
(function (InvestigationUpdateIdentityVerification) {
    InvestigationUpdateIdentityVerification["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    InvestigationUpdateIdentityVerification["Pending"] = "PENDING";
    InvestigationUpdateIdentityVerification["Passed"] = "PASSED";
    InvestigationUpdateIdentityVerification["Failed"] = "FAILED";
    InvestigationUpdateIdentityVerification["NeedsReview"] = "NEEDS_REVIEW";
    InvestigationUpdateIdentityVerification["DeferredReview"] = "DEFERRED_REVIEW";
    InvestigationUpdateIdentityVerification["OutOfScope"] = "OUT_OF_SCOPE";
})(InvestigationUpdateIdentityVerification || (exports.InvestigationUpdateIdentityVerification = InvestigationUpdateIdentityVerification = {}));
/**
 * The state of an investigation request, one of:
 *
 * @remarks
 * - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
 * - `OPEN` - The investigation request is open.
 * - `CLOSED` - The investigation request is closed.
 */
var InvestigationUpdateInvestigationRequestState;
(function (InvestigationUpdateInvestigationRequestState) {
    InvestigationUpdateInvestigationRequestState["InvestigationRequestStateUnspecified"] = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED";
    InvestigationUpdateInvestigationRequestState["Open"] = "OPEN";
    InvestigationUpdateInvestigationRequestState["Closed"] = "CLOSED";
})(InvestigationUpdateInvestigationRequestState || (exports.InvestigationUpdateInvestigationRequestState = InvestigationUpdateInvestigationRequestState = {}));
/** @internal */
exports.InvestigationUpdateIdentityVerification$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationUpdateIdentityVerification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InvestigationUpdateIdentityVerification$outboundSchema = z.union([
    z.nativeEnum(InvestigationUpdateIdentityVerification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationUpdateIdentityVerification$;
(function (InvestigationUpdateIdentityVerification$) {
    /** @deprecated use `InvestigationUpdateIdentityVerification$inboundSchema` instead. */
    InvestigationUpdateIdentityVerification$.inboundSchema = exports.InvestigationUpdateIdentityVerification$inboundSchema;
    /** @deprecated use `InvestigationUpdateIdentityVerification$outboundSchema` instead. */
    InvestigationUpdateIdentityVerification$.outboundSchema = exports.InvestigationUpdateIdentityVerification$outboundSchema;
})(InvestigationUpdateIdentityVerification$ || (exports.InvestigationUpdateIdentityVerification$ = InvestigationUpdateIdentityVerification$ = {}));
/** @internal */
exports.InvestigationUpdateInvestigationRequestState$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationUpdateInvestigationRequestState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InvestigationUpdateInvestigationRequestState$outboundSchema = z.union([
    z.nativeEnum(InvestigationUpdateInvestigationRequestState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationUpdateInvestigationRequestState$;
(function (InvestigationUpdateInvestigationRequestState$) {
    /** @deprecated use `InvestigationUpdateInvestigationRequestState$inboundSchema` instead. */
    InvestigationUpdateInvestigationRequestState$.inboundSchema = exports.InvestigationUpdateInvestigationRequestState$inboundSchema;
    /** @deprecated use `InvestigationUpdateInvestigationRequestState$outboundSchema` instead. */
    InvestigationUpdateInvestigationRequestState$.outboundSchema = exports.InvestigationUpdateInvestigationRequestState$outboundSchema;
})(InvestigationUpdateInvestigationRequestState$ || (exports.InvestigationUpdateInvestigationRequestState$ = InvestigationUpdateInvestigationRequestState$ = {}));
/** @internal */
exports.InvestigationUpdate$inboundSchema = z.object({
    client_id: z.string().optional(),
    comment: z.string().optional(),
    identity_verification: exports.InvestigationUpdateIdentityVerification$inboundSchema
        .optional(),
    investigation_request_state: exports.InvestigationUpdateInvestigationRequestState$inboundSchema.optional(),
    watchlist_matches: z.array(watchlistmatchupdate_js_1.WatchlistMatchUpdate$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "client_id": "clientId",
        "identity_verification": "identityVerification",
        "investigation_request_state": "investigationRequestState",
        "watchlist_matches": "watchlistMatches",
    });
});
/** @internal */
exports.InvestigationUpdate$outboundSchema = z.object({
    clientId: z.string().optional(),
    comment: z.string().optional(),
    identityVerification: exports.InvestigationUpdateIdentityVerification$outboundSchema
        .optional(),
    investigationRequestState: exports.InvestigationUpdateInvestigationRequestState$outboundSchema.optional(),
    watchlistMatches: z.array(watchlistmatchupdate_js_1.WatchlistMatchUpdate$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        clientId: "client_id",
        identityVerification: "identity_verification",
        investigationRequestState: "investigation_request_state",
        watchlistMatches: "watchlist_matches",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationUpdate$;
(function (InvestigationUpdate$) {
    /** @deprecated use `InvestigationUpdate$inboundSchema` instead. */
    InvestigationUpdate$.inboundSchema = exports.InvestigationUpdate$inboundSchema;
    /** @deprecated use `InvestigationUpdate$outboundSchema` instead. */
    InvestigationUpdate$.outboundSchema = exports.InvestigationUpdate$outboundSchema;
})(InvestigationUpdate$ || (exports.InvestigationUpdate$ = InvestigationUpdate$ = {}));
function investigationUpdateToJSON(investigationUpdate) {
    return JSON.stringify(exports.InvestigationUpdate$outboundSchema.parse(investigationUpdate));
}
function investigationUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InvestigationUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationUpdate' from JSON`);
}
//# sourceMappingURL=investigationupdate.js.map