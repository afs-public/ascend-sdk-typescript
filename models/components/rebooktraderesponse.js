/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BookingFee$inboundSchema, BookingFee$outboundSchema, } from "./bookingfee.js";
import { BookingLot$inboundSchema, BookingLot$outboundSchema, } from "./bookinglot.js";
import { Execution$inboundSchema, Execution$outboundSchema, } from "./execution.js";
/**
 * Type of the asset being traded.
 */
export var RebookTradeResponseAssetType;
(function (RebookTradeResponseAssetType) {
    RebookTradeResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeResponseAssetType["Equity"] = "EQUITY";
    RebookTradeResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeResponseAssetType || (RebookTradeResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var RebookTradeResponseBrokerCapacity;
(function (RebookTradeResponseBrokerCapacity) {
    RebookTradeResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeResponseBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeResponseBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeResponseBrokerCapacity || (RebookTradeResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var RebookTradeResponseIdentifierType;
(function (RebookTradeResponseIdentifierType) {
    RebookTradeResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeResponseIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeResponseIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeResponseIdentifierType["Cusip"] = "CUSIP";
    RebookTradeResponseIdentifierType["Isin"] = "ISIN";
})(RebookTradeResponseIdentifierType || (RebookTradeResponseIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var RebookTradeResponseRouteType;
(function (RebookTradeResponseRouteType) {
    RebookTradeResponseRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RebookTradeResponseRouteType["Dma"] = "DMA";
    RebookTradeResponseRouteType["Mngd"] = "MNGD";
    RebookTradeResponseRouteType["Quik"] = "QUIK";
    RebookTradeResponseRouteType["Algo"] = "ALGO";
    RebookTradeResponseRouteType["Away"] = "AWAY";
    RebookTradeResponseRouteType["Corr"] = "CORR";
    RebookTradeResponseRouteType["Boats"] = "BOATS";
})(RebookTradeResponseRouteType || (RebookTradeResponseRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var RebookTradeResponseSide;
(function (RebookTradeResponseSide) {
    RebookTradeResponseSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeResponseSide["Buy"] = "BUY";
    RebookTradeResponseSide["Sell"] = "SELL";
})(RebookTradeResponseSide || (RebookTradeResponseSide = {}));
/**
 * Side modifier for the trade.
 */
export var RebookTradeResponseSideModifier;
(function (RebookTradeResponseSideModifier) {
    RebookTradeResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeResponseSideModifier["Short"] = "SHORT";
    RebookTradeResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeResponseSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeResponseSideModifier["Open"] = "OPEN";
    RebookTradeResponseSideModifier["Close"] = "CLOSE";
})(RebookTradeResponseSideModifier || (RebookTradeResponseSideModifier = {}));
export var RebookTradeResponseSpecialInstructions;
(function (RebookTradeResponseSpecialInstructions) {
    RebookTradeResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeResponseSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeResponseSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeResponseSpecialInstructions || (RebookTradeResponseSpecialInstructions = {}));
/**
 * Exchange venue
 */
export var RebookTradeResponseVenue;
(function (RebookTradeResponseVenue) {
    RebookTradeResponseVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    RebookTradeResponseVenue["Amex"] = "AMEX";
    RebookTradeResponseVenue["Arca"] = "ARCA";
    RebookTradeResponseVenue["Bats"] = "BATS";
    RebookTradeResponseVenue["BatsByx"] = "BATS_BYX";
    RebookTradeResponseVenue["Boston"] = "BOSTON";
    RebookTradeResponseVenue["Box"] = "BOX";
    RebookTradeResponseVenue["Bzx"] = "BZX";
    RebookTradeResponseVenue["C2"] = "C2";
    RebookTradeResponseVenue["Cboe"] = "CBOE";
    RebookTradeResponseVenue["Chicago"] = "CHICAGO";
    RebookTradeResponseVenue["Cincinnati"] = "CINCINNATI";
    RebookTradeResponseVenue["Edga"] = "EDGA";
    RebookTradeResponseVenue["Edgx"] = "EDGX";
    RebookTradeResponseVenue["Exclearing"] = "EXCLEARING";
    RebookTradeResponseVenue["Iex"] = "IEX";
    RebookTradeResponseVenue["Ise"] = "ISE";
    RebookTradeResponseVenue["IseGemini"] = "ISE_GEMINI";
    RebookTradeResponseVenue["Miax"] = "MIAX";
    RebookTradeResponseVenue["Nasdaq"] = "NASDAQ";
    RebookTradeResponseVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    RebookTradeResponseVenue["Nyse"] = "NYSE";
    RebookTradeResponseVenue["Phlx"] = "PHLX";
    RebookTradeResponseVenue["Otc"] = "OTC";
    RebookTradeResponseVenue["Qsr"] = "QSR";
})(RebookTradeResponseVenue || (RebookTradeResponseVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var RebookTradeResponseWhenIssued;
(function (RebookTradeResponseWhenIssued) {
    RebookTradeResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeResponseWhenIssued || (RebookTradeResponseWhenIssued = {}));
/**
 * Type of the asset being traded.
 */
export var RebookTradeResponseOriginalTradeAssetType;
(function (RebookTradeResponseOriginalTradeAssetType) {
    RebookTradeResponseOriginalTradeAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeAssetType["Equity"] = "EQUITY";
    RebookTradeResponseOriginalTradeAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeResponseOriginalTradeAssetType || (RebookTradeResponseOriginalTradeAssetType = {}));
/**
 * Broker capacity for the trade.
 */
export var RebookTradeResponseOriginalTradeBrokerCapacity;
(function (RebookTradeResponseOriginalTradeBrokerCapacity) {
    RebookTradeResponseOriginalTradeBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeResponseOriginalTradeBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeResponseOriginalTradeBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeResponseOriginalTradeBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeResponseOriginalTradeBrokerCapacity || (RebookTradeResponseOriginalTradeBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
export var RebookTradeResponseOriginalTradeIdentifierType;
(function (RebookTradeResponseOriginalTradeIdentifierType) {
    RebookTradeResponseOriginalTradeIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeResponseOriginalTradeIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeResponseOriginalTradeIdentifierType["Cusip"] = "CUSIP";
    RebookTradeResponseOriginalTradeIdentifierType["Isin"] = "ISIN";
})(RebookTradeResponseOriginalTradeIdentifierType || (RebookTradeResponseOriginalTradeIdentifierType = {}));
/**
 * Route type for the trade.
 */
export var RebookTradeResponseOriginalTradeRouteType;
(function (RebookTradeResponseOriginalTradeRouteType) {
    RebookTradeResponseOriginalTradeRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeRouteType["Dma"] = "DMA";
    RebookTradeResponseOriginalTradeRouteType["Mngd"] = "MNGD";
    RebookTradeResponseOriginalTradeRouteType["Quik"] = "QUIK";
    RebookTradeResponseOriginalTradeRouteType["Algo"] = "ALGO";
    RebookTradeResponseOriginalTradeRouteType["Away"] = "AWAY";
    RebookTradeResponseOriginalTradeRouteType["Corr"] = "CORR";
    RebookTradeResponseOriginalTradeRouteType["Boats"] = "BOATS";
})(RebookTradeResponseOriginalTradeRouteType || (RebookTradeResponseOriginalTradeRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
export var RebookTradeResponseOriginalTradeSide;
(function (RebookTradeResponseOriginalTradeSide) {
    RebookTradeResponseOriginalTradeSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSide["Buy"] = "BUY";
    RebookTradeResponseOriginalTradeSide["Sell"] = "SELL";
})(RebookTradeResponseOriginalTradeSide || (RebookTradeResponseOriginalTradeSide = {}));
/**
 * Side modifier for the trade.
 */
export var RebookTradeResponseOriginalTradeSideModifier;
(function (RebookTradeResponseOriginalTradeSideModifier) {
    RebookTradeResponseOriginalTradeSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSideModifier["Short"] = "SHORT";
    RebookTradeResponseOriginalTradeSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeResponseOriginalTradeSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeResponseOriginalTradeSideModifier["Open"] = "OPEN";
    RebookTradeResponseOriginalTradeSideModifier["Close"] = "CLOSE";
})(RebookTradeResponseOriginalTradeSideModifier || (RebookTradeResponseOriginalTradeSideModifier = {}));
export var RebookTradeResponseOriginalTradeSpecialInstructions;
(function (RebookTradeResponseOriginalTradeSpecialInstructions) {
    RebookTradeResponseOriginalTradeSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeResponseOriginalTradeSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeResponseOriginalTradeSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeResponseOriginalTradeSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeResponseOriginalTradeSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeResponseOriginalTradeSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeResponseOriginalTradeSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeResponseOriginalTradeSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeResponseOriginalTradeSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeResponseOriginalTradeSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeResponseOriginalTradeSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeResponseOriginalTradeSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeResponseOriginalTradeSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeResponseOriginalTradeSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeResponseOriginalTradeSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeResponseOriginalTradeSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeResponseOriginalTradeSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeResponseOriginalTradeSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeResponseOriginalTradeSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeResponseOriginalTradeSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeResponseOriginalTradeSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeResponseOriginalTradeSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeResponseOriginalTradeSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeResponseOriginalTradeSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeResponseOriginalTradeSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeResponseOriginalTradeSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeResponseOriginalTradeSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeResponseOriginalTradeSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeResponseOriginalTradeSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeResponseOriginalTradeSpecialInstructions || (RebookTradeResponseOriginalTradeSpecialInstructions = {}));
/**
 * Exchange venue
 */
export var RebookTradeResponseOriginalTradeVenue;
(function (RebookTradeResponseOriginalTradeVenue) {
    RebookTradeResponseOriginalTradeVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeVenue["Amex"] = "AMEX";
    RebookTradeResponseOriginalTradeVenue["Arca"] = "ARCA";
    RebookTradeResponseOriginalTradeVenue["Bats"] = "BATS";
    RebookTradeResponseOriginalTradeVenue["BatsByx"] = "BATS_BYX";
    RebookTradeResponseOriginalTradeVenue["Boston"] = "BOSTON";
    RebookTradeResponseOriginalTradeVenue["Box"] = "BOX";
    RebookTradeResponseOriginalTradeVenue["Bzx"] = "BZX";
    RebookTradeResponseOriginalTradeVenue["C2"] = "C2";
    RebookTradeResponseOriginalTradeVenue["Cboe"] = "CBOE";
    RebookTradeResponseOriginalTradeVenue["Chicago"] = "CHICAGO";
    RebookTradeResponseOriginalTradeVenue["Cincinnati"] = "CINCINNATI";
    RebookTradeResponseOriginalTradeVenue["Edga"] = "EDGA";
    RebookTradeResponseOriginalTradeVenue["Edgx"] = "EDGX";
    RebookTradeResponseOriginalTradeVenue["Exclearing"] = "EXCLEARING";
    RebookTradeResponseOriginalTradeVenue["Iex"] = "IEX";
    RebookTradeResponseOriginalTradeVenue["Ise"] = "ISE";
    RebookTradeResponseOriginalTradeVenue["IseGemini"] = "ISE_GEMINI";
    RebookTradeResponseOriginalTradeVenue["Miax"] = "MIAX";
    RebookTradeResponseOriginalTradeVenue["Nasdaq"] = "NASDAQ";
    RebookTradeResponseOriginalTradeVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    RebookTradeResponseOriginalTradeVenue["Nyse"] = "NYSE";
    RebookTradeResponseOriginalTradeVenue["Phlx"] = "PHLX";
    RebookTradeResponseOriginalTradeVenue["Otc"] = "OTC";
    RebookTradeResponseOriginalTradeVenue["Qsr"] = "QSR";
})(RebookTradeResponseOriginalTradeVenue || (RebookTradeResponseOriginalTradeVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
export var RebookTradeResponseOriginalTradeWhenIssued;
(function (RebookTradeResponseOriginalTradeWhenIssued) {
    RebookTradeResponseOriginalTradeWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeResponseOriginalTradeWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeResponseOriginalTradeWhenIssued || (RebookTradeResponseOriginalTradeWhenIssued = {}));
/** @internal */
export const RebookTradeResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseAssetType$;
(function (RebookTradeResponseAssetType$) {
    /** @deprecated use `RebookTradeResponseAssetType$inboundSchema` instead. */
    RebookTradeResponseAssetType$.inboundSchema = RebookTradeResponseAssetType$inboundSchema;
    /** @deprecated use `RebookTradeResponseAssetType$outboundSchema` instead. */
    RebookTradeResponseAssetType$.outboundSchema = RebookTradeResponseAssetType$outboundSchema;
})(RebookTradeResponseAssetType$ || (RebookTradeResponseAssetType$ = {}));
/** @internal */
export const RebookTradeResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseBrokerCapacity$;
(function (RebookTradeResponseBrokerCapacity$) {
    /** @deprecated use `RebookTradeResponseBrokerCapacity$inboundSchema` instead. */
    RebookTradeResponseBrokerCapacity$.inboundSchema = RebookTradeResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeResponseBrokerCapacity$outboundSchema` instead. */
    RebookTradeResponseBrokerCapacity$.outboundSchema = RebookTradeResponseBrokerCapacity$outboundSchema;
})(RebookTradeResponseBrokerCapacity$ || (RebookTradeResponseBrokerCapacity$ = {}));
/** @internal */
export const RebookTradeResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseIdentifierType$;
(function (RebookTradeResponseIdentifierType$) {
    /** @deprecated use `RebookTradeResponseIdentifierType$inboundSchema` instead. */
    RebookTradeResponseIdentifierType$.inboundSchema = RebookTradeResponseIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeResponseIdentifierType$outboundSchema` instead. */
    RebookTradeResponseIdentifierType$.outboundSchema = RebookTradeResponseIdentifierType$outboundSchema;
})(RebookTradeResponseIdentifierType$ || (RebookTradeResponseIdentifierType$ = {}));
/** @internal */
export const RebookTradeResponseLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeResponseLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseLocalMarketTradeDate$;
(function (RebookTradeResponseLocalMarketTradeDate$) {
    /** @deprecated use `RebookTradeResponseLocalMarketTradeDate$inboundSchema` instead. */
    RebookTradeResponseLocalMarketTradeDate$.inboundSchema = RebookTradeResponseLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseLocalMarketTradeDate$outboundSchema` instead. */
    RebookTradeResponseLocalMarketTradeDate$.outboundSchema = RebookTradeResponseLocalMarketTradeDate$outboundSchema;
})(RebookTradeResponseLocalMarketTradeDate$ || (RebookTradeResponseLocalMarketTradeDate$ = {}));
export function rebookTradeResponseLocalMarketTradeDateToJSON(rebookTradeResponseLocalMarketTradeDate) {
    return JSON.stringify(RebookTradeResponseLocalMarketTradeDate$outboundSchema.parse(rebookTradeResponseLocalMarketTradeDate));
}
export function rebookTradeResponseLocalMarketTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeResponseLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseLocalMarketTradeDate' from JSON`);
}
/** @internal */
export const RebookTradeResponseRouteType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseRouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseRouteType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseRouteType$;
(function (RebookTradeResponseRouteType$) {
    /** @deprecated use `RebookTradeResponseRouteType$inboundSchema` instead. */
    RebookTradeResponseRouteType$.inboundSchema = RebookTradeResponseRouteType$inboundSchema;
    /** @deprecated use `RebookTradeResponseRouteType$outboundSchema` instead. */
    RebookTradeResponseRouteType$.outboundSchema = RebookTradeResponseRouteType$outboundSchema;
})(RebookTradeResponseRouteType$ || (RebookTradeResponseRouteType$ = {}));
/** @internal */
export const RebookTradeResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseSettlementDate$;
(function (RebookTradeResponseSettlementDate$) {
    /** @deprecated use `RebookTradeResponseSettlementDate$inboundSchema` instead. */
    RebookTradeResponseSettlementDate$.inboundSchema = RebookTradeResponseSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseSettlementDate$outboundSchema` instead. */
    RebookTradeResponseSettlementDate$.outboundSchema = RebookTradeResponseSettlementDate$outboundSchema;
})(RebookTradeResponseSettlementDate$ || (RebookTradeResponseSettlementDate$ = {}));
export function rebookTradeResponseSettlementDateToJSON(rebookTradeResponseSettlementDate) {
    return JSON.stringify(RebookTradeResponseSettlementDate$outboundSchema.parse(rebookTradeResponseSettlementDate));
}
export function rebookTradeResponseSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseSettlementDate' from JSON`);
}
/** @internal */
export const RebookTradeResponseSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseSide$;
(function (RebookTradeResponseSide$) {
    /** @deprecated use `RebookTradeResponseSide$inboundSchema` instead. */
    RebookTradeResponseSide$.inboundSchema = RebookTradeResponseSide$inboundSchema;
    /** @deprecated use `RebookTradeResponseSide$outboundSchema` instead. */
    RebookTradeResponseSide$.outboundSchema = RebookTradeResponseSide$outboundSchema;
})(RebookTradeResponseSide$ || (RebookTradeResponseSide$ = {}));
/** @internal */
export const RebookTradeResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseSideModifier$;
(function (RebookTradeResponseSideModifier$) {
    /** @deprecated use `RebookTradeResponseSideModifier$inboundSchema` instead. */
    RebookTradeResponseSideModifier$.inboundSchema = RebookTradeResponseSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeResponseSideModifier$outboundSchema` instead. */
    RebookTradeResponseSideModifier$.outboundSchema = RebookTradeResponseSideModifier$outboundSchema;
})(RebookTradeResponseSideModifier$ || (RebookTradeResponseSideModifier$ = {}));
/** @internal */
export const RebookTradeResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseSpecialInstructions$;
(function (RebookTradeResponseSpecialInstructions$) {
    /** @deprecated use `RebookTradeResponseSpecialInstructions$inboundSchema` instead. */
    RebookTradeResponseSpecialInstructions$.inboundSchema = RebookTradeResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeResponseSpecialInstructions$outboundSchema` instead. */
    RebookTradeResponseSpecialInstructions$.outboundSchema = RebookTradeResponseSpecialInstructions$outboundSchema;
})(RebookTradeResponseSpecialInstructions$ || (RebookTradeResponseSpecialInstructions$ = {}));
/** @internal */
export const RebookTradeResponseVenue$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseVenue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseVenue$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseVenue$;
(function (RebookTradeResponseVenue$) {
    /** @deprecated use `RebookTradeResponseVenue$inboundSchema` instead. */
    RebookTradeResponseVenue$.inboundSchema = RebookTradeResponseVenue$inboundSchema;
    /** @deprecated use `RebookTradeResponseVenue$outboundSchema` instead. */
    RebookTradeResponseVenue$.outboundSchema = RebookTradeResponseVenue$outboundSchema;
})(RebookTradeResponseVenue$ || (RebookTradeResponseVenue$ = {}));
/** @internal */
export const RebookTradeResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseWhenIssued$;
(function (RebookTradeResponseWhenIssued$) {
    /** @deprecated use `RebookTradeResponseWhenIssued$inboundSchema` instead. */
    RebookTradeResponseWhenIssued$.inboundSchema = RebookTradeResponseWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeResponseWhenIssued$outboundSchema` instead. */
    RebookTradeResponseWhenIssued$.outboundSchema = RebookTradeResponseWhenIssued$outboundSchema;
})(RebookTradeResponseWhenIssued$ || (RebookTradeResponseWhenIssued$ = {}));
/** @internal */
export const NewTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: RebookTradeResponseAssetType$inboundSchema.optional(),
    broker_capacity: RebookTradeResponseBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(Execution$inboundSchema).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: RebookTradeResponseIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => RebookTradeResponseLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: RebookTradeResponseRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => RebookTradeResponseSettlementDate$inboundSchema)).optional(),
    side: RebookTradeResponseSide$inboundSchema.optional(),
    side_modifier: RebookTradeResponseSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(RebookTradeResponseSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: RebookTradeResponseVenue$inboundSchema.optional(),
    when_issued: RebookTradeResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const NewTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: RebookTradeResponseAssetType$outboundSchema.optional(),
    brokerCapacity: RebookTradeResponseBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(Execution$outboundSchema).optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: RebookTradeResponseIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => RebookTradeResponseLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: RebookTradeResponseRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => RebookTradeResponseSettlementDate$outboundSchema)).optional(),
    side: RebookTradeResponseSide$outboundSchema.optional(),
    sideModifier: RebookTradeResponseSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(RebookTradeResponseSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: RebookTradeResponseVenue$outboundSchema.optional(),
    whenIssued: RebookTradeResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewTrade$;
(function (NewTrade$) {
    /** @deprecated use `NewTrade$inboundSchema` instead. */
    NewTrade$.inboundSchema = NewTrade$inboundSchema;
    /** @deprecated use `NewTrade$outboundSchema` instead. */
    NewTrade$.outboundSchema = NewTrade$outboundSchema;
})(NewTrade$ || (NewTrade$ = {}));
export function newTradeToJSON(newTrade) {
    return JSON.stringify(NewTrade$outboundSchema.parse(newTrade));
}
export function newTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewTrade' from JSON`);
}
/** @internal */
export const RebookTradeResponseOriginalTradeAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeAssetType$;
(function (RebookTradeResponseOriginalTradeAssetType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeAssetType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeAssetType$.inboundSchema = RebookTradeResponseOriginalTradeAssetType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeAssetType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeAssetType$.outboundSchema = RebookTradeResponseOriginalTradeAssetType$outboundSchema;
})(RebookTradeResponseOriginalTradeAssetType$ || (RebookTradeResponseOriginalTradeAssetType$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeBrokerCapacity$;
(function (RebookTradeResponseOriginalTradeBrokerCapacity$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeBrokerCapacity$.inboundSchema = RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeBrokerCapacity$.outboundSchema = RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema;
})(RebookTradeResponseOriginalTradeBrokerCapacity$ || (RebookTradeResponseOriginalTradeBrokerCapacity$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeIdentifierType$;
(function (RebookTradeResponseOriginalTradeIdentifierType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeIdentifierType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeIdentifierType$.inboundSchema = RebookTradeResponseOriginalTradeIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeIdentifierType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeIdentifierType$.outboundSchema = RebookTradeResponseOriginalTradeIdentifierType$outboundSchema;
})(RebookTradeResponseOriginalTradeIdentifierType$ || (RebookTradeResponseOriginalTradeIdentifierType$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeLocalMarketTradeDate$;
(function (RebookTradeResponseOriginalTradeLocalMarketTradeDate$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeLocalMarketTradeDate$.inboundSchema = RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeLocalMarketTradeDate$.outboundSchema = RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema;
})(RebookTradeResponseOriginalTradeLocalMarketTradeDate$ || (RebookTradeResponseOriginalTradeLocalMarketTradeDate$ = {}));
export function rebookTradeResponseOriginalTradeLocalMarketTradeDateToJSON(rebookTradeResponseOriginalTradeLocalMarketTradeDate) {
    return JSON.stringify(RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema.parse(rebookTradeResponseOriginalTradeLocalMarketTradeDate));
}
export function rebookTradeResponseOriginalTradeLocalMarketTradeDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseOriginalTradeLocalMarketTradeDate' from JSON`);
}
/** @internal */
export const RebookTradeResponseOriginalTradeRouteType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeRouteType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeRouteType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeRouteType$;
(function (RebookTradeResponseOriginalTradeRouteType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeRouteType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeRouteType$.inboundSchema = RebookTradeResponseOriginalTradeRouteType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeRouteType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeRouteType$.outboundSchema = RebookTradeResponseOriginalTradeRouteType$outboundSchema;
})(RebookTradeResponseOriginalTradeRouteType$ || (RebookTradeResponseOriginalTradeRouteType$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const RebookTradeResponseOriginalTradeSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeSettlementDate$;
(function (RebookTradeResponseOriginalTradeSettlementDate$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSettlementDate$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSettlementDate$.inboundSchema = RebookTradeResponseOriginalTradeSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSettlementDate$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSettlementDate$.outboundSchema = RebookTradeResponseOriginalTradeSettlementDate$outboundSchema;
})(RebookTradeResponseOriginalTradeSettlementDate$ || (RebookTradeResponseOriginalTradeSettlementDate$ = {}));
export function rebookTradeResponseOriginalTradeSettlementDateToJSON(rebookTradeResponseOriginalTradeSettlementDate) {
    return JSON.stringify(RebookTradeResponseOriginalTradeSettlementDate$outboundSchema.parse(rebookTradeResponseOriginalTradeSettlementDate));
}
export function rebookTradeResponseOriginalTradeSettlementDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeResponseOriginalTradeSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseOriginalTradeSettlementDate' from JSON`);
}
/** @internal */
export const RebookTradeResponseOriginalTradeSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeSide$;
(function (RebookTradeResponseOriginalTradeSide$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSide$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSide$.inboundSchema = RebookTradeResponseOriginalTradeSide$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSide$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSide$.outboundSchema = RebookTradeResponseOriginalTradeSide$outboundSchema;
})(RebookTradeResponseOriginalTradeSide$ || (RebookTradeResponseOriginalTradeSide$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSideModifier),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeSideModifier$;
(function (RebookTradeResponseOriginalTradeSideModifier$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSideModifier$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSideModifier$.inboundSchema = RebookTradeResponseOriginalTradeSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSideModifier$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSideModifier$.outboundSchema = RebookTradeResponseOriginalTradeSideModifier$outboundSchema;
})(RebookTradeResponseOriginalTradeSideModifier$ || (RebookTradeResponseOriginalTradeSideModifier$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSpecialInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeSpecialInstructions$;
(function (RebookTradeResponseOriginalTradeSpecialInstructions$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSpecialInstructions$.inboundSchema = RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSpecialInstructions$.outboundSchema = RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema;
})(RebookTradeResponseOriginalTradeSpecialInstructions$ || (RebookTradeResponseOriginalTradeSpecialInstructions$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeVenue$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeVenue),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeVenue$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeVenue$;
(function (RebookTradeResponseOriginalTradeVenue$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeVenue$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeVenue$.inboundSchema = RebookTradeResponseOriginalTradeVenue$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeVenue$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeVenue$.outboundSchema = RebookTradeResponseOriginalTradeVenue$outboundSchema;
})(RebookTradeResponseOriginalTradeVenue$ || (RebookTradeResponseOriginalTradeVenue$ = {}));
/** @internal */
export const RebookTradeResponseOriginalTradeWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeWhenIssued),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RebookTradeResponseOriginalTradeWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponseOriginalTradeWhenIssued$;
(function (RebookTradeResponseOriginalTradeWhenIssued$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeWhenIssued$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeWhenIssued$.inboundSchema = RebookTradeResponseOriginalTradeWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeWhenIssued$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeWhenIssued$.outboundSchema = RebookTradeResponseOriginalTradeWhenIssued$outboundSchema;
})(RebookTradeResponseOriginalTradeWhenIssued$ || (RebookTradeResponseOriginalTradeWhenIssued$ = {}));
/** @internal */
export const OriginalTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: RebookTradeResponseOriginalTradeAssetType$inboundSchema
        .optional(),
    broker_capacity: RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(Execution$inboundSchema).optional(),
    fees: z.array(BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: RebookTradeResponseOriginalTradeIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: RebookTradeResponseOriginalTradeRouteType$inboundSchema
        .optional(),
    settlement_date: z.nullable(z.lazy(() => RebookTradeResponseOriginalTradeSettlementDate$inboundSchema)).optional(),
    side: RebookTradeResponseOriginalTradeSide$inboundSchema.optional(),
    side_modifier: RebookTradeResponseOriginalTradeSideModifier$inboundSchema
        .optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: RebookTradeResponseOriginalTradeVenue$inboundSchema.optional(),
    when_issued: RebookTradeResponseOriginalTradeWhenIssued$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
export const OriginalTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: RebookTradeResponseOriginalTradeAssetType$outboundSchema
        .optional(),
    brokerCapacity: RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema
        .optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(Execution$outboundSchema).optional(),
    fees: z.array(BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: RebookTradeResponseOriginalTradeIdentifierType$outboundSchema
        .optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: RebookTradeResponseOriginalTradeRouteType$outboundSchema
        .optional(),
    settlementDate: z.nullable(z.lazy(() => RebookTradeResponseOriginalTradeSettlementDate$outboundSchema)).optional(),
    side: RebookTradeResponseOriginalTradeSide$outboundSchema.optional(),
    sideModifier: RebookTradeResponseOriginalTradeSideModifier$outboundSchema
        .optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: RebookTradeResponseOriginalTradeVenue$outboundSchema.optional(),
    whenIssued: RebookTradeResponseOriginalTradeWhenIssued$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OriginalTrade$;
(function (OriginalTrade$) {
    /** @deprecated use `OriginalTrade$inboundSchema` instead. */
    OriginalTrade$.inboundSchema = OriginalTrade$inboundSchema;
    /** @deprecated use `OriginalTrade$outboundSchema` instead. */
    OriginalTrade$.outboundSchema = OriginalTrade$outboundSchema;
})(OriginalTrade$ || (OriginalTrade$ = {}));
export function originalTradeToJSON(originalTrade) {
    return JSON.stringify(OriginalTrade$outboundSchema.parse(originalTrade));
}
export function originalTradeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OriginalTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OriginalTrade' from JSON`);
}
/** @internal */
export const RebookTradeResponse$inboundSchema = z.object({
    new_trade: z.nullable(z.lazy(() => NewTrade$inboundSchema)).optional(),
    original_trade: z.nullable(z.lazy(() => OriginalTrade$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "new_trade": "newTrade",
        "original_trade": "originalTrade",
    });
});
/** @internal */
export const RebookTradeResponse$outboundSchema = z.object({
    newTrade: z.nullable(z.lazy(() => NewTrade$outboundSchema)).optional(),
    originalTrade: z.nullable(z.lazy(() => OriginalTrade$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        newTrade: "new_trade",
        originalTrade: "original_trade",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RebookTradeResponse$;
(function (RebookTradeResponse$) {
    /** @deprecated use `RebookTradeResponse$inboundSchema` instead. */
    RebookTradeResponse$.inboundSchema = RebookTradeResponse$inboundSchema;
    /** @deprecated use `RebookTradeResponse$outboundSchema` instead. */
    RebookTradeResponse$.outboundSchema = RebookTradeResponse$outboundSchema;
})(RebookTradeResponse$ || (RebookTradeResponse$ = {}));
export function rebookTradeResponseToJSON(rebookTradeResponse) {
    return JSON.stringify(RebookTradeResponse$outboundSchema.parse(rebookTradeResponse));
}
export function rebookTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RebookTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponse' from JSON`);
}
//# sourceMappingURL=rebooktraderesponse.js.map