"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RebookTradeResponseWhenIssued$outboundSchema = exports.RebookTradeResponseWhenIssued$inboundSchema = exports.RebookTradeResponseVenue$ = exports.RebookTradeResponseVenue$outboundSchema = exports.RebookTradeResponseVenue$inboundSchema = exports.RebookTradeResponseSpecialInstructions$ = exports.RebookTradeResponseSpecialInstructions$outboundSchema = exports.RebookTradeResponseSpecialInstructions$inboundSchema = exports.RebookTradeResponseSideModifier$ = exports.RebookTradeResponseSideModifier$outboundSchema = exports.RebookTradeResponseSideModifier$inboundSchema = exports.RebookTradeResponseSide$ = exports.RebookTradeResponseSide$outboundSchema = exports.RebookTradeResponseSide$inboundSchema = exports.RebookTradeResponseSettlementDate$ = exports.RebookTradeResponseSettlementDate$outboundSchema = exports.RebookTradeResponseSettlementDate$inboundSchema = exports.RebookTradeResponseRouteType$ = exports.RebookTradeResponseRouteType$outboundSchema = exports.RebookTradeResponseRouteType$inboundSchema = exports.RebookTradeResponseLocalMarketTradeDate$ = exports.RebookTradeResponseLocalMarketTradeDate$outboundSchema = exports.RebookTradeResponseLocalMarketTradeDate$inboundSchema = exports.RebookTradeResponseIdentifierType$ = exports.RebookTradeResponseIdentifierType$outboundSchema = exports.RebookTradeResponseIdentifierType$inboundSchema = exports.RebookTradeResponseBrokerCapacity$ = exports.RebookTradeResponseBrokerCapacity$outboundSchema = exports.RebookTradeResponseBrokerCapacity$inboundSchema = exports.RebookTradeResponseAssetType$ = exports.RebookTradeResponseAssetType$outboundSchema = exports.RebookTradeResponseAssetType$inboundSchema = exports.RebookTradeResponseOriginalTradeWhenIssued = exports.RebookTradeResponseOriginalTradeVenue = exports.RebookTradeResponseOriginalTradeSpecialInstructions = exports.RebookTradeResponseOriginalTradeSideModifier = exports.RebookTradeResponseOriginalTradeSide = exports.RebookTradeResponseOriginalTradeRouteType = exports.RebookTradeResponseOriginalTradeIdentifierType = exports.RebookTradeResponseOriginalTradeBrokerCapacity = exports.RebookTradeResponseOriginalTradeAssetType = exports.RebookTradeResponseWhenIssued = exports.RebookTradeResponseVenue = exports.RebookTradeResponseSpecialInstructions = exports.RebookTradeResponseSideModifier = exports.RebookTradeResponseSide = exports.RebookTradeResponseRouteType = exports.RebookTradeResponseIdentifierType = exports.RebookTradeResponseBrokerCapacity = exports.RebookTradeResponseAssetType = void 0;
exports.RebookTradeResponse$ = exports.RebookTradeResponse$outboundSchema = exports.RebookTradeResponse$inboundSchema = exports.OriginalTrade$ = exports.OriginalTrade$outboundSchema = exports.OriginalTrade$inboundSchema = exports.RebookTradeResponseOriginalTradeWhenIssued$ = exports.RebookTradeResponseOriginalTradeWhenIssued$outboundSchema = exports.RebookTradeResponseOriginalTradeWhenIssued$inboundSchema = exports.RebookTradeResponseOriginalTradeVenue$ = exports.RebookTradeResponseOriginalTradeVenue$outboundSchema = exports.RebookTradeResponseOriginalTradeVenue$inboundSchema = exports.RebookTradeResponseOriginalTradeSpecialInstructions$ = exports.RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema = exports.RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema = exports.RebookTradeResponseOriginalTradeSideModifier$ = exports.RebookTradeResponseOriginalTradeSideModifier$outboundSchema = exports.RebookTradeResponseOriginalTradeSideModifier$inboundSchema = exports.RebookTradeResponseOriginalTradeSide$ = exports.RebookTradeResponseOriginalTradeSide$outboundSchema = exports.RebookTradeResponseOriginalTradeSide$inboundSchema = exports.RebookTradeResponseOriginalTradeSettlementDate$ = exports.RebookTradeResponseOriginalTradeSettlementDate$outboundSchema = exports.RebookTradeResponseOriginalTradeSettlementDate$inboundSchema = exports.RebookTradeResponseOriginalTradeRouteType$ = exports.RebookTradeResponseOriginalTradeRouteType$outboundSchema = exports.RebookTradeResponseOriginalTradeRouteType$inboundSchema = exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$ = exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema = exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema = exports.RebookTradeResponseOriginalTradeIdentifierType$ = exports.RebookTradeResponseOriginalTradeIdentifierType$outboundSchema = exports.RebookTradeResponseOriginalTradeIdentifierType$inboundSchema = exports.RebookTradeResponseOriginalTradeBrokerCapacity$ = exports.RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema = exports.RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema = exports.RebookTradeResponseOriginalTradeAssetType$ = exports.RebookTradeResponseOriginalTradeAssetType$outboundSchema = exports.RebookTradeResponseOriginalTradeAssetType$inboundSchema = exports.NewTrade$ = exports.NewTrade$outboundSchema = exports.NewTrade$inboundSchema = exports.RebookTradeResponseWhenIssued$ = void 0;
exports.rebookTradeResponseLocalMarketTradeDateToJSON = rebookTradeResponseLocalMarketTradeDateToJSON;
exports.rebookTradeResponseLocalMarketTradeDateFromJSON = rebookTradeResponseLocalMarketTradeDateFromJSON;
exports.rebookTradeResponseSettlementDateToJSON = rebookTradeResponseSettlementDateToJSON;
exports.rebookTradeResponseSettlementDateFromJSON = rebookTradeResponseSettlementDateFromJSON;
exports.newTradeToJSON = newTradeToJSON;
exports.newTradeFromJSON = newTradeFromJSON;
exports.rebookTradeResponseOriginalTradeLocalMarketTradeDateToJSON = rebookTradeResponseOriginalTradeLocalMarketTradeDateToJSON;
exports.rebookTradeResponseOriginalTradeLocalMarketTradeDateFromJSON = rebookTradeResponseOriginalTradeLocalMarketTradeDateFromJSON;
exports.rebookTradeResponseOriginalTradeSettlementDateToJSON = rebookTradeResponseOriginalTradeSettlementDateToJSON;
exports.rebookTradeResponseOriginalTradeSettlementDateFromJSON = rebookTradeResponseOriginalTradeSettlementDateFromJSON;
exports.originalTradeToJSON = originalTradeToJSON;
exports.originalTradeFromJSON = originalTradeFromJSON;
exports.rebookTradeResponseToJSON = rebookTradeResponseToJSON;
exports.rebookTradeResponseFromJSON = rebookTradeResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
const bookingfee_js_1 = require("./bookingfee.js");
const bookinglot_js_1 = require("./bookinglot.js");
const execution_js_1 = require("./execution.js");
/**
 * Type of the asset being traded.
 */
var RebookTradeResponseAssetType;
(function (RebookTradeResponseAssetType) {
    RebookTradeResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeResponseAssetType["Equity"] = "EQUITY";
    RebookTradeResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeResponseAssetType || (exports.RebookTradeResponseAssetType = RebookTradeResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var RebookTradeResponseBrokerCapacity;
(function (RebookTradeResponseBrokerCapacity) {
    RebookTradeResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeResponseBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeResponseBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeResponseBrokerCapacity || (exports.RebookTradeResponseBrokerCapacity = RebookTradeResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var RebookTradeResponseIdentifierType;
(function (RebookTradeResponseIdentifierType) {
    RebookTradeResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeResponseIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeResponseIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeResponseIdentifierType["Cusip"] = "CUSIP";
    RebookTradeResponseIdentifierType["Isin"] = "ISIN";
})(RebookTradeResponseIdentifierType || (exports.RebookTradeResponseIdentifierType = RebookTradeResponseIdentifierType = {}));
/**
 * Route type for the trade.
 */
var RebookTradeResponseRouteType;
(function (RebookTradeResponseRouteType) {
    RebookTradeResponseRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RebookTradeResponseRouteType["Dma"] = "DMA";
    RebookTradeResponseRouteType["Mngd"] = "MNGD";
    RebookTradeResponseRouteType["Quik"] = "QUIK";
    RebookTradeResponseRouteType["Algo"] = "ALGO";
    RebookTradeResponseRouteType["Away"] = "AWAY";
    RebookTradeResponseRouteType["Corr"] = "CORR";
    RebookTradeResponseRouteType["Boats"] = "BOATS";
})(RebookTradeResponseRouteType || (exports.RebookTradeResponseRouteType = RebookTradeResponseRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
var RebookTradeResponseSide;
(function (RebookTradeResponseSide) {
    RebookTradeResponseSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeResponseSide["Buy"] = "BUY";
    RebookTradeResponseSide["Sell"] = "SELL";
})(RebookTradeResponseSide || (exports.RebookTradeResponseSide = RebookTradeResponseSide = {}));
/**
 * Side modifier for the trade.
 */
var RebookTradeResponseSideModifier;
(function (RebookTradeResponseSideModifier) {
    RebookTradeResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeResponseSideModifier["Short"] = "SHORT";
    RebookTradeResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeResponseSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeResponseSideModifier["Open"] = "OPEN";
    RebookTradeResponseSideModifier["Close"] = "CLOSE";
})(RebookTradeResponseSideModifier || (exports.RebookTradeResponseSideModifier = RebookTradeResponseSideModifier = {}));
var RebookTradeResponseSpecialInstructions;
(function (RebookTradeResponseSpecialInstructions) {
    RebookTradeResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeResponseSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeResponseSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeResponseSpecialInstructions || (exports.RebookTradeResponseSpecialInstructions = RebookTradeResponseSpecialInstructions = {}));
/**
 * Exchange venue
 */
var RebookTradeResponseVenue;
(function (RebookTradeResponseVenue) {
    RebookTradeResponseVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    RebookTradeResponseVenue["Amex"] = "AMEX";
    RebookTradeResponseVenue["Arca"] = "ARCA";
    RebookTradeResponseVenue["Bats"] = "BATS";
    RebookTradeResponseVenue["BatsByx"] = "BATS_BYX";
    RebookTradeResponseVenue["Boston"] = "BOSTON";
    RebookTradeResponseVenue["Box"] = "BOX";
    RebookTradeResponseVenue["Bzx"] = "BZX";
    RebookTradeResponseVenue["C2"] = "C2";
    RebookTradeResponseVenue["Cboe"] = "CBOE";
    RebookTradeResponseVenue["Chicago"] = "CHICAGO";
    RebookTradeResponseVenue["Cincinnati"] = "CINCINNATI";
    RebookTradeResponseVenue["Edga"] = "EDGA";
    RebookTradeResponseVenue["Edgx"] = "EDGX";
    RebookTradeResponseVenue["Exclearing"] = "EXCLEARING";
    RebookTradeResponseVenue["Iex"] = "IEX";
    RebookTradeResponseVenue["Ise"] = "ISE";
    RebookTradeResponseVenue["IseGemini"] = "ISE_GEMINI";
    RebookTradeResponseVenue["Miax"] = "MIAX";
    RebookTradeResponseVenue["Nasdaq"] = "NASDAQ";
    RebookTradeResponseVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    RebookTradeResponseVenue["Nyse"] = "NYSE";
    RebookTradeResponseVenue["Phlx"] = "PHLX";
    RebookTradeResponseVenue["Otc"] = "OTC";
    RebookTradeResponseVenue["Qsr"] = "QSR";
})(RebookTradeResponseVenue || (exports.RebookTradeResponseVenue = RebookTradeResponseVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
var RebookTradeResponseWhenIssued;
(function (RebookTradeResponseWhenIssued) {
    RebookTradeResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeResponseWhenIssued || (exports.RebookTradeResponseWhenIssued = RebookTradeResponseWhenIssued = {}));
/**
 * Type of the asset being traded.
 */
var RebookTradeResponseOriginalTradeAssetType;
(function (RebookTradeResponseOriginalTradeAssetType) {
    RebookTradeResponseOriginalTradeAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeAssetType["Equity"] = "EQUITY";
    RebookTradeResponseOriginalTradeAssetType["FixedIncome"] = "FIXED_INCOME";
})(RebookTradeResponseOriginalTradeAssetType || (exports.RebookTradeResponseOriginalTradeAssetType = RebookTradeResponseOriginalTradeAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var RebookTradeResponseOriginalTradeBrokerCapacity;
(function (RebookTradeResponseOriginalTradeBrokerCapacity) {
    RebookTradeResponseOriginalTradeBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    RebookTradeResponseOriginalTradeBrokerCapacity["Agency"] = "AGENCY";
    RebookTradeResponseOriginalTradeBrokerCapacity["Principal"] = "PRINCIPAL";
    RebookTradeResponseOriginalTradeBrokerCapacity["Mixed"] = "MIXED";
})(RebookTradeResponseOriginalTradeBrokerCapacity || (exports.RebookTradeResponseOriginalTradeBrokerCapacity = RebookTradeResponseOriginalTradeBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var RebookTradeResponseOriginalTradeIdentifierType;
(function (RebookTradeResponseOriginalTradeIdentifierType) {
    RebookTradeResponseOriginalTradeIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeIdentifierType["AssetId"] = "ASSET_ID";
    RebookTradeResponseOriginalTradeIdentifierType["Symbol"] = "SYMBOL";
    RebookTradeResponseOriginalTradeIdentifierType["Cusip"] = "CUSIP";
    RebookTradeResponseOriginalTradeIdentifierType["Isin"] = "ISIN";
})(RebookTradeResponseOriginalTradeIdentifierType || (exports.RebookTradeResponseOriginalTradeIdentifierType = RebookTradeResponseOriginalTradeIdentifierType = {}));
/**
 * Route type for the trade.
 */
var RebookTradeResponseOriginalTradeRouteType;
(function (RebookTradeResponseOriginalTradeRouteType) {
    RebookTradeResponseOriginalTradeRouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeRouteType["Dma"] = "DMA";
    RebookTradeResponseOriginalTradeRouteType["Mngd"] = "MNGD";
    RebookTradeResponseOriginalTradeRouteType["Quik"] = "QUIK";
    RebookTradeResponseOriginalTradeRouteType["Algo"] = "ALGO";
    RebookTradeResponseOriginalTradeRouteType["Away"] = "AWAY";
    RebookTradeResponseOriginalTradeRouteType["Corr"] = "CORR";
    RebookTradeResponseOriginalTradeRouteType["Boats"] = "BOATS";
})(RebookTradeResponseOriginalTradeRouteType || (exports.RebookTradeResponseOriginalTradeRouteType = RebookTradeResponseOriginalTradeRouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
var RebookTradeResponseOriginalTradeSide;
(function (RebookTradeResponseOriginalTradeSide) {
    RebookTradeResponseOriginalTradeSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSide["Buy"] = "BUY";
    RebookTradeResponseOriginalTradeSide["Sell"] = "SELL";
})(RebookTradeResponseOriginalTradeSide || (exports.RebookTradeResponseOriginalTradeSide = RebookTradeResponseOriginalTradeSide = {}));
/**
 * Side modifier for the trade.
 */
var RebookTradeResponseOriginalTradeSideModifier;
(function (RebookTradeResponseOriginalTradeSideModifier) {
    RebookTradeResponseOriginalTradeSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSideModifier["Short"] = "SHORT";
    RebookTradeResponseOriginalTradeSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    RebookTradeResponseOriginalTradeSideModifier["ShortCover"] = "SHORT_COVER";
    RebookTradeResponseOriginalTradeSideModifier["Open"] = "OPEN";
    RebookTradeResponseOriginalTradeSideModifier["Close"] = "CLOSE";
})(RebookTradeResponseOriginalTradeSideModifier || (exports.RebookTradeResponseOriginalTradeSideModifier = RebookTradeResponseOriginalTradeSideModifier = {}));
var RebookTradeResponseOriginalTradeSpecialInstructions;
(function (RebookTradeResponseOriginalTradeSpecialInstructions) {
    RebookTradeResponseOriginalTradeSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    RebookTradeResponseOriginalTradeSpecialInstructions["Rule144"] = "RULE_144";
    RebookTradeResponseOriginalTradeSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    RebookTradeResponseOriginalTradeSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    RebookTradeResponseOriginalTradeSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    RebookTradeResponseOriginalTradeSpecialInstructions["CoverShort"] = "COVER_SHORT";
    RebookTradeResponseOriginalTradeSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    RebookTradeResponseOriginalTradeSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    RebookTradeResponseOriginalTradeSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    RebookTradeResponseOriginalTradeSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    RebookTradeResponseOriginalTradeSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    RebookTradeResponseOriginalTradeSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    RebookTradeResponseOriginalTradeSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    RebookTradeResponseOriginalTradeSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    RebookTradeResponseOriginalTradeSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    RebookTradeResponseOriginalTradeSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    RebookTradeResponseOriginalTradeSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    RebookTradeResponseOriginalTradeSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    RebookTradeResponseOriginalTradeSpecialInstructions["Solicited"] = "SOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    RebookTradeResponseOriginalTradeSpecialInstructions["XDividend"] = "X_DIVIDEND";
    RebookTradeResponseOriginalTradeSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    RebookTradeResponseOriginalTradeSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    RebookTradeResponseOriginalTradeSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    RebookTradeResponseOriginalTradeSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    RebookTradeResponseOriginalTradeSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    RebookTradeResponseOriginalTradeSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    RebookTradeResponseOriginalTradeSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    RebookTradeResponseOriginalTradeSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    RebookTradeResponseOriginalTradeSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    RebookTradeResponseOriginalTradeSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    RebookTradeResponseOriginalTradeSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    RebookTradeResponseOriginalTradeSpecialInstructions["StockReward"] = "STOCK_REWARD";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    RebookTradeResponseOriginalTradeSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(RebookTradeResponseOriginalTradeSpecialInstructions || (exports.RebookTradeResponseOriginalTradeSpecialInstructions = RebookTradeResponseOriginalTradeSpecialInstructions = {}));
/**
 * Exchange venue
 */
var RebookTradeResponseOriginalTradeVenue;
(function (RebookTradeResponseOriginalTradeVenue) {
    RebookTradeResponseOriginalTradeVenue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeVenue["Amex"] = "AMEX";
    RebookTradeResponseOriginalTradeVenue["Arca"] = "ARCA";
    RebookTradeResponseOriginalTradeVenue["Bats"] = "BATS";
    RebookTradeResponseOriginalTradeVenue["BatsByx"] = "BATS_BYX";
    RebookTradeResponseOriginalTradeVenue["Boston"] = "BOSTON";
    RebookTradeResponseOriginalTradeVenue["Box"] = "BOX";
    RebookTradeResponseOriginalTradeVenue["Bzx"] = "BZX";
    RebookTradeResponseOriginalTradeVenue["C2"] = "C2";
    RebookTradeResponseOriginalTradeVenue["Cboe"] = "CBOE";
    RebookTradeResponseOriginalTradeVenue["Chicago"] = "CHICAGO";
    RebookTradeResponseOriginalTradeVenue["Cincinnati"] = "CINCINNATI";
    RebookTradeResponseOriginalTradeVenue["Edga"] = "EDGA";
    RebookTradeResponseOriginalTradeVenue["Edgx"] = "EDGX";
    RebookTradeResponseOriginalTradeVenue["Exclearing"] = "EXCLEARING";
    RebookTradeResponseOriginalTradeVenue["Iex"] = "IEX";
    RebookTradeResponseOriginalTradeVenue["Ise"] = "ISE";
    RebookTradeResponseOriginalTradeVenue["IseGemini"] = "ISE_GEMINI";
    RebookTradeResponseOriginalTradeVenue["Miax"] = "MIAX";
    RebookTradeResponseOriginalTradeVenue["Nasdaq"] = "NASDAQ";
    RebookTradeResponseOriginalTradeVenue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    RebookTradeResponseOriginalTradeVenue["Nyse"] = "NYSE";
    RebookTradeResponseOriginalTradeVenue["Phlx"] = "PHLX";
    RebookTradeResponseOriginalTradeVenue["Otc"] = "OTC";
    RebookTradeResponseOriginalTradeVenue["Qsr"] = "QSR";
})(RebookTradeResponseOriginalTradeVenue || (exports.RebookTradeResponseOriginalTradeVenue = RebookTradeResponseOriginalTradeVenue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
var RebookTradeResponseOriginalTradeWhenIssued;
(function (RebookTradeResponseOriginalTradeWhenIssued) {
    RebookTradeResponseOriginalTradeWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    RebookTradeResponseOriginalTradeWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    RebookTradeResponseOriginalTradeWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(RebookTradeResponseOriginalTradeWhenIssued || (exports.RebookTradeResponseOriginalTradeWhenIssued = RebookTradeResponseOriginalTradeWhenIssued = {}));
/** @internal */
exports.RebookTradeResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseAssetType$;
(function (RebookTradeResponseAssetType$) {
    /** @deprecated use `RebookTradeResponseAssetType$inboundSchema` instead. */
    RebookTradeResponseAssetType$.inboundSchema = exports.RebookTradeResponseAssetType$inboundSchema;
    /** @deprecated use `RebookTradeResponseAssetType$outboundSchema` instead. */
    RebookTradeResponseAssetType$.outboundSchema = exports.RebookTradeResponseAssetType$outboundSchema;
})(RebookTradeResponseAssetType$ || (exports.RebookTradeResponseAssetType$ = RebookTradeResponseAssetType$ = {}));
/** @internal */
exports.RebookTradeResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseBrokerCapacity$;
(function (RebookTradeResponseBrokerCapacity$) {
    /** @deprecated use `RebookTradeResponseBrokerCapacity$inboundSchema` instead. */
    RebookTradeResponseBrokerCapacity$.inboundSchema = exports.RebookTradeResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeResponseBrokerCapacity$outboundSchema` instead. */
    RebookTradeResponseBrokerCapacity$.outboundSchema = exports.RebookTradeResponseBrokerCapacity$outboundSchema;
})(RebookTradeResponseBrokerCapacity$ || (exports.RebookTradeResponseBrokerCapacity$ = RebookTradeResponseBrokerCapacity$ = {}));
/** @internal */
exports.RebookTradeResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseIdentifierType$;
(function (RebookTradeResponseIdentifierType$) {
    /** @deprecated use `RebookTradeResponseIdentifierType$inboundSchema` instead. */
    RebookTradeResponseIdentifierType$.inboundSchema = exports.RebookTradeResponseIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeResponseIdentifierType$outboundSchema` instead. */
    RebookTradeResponseIdentifierType$.outboundSchema = exports.RebookTradeResponseIdentifierType$outboundSchema;
})(RebookTradeResponseIdentifierType$ || (exports.RebookTradeResponseIdentifierType$ = RebookTradeResponseIdentifierType$ = {}));
/** @internal */
exports.RebookTradeResponseLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.RebookTradeResponseLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseLocalMarketTradeDate$;
(function (RebookTradeResponseLocalMarketTradeDate$) {
    /** @deprecated use `RebookTradeResponseLocalMarketTradeDate$inboundSchema` instead. */
    RebookTradeResponseLocalMarketTradeDate$.inboundSchema = exports.RebookTradeResponseLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseLocalMarketTradeDate$outboundSchema` instead. */
    RebookTradeResponseLocalMarketTradeDate$.outboundSchema = exports.RebookTradeResponseLocalMarketTradeDate$outboundSchema;
})(RebookTradeResponseLocalMarketTradeDate$ || (exports.RebookTradeResponseLocalMarketTradeDate$ = RebookTradeResponseLocalMarketTradeDate$ = {}));
function rebookTradeResponseLocalMarketTradeDateToJSON(rebookTradeResponseLocalMarketTradeDate) {
    return JSON.stringify(exports.RebookTradeResponseLocalMarketTradeDate$outboundSchema.parse(rebookTradeResponseLocalMarketTradeDate));
}
function rebookTradeResponseLocalMarketTradeDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RebookTradeResponseLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseLocalMarketTradeDate' from JSON`);
}
/** @internal */
exports.RebookTradeResponseRouteType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseRouteType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseRouteType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseRouteType$;
(function (RebookTradeResponseRouteType$) {
    /** @deprecated use `RebookTradeResponseRouteType$inboundSchema` instead. */
    RebookTradeResponseRouteType$.inboundSchema = exports.RebookTradeResponseRouteType$inboundSchema;
    /** @deprecated use `RebookTradeResponseRouteType$outboundSchema` instead. */
    RebookTradeResponseRouteType$.outboundSchema = exports.RebookTradeResponseRouteType$outboundSchema;
})(RebookTradeResponseRouteType$ || (exports.RebookTradeResponseRouteType$ = RebookTradeResponseRouteType$ = {}));
/** @internal */
exports.RebookTradeResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.RebookTradeResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseSettlementDate$;
(function (RebookTradeResponseSettlementDate$) {
    /** @deprecated use `RebookTradeResponseSettlementDate$inboundSchema` instead. */
    RebookTradeResponseSettlementDate$.inboundSchema = exports.RebookTradeResponseSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseSettlementDate$outboundSchema` instead. */
    RebookTradeResponseSettlementDate$.outboundSchema = exports.RebookTradeResponseSettlementDate$outboundSchema;
})(RebookTradeResponseSettlementDate$ || (exports.RebookTradeResponseSettlementDate$ = RebookTradeResponseSettlementDate$ = {}));
function rebookTradeResponseSettlementDateToJSON(rebookTradeResponseSettlementDate) {
    return JSON.stringify(exports.RebookTradeResponseSettlementDate$outboundSchema.parse(rebookTradeResponseSettlementDate));
}
function rebookTradeResponseSettlementDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RebookTradeResponseSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseSettlementDate' from JSON`);
}
/** @internal */
exports.RebookTradeResponseSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseSide$;
(function (RebookTradeResponseSide$) {
    /** @deprecated use `RebookTradeResponseSide$inboundSchema` instead. */
    RebookTradeResponseSide$.inboundSchema = exports.RebookTradeResponseSide$inboundSchema;
    /** @deprecated use `RebookTradeResponseSide$outboundSchema` instead. */
    RebookTradeResponseSide$.outboundSchema = exports.RebookTradeResponseSide$outboundSchema;
})(RebookTradeResponseSide$ || (exports.RebookTradeResponseSide$ = RebookTradeResponseSide$ = {}));
/** @internal */
exports.RebookTradeResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseSideModifier$;
(function (RebookTradeResponseSideModifier$) {
    /** @deprecated use `RebookTradeResponseSideModifier$inboundSchema` instead. */
    RebookTradeResponseSideModifier$.inboundSchema = exports.RebookTradeResponseSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeResponseSideModifier$outboundSchema` instead. */
    RebookTradeResponseSideModifier$.outboundSchema = exports.RebookTradeResponseSideModifier$outboundSchema;
})(RebookTradeResponseSideModifier$ || (exports.RebookTradeResponseSideModifier$ = RebookTradeResponseSideModifier$ = {}));
/** @internal */
exports.RebookTradeResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseSpecialInstructions$;
(function (RebookTradeResponseSpecialInstructions$) {
    /** @deprecated use `RebookTradeResponseSpecialInstructions$inboundSchema` instead. */
    RebookTradeResponseSpecialInstructions$.inboundSchema = exports.RebookTradeResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeResponseSpecialInstructions$outboundSchema` instead. */
    RebookTradeResponseSpecialInstructions$.outboundSchema = exports.RebookTradeResponseSpecialInstructions$outboundSchema;
})(RebookTradeResponseSpecialInstructions$ || (exports.RebookTradeResponseSpecialInstructions$ = RebookTradeResponseSpecialInstructions$ = {}));
/** @internal */
exports.RebookTradeResponseVenue$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseVenue),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseVenue$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseVenue$;
(function (RebookTradeResponseVenue$) {
    /** @deprecated use `RebookTradeResponseVenue$inboundSchema` instead. */
    RebookTradeResponseVenue$.inboundSchema = exports.RebookTradeResponseVenue$inboundSchema;
    /** @deprecated use `RebookTradeResponseVenue$outboundSchema` instead. */
    RebookTradeResponseVenue$.outboundSchema = exports.RebookTradeResponseVenue$outboundSchema;
})(RebookTradeResponseVenue$ || (exports.RebookTradeResponseVenue$ = RebookTradeResponseVenue$ = {}));
/** @internal */
exports.RebookTradeResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseWhenIssued$;
(function (RebookTradeResponseWhenIssued$) {
    /** @deprecated use `RebookTradeResponseWhenIssued$inboundSchema` instead. */
    RebookTradeResponseWhenIssued$.inboundSchema = exports.RebookTradeResponseWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeResponseWhenIssued$outboundSchema` instead. */
    RebookTradeResponseWhenIssued$.outboundSchema = exports.RebookTradeResponseWhenIssued$outboundSchema;
})(RebookTradeResponseWhenIssued$ || (exports.RebookTradeResponseWhenIssued$ = RebookTradeResponseWhenIssued$ = {}));
/** @internal */
exports.NewTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: exports.RebookTradeResponseAssetType$inboundSchema.optional(),
    broker_capacity: exports.RebookTradeResponseBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$inboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.RebookTradeResponseIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => exports.RebookTradeResponseLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(bookinglot_js_1.BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: exports.RebookTradeResponseRouteType$inboundSchema.optional(),
    settlement_date: z.nullable(z.lazy(() => exports.RebookTradeResponseSettlementDate$inboundSchema)).optional(),
    side: exports.RebookTradeResponseSide$inboundSchema.optional(),
    side_modifier: exports.RebookTradeResponseSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(exports.RebookTradeResponseSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: exports.RebookTradeResponseVenue$inboundSchema.optional(),
    when_issued: exports.RebookTradeResponseWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.NewTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: exports.RebookTradeResponseAssetType$outboundSchema.optional(),
    brokerCapacity: exports.RebookTradeResponseBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$outboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: exports.RebookTradeResponseIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => exports.RebookTradeResponseLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(bookinglot_js_1.BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: exports.RebookTradeResponseRouteType$outboundSchema.optional(),
    settlementDate: z.nullable(z.lazy(() => exports.RebookTradeResponseSettlementDate$outboundSchema)).optional(),
    side: exports.RebookTradeResponseSide$outboundSchema.optional(),
    sideModifier: exports.RebookTradeResponseSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(exports.RebookTradeResponseSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: exports.RebookTradeResponseVenue$outboundSchema.optional(),
    whenIssued: exports.RebookTradeResponseWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NewTrade$;
(function (NewTrade$) {
    /** @deprecated use `NewTrade$inboundSchema` instead. */
    NewTrade$.inboundSchema = exports.NewTrade$inboundSchema;
    /** @deprecated use `NewTrade$outboundSchema` instead. */
    NewTrade$.outboundSchema = exports.NewTrade$outboundSchema;
})(NewTrade$ || (exports.NewTrade$ = NewTrade$ = {}));
function newTradeToJSON(newTrade) {
    return JSON.stringify(exports.NewTrade$outboundSchema.parse(newTrade));
}
function newTradeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NewTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewTrade' from JSON`);
}
/** @internal */
exports.RebookTradeResponseOriginalTradeAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeAssetType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeAssetType$;
(function (RebookTradeResponseOriginalTradeAssetType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeAssetType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeAssetType$.inboundSchema = exports.RebookTradeResponseOriginalTradeAssetType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeAssetType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeAssetType$.outboundSchema = exports.RebookTradeResponseOriginalTradeAssetType$outboundSchema;
})(RebookTradeResponseOriginalTradeAssetType$ || (exports.RebookTradeResponseOriginalTradeAssetType$ = RebookTradeResponseOriginalTradeAssetType$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeBrokerCapacity$;
(function (RebookTradeResponseOriginalTradeBrokerCapacity$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeBrokerCapacity$.inboundSchema = exports.RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeBrokerCapacity$.outboundSchema = exports.RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema;
})(RebookTradeResponseOriginalTradeBrokerCapacity$ || (exports.RebookTradeResponseOriginalTradeBrokerCapacity$ = RebookTradeResponseOriginalTradeBrokerCapacity$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeIdentifierType$;
(function (RebookTradeResponseOriginalTradeIdentifierType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeIdentifierType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeIdentifierType$.inboundSchema = exports.RebookTradeResponseOriginalTradeIdentifierType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeIdentifierType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeIdentifierType$.outboundSchema = exports.RebookTradeResponseOriginalTradeIdentifierType$outboundSchema;
})(RebookTradeResponseOriginalTradeIdentifierType$ || (exports.RebookTradeResponseOriginalTradeIdentifierType$ = RebookTradeResponseOriginalTradeIdentifierType$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeLocalMarketTradeDate$;
(function (RebookTradeResponseOriginalTradeLocalMarketTradeDate$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeLocalMarketTradeDate$.inboundSchema = exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeLocalMarketTradeDate$.outboundSchema = exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema;
})(RebookTradeResponseOriginalTradeLocalMarketTradeDate$ || (exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$ = RebookTradeResponseOriginalTradeLocalMarketTradeDate$ = {}));
function rebookTradeResponseOriginalTradeLocalMarketTradeDateToJSON(rebookTradeResponseOriginalTradeLocalMarketTradeDate) {
    return JSON.stringify(exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema.parse(rebookTradeResponseOriginalTradeLocalMarketTradeDate));
}
function rebookTradeResponseOriginalTradeLocalMarketTradeDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseOriginalTradeLocalMarketTradeDate' from JSON`);
}
/** @internal */
exports.RebookTradeResponseOriginalTradeRouteType$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeRouteType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeRouteType$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeRouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeRouteType$;
(function (RebookTradeResponseOriginalTradeRouteType$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeRouteType$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeRouteType$.inboundSchema = exports.RebookTradeResponseOriginalTradeRouteType$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeRouteType$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeRouteType$.outboundSchema = exports.RebookTradeResponseOriginalTradeRouteType$outboundSchema;
})(RebookTradeResponseOriginalTradeRouteType$ || (exports.RebookTradeResponseOriginalTradeRouteType$ = RebookTradeResponseOriginalTradeRouteType$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.RebookTradeResponseOriginalTradeSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeSettlementDate$;
(function (RebookTradeResponseOriginalTradeSettlementDate$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSettlementDate$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSettlementDate$.inboundSchema = exports.RebookTradeResponseOriginalTradeSettlementDate$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSettlementDate$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSettlementDate$.outboundSchema = exports.RebookTradeResponseOriginalTradeSettlementDate$outboundSchema;
})(RebookTradeResponseOriginalTradeSettlementDate$ || (exports.RebookTradeResponseOriginalTradeSettlementDate$ = RebookTradeResponseOriginalTradeSettlementDate$ = {}));
function rebookTradeResponseOriginalTradeSettlementDateToJSON(rebookTradeResponseOriginalTradeSettlementDate) {
    return JSON.stringify(exports.RebookTradeResponseOriginalTradeSettlementDate$outboundSchema.parse(rebookTradeResponseOriginalTradeSettlementDate));
}
function rebookTradeResponseOriginalTradeSettlementDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RebookTradeResponseOriginalTradeSettlementDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponseOriginalTradeSettlementDate' from JSON`);
}
/** @internal */
exports.RebookTradeResponseOriginalTradeSide$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeSide$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeSide$;
(function (RebookTradeResponseOriginalTradeSide$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSide$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSide$.inboundSchema = exports.RebookTradeResponseOriginalTradeSide$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSide$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSide$.outboundSchema = exports.RebookTradeResponseOriginalTradeSide$outboundSchema;
})(RebookTradeResponseOriginalTradeSide$ || (exports.RebookTradeResponseOriginalTradeSide$ = RebookTradeResponseOriginalTradeSide$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeSideModifier$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeSideModifier$;
(function (RebookTradeResponseOriginalTradeSideModifier$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSideModifier$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSideModifier$.inboundSchema = exports.RebookTradeResponseOriginalTradeSideModifier$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSideModifier$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSideModifier$.outboundSchema = exports.RebookTradeResponseOriginalTradeSideModifier$outboundSchema;
})(RebookTradeResponseOriginalTradeSideModifier$ || (exports.RebookTradeResponseOriginalTradeSideModifier$ = RebookTradeResponseOriginalTradeSideModifier$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeSpecialInstructions$;
(function (RebookTradeResponseOriginalTradeSpecialInstructions$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeSpecialInstructions$.inboundSchema = exports.RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeSpecialInstructions$.outboundSchema = exports.RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema;
})(RebookTradeResponseOriginalTradeSpecialInstructions$ || (exports.RebookTradeResponseOriginalTradeSpecialInstructions$ = RebookTradeResponseOriginalTradeSpecialInstructions$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeVenue$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeVenue),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeVenue$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeVenue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeVenue$;
(function (RebookTradeResponseOriginalTradeVenue$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeVenue$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeVenue$.inboundSchema = exports.RebookTradeResponseOriginalTradeVenue$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeVenue$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeVenue$.outboundSchema = exports.RebookTradeResponseOriginalTradeVenue$outboundSchema;
})(RebookTradeResponseOriginalTradeVenue$ || (exports.RebookTradeResponseOriginalTradeVenue$ = RebookTradeResponseOriginalTradeVenue$ = {}));
/** @internal */
exports.RebookTradeResponseOriginalTradeWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(RebookTradeResponseOriginalTradeWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RebookTradeResponseOriginalTradeWhenIssued$outboundSchema = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponseOriginalTradeWhenIssued$;
(function (RebookTradeResponseOriginalTradeWhenIssued$) {
    /** @deprecated use `RebookTradeResponseOriginalTradeWhenIssued$inboundSchema` instead. */
    RebookTradeResponseOriginalTradeWhenIssued$.inboundSchema = exports.RebookTradeResponseOriginalTradeWhenIssued$inboundSchema;
    /** @deprecated use `RebookTradeResponseOriginalTradeWhenIssued$outboundSchema` instead. */
    RebookTradeResponseOriginalTradeWhenIssued$.outboundSchema = exports.RebookTradeResponseOriginalTradeWhenIssued$outboundSchema;
})(RebookTradeResponseOriginalTradeWhenIssued$ || (exports.RebookTradeResponseOriginalTradeWhenIssued$ = RebookTradeResponseOriginalTradeWhenIssued$ = {}));
/** @internal */
exports.OriginalTrade$inboundSchema = z.object({
    account_id: z.string().optional(),
    activity_id: z.string().optional(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: exports.RebookTradeResponseOriginalTradeAssetType$inboundSchema
        .optional(),
    broker_capacity: exports.RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    executing_broker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$inboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$inboundSchema).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.RebookTradeResponseOriginalTradeIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    local_market_trade_date: z.nullable(z.lazy(() => exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$inboundSchema)).optional(),
    lot_matching_instructions: z.array(bookinglot_js_1.BookingLot$inboundSchema).optional(),
    mic_code: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: exports.RebookTradeResponseOriginalTradeRouteType$inboundSchema
        .optional(),
    settlement_date: z.nullable(z.lazy(() => exports.RebookTradeResponseOriginalTradeSettlementDate$inboundSchema)).optional(),
    side: exports.RebookTradeResponseOriginalTradeSide$inboundSchema.optional(),
    side_modifier: exports.RebookTradeResponseOriginalTradeSideModifier$inboundSchema
        .optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(exports.RebookTradeResponseOriginalTradeSpecialInstructions$inboundSchema).optional(),
    trade_id: z.string().optional(),
    venue: exports.RebookTradeResponseOriginalTradeVenue$inboundSchema.optional(),
    when_issued: exports.RebookTradeResponseOriginalTradeWhenIssued$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "trade_id": "tradeId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.OriginalTrade$outboundSchema = z.object({
    accountId: z.string().optional(),
    activityId: z.string().optional(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: exports.RebookTradeResponseOriginalTradeAssetType$outboundSchema
        .optional(),
    brokerCapacity: exports.RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema
        .optional(),
    clientOrderId: z.string().optional(),
    executingBroker: z.string().optional(),
    executions: z.array(execution_js_1.Execution$outboundSchema).optional(),
    fees: z.array(bookingfee_js_1.BookingFee$outboundSchema).optional(),
    identifier: z.string().optional(),
    identifierType: exports.RebookTradeResponseOriginalTradeIdentifierType$outboundSchema
        .optional(),
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: z.nullable(z.lazy(() => exports.RebookTradeResponseOriginalTradeLocalMarketTradeDate$outboundSchema)).optional(),
    lotMatchingInstructions: z.array(bookinglot_js_1.BookingLot$outboundSchema).optional(),
    micCode: z.string().optional(),
    name: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: exports.RebookTradeResponseOriginalTradeRouteType$outboundSchema
        .optional(),
    settlementDate: z.nullable(z.lazy(() => exports.RebookTradeResponseOriginalTradeSettlementDate$outboundSchema)).optional(),
    side: exports.RebookTradeResponseOriginalTradeSide$outboundSchema.optional(),
    sideModifier: exports.RebookTradeResponseOriginalTradeSideModifier$outboundSchema
        .optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(exports.RebookTradeResponseOriginalTradeSpecialInstructions$outboundSchema).optional(),
    tradeId: z.string().optional(),
    venue: exports.RebookTradeResponseOriginalTradeVenue$outboundSchema.optional(),
    whenIssued: exports.RebookTradeResponseOriginalTradeWhenIssued$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        activityId: "activity_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        tradeId: "trade_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OriginalTrade$;
(function (OriginalTrade$) {
    /** @deprecated use `OriginalTrade$inboundSchema` instead. */
    OriginalTrade$.inboundSchema = exports.OriginalTrade$inboundSchema;
    /** @deprecated use `OriginalTrade$outboundSchema` instead. */
    OriginalTrade$.outboundSchema = exports.OriginalTrade$outboundSchema;
})(OriginalTrade$ || (exports.OriginalTrade$ = OriginalTrade$ = {}));
function originalTradeToJSON(originalTrade) {
    return JSON.stringify(exports.OriginalTrade$outboundSchema.parse(originalTrade));
}
function originalTradeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OriginalTrade$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OriginalTrade' from JSON`);
}
/** @internal */
exports.RebookTradeResponse$inboundSchema = z.object({
    new_trade: z.nullable(z.lazy(() => exports.NewTrade$inboundSchema)).optional(),
    original_trade: z.nullable(z.lazy(() => exports.OriginalTrade$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "new_trade": "newTrade",
        "original_trade": "originalTrade",
    });
});
/** @internal */
exports.RebookTradeResponse$outboundSchema = z.object({
    newTrade: z.nullable(z.lazy(() => exports.NewTrade$outboundSchema)).optional(),
    originalTrade: z.nullable(z.lazy(() => exports.OriginalTrade$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        newTrade: "new_trade",
        originalTrade: "original_trade",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RebookTradeResponse$;
(function (RebookTradeResponse$) {
    /** @deprecated use `RebookTradeResponse$inboundSchema` instead. */
    RebookTradeResponse$.inboundSchema = exports.RebookTradeResponse$inboundSchema;
    /** @deprecated use `RebookTradeResponse$outboundSchema` instead. */
    RebookTradeResponse$.outboundSchema = exports.RebookTradeResponse$outboundSchema;
})(RebookTradeResponse$ || (exports.RebookTradeResponse$ = RebookTradeResponse$ = {}));
function rebookTradeResponseToJSON(rebookTradeResponse) {
    return JSON.stringify(exports.RebookTradeResponse$outboundSchema.parse(rebookTradeResponse));
}
function rebookTradeResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RebookTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RebookTradeResponse' from JSON`);
}
//# sourceMappingURL=rebooktraderesponse.js.map