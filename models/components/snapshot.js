/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const FileT$inboundSchema = z
    .object({
    download_uri: z.string().optional(),
    uri_expiry_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "download_uri": "downloadUri",
        "uri_expiry_time": "uriExpiryTime",
    });
});
/** @internal */
export const FileT$outboundSchema = z.object({
    downloadUri: z.string().optional(),
    uriExpiryTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        downloadUri: "download_uri",
        uriExpiryTime: "uri_expiry_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FileT$;
(function (FileT$) {
    /** @deprecated use `FileT$inboundSchema` instead. */
    FileT$.inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    FileT$.outboundSchema = FileT$outboundSchema;
})(FileT$ || (FileT$ = {}));
export function fileToJSON(fileT) {
    return JSON.stringify(FileT$outboundSchema.parse(fileT));
}
export function fileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FileT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileT' from JSON`);
}
/** @internal */
export const SnapshotProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const SnapshotProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SnapshotProcessDate$;
(function (SnapshotProcessDate$) {
    /** @deprecated use `SnapshotProcessDate$inboundSchema` instead. */
    SnapshotProcessDate$.inboundSchema = SnapshotProcessDate$inboundSchema;
    /** @deprecated use `SnapshotProcessDate$outboundSchema` instead. */
    SnapshotProcessDate$.outboundSchema = SnapshotProcessDate$outboundSchema;
})(SnapshotProcessDate$ || (SnapshotProcessDate$ = {}));
export function snapshotProcessDateToJSON(snapshotProcessDate) {
    return JSON.stringify(SnapshotProcessDate$outboundSchema.parse(snapshotProcessDate));
}
export function snapshotProcessDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SnapshotProcessDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SnapshotProcessDate' from JSON`);
}
/** @internal */
export const Snapshot$inboundSchema = z.object({
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    file: z.nullable(z.lazy(() => FileT$inboundSchema)).optional(),
    name: z.string().optional(),
    process_date: z.nullable(z.lazy(() => SnapshotProcessDate$inboundSchema))
        .optional(),
    snapshot_id: z.string().optional(),
    snapshot_type: z.string().optional(),
    version: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "create_time": "createTime",
        "process_date": "processDate",
        "snapshot_id": "snapshotId",
        "snapshot_type": "snapshotType",
    });
});
/** @internal */
export const Snapshot$outboundSchema = z.object({
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    file: z.nullable(z.lazy(() => FileT$outboundSchema)).optional(),
    name: z.string().optional(),
    processDate: z.nullable(z.lazy(() => SnapshotProcessDate$outboundSchema))
        .optional(),
    snapshotId: z.string().optional(),
    snapshotType: z.string().optional(),
    version: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        createTime: "create_time",
        processDate: "process_date",
        snapshotId: "snapshot_id",
        snapshotType: "snapshot_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Snapshot$;
(function (Snapshot$) {
    /** @deprecated use `Snapshot$inboundSchema` instead. */
    Snapshot$.inboundSchema = Snapshot$inboundSchema;
    /** @deprecated use `Snapshot$outboundSchema` instead. */
    Snapshot$.outboundSchema = Snapshot$outboundSchema;
})(Snapshot$ || (Snapshot$ = {}));
export function snapshotToJSON(snapshot) {
    return JSON.stringify(Snapshot$outboundSchema.parse(snapshot));
}
export function snapshotFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Snapshot$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Snapshot' from JSON`);
}
//# sourceMappingURL=snapshot.js.map