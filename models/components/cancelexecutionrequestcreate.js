/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CancelExecutionRequestCreate$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const CancelExecutionRequestCreate$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelExecutionRequestCreate$;
(function (CancelExecutionRequestCreate$) {
    /** @deprecated use `CancelExecutionRequestCreate$inboundSchema` instead. */
    CancelExecutionRequestCreate$.inboundSchema = CancelExecutionRequestCreate$inboundSchema;
    /** @deprecated use `CancelExecutionRequestCreate$outboundSchema` instead. */
    CancelExecutionRequestCreate$.outboundSchema = CancelExecutionRequestCreate$outboundSchema;
})(CancelExecutionRequestCreate$ || (CancelExecutionRequestCreate$ = {}));
export function cancelExecutionRequestCreateToJSON(cancelExecutionRequestCreate) {
    return JSON.stringify(CancelExecutionRequestCreate$outboundSchema.parse(cancelExecutionRequestCreate));
}
export function cancelExecutionRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelExecutionRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelExecutionRequestCreate' from JSON`);
}
//# sourceMappingURL=cancelexecutionrequestcreate.js.map