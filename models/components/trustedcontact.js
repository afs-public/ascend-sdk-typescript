/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const TrustedContactMailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const TrustedContactMailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedContactMailingAddress$;
(function (TrustedContactMailingAddress$) {
    /** @deprecated use `TrustedContactMailingAddress$inboundSchema` instead. */
    TrustedContactMailingAddress$.inboundSchema = TrustedContactMailingAddress$inboundSchema;
    /** @deprecated use `TrustedContactMailingAddress$outboundSchema` instead. */
    TrustedContactMailingAddress$.outboundSchema = TrustedContactMailingAddress$outboundSchema;
})(TrustedContactMailingAddress$ || (TrustedContactMailingAddress$ = {}));
export function trustedContactMailingAddressToJSON(trustedContactMailingAddress) {
    return JSON.stringify(TrustedContactMailingAddress$outboundSchema.parse(trustedContactMailingAddress));
}
export function trustedContactMailingAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedContactMailingAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedContactMailingAddress' from JSON`);
}
/** @internal */
export const TrustedContactShortCode$inboundSchema = z.object({
    number: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "region_code": "regionCode",
    });
});
/** @internal */
export const TrustedContactShortCode$outboundSchema = z.object({
    number: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedContactShortCode$;
(function (TrustedContactShortCode$) {
    /** @deprecated use `TrustedContactShortCode$inboundSchema` instead. */
    TrustedContactShortCode$.inboundSchema = TrustedContactShortCode$inboundSchema;
    /** @deprecated use `TrustedContactShortCode$outboundSchema` instead. */
    TrustedContactShortCode$.outboundSchema = TrustedContactShortCode$outboundSchema;
})(TrustedContactShortCode$ || (TrustedContactShortCode$ = {}));
export function trustedContactShortCodeToJSON(trustedContactShortCode) {
    return JSON.stringify(TrustedContactShortCode$outboundSchema.parse(trustedContactShortCode));
}
export function trustedContactShortCodeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedContactShortCode$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedContactShortCode' from JSON`);
}
/** @internal */
export const TrustedContactPhoneNumber$inboundSchema = z.object({
    e164_number: z.string().optional(),
    extension: z.string().optional(),
    short_code: z.nullable(z.lazy(() => TrustedContactShortCode$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "e164_number": "e164Number",
        "short_code": "shortCode",
    });
});
/** @internal */
export const TrustedContactPhoneNumber$outboundSchema = z.object({
    e164Number: z.string().optional(),
    extension: z.string().optional(),
    shortCode: z.nullable(z.lazy(() => TrustedContactShortCode$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        e164Number: "e164_number",
        shortCode: "short_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedContactPhoneNumber$;
(function (TrustedContactPhoneNumber$) {
    /** @deprecated use `TrustedContactPhoneNumber$inboundSchema` instead. */
    TrustedContactPhoneNumber$.inboundSchema = TrustedContactPhoneNumber$inboundSchema;
    /** @deprecated use `TrustedContactPhoneNumber$outboundSchema` instead. */
    TrustedContactPhoneNumber$.outboundSchema = TrustedContactPhoneNumber$outboundSchema;
})(TrustedContactPhoneNumber$ || (TrustedContactPhoneNumber$ = {}));
export function trustedContactPhoneNumberToJSON(trustedContactPhoneNumber) {
    return JSON.stringify(TrustedContactPhoneNumber$outboundSchema.parse(trustedContactPhoneNumber));
}
export function trustedContactPhoneNumberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedContactPhoneNumber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedContactPhoneNumber' from JSON`);
}
/** @internal */
export const TrustedContact$inboundSchema = z.object({
    email_address: z.string().optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    mailing_address: z.nullable(z.lazy(() => TrustedContactMailingAddress$inboundSchema)).optional(),
    middle_names: z.string().optional(),
    name: z.string().optional(),
    phone_number: z.nullable(z.lazy(() => TrustedContactPhoneNumber$inboundSchema)).optional(),
    trusted_contact_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "email_address": "emailAddress",
        "family_name": "familyName",
        "given_name": "givenName",
        "mailing_address": "mailingAddress",
        "middle_names": "middleNames",
        "phone_number": "phoneNumber",
        "trusted_contact_id": "trustedContactId",
    });
});
/** @internal */
export const TrustedContact$outboundSchema = z.object({
    emailAddress: z.string().optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    mailingAddress: z.nullable(z.lazy(() => TrustedContactMailingAddress$outboundSchema)).optional(),
    middleNames: z.string().optional(),
    name: z.string().optional(),
    phoneNumber: z.nullable(z.lazy(() => TrustedContactPhoneNumber$outboundSchema)).optional(),
    trustedContactId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        emailAddress: "email_address",
        familyName: "family_name",
        givenName: "given_name",
        mailingAddress: "mailing_address",
        middleNames: "middle_names",
        phoneNumber: "phone_number",
        trustedContactId: "trusted_contact_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedContact$;
(function (TrustedContact$) {
    /** @deprecated use `TrustedContact$inboundSchema` instead. */
    TrustedContact$.inboundSchema = TrustedContact$inboundSchema;
    /** @deprecated use `TrustedContact$outboundSchema` instead. */
    TrustedContact$.outboundSchema = TrustedContact$outboundSchema;
})(TrustedContact$ || (TrustedContact$ = {}));
export function trustedContactToJSON(trustedContact) {
    return JSON.stringify(TrustedContact$outboundSchema.parse(trustedContact));
}
export function trustedContactFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedContact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedContact' from JSON`);
}
//# sourceMappingURL=trustedcontact.js.map