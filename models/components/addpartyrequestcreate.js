/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { PartyRequestCreate$inboundSchema, PartyRequestCreate$outboundSchema, } from "./partyrequestcreate.js";
/** @internal */
export const AddPartyRequestCreate$inboundSchema = z.object({
    authorized_by_party_ids: z.array(z.string()).optional(),
    parent: z.string(),
    party: PartyRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "authorized_by_party_ids": "authorizedByPartyIds",
    });
});
/** @internal */
export const AddPartyRequestCreate$outboundSchema = z.object({
    authorizedByPartyIds: z.array(z.string()).optional(),
    parent: z.string(),
    party: PartyRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        authorizedByPartyIds: "authorized_by_party_ids",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddPartyRequestCreate$;
(function (AddPartyRequestCreate$) {
    /** @deprecated use `AddPartyRequestCreate$inboundSchema` instead. */
    AddPartyRequestCreate$.inboundSchema = AddPartyRequestCreate$inboundSchema;
    /** @deprecated use `AddPartyRequestCreate$outboundSchema` instead. */
    AddPartyRequestCreate$.outboundSchema = AddPartyRequestCreate$outboundSchema;
})(AddPartyRequestCreate$ || (AddPartyRequestCreate$ = {}));
export function addPartyRequestCreateToJSON(addPartyRequestCreate) {
    return JSON.stringify(AddPartyRequestCreate$outboundSchema.parse(addPartyRequestCreate));
}
export function addPartyRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddPartyRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddPartyRequestCreate' from JSON`);
}
//# sourceMappingURL=addpartyrequestcreate.js.map