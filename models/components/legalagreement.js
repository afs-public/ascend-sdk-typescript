/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LegalAgreement$inboundSchema = z.object({
    agreement_name: z.string().optional(),
    agreement_uri: z.string().optional(),
    agreement_version: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "agreement_name": "agreementName",
        "agreement_uri": "agreementUri",
        "agreement_version": "agreementVersion",
    });
});
/** @internal */
export const LegalAgreement$outboundSchema = z.object({
    agreementName: z.string().optional(),
    agreementUri: z.string().optional(),
    agreementVersion: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        agreementName: "agreement_name",
        agreementUri: "agreement_uri",
        agreementVersion: "agreement_version",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalAgreement$;
(function (LegalAgreement$) {
    /** @deprecated use `LegalAgreement$inboundSchema` instead. */
    LegalAgreement$.inboundSchema = LegalAgreement$inboundSchema;
    /** @deprecated use `LegalAgreement$outboundSchema` instead. */
    LegalAgreement$.outboundSchema = LegalAgreement$outboundSchema;
})(LegalAgreement$ || (LegalAgreement$ = {}));
export function legalAgreementToJSON(legalAgreement) {
    return JSON.stringify(LegalAgreement$outboundSchema.parse(legalAgreement));
}
export function legalAgreementFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalAgreement$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalAgreement' from JSON`);
}
//# sourceMappingURL=legalagreement.js.map