/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Flag indicating whether this is a deposit or withdrawal transfer
 */
export var Direction;
(function (Direction) {
    Direction["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    Direction["Deposit"] = "DEPOSIT";
    Direction["Withdrawal"] = "WITHDRAWAL";
})(Direction || (Direction = {}));
/**
 * The mechanism used for this transfer schedule
 */
export var TransferScheduleSummaryMechanism;
(function (TransferScheduleSummaryMechanism) {
    TransferScheduleSummaryMechanism["Ach"] = "ACH";
    TransferScheduleSummaryMechanism["Wire"] = "WIRE";
})(TransferScheduleSummaryMechanism || (TransferScheduleSummaryMechanism = {}));
/**
 * A temporal tax year value. This will always evaluate to a year based on the date the transfer was initiated.
 */
export var TransferScheduleSummaryTemporalTaxYear;
(function (TransferScheduleSummaryTemporalTaxYear) {
    TransferScheduleSummaryTemporalTaxYear["TemporalTaxYearUnspecified"] = "TEMPORAL_TAX_YEAR_UNSPECIFIED";
    TransferScheduleSummaryTemporalTaxYear["CurrentCalendarYear"] = "CURRENT_CALENDAR_YEAR";
    TransferScheduleSummaryTemporalTaxYear["MinimumTaxYear"] = "MINIMUM_TAX_YEAR";
})(TransferScheduleSummaryTemporalTaxYear || (TransferScheduleSummaryTemporalTaxYear = {}));
/**
 * The type of retirement contribution.
 */
export var TransferScheduleSummaryType;
(function (TransferScheduleSummaryType) {
    TransferScheduleSummaryType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransferScheduleSummaryType["Regular"] = "REGULAR";
    TransferScheduleSummaryType["Employee"] = "EMPLOYEE";
    TransferScheduleSummaryType["Employer"] = "EMPLOYER";
    TransferScheduleSummaryType["Recharacterization"] = "RECHARACTERIZATION";
    TransferScheduleSummaryType["Rollover60Day"] = "ROLLOVER_60_DAY";
    TransferScheduleSummaryType["RolloverDirect"] = "ROLLOVER_DIRECT";
    TransferScheduleSummaryType["Transfer"] = "TRANSFER";
    TransferScheduleSummaryType["TrusteeFee"] = "TRUSTEE_FEE";
    TransferScheduleSummaryType["Conversion"] = "CONVERSION";
    TransferScheduleSummaryType["Repayment"] = "REPAYMENT";
    TransferScheduleSummaryType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(TransferScheduleSummaryType || (TransferScheduleSummaryType = {}));
/**
 * The type of retirement distribution.
 */
export var TransferScheduleSummaryRetirementDistributionType;
(function (TransferScheduleSummaryRetirementDistributionType) {
    TransferScheduleSummaryRetirementDistributionType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransferScheduleSummaryRetirementDistributionType["Normal"] = "NORMAL";
    TransferScheduleSummaryRetirementDistributionType["Disability"] = "DISABILITY";
    TransferScheduleSummaryRetirementDistributionType["Sosepp"] = "SOSEPP";
    TransferScheduleSummaryRetirementDistributionType["Premature"] = "PREMATURE";
    TransferScheduleSummaryRetirementDistributionType["Death"] = "DEATH";
    TransferScheduleSummaryRetirementDistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    TransferScheduleSummaryRetirementDistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    TransferScheduleSummaryRetirementDistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    TransferScheduleSummaryRetirementDistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    TransferScheduleSummaryRetirementDistributionType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    TransferScheduleSummaryRetirementDistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    TransferScheduleSummaryRetirementDistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    TransferScheduleSummaryRetirementDistributionType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    TransferScheduleSummaryRetirementDistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    TransferScheduleSummaryRetirementDistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    TransferScheduleSummaryRetirementDistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    TransferScheduleSummaryRetirementDistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    TransferScheduleSummaryRetirementDistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    TransferScheduleSummaryRetirementDistributionType["Revocation"] = "REVOCATION";
    TransferScheduleSummaryRetirementDistributionType["NonReportable"] = "NON_REPORTABLE";
})(TransferScheduleSummaryRetirementDistributionType || (TransferScheduleSummaryRetirementDistributionType = {}));
/**
 * The state of the represented schedule
 */
export var TransferScheduleSummaryState;
(function (TransferScheduleSummaryState) {
    TransferScheduleSummaryState["Active"] = "ACTIVE";
    TransferScheduleSummaryState["Canceled"] = "CANCELED";
    TransferScheduleSummaryState["Completed"] = "COMPLETED";
})(TransferScheduleSummaryState || (TransferScheduleSummaryState = {}));
/**
 * The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
 */
export var TransferScheduleSummaryTimeUnit;
(function (TransferScheduleSummaryTimeUnit) {
    TransferScheduleSummaryTimeUnit["Day"] = "DAY";
    TransferScheduleSummaryTimeUnit["Week"] = "WEEK";
    TransferScheduleSummaryTimeUnit["Month"] = "MONTH";
})(TransferScheduleSummaryTimeUnit || (TransferScheduleSummaryTimeUnit = {}));
/** @internal */
export const TransferScheduleSummaryAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransferScheduleSummaryAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryAmount$;
(function (TransferScheduleSummaryAmount$) {
    /** @deprecated use `TransferScheduleSummaryAmount$inboundSchema` instead. */
    TransferScheduleSummaryAmount$.inboundSchema = TransferScheduleSummaryAmount$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryAmount$outboundSchema` instead. */
    TransferScheduleSummaryAmount$.outboundSchema = TransferScheduleSummaryAmount$outboundSchema;
})(TransferScheduleSummaryAmount$ || (TransferScheduleSummaryAmount$ = {}));
export function transferScheduleSummaryAmountToJSON(transferScheduleSummaryAmount) {
    return JSON.stringify(TransferScheduleSummaryAmount$outboundSchema.parse(transferScheduleSummaryAmount));
}
export function transferScheduleSummaryAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryAmount' from JSON`);
}
/** @internal */
export const Direction$inboundSchema = z
    .union([
    z.nativeEnum(Direction),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const Direction$outboundSchema = z.union([
    z.nativeEnum(Direction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Direction$;
(function (Direction$) {
    /** @deprecated use `Direction$inboundSchema` instead. */
    Direction$.inboundSchema = Direction$inboundSchema;
    /** @deprecated use `Direction$outboundSchema` instead. */
    Direction$.outboundSchema = Direction$outboundSchema;
})(Direction$ || (Direction$ = {}));
/** @internal */
export const TransferScheduleSummaryMechanism$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryMechanism),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryMechanism$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryMechanism),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryMechanism$;
(function (TransferScheduleSummaryMechanism$) {
    /** @deprecated use `TransferScheduleSummaryMechanism$inboundSchema` instead. */
    TransferScheduleSummaryMechanism$.inboundSchema = TransferScheduleSummaryMechanism$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryMechanism$outboundSchema` instead. */
    TransferScheduleSummaryMechanism$.outboundSchema = TransferScheduleSummaryMechanism$outboundSchema;
})(TransferScheduleSummaryMechanism$ || (TransferScheduleSummaryMechanism$ = {}));
/** @internal */
export const TransferScheduleSummaryTemporalTaxYear$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryTemporalTaxYear),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryTemporalTaxYear$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryTemporalTaxYear),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryTemporalTaxYear$;
(function (TransferScheduleSummaryTemporalTaxYear$) {
    /** @deprecated use `TransferScheduleSummaryTemporalTaxYear$inboundSchema` instead. */
    TransferScheduleSummaryTemporalTaxYear$.inboundSchema = TransferScheduleSummaryTemporalTaxYear$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryTemporalTaxYear$outboundSchema` instead. */
    TransferScheduleSummaryTemporalTaxYear$.outboundSchema = TransferScheduleSummaryTemporalTaxYear$outboundSchema;
})(TransferScheduleSummaryTemporalTaxYear$ || (TransferScheduleSummaryTemporalTaxYear$ = {}));
/** @internal */
export const TransferScheduleSummaryType$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryType$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryType$;
(function (TransferScheduleSummaryType$) {
    /** @deprecated use `TransferScheduleSummaryType$inboundSchema` instead. */
    TransferScheduleSummaryType$.inboundSchema = TransferScheduleSummaryType$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryType$outboundSchema` instead. */
    TransferScheduleSummaryType$.outboundSchema = TransferScheduleSummaryType$outboundSchema;
})(TransferScheduleSummaryType$ || (TransferScheduleSummaryType$ = {}));
/** @internal */
export const TransferScheduleSummaryRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    temporal_tax_year: TransferScheduleSummaryTemporalTaxYear$inboundSchema
        .optional(),
    type: TransferScheduleSummaryType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "tax_year": "taxYear",
        "temporal_tax_year": "temporalTaxYear",
    });
});
/** @internal */
export const TransferScheduleSummaryRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    temporalTaxYear: TransferScheduleSummaryTemporalTaxYear$outboundSchema
        .optional(),
    type: TransferScheduleSummaryType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        taxYear: "tax_year",
        temporalTaxYear: "temporal_tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementContribution$;
(function (TransferScheduleSummaryRetirementContribution$) {
    /** @deprecated use `TransferScheduleSummaryRetirementContribution$inboundSchema` instead. */
    TransferScheduleSummaryRetirementContribution$.inboundSchema = TransferScheduleSummaryRetirementContribution$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementContribution$outboundSchema` instead. */
    TransferScheduleSummaryRetirementContribution$.outboundSchema = TransferScheduleSummaryRetirementContribution$outboundSchema;
})(TransferScheduleSummaryRetirementContribution$ || (TransferScheduleSummaryRetirementContribution$ = {}));
export function transferScheduleSummaryRetirementContributionToJSON(transferScheduleSummaryRetirementContribution) {
    return JSON.stringify(TransferScheduleSummaryRetirementContribution$outboundSchema.parse(transferScheduleSummaryRetirementContribution));
}
export function transferScheduleSummaryRetirementContributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryRetirementContribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryRetirementContribution' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryRetirementDistributionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransferScheduleSummaryRetirementDistributionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementDistributionAmount$;
(function (TransferScheduleSummaryRetirementDistributionAmount$) {
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionAmount$inboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionAmount$.inboundSchema = TransferScheduleSummaryRetirementDistributionAmount$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionAmount$outboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionAmount$.outboundSchema = TransferScheduleSummaryRetirementDistributionAmount$outboundSchema;
})(TransferScheduleSummaryRetirementDistributionAmount$ || (TransferScheduleSummaryRetirementDistributionAmount$ = {}));
export function transferScheduleSummaryRetirementDistributionAmountToJSON(transferScheduleSummaryRetirementDistributionAmount) {
    return JSON.stringify(TransferScheduleSummaryRetirementDistributionAmount$outboundSchema.parse(transferScheduleSummaryRetirementDistributionAmount));
}
export function transferScheduleSummaryRetirementDistributionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryRetirementDistributionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryRetirementDistributionAmount' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransferScheduleSummaryPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryPercentage$;
(function (TransferScheduleSummaryPercentage$) {
    /** @deprecated use `TransferScheduleSummaryPercentage$inboundSchema` instead. */
    TransferScheduleSummaryPercentage$.inboundSchema = TransferScheduleSummaryPercentage$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryPercentage$outboundSchema` instead. */
    TransferScheduleSummaryPercentage$.outboundSchema = TransferScheduleSummaryPercentage$outboundSchema;
})(TransferScheduleSummaryPercentage$ || (TransferScheduleSummaryPercentage$ = {}));
export function transferScheduleSummaryPercentageToJSON(transferScheduleSummaryPercentage) {
    return JSON.stringify(TransferScheduleSummaryPercentage$outboundSchema.parse(transferScheduleSummaryPercentage));
}
export function transferScheduleSummaryPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryPercentage' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryFederalTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => TransferScheduleSummaryPercentage$inboundSchema)).optional(),
});
/** @internal */
export const TransferScheduleSummaryFederalTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => TransferScheduleSummaryPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryFederalTaxWithholding$;
(function (TransferScheduleSummaryFederalTaxWithholding$) {
    /** @deprecated use `TransferScheduleSummaryFederalTaxWithholding$inboundSchema` instead. */
    TransferScheduleSummaryFederalTaxWithholding$.inboundSchema = TransferScheduleSummaryFederalTaxWithholding$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryFederalTaxWithholding$outboundSchema` instead. */
    TransferScheduleSummaryFederalTaxWithholding$.outboundSchema = TransferScheduleSummaryFederalTaxWithholding$outboundSchema;
})(TransferScheduleSummaryFederalTaxWithholding$ || (TransferScheduleSummaryFederalTaxWithholding$ = {}));
export function transferScheduleSummaryFederalTaxWithholdingToJSON(transferScheduleSummaryFederalTaxWithholding) {
    return JSON.stringify(TransferScheduleSummaryFederalTaxWithholding$outboundSchema.parse(transferScheduleSummaryFederalTaxWithholding));
}
export function transferScheduleSummaryFederalTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryFederalTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryFederalTaxWithholding' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$;
(function (TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$) {
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$inboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$.inboundSchema = TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$outboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$.outboundSchema = TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$outboundSchema;
})(TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$ || (TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$ = {}));
export function transferScheduleSummaryRetirementDistributionStateTaxWithholdingAmountToJSON(transferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount) {
    return JSON.stringify(TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$outboundSchema
        .parse(transferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount));
}
export function transferScheduleSummaryRetirementDistributionStateTaxWithholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryRetirementDistributionPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const TransferScheduleSummaryRetirementDistributionPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementDistributionPercentage$;
(function (TransferScheduleSummaryRetirementDistributionPercentage$) {
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionPercentage$inboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionPercentage$.inboundSchema = TransferScheduleSummaryRetirementDistributionPercentage$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionPercentage$outboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionPercentage$.outboundSchema = TransferScheduleSummaryRetirementDistributionPercentage$outboundSchema;
})(TransferScheduleSummaryRetirementDistributionPercentage$ || (TransferScheduleSummaryRetirementDistributionPercentage$ = {}));
export function transferScheduleSummaryRetirementDistributionPercentageToJSON(transferScheduleSummaryRetirementDistributionPercentage) {
    return JSON.stringify(TransferScheduleSummaryRetirementDistributionPercentage$outboundSchema
        .parse(transferScheduleSummaryRetirementDistributionPercentage));
}
export function transferScheduleSummaryRetirementDistributionPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryRetirementDistributionPercentage$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryRetirementDistributionPercentage' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryStateTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionPercentage$inboundSchema)).optional(),
});
/** @internal */
export const TransferScheduleSummaryStateTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistributionPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryStateTaxWithholding$;
(function (TransferScheduleSummaryStateTaxWithholding$) {
    /** @deprecated use `TransferScheduleSummaryStateTaxWithholding$inboundSchema` instead. */
    TransferScheduleSummaryStateTaxWithholding$.inboundSchema = TransferScheduleSummaryStateTaxWithholding$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryStateTaxWithholding$outboundSchema` instead. */
    TransferScheduleSummaryStateTaxWithholding$.outboundSchema = TransferScheduleSummaryStateTaxWithholding$outboundSchema;
})(TransferScheduleSummaryStateTaxWithholding$ || (TransferScheduleSummaryStateTaxWithholding$ = {}));
export function transferScheduleSummaryStateTaxWithholdingToJSON(transferScheduleSummaryStateTaxWithholding) {
    return JSON.stringify(TransferScheduleSummaryStateTaxWithholding$outboundSchema.parse(transferScheduleSummaryStateTaxWithholding));
}
export function transferScheduleSummaryStateTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryStateTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryStateTaxWithholding' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryRetirementDistributionType$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryRetirementDistributionType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryRetirementDistributionType$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryRetirementDistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementDistributionType$;
(function (TransferScheduleSummaryRetirementDistributionType$) {
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionType$inboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionType$.inboundSchema = TransferScheduleSummaryRetirementDistributionType$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementDistributionType$outboundSchema` instead. */
    TransferScheduleSummaryRetirementDistributionType$.outboundSchema = TransferScheduleSummaryRetirementDistributionType$outboundSchema;
})(TransferScheduleSummaryRetirementDistributionType$ || (TransferScheduleSummaryRetirementDistributionType$ = {}));
/** @internal */
export const TransferScheduleSummaryRetirementDistribution$inboundSchema = z.object({
    federal_tax_withholding: z.nullable(z.lazy(() => TransferScheduleSummaryFederalTaxWithholding$inboundSchema)).optional(),
    receiving_institution: z.string().optional(),
    state_tax_withholding: z.nullable(z.lazy(() => TransferScheduleSummaryStateTaxWithholding$inboundSchema)).optional(),
    state_withholding_waiver: z.boolean().optional(),
    tax_year: z.number().int().optional(),
    type: TransferScheduleSummaryRetirementDistributionType$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_withholding": "federalTaxWithholding",
        "receiving_institution": "receivingInstitution",
        "state_tax_withholding": "stateTaxWithholding",
        "state_withholding_waiver": "stateWithholdingWaiver",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const TransferScheduleSummaryRetirementDistribution$outboundSchema = z.object({
    federalTaxWithholding: z.nullable(z.lazy(() => TransferScheduleSummaryFederalTaxWithholding$outboundSchema)).optional(),
    receivingInstitution: z.string().optional(),
    stateTaxWithholding: z.nullable(z.lazy(() => TransferScheduleSummaryStateTaxWithholding$outboundSchema)).optional(),
    stateWithholdingWaiver: z.boolean().optional(),
    taxYear: z.number().int().optional(),
    type: TransferScheduleSummaryRetirementDistributionType$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxWithholding: "federal_tax_withholding",
        receivingInstitution: "receiving_institution",
        stateTaxWithholding: "state_tax_withholding",
        stateWithholdingWaiver: "state_withholding_waiver",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryRetirementDistribution$;
(function (TransferScheduleSummaryRetirementDistribution$) {
    /** @deprecated use `TransferScheduleSummaryRetirementDistribution$inboundSchema` instead. */
    TransferScheduleSummaryRetirementDistribution$.inboundSchema = TransferScheduleSummaryRetirementDistribution$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryRetirementDistribution$outboundSchema` instead. */
    TransferScheduleSummaryRetirementDistribution$.outboundSchema = TransferScheduleSummaryRetirementDistribution$outboundSchema;
})(TransferScheduleSummaryRetirementDistribution$ || (TransferScheduleSummaryRetirementDistribution$ = {}));
export function transferScheduleSummaryRetirementDistributionToJSON(transferScheduleSummaryRetirementDistribution) {
    return JSON.stringify(TransferScheduleSummaryRetirementDistribution$outboundSchema.parse(transferScheduleSummaryRetirementDistribution));
}
export function transferScheduleSummaryRetirementDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummaryRetirementDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummaryRetirementDistribution' from JSON`);
}
/** @internal */
export const StartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const StartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StartDate$;
(function (StartDate$) {
    /** @deprecated use `StartDate$inboundSchema` instead. */
    StartDate$.inboundSchema = StartDate$inboundSchema;
    /** @deprecated use `StartDate$outboundSchema` instead. */
    StartDate$.outboundSchema = StartDate$outboundSchema;
})(StartDate$ || (StartDate$ = {}));
export function startDateToJSON(startDate) {
    return JSON.stringify(StartDate$outboundSchema.parse(startDate));
}
export function startDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StartDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StartDate' from JSON`);
}
/** @internal */
export const TransferScheduleSummaryState$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryState$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryState$;
(function (TransferScheduleSummaryState$) {
    /** @deprecated use `TransferScheduleSummaryState$inboundSchema` instead. */
    TransferScheduleSummaryState$.inboundSchema = TransferScheduleSummaryState$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryState$outboundSchema` instead. */
    TransferScheduleSummaryState$.outboundSchema = TransferScheduleSummaryState$outboundSchema;
})(TransferScheduleSummaryState$ || (TransferScheduleSummaryState$ = {}));
/** @internal */
export const TransferScheduleSummaryTimeUnit$inboundSchema = z
    .union([
    z.nativeEnum(TransferScheduleSummaryTimeUnit),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TransferScheduleSummaryTimeUnit$outboundSchema = z.union([
    z.nativeEnum(TransferScheduleSummaryTimeUnit),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummaryTimeUnit$;
(function (TransferScheduleSummaryTimeUnit$) {
    /** @deprecated use `TransferScheduleSummaryTimeUnit$inboundSchema` instead. */
    TransferScheduleSummaryTimeUnit$.inboundSchema = TransferScheduleSummaryTimeUnit$inboundSchema;
    /** @deprecated use `TransferScheduleSummaryTimeUnit$outboundSchema` instead. */
    TransferScheduleSummaryTimeUnit$.outboundSchema = TransferScheduleSummaryTimeUnit$outboundSchema;
})(TransferScheduleSummaryTimeUnit$ || (TransferScheduleSummaryTimeUnit$ = {}));
/** @internal */
export const ScheduleProperties$inboundSchema = z.object({
    occurrences: z.number().int().optional(),
    start_date: z.nullable(z.lazy(() => StartDate$inboundSchema)).optional(),
    state: TransferScheduleSummaryState$inboundSchema.optional(),
    time_unit: TransferScheduleSummaryTimeUnit$inboundSchema.optional(),
    unit_multiplier: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "start_date": "startDate",
        "time_unit": "timeUnit",
        "unit_multiplier": "unitMultiplier",
    });
});
/** @internal */
export const ScheduleProperties$outboundSchema = z.object({
    occurrences: z.number().int().optional(),
    startDate: z.nullable(z.lazy(() => StartDate$outboundSchema)).optional(),
    state: TransferScheduleSummaryState$outboundSchema.optional(),
    timeUnit: TransferScheduleSummaryTimeUnit$outboundSchema.optional(),
    unitMultiplier: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        startDate: "start_date",
        timeUnit: "time_unit",
        unitMultiplier: "unit_multiplier",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScheduleProperties$;
(function (ScheduleProperties$) {
    /** @deprecated use `ScheduleProperties$inboundSchema` instead. */
    ScheduleProperties$.inboundSchema = ScheduleProperties$inboundSchema;
    /** @deprecated use `ScheduleProperties$outboundSchema` instead. */
    ScheduleProperties$.outboundSchema = ScheduleProperties$outboundSchema;
})(ScheduleProperties$ || (ScheduleProperties$ = {}));
export function schedulePropertiesToJSON(scheduleProperties) {
    return JSON.stringify(ScheduleProperties$outboundSchema.parse(scheduleProperties));
}
export function schedulePropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ScheduleProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ScheduleProperties' from JSON`);
}
/** @internal */
export const TransferScheduleSummary$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryAmount$inboundSchema))
        .optional(),
    client_schedule_id: z.string().optional(),
    direction: Direction$inboundSchema.optional(),
    mechanism: TransferScheduleSummaryMechanism$inboundSchema.optional(),
    retirement_contribution: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementContribution$inboundSchema)).optional(),
    retirement_distribution: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistribution$inboundSchema)).optional(),
    schedule_properties: z.nullable(z.lazy(() => ScheduleProperties$inboundSchema)).optional(),
    transfer_schedule: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "client_schedule_id": "clientScheduleId",
        "retirement_contribution": "retirementContribution",
        "retirement_distribution": "retirementDistribution",
        "schedule_properties": "scheduleProperties",
        "transfer_schedule": "transferSchedule",
    });
});
/** @internal */
export const TransferScheduleSummary$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => TransferScheduleSummaryAmount$outboundSchema))
        .optional(),
    clientScheduleId: z.string().optional(),
    direction: Direction$outboundSchema.optional(),
    mechanism: TransferScheduleSummaryMechanism$outboundSchema.optional(),
    retirementContribution: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementContribution$outboundSchema)).optional(),
    retirementDistribution: z.nullable(z.lazy(() => TransferScheduleSummaryRetirementDistribution$outboundSchema)).optional(),
    scheduleProperties: z.nullable(z.lazy(() => ScheduleProperties$outboundSchema)).optional(),
    transferSchedule: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        clientScheduleId: "client_schedule_id",
        retirementContribution: "retirement_contribution",
        retirementDistribution: "retirement_distribution",
        scheduleProperties: "schedule_properties",
        transferSchedule: "transfer_schedule",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferScheduleSummary$;
(function (TransferScheduleSummary$) {
    /** @deprecated use `TransferScheduleSummary$inboundSchema` instead. */
    TransferScheduleSummary$.inboundSchema = TransferScheduleSummary$inboundSchema;
    /** @deprecated use `TransferScheduleSummary$outboundSchema` instead. */
    TransferScheduleSummary$.outboundSchema = TransferScheduleSummary$outboundSchema;
})(TransferScheduleSummary$ || (TransferScheduleSummary$ = {}));
export function transferScheduleSummaryToJSON(transferScheduleSummary) {
    return JSON.stringify(TransferScheduleSummary$outboundSchema.parse(transferScheduleSummary));
}
export function transferScheduleSummaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferScheduleSummary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferScheduleSummary' from JSON`);
}
//# sourceMappingURL=transferschedulesummary.js.map