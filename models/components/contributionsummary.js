/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const ContributionLimit$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const ContributionLimit$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionLimit$;
(function (ContributionLimit$) {
    /** @deprecated use `ContributionLimit$inboundSchema` instead. */
    ContributionLimit$.inboundSchema = ContributionLimit$inboundSchema;
    /** @deprecated use `ContributionLimit$outboundSchema` instead. */
    ContributionLimit$.outboundSchema = ContributionLimit$outboundSchema;
})(ContributionLimit$ || (ContributionLimit$ = {}));
export function contributionLimitToJSON(contributionLimit) {
    return JSON.stringify(ContributionLimit$outboundSchema.parse(contributionLimit));
}
export function contributionLimitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContributionLimit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionLimit' from JSON`);
}
/** @internal */
export const RegularAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RegularAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RegularAmount$;
(function (RegularAmount$) {
    /** @deprecated use `RegularAmount$inboundSchema` instead. */
    RegularAmount$.inboundSchema = RegularAmount$inboundSchema;
    /** @deprecated use `RegularAmount$outboundSchema` instead. */
    RegularAmount$.outboundSchema = RegularAmount$outboundSchema;
})(RegularAmount$ || (RegularAmount$ = {}));
export function regularAmountToJSON(regularAmount) {
    return JSON.stringify(RegularAmount$outboundSchema.parse(regularAmount));
}
export function regularAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RegularAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RegularAmount' from JSON`);
}
/** @internal */
export const RemainingContributionAllowed$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RemainingContributionAllowed$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemainingContributionAllowed$;
(function (RemainingContributionAllowed$) {
    /** @deprecated use `RemainingContributionAllowed$inboundSchema` instead. */
    RemainingContributionAllowed$.inboundSchema = RemainingContributionAllowed$inboundSchema;
    /** @deprecated use `RemainingContributionAllowed$outboundSchema` instead. */
    RemainingContributionAllowed$.outboundSchema = RemainingContributionAllowed$outboundSchema;
})(RemainingContributionAllowed$ || (RemainingContributionAllowed$ = {}));
export function remainingContributionAllowedToJSON(remainingContributionAllowed) {
    return JSON.stringify(RemainingContributionAllowed$outboundSchema.parse(remainingContributionAllowed));
}
export function remainingContributionAllowedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemainingContributionAllowed$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemainingContributionAllowed' from JSON`);
}
/** @internal */
export const RolloverAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const RolloverAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RolloverAmount$;
(function (RolloverAmount$) {
    /** @deprecated use `RolloverAmount$inboundSchema` instead. */
    RolloverAmount$.inboundSchema = RolloverAmount$inboundSchema;
    /** @deprecated use `RolloverAmount$outboundSchema` instead. */
    RolloverAmount$.outboundSchema = RolloverAmount$outboundSchema;
})(RolloverAmount$ || (RolloverAmount$ = {}));
export function rolloverAmountToJSON(rolloverAmount) {
    return JSON.stringify(RolloverAmount$outboundSchema.parse(rolloverAmount));
}
export function rolloverAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RolloverAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RolloverAmount' from JSON`);
}
/** @internal */
export const ContributionSummary$inboundSchema = z.object({
    contribution_limit: z.nullable(z.lazy(() => ContributionLimit$inboundSchema))
        .optional(),
    name: z.string().optional(),
    regular_amount: z.nullable(z.lazy(() => RegularAmount$inboundSchema))
        .optional(),
    remaining_contribution_allowed: z.nullable(z.lazy(() => RemainingContributionAllowed$inboundSchema)).optional(),
    rollover_amount: z.nullable(z.lazy(() => RolloverAmount$inboundSchema))
        .optional(),
    tax_year: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "contribution_limit": "contributionLimit",
        "regular_amount": "regularAmount",
        "remaining_contribution_allowed": "remainingContributionAllowed",
        "rollover_amount": "rolloverAmount",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const ContributionSummary$outboundSchema = z.object({
    contributionLimit: z.nullable(z.lazy(() => ContributionLimit$outboundSchema))
        .optional(),
    name: z.string().optional(),
    regularAmount: z.nullable(z.lazy(() => RegularAmount$outboundSchema))
        .optional(),
    remainingContributionAllowed: z.nullable(z.lazy(() => RemainingContributionAllowed$outboundSchema)).optional(),
    rolloverAmount: z.nullable(z.lazy(() => RolloverAmount$outboundSchema))
        .optional(),
    taxYear: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        contributionLimit: "contribution_limit",
        regularAmount: "regular_amount",
        remainingContributionAllowed: "remaining_contribution_allowed",
        rolloverAmount: "rollover_amount",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionSummary$;
(function (ContributionSummary$) {
    /** @deprecated use `ContributionSummary$inboundSchema` instead. */
    ContributionSummary$.inboundSchema = ContributionSummary$inboundSchema;
    /** @deprecated use `ContributionSummary$outboundSchema` instead. */
    ContributionSummary$.outboundSchema = ContributionSummary$outboundSchema;
})(ContributionSummary$ || (ContributionSummary$ = {}));
export function contributionSummaryToJSON(contributionSummary) {
    return JSON.stringify(ContributionSummary$outboundSchema.parse(contributionSummary));
}
export function contributionSummaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContributionSummary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionSummary' from JSON`);
}
//# sourceMappingURL=contributionsummary.js.map