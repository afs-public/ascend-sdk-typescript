"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContributionSummary$ = exports.ContributionSummary$outboundSchema = exports.ContributionSummary$inboundSchema = exports.RolloverAmount$ = exports.RolloverAmount$outboundSchema = exports.RolloverAmount$inboundSchema = exports.RemainingContributionAllowed$ = exports.RemainingContributionAllowed$outboundSchema = exports.RemainingContributionAllowed$inboundSchema = exports.RegularAmount$ = exports.RegularAmount$outboundSchema = exports.RegularAmount$inboundSchema = exports.ContributionLimit$ = exports.ContributionLimit$outboundSchema = exports.ContributionLimit$inboundSchema = void 0;
exports.contributionLimitToJSON = contributionLimitToJSON;
exports.contributionLimitFromJSON = contributionLimitFromJSON;
exports.regularAmountToJSON = regularAmountToJSON;
exports.regularAmountFromJSON = regularAmountFromJSON;
exports.remainingContributionAllowedToJSON = remainingContributionAllowedToJSON;
exports.remainingContributionAllowedFromJSON = remainingContributionAllowedFromJSON;
exports.rolloverAmountToJSON = rolloverAmountToJSON;
exports.rolloverAmountFromJSON = rolloverAmountFromJSON;
exports.contributionSummaryToJSON = contributionSummaryToJSON;
exports.contributionSummaryFromJSON = contributionSummaryFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.ContributionLimit$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ContributionLimit$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ContributionLimit$;
(function (ContributionLimit$) {
    /** @deprecated use `ContributionLimit$inboundSchema` instead. */
    ContributionLimit$.inboundSchema = exports.ContributionLimit$inboundSchema;
    /** @deprecated use `ContributionLimit$outboundSchema` instead. */
    ContributionLimit$.outboundSchema = exports.ContributionLimit$outboundSchema;
})(ContributionLimit$ || (exports.ContributionLimit$ = ContributionLimit$ = {}));
function contributionLimitToJSON(contributionLimit) {
    return JSON.stringify(exports.ContributionLimit$outboundSchema.parse(contributionLimit));
}
function contributionLimitFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ContributionLimit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionLimit' from JSON`);
}
/** @internal */
exports.RegularAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.RegularAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RegularAmount$;
(function (RegularAmount$) {
    /** @deprecated use `RegularAmount$inboundSchema` instead. */
    RegularAmount$.inboundSchema = exports.RegularAmount$inboundSchema;
    /** @deprecated use `RegularAmount$outboundSchema` instead. */
    RegularAmount$.outboundSchema = exports.RegularAmount$outboundSchema;
})(RegularAmount$ || (exports.RegularAmount$ = RegularAmount$ = {}));
function regularAmountToJSON(regularAmount) {
    return JSON.stringify(exports.RegularAmount$outboundSchema.parse(regularAmount));
}
function regularAmountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RegularAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RegularAmount' from JSON`);
}
/** @internal */
exports.RemainingContributionAllowed$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.RemainingContributionAllowed$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RemainingContributionAllowed$;
(function (RemainingContributionAllowed$) {
    /** @deprecated use `RemainingContributionAllowed$inboundSchema` instead. */
    RemainingContributionAllowed$.inboundSchema = exports.RemainingContributionAllowed$inboundSchema;
    /** @deprecated use `RemainingContributionAllowed$outboundSchema` instead. */
    RemainingContributionAllowed$.outboundSchema = exports.RemainingContributionAllowed$outboundSchema;
})(RemainingContributionAllowed$ || (exports.RemainingContributionAllowed$ = RemainingContributionAllowed$ = {}));
function remainingContributionAllowedToJSON(remainingContributionAllowed) {
    return JSON.stringify(exports.RemainingContributionAllowed$outboundSchema.parse(remainingContributionAllowed));
}
function remainingContributionAllowedFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RemainingContributionAllowed$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemainingContributionAllowed' from JSON`);
}
/** @internal */
exports.RolloverAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.RolloverAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RolloverAmount$;
(function (RolloverAmount$) {
    /** @deprecated use `RolloverAmount$inboundSchema` instead. */
    RolloverAmount$.inboundSchema = exports.RolloverAmount$inboundSchema;
    /** @deprecated use `RolloverAmount$outboundSchema` instead. */
    RolloverAmount$.outboundSchema = exports.RolloverAmount$outboundSchema;
})(RolloverAmount$ || (exports.RolloverAmount$ = RolloverAmount$ = {}));
function rolloverAmountToJSON(rolloverAmount) {
    return JSON.stringify(exports.RolloverAmount$outboundSchema.parse(rolloverAmount));
}
function rolloverAmountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RolloverAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RolloverAmount' from JSON`);
}
/** @internal */
exports.ContributionSummary$inboundSchema = z.object({
    contribution_limit: z.nullable(z.lazy(() => exports.ContributionLimit$inboundSchema))
        .optional(),
    name: z.string().optional(),
    regular_amount: z.nullable(z.lazy(() => exports.RegularAmount$inboundSchema))
        .optional(),
    remaining_contribution_allowed: z.nullable(z.lazy(() => exports.RemainingContributionAllowed$inboundSchema)).optional(),
    rollover_amount: z.nullable(z.lazy(() => exports.RolloverAmount$inboundSchema))
        .optional(),
    tax_year: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "contribution_limit": "contributionLimit",
        "regular_amount": "regularAmount",
        "remaining_contribution_allowed": "remainingContributionAllowed",
        "rollover_amount": "rolloverAmount",
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.ContributionSummary$outboundSchema = z.object({
    contributionLimit: z.nullable(z.lazy(() => exports.ContributionLimit$outboundSchema))
        .optional(),
    name: z.string().optional(),
    regularAmount: z.nullable(z.lazy(() => exports.RegularAmount$outboundSchema))
        .optional(),
    remainingContributionAllowed: z.nullable(z.lazy(() => exports.RemainingContributionAllowed$outboundSchema)).optional(),
    rolloverAmount: z.nullable(z.lazy(() => exports.RolloverAmount$outboundSchema))
        .optional(),
    taxYear: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contributionLimit: "contribution_limit",
        regularAmount: "regular_amount",
        remainingContributionAllowed: "remaining_contribution_allowed",
        rolloverAmount: "rollover_amount",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ContributionSummary$;
(function (ContributionSummary$) {
    /** @deprecated use `ContributionSummary$inboundSchema` instead. */
    ContributionSummary$.inboundSchema = exports.ContributionSummary$inboundSchema;
    /** @deprecated use `ContributionSummary$outboundSchema` instead. */
    ContributionSummary$.outboundSchema = exports.ContributionSummary$outboundSchema;
})(ContributionSummary$ || (exports.ContributionSummary$ = ContributionSummary$ = {}));
function contributionSummaryToJSON(contributionSummary) {
    return JSON.stringify(exports.ContributionSummary$outboundSchema.parse(contributionSummary));
}
function contributionSummaryFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ContributionSummary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionSummary' from JSON`);
}
//# sourceMappingURL=contributionsummary.js.map