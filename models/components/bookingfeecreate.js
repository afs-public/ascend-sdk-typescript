/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
/**
 * The type of fee
 */
export var BookingFeeCreateType;
(function (BookingFeeCreateType) {
    BookingFeeCreateType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    BookingFeeCreateType["ClientClearing"] = "CLIENT_CLEARING";
    BookingFeeCreateType["Liquidity"] = "LIQUIDITY";
    BookingFeeCreateType["TradeActivity"] = "TRADE_ACTIVITY";
    BookingFeeCreateType["FinancialTransactionTax"] = "FINANCIAL_TRANSACTION_TAX";
    BookingFeeCreateType["IndexOptionFee"] = "INDEX_OPTION_FEE";
    BookingFeeCreateType["SecFee"] = "SEC_FEE";
    BookingFeeCreateType["OptionsRegulatory"] = "OPTIONS_REGULATORY";
    BookingFeeCreateType["GeneralPurposeFee"] = "GENERAL_PURPOSE_FEE";
    BookingFeeCreateType["BrokerFee"] = "BROKER_FEE";
    BookingFeeCreateType["ContractFee"] = "CONTRACT_FEE";
    BookingFeeCreateType["OccFee"] = "OCC_FEE";
})(BookingFeeCreateType || (BookingFeeCreateType = {}));
/** @internal */
export const BookingFeeCreateType$inboundSchema = z
    .union([
    z.nativeEnum(BookingFeeCreateType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BookingFeeCreateType$outboundSchema = z.union([
    z.nativeEnum(BookingFeeCreateType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingFeeCreateType$;
(function (BookingFeeCreateType$) {
    /** @deprecated use `BookingFeeCreateType$inboundSchema` instead. */
    BookingFeeCreateType$.inboundSchema = BookingFeeCreateType$inboundSchema;
    /** @deprecated use `BookingFeeCreateType$outboundSchema` instead. */
    BookingFeeCreateType$.outboundSchema = BookingFeeCreateType$outboundSchema;
})(BookingFeeCreateType$ || (BookingFeeCreateType$ = {}));
/** @internal */
export const BookingFeeCreate$inboundSchema = z.object({
    amount: DecimalCreate$inboundSchema.optional(),
    suppress_fee: z.boolean().optional(),
    type: BookingFeeCreateType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "suppress_fee": "suppressFee",
    });
});
/** @internal */
export const BookingFeeCreate$outboundSchema = z.object({
    amount: DecimalCreate$outboundSchema.optional(),
    suppressFee: z.boolean().optional(),
    type: BookingFeeCreateType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        suppressFee: "suppress_fee",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingFeeCreate$;
(function (BookingFeeCreate$) {
    /** @deprecated use `BookingFeeCreate$inboundSchema` instead. */
    BookingFeeCreate$.inboundSchema = BookingFeeCreate$inboundSchema;
    /** @deprecated use `BookingFeeCreate$outboundSchema` instead. */
    BookingFeeCreate$.outboundSchema = BookingFeeCreate$outboundSchema;
})(BookingFeeCreate$ || (BookingFeeCreate$ = {}));
export function bookingFeeCreateToJSON(bookingFeeCreate) {
    return JSON.stringify(BookingFeeCreate$outboundSchema.parse(bookingFeeCreate));
}
export function bookingFeeCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingFeeCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingFeeCreate' from JSON`);
}
//# sourceMappingURL=bookingfeecreate.js.map