/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { CustomerIdentificationResult$inboundSchema, CustomerIdentificationResult$outboundSchema, } from "./customeridentificationresult.js";
import { IdentityIdentification$inboundSchema, IdentityIdentification$outboundSchema, } from "./identityidentification.js";
export var CheckTypes;
(function (CheckTypes) {
    CheckTypes["CheckTypeUnspecified"] = "CHECK_TYPE_UNSPECIFIED";
    CheckTypes["Database"] = "DATABASE";
    CheckTypes["Documentary"] = "DOCUMENTARY";
})(CheckTypes || (CheckTypes = {}));
/** @internal */
export const CheckTypes$inboundSchema = z
    .union([
    z.nativeEnum(CheckTypes),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CheckTypes$outboundSchema = z.union([
    z.nativeEnum(CheckTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckTypes$;
(function (CheckTypes$) {
    /** @deprecated use `CheckTypes$inboundSchema` instead. */
    CheckTypes$.inboundSchema = CheckTypes$inboundSchema;
    /** @deprecated use `CheckTypes$outboundSchema` instead. */
    CheckTypes$.outboundSchema = CheckTypes$outboundSchema;
})(CheckTypes$ || (CheckTypes$ = {}));
/** @internal */
export const CustomerIdentificationBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
export const CustomerIdentificationBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationBirthDate$;
(function (CustomerIdentificationBirthDate$) {
    /** @deprecated use `CustomerIdentificationBirthDate$inboundSchema` instead. */
    CustomerIdentificationBirthDate$.inboundSchema = CustomerIdentificationBirthDate$inboundSchema;
    /** @deprecated use `CustomerIdentificationBirthDate$outboundSchema` instead. */
    CustomerIdentificationBirthDate$.outboundSchema = CustomerIdentificationBirthDate$outboundSchema;
})(CustomerIdentificationBirthDate$ || (CustomerIdentificationBirthDate$ = {}));
export function customerIdentificationBirthDateToJSON(customerIdentificationBirthDate) {
    return JSON.stringify(CustomerIdentificationBirthDate$outboundSchema.parse(customerIdentificationBirthDate));
}
export function customerIdentificationBirthDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentificationBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationBirthDate' from JSON`);
}
/** @internal */
export const CustomerIdentificationLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const CustomerIdentificationLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationLegalAddress$;
(function (CustomerIdentificationLegalAddress$) {
    /** @deprecated use `CustomerIdentificationLegalAddress$inboundSchema` instead. */
    CustomerIdentificationLegalAddress$.inboundSchema = CustomerIdentificationLegalAddress$inboundSchema;
    /** @deprecated use `CustomerIdentificationLegalAddress$outboundSchema` instead. */
    CustomerIdentificationLegalAddress$.outboundSchema = CustomerIdentificationLegalAddress$outboundSchema;
})(CustomerIdentificationLegalAddress$ || (CustomerIdentificationLegalAddress$ = {}));
export function customerIdentificationLegalAddressToJSON(customerIdentificationLegalAddress) {
    return JSON.stringify(CustomerIdentificationLegalAddress$outboundSchema.parse(customerIdentificationLegalAddress));
}
export function customerIdentificationLegalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentificationLegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationLegalAddress' from JSON`);
}
/** @internal */
export const Identity$inboundSchema = z.object({
    birth_date: z.nullable(z.lazy(() => CustomerIdentificationBirthDate$inboundSchema)).optional(),
    citizenship_region_codes: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    identifications: z.array(IdentityIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => CustomerIdentificationLegalAddress$inboundSchema)).optional(),
    middle_names: z.array(z.string()).optional(),
    phone_numbers: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "birth_date": "birthDate",
        "citizenship_region_codes": "citizenshipRegionCodes",
        "email_addresses": "emailAddresses",
        "family_name": "familyName",
        "given_name": "givenName",
        "legal_address": "legalAddress",
        "middle_names": "middleNames",
        "phone_numbers": "phoneNumbers",
    });
});
/** @internal */
export const Identity$outboundSchema = z.object({
    birthDate: z.nullable(z.lazy(() => CustomerIdentificationBirthDate$outboundSchema)).optional(),
    citizenshipRegionCodes: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    identifications: z.array(IdentityIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => CustomerIdentificationLegalAddress$outboundSchema)).optional(),
    middleNames: z.array(z.string()).optional(),
    phoneNumbers: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        birthDate: "birth_date",
        citizenshipRegionCodes: "citizenship_region_codes",
        emailAddresses: "email_addresses",
        familyName: "family_name",
        givenName: "given_name",
        legalAddress: "legal_address",
        middleNames: "middle_names",
        phoneNumbers: "phone_numbers",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Identity$;
(function (Identity$) {
    /** @deprecated use `Identity$inboundSchema` instead. */
    Identity$.inboundSchema = Identity$inboundSchema;
    /** @deprecated use `Identity$outboundSchema` instead. */
    Identity$.outboundSchema = Identity$outboundSchema;
})(Identity$ || (Identity$ = {}));
export function identityToJSON(identity) {
    return JSON.stringify(Identity$outboundSchema.parse(identity));
}
export function identityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Identity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Identity' from JSON`);
}
/** @internal */
export const CustomerIdentification$inboundSchema = z.object({
    check_types: z.array(CheckTypes$inboundSchema).optional(),
    identity: z.nullable(z.lazy(() => Identity$inboundSchema)).optional(),
    name: z.string().optional(),
    results: z.array(CustomerIdentificationResult$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "check_types": "checkTypes",
    });
});
/** @internal */
export const CustomerIdentification$outboundSchema = z.object({
    checkTypes: z.array(CheckTypes$outboundSchema).optional(),
    identity: z.nullable(z.lazy(() => Identity$outboundSchema)).optional(),
    name: z.string().optional(),
    results: z.array(CustomerIdentificationResult$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        checkTypes: "check_types",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentification$;
(function (CustomerIdentification$) {
    /** @deprecated use `CustomerIdentification$inboundSchema` instead. */
    CustomerIdentification$.inboundSchema = CustomerIdentification$inboundSchema;
    /** @deprecated use `CustomerIdentification$outboundSchema` instead. */
    CustomerIdentification$.outboundSchema = CustomerIdentification$outboundSchema;
})(CustomerIdentification$ || (CustomerIdentification$ = {}));
export function customerIdentificationToJSON(customerIdentification) {
    return JSON.stringify(CustomerIdentification$outboundSchema.parse(customerIdentification));
}
export function customerIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentification' from JSON`);
}
//# sourceMappingURL=customeridentification.js.map