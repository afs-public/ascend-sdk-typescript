"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerIdentification$ = exports.CustomerIdentification$outboundSchema = exports.CustomerIdentification$inboundSchema = exports.Identity$ = exports.Identity$outboundSchema = exports.Identity$inboundSchema = exports.CustomerIdentificationLegalAddress$ = exports.CustomerIdentificationLegalAddress$outboundSchema = exports.CustomerIdentificationLegalAddress$inboundSchema = exports.CustomerIdentificationBirthDate$ = exports.CustomerIdentificationBirthDate$outboundSchema = exports.CustomerIdentificationBirthDate$inboundSchema = exports.CheckTypes$ = exports.CheckTypes$outboundSchema = exports.CheckTypes$inboundSchema = exports.CheckTypes = void 0;
exports.customerIdentificationBirthDateToJSON = customerIdentificationBirthDateToJSON;
exports.customerIdentificationBirthDateFromJSON = customerIdentificationBirthDateFromJSON;
exports.customerIdentificationLegalAddressToJSON = customerIdentificationLegalAddressToJSON;
exports.customerIdentificationLegalAddressFromJSON = customerIdentificationLegalAddressFromJSON;
exports.identityToJSON = identityToJSON;
exports.identityFromJSON = identityFromJSON;
exports.customerIdentificationToJSON = customerIdentificationToJSON;
exports.customerIdentificationFromJSON = customerIdentificationFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const enums_js_1 = require("../../types/enums.js");
const customeridentificationresult_js_1 = require("./customeridentificationresult.js");
const identityidentification_js_1 = require("./identityidentification.js");
var CheckTypes;
(function (CheckTypes) {
    CheckTypes["CheckTypeUnspecified"] = "CHECK_TYPE_UNSPECIFIED";
    CheckTypes["Database"] = "DATABASE";
    CheckTypes["Documentary"] = "DOCUMENTARY";
})(CheckTypes || (exports.CheckTypes = CheckTypes = {}));
/** @internal */
exports.CheckTypes$inboundSchema = z
    .union([
    z.nativeEnum(CheckTypes),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CheckTypes$outboundSchema = z.union([
    z.nativeEnum(CheckTypes),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckTypes$;
(function (CheckTypes$) {
    /** @deprecated use `CheckTypes$inboundSchema` instead. */
    CheckTypes$.inboundSchema = exports.CheckTypes$inboundSchema;
    /** @deprecated use `CheckTypes$outboundSchema` instead. */
    CheckTypes$.outboundSchema = exports.CheckTypes$outboundSchema;
})(CheckTypes$ || (exports.CheckTypes$ = CheckTypes$ = {}));
/** @internal */
exports.CustomerIdentificationBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.CustomerIdentificationBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerIdentificationBirthDate$;
(function (CustomerIdentificationBirthDate$) {
    /** @deprecated use `CustomerIdentificationBirthDate$inboundSchema` instead. */
    CustomerIdentificationBirthDate$.inboundSchema = exports.CustomerIdentificationBirthDate$inboundSchema;
    /** @deprecated use `CustomerIdentificationBirthDate$outboundSchema` instead. */
    CustomerIdentificationBirthDate$.outboundSchema = exports.CustomerIdentificationBirthDate$outboundSchema;
})(CustomerIdentificationBirthDate$ || (exports.CustomerIdentificationBirthDate$ = CustomerIdentificationBirthDate$ = {}));
function customerIdentificationBirthDateToJSON(customerIdentificationBirthDate) {
    return JSON.stringify(exports.CustomerIdentificationBirthDate$outboundSchema.parse(customerIdentificationBirthDate));
}
function customerIdentificationBirthDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerIdentificationBirthDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationBirthDate' from JSON`);
}
/** @internal */
exports.CustomerIdentificationLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.CustomerIdentificationLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerIdentificationLegalAddress$;
(function (CustomerIdentificationLegalAddress$) {
    /** @deprecated use `CustomerIdentificationLegalAddress$inboundSchema` instead. */
    CustomerIdentificationLegalAddress$.inboundSchema = exports.CustomerIdentificationLegalAddress$inboundSchema;
    /** @deprecated use `CustomerIdentificationLegalAddress$outboundSchema` instead. */
    CustomerIdentificationLegalAddress$.outboundSchema = exports.CustomerIdentificationLegalAddress$outboundSchema;
})(CustomerIdentificationLegalAddress$ || (exports.CustomerIdentificationLegalAddress$ = CustomerIdentificationLegalAddress$ = {}));
function customerIdentificationLegalAddressToJSON(customerIdentificationLegalAddress) {
    return JSON.stringify(exports.CustomerIdentificationLegalAddress$outboundSchema.parse(customerIdentificationLegalAddress));
}
function customerIdentificationLegalAddressFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerIdentificationLegalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationLegalAddress' from JSON`);
}
/** @internal */
exports.Identity$inboundSchema = z.object({
    birth_date: z.nullable(z.lazy(() => exports.CustomerIdentificationBirthDate$inboundSchema)).optional(),
    citizenship_region_codes: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    identifications: z.array(identityidentification_js_1.IdentityIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => exports.CustomerIdentificationLegalAddress$inboundSchema)).optional(),
    middle_names: z.array(z.string()).optional(),
    phone_numbers: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "birth_date": "birthDate",
        "citizenship_region_codes": "citizenshipRegionCodes",
        "email_addresses": "emailAddresses",
        "family_name": "familyName",
        "given_name": "givenName",
        "legal_address": "legalAddress",
        "middle_names": "middleNames",
        "phone_numbers": "phoneNumbers",
    });
});
/** @internal */
exports.Identity$outboundSchema = z.object({
    birthDate: z.nullable(z.lazy(() => exports.CustomerIdentificationBirthDate$outboundSchema)).optional(),
    citizenshipRegionCodes: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    identifications: z.array(identityidentification_js_1.IdentityIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => exports.CustomerIdentificationLegalAddress$outboundSchema)).optional(),
    middleNames: z.array(z.string()).optional(),
    phoneNumbers: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        birthDate: "birth_date",
        citizenshipRegionCodes: "citizenship_region_codes",
        emailAddresses: "email_addresses",
        familyName: "family_name",
        givenName: "given_name",
        legalAddress: "legal_address",
        middleNames: "middle_names",
        phoneNumbers: "phone_numbers",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Identity$;
(function (Identity$) {
    /** @deprecated use `Identity$inboundSchema` instead. */
    Identity$.inboundSchema = exports.Identity$inboundSchema;
    /** @deprecated use `Identity$outboundSchema` instead. */
    Identity$.outboundSchema = exports.Identity$outboundSchema;
})(Identity$ || (exports.Identity$ = Identity$ = {}));
function identityToJSON(identity) {
    return JSON.stringify(exports.Identity$outboundSchema.parse(identity));
}
function identityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Identity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Identity' from JSON`);
}
/** @internal */
exports.CustomerIdentification$inboundSchema = z.object({
    check_types: z.array(exports.CheckTypes$inboundSchema).optional(),
    identity: z.nullable(z.lazy(() => exports.Identity$inboundSchema)).optional(),
    name: z.string().optional(),
    results: z.array(customeridentificationresult_js_1.CustomerIdentificationResult$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "check_types": "checkTypes",
    });
});
/** @internal */
exports.CustomerIdentification$outboundSchema = z.object({
    checkTypes: z.array(exports.CheckTypes$outboundSchema).optional(),
    identity: z.nullable(z.lazy(() => exports.Identity$outboundSchema)).optional(),
    name: z.string().optional(),
    results: z.array(customeridentificationresult_js_1.CustomerIdentificationResult$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        checkTypes: "check_types",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerIdentification$;
(function (CustomerIdentification$) {
    /** @deprecated use `CustomerIdentification$inboundSchema` instead. */
    CustomerIdentification$.inboundSchema = exports.CustomerIdentification$inboundSchema;
    /** @deprecated use `CustomerIdentification$outboundSchema` instead. */
    CustomerIdentification$.outboundSchema = exports.CustomerIdentification$outboundSchema;
})(CustomerIdentification$ || (exports.CustomerIdentification$ = CustomerIdentification$ = {}));
function customerIdentificationToJSON(customerIdentification) {
    return JSON.stringify(exports.CustomerIdentification$outboundSchema.parse(customerIdentification));
}
function customerIdentificationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIdentification' from JSON`);
}
//# sourceMappingURL=customeridentification.js.map