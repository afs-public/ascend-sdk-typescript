/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateUpdate$inboundSchema, DateUpdate$outboundSchema, } from "./dateupdate.js";
import { EmploymentUpdate$inboundSchema, EmploymentUpdate$outboundSchema, } from "./employmentupdate.js";
import { ForeignIdentificationUpdate$inboundSchema, ForeignIdentificationUpdate$outboundSchema, } from "./foreignidentificationupdate.js";
import { IdentityVerificationResultUpdate$inboundSchema, IdentityVerificationResultUpdate$outboundSchema, } from "./identityverificationresultupdate.js";
import { LargeTraderUpdate$inboundSchema, LargeTraderUpdate$outboundSchema, } from "./largetraderupdate.js";
import { NaturalPersonFddUpdate$inboundSchema, NaturalPersonFddUpdate$outboundSchema, } from "./naturalpersonfddupdate.js";
import { NonCitizenResidencyUpdate$inboundSchema, NonCitizenResidencyUpdate$outboundSchema, } from "./noncitizenresidencyupdate.js";
import { PostalAddressUpdate$inboundSchema, PostalAddressUpdate$outboundSchema, } from "./postaladdressupdate.js";
import { TaxProfileUpdate$inboundSchema, TaxProfileUpdate$outboundSchema, } from "./taxprofileupdate.js";
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
export var LegalNaturalPersonUpdateMaritalStatus;
(function (LegalNaturalPersonUpdateMaritalStatus) {
    LegalNaturalPersonUpdateMaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    LegalNaturalPersonUpdateMaritalStatus["Single"] = "SINGLE";
    LegalNaturalPersonUpdateMaritalStatus["Married"] = "MARRIED";
    LegalNaturalPersonUpdateMaritalStatus["Divorced"] = "DIVORCED";
    LegalNaturalPersonUpdateMaritalStatus["Widowed"] = "WIDOWED";
})(LegalNaturalPersonUpdateMaritalStatus || (LegalNaturalPersonUpdateMaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
export var LegalNaturalPersonUpdateNameSuffix;
(function (LegalNaturalPersonUpdateNameSuffix) {
    LegalNaturalPersonUpdateNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    LegalNaturalPersonUpdateNameSuffix["Sr"] = "SR";
    LegalNaturalPersonUpdateNameSuffix["Jr"] = "JR";
    LegalNaturalPersonUpdateNameSuffix["Iii"] = "III";
    LegalNaturalPersonUpdateNameSuffix["Iv"] = "IV";
    LegalNaturalPersonUpdateNameSuffix["V"] = "V";
})(LegalNaturalPersonUpdateNameSuffix || (LegalNaturalPersonUpdateNameSuffix = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
export var LegalNaturalPersonUpdateTaxIdType;
(function (LegalNaturalPersonUpdateTaxIdType) {
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalNaturalPersonUpdateTaxIdType || (LegalNaturalPersonUpdateTaxIdType = {}));
/** @internal */
export const LegalNaturalPersonUpdateMaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateMaritalStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonUpdateMaritalStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateMaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonUpdateMaritalStatus$;
(function (LegalNaturalPersonUpdateMaritalStatus$) {
    /** @deprecated use `LegalNaturalPersonUpdateMaritalStatus$inboundSchema` instead. */
    LegalNaturalPersonUpdateMaritalStatus$.inboundSchema = LegalNaturalPersonUpdateMaritalStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateMaritalStatus$outboundSchema` instead. */
    LegalNaturalPersonUpdateMaritalStatus$.outboundSchema = LegalNaturalPersonUpdateMaritalStatus$outboundSchema;
})(LegalNaturalPersonUpdateMaritalStatus$ || (LegalNaturalPersonUpdateMaritalStatus$ = {}));
/** @internal */
export const LegalNaturalPersonUpdateNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateNameSuffix),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonUpdateNameSuffix$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonUpdateNameSuffix$;
(function (LegalNaturalPersonUpdateNameSuffix$) {
    /** @deprecated use `LegalNaturalPersonUpdateNameSuffix$inboundSchema` instead. */
    LegalNaturalPersonUpdateNameSuffix$.inboundSchema = LegalNaturalPersonUpdateNameSuffix$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateNameSuffix$outboundSchema` instead. */
    LegalNaturalPersonUpdateNameSuffix$.outboundSchema = LegalNaturalPersonUpdateNameSuffix$outboundSchema;
})(LegalNaturalPersonUpdateNameSuffix$ || (LegalNaturalPersonUpdateNameSuffix$ = {}));
/** @internal */
export const LegalNaturalPersonUpdateTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateTaxIdType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LegalNaturalPersonUpdateTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonUpdateTaxIdType$;
(function (LegalNaturalPersonUpdateTaxIdType$) {
    /** @deprecated use `LegalNaturalPersonUpdateTaxIdType$inboundSchema` instead. */
    LegalNaturalPersonUpdateTaxIdType$.inboundSchema = LegalNaturalPersonUpdateTaxIdType$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateTaxIdType$outboundSchema` instead. */
    LegalNaturalPersonUpdateTaxIdType$.outboundSchema = LegalNaturalPersonUpdateTaxIdType$outboundSchema;
})(LegalNaturalPersonUpdateTaxIdType$ || (LegalNaturalPersonUpdateTaxIdType$ = {}));
/** @internal */
export const LegalNaturalPersonUpdate$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: DateUpdate$inboundSchema.optional(),
    citizenship_countries: z.array(z.string()).optional(),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string().optional(),
    customer_identification_id: z.string().optional(),
    death_date: DateUpdate$inboundSchema.optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: EmploymentUpdate$inboundSchema.optional(),
    family_name: z.string().optional(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: ForeignIdentificationUpdate$inboundSchema.optional(),
    given_name: z.string().optional(),
    identity_verification_result: IdentityVerificationResultUpdate$inboundSchema
        .optional(),
    institutional_customer: z.boolean().optional(),
    large_trader: LargeTraderUpdate$inboundSchema.optional(),
    marital_status: LegalNaturalPersonUpdateMaritalStatus$inboundSchema
        .optional(),
    middle_names: z.string().optional(),
    name_suffix: LegalNaturalPersonUpdateNameSuffix$inboundSchema.optional(),
    natural_person_fdd: NaturalPersonFddUpdate$inboundSchema.optional(),
    non_citizen_residency: NonCitizenResidencyUpdate$inboundSchema.optional(),
    personal_address: PostalAddressUpdate$inboundSchema.optional(),
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    subject_to_backup_withholding: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_type: LegalNaturalPersonUpdateTaxIdType$inboundSchema.optional(),
    tax_profile: TaxProfileUpdate$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "customer_identification_id": "customerIdentificationId",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "large_trader": "largeTrader",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "subject_to_backup_withholding": "subjectToBackupWithholding",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
export const LegalNaturalPersonUpdate$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: DateUpdate$outboundSchema.optional(),
    citizenshipCountries: z.array(z.string()).optional(),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string().optional(),
    customerIdentificationId: z.string().optional(),
    deathDate: DateUpdate$outboundSchema.optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: EmploymentUpdate$outboundSchema.optional(),
    familyName: z.string().optional(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: ForeignIdentificationUpdate$outboundSchema.optional(),
    givenName: z.string().optional(),
    identityVerificationResult: IdentityVerificationResultUpdate$outboundSchema
        .optional(),
    institutionalCustomer: z.boolean().optional(),
    largeTrader: LargeTraderUpdate$outboundSchema.optional(),
    maritalStatus: LegalNaturalPersonUpdateMaritalStatus$outboundSchema
        .optional(),
    middleNames: z.string().optional(),
    nameSuffix: LegalNaturalPersonUpdateNameSuffix$outboundSchema.optional(),
    naturalPersonFdd: NaturalPersonFddUpdate$outboundSchema.optional(),
    nonCitizenResidency: NonCitizenResidencyUpdate$outboundSchema.optional(),
    personalAddress: PostalAddressUpdate$outboundSchema.optional(),
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    subjectToBackupWithholding: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdType: LegalNaturalPersonUpdateTaxIdType$outboundSchema.optional(),
    taxProfile: TaxProfileUpdate$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        customerIdentificationId: "customer_identification_id",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        largeTrader: "large_trader",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        subjectToBackupWithholding: "subject_to_backup_withholding",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegalNaturalPersonUpdate$;
(function (LegalNaturalPersonUpdate$) {
    /** @deprecated use `LegalNaturalPersonUpdate$inboundSchema` instead. */
    LegalNaturalPersonUpdate$.inboundSchema = LegalNaturalPersonUpdate$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdate$outboundSchema` instead. */
    LegalNaturalPersonUpdate$.outboundSchema = LegalNaturalPersonUpdate$outboundSchema;
})(LegalNaturalPersonUpdate$ || (LegalNaturalPersonUpdate$ = {}));
export function legalNaturalPersonUpdateToJSON(legalNaturalPersonUpdate) {
    return JSON.stringify(LegalNaturalPersonUpdate$outboundSchema.parse(legalNaturalPersonUpdate));
}
export function legalNaturalPersonUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegalNaturalPersonUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegalNaturalPersonUpdate' from JSON`);
}
//# sourceMappingURL=legalnaturalpersonupdate.js.map