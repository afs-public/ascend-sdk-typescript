/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders
 */
export var BasketTradingExecutedPriceType;
(function (BasketTradingExecutedPriceType) {
    BasketTradingExecutedPriceType["PricePerUnit"] = "PRICE_PER_UNIT";
})(BasketTradingExecutedPriceType || (BasketTradingExecutedPriceType = {}));
/** @internal */
export const BasketTradingExecutedPricePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BasketTradingExecutedPricePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketTradingExecutedPricePrice$;
(function (BasketTradingExecutedPricePrice$) {
    /** @deprecated use `BasketTradingExecutedPricePrice$inboundSchema` instead. */
    BasketTradingExecutedPricePrice$.inboundSchema = BasketTradingExecutedPricePrice$inboundSchema;
    /** @deprecated use `BasketTradingExecutedPricePrice$outboundSchema` instead. */
    BasketTradingExecutedPricePrice$.outboundSchema = BasketTradingExecutedPricePrice$outboundSchema;
})(BasketTradingExecutedPricePrice$ || (BasketTradingExecutedPricePrice$ = {}));
export function basketTradingExecutedPricePriceToJSON(basketTradingExecutedPricePrice) {
    return JSON.stringify(BasketTradingExecutedPricePrice$outboundSchema.parse(basketTradingExecutedPricePrice));
}
export function basketTradingExecutedPricePriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketTradingExecutedPricePrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketTradingExecutedPricePrice' from JSON`);
}
/** @internal */
export const BasketTradingExecutedPriceType$inboundSchema = z
    .union([
    z.nativeEnum(BasketTradingExecutedPriceType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketTradingExecutedPriceType$outboundSchema = z.union([
    z.nativeEnum(BasketTradingExecutedPriceType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketTradingExecutedPriceType$;
(function (BasketTradingExecutedPriceType$) {
    /** @deprecated use `BasketTradingExecutedPriceType$inboundSchema` instead. */
    BasketTradingExecutedPriceType$.inboundSchema = BasketTradingExecutedPriceType$inboundSchema;
    /** @deprecated use `BasketTradingExecutedPriceType$outboundSchema` instead. */
    BasketTradingExecutedPriceType$.outboundSchema = BasketTradingExecutedPriceType$outboundSchema;
})(BasketTradingExecutedPriceType$ || (BasketTradingExecutedPriceType$ = {}));
/** @internal */
export const BasketTradingExecutedPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => BasketTradingExecutedPricePrice$inboundSchema))
        .optional(),
    type: BasketTradingExecutedPriceType$inboundSchema.optional(),
});
/** @internal */
export const BasketTradingExecutedPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => BasketTradingExecutedPricePrice$outboundSchema)).optional(),
    type: BasketTradingExecutedPriceType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketTradingExecutedPrice$;
(function (BasketTradingExecutedPrice$) {
    /** @deprecated use `BasketTradingExecutedPrice$inboundSchema` instead. */
    BasketTradingExecutedPrice$.inboundSchema = BasketTradingExecutedPrice$inboundSchema;
    /** @deprecated use `BasketTradingExecutedPrice$outboundSchema` instead. */
    BasketTradingExecutedPrice$.outboundSchema = BasketTradingExecutedPrice$outboundSchema;
})(BasketTradingExecutedPrice$ || (BasketTradingExecutedPrice$ = {}));
export function basketTradingExecutedPriceToJSON(basketTradingExecutedPrice) {
    return JSON.stringify(BasketTradingExecutedPrice$outboundSchema.parse(basketTradingExecutedPrice));
}
export function basketTradingExecutedPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketTradingExecutedPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketTradingExecutedPrice' from JSON`);
}
//# sourceMappingURL=baskettradingexecutedprice.js.map