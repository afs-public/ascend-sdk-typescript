/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DateCreate$inboundSchema, DateCreate$outboundSchema, } from "./datecreate.js";
/**
 * The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
 */
export var TimeUnit;
(function (TimeUnit) {
    TimeUnit["Day"] = "DAY";
    TimeUnit["Week"] = "WEEK";
    TimeUnit["Month"] = "MONTH";
})(TimeUnit || (TimeUnit = {}));
/** @internal */
export const TimeUnit$inboundSchema = z
    .union([
    z.nativeEnum(TimeUnit),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TimeUnit$outboundSchema = z.union([
    z.nativeEnum(TimeUnit),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TimeUnit$;
(function (TimeUnit$) {
    /** @deprecated use `TimeUnit$inboundSchema` instead. */
    TimeUnit$.inboundSchema = TimeUnit$inboundSchema;
    /** @deprecated use `TimeUnit$outboundSchema` instead. */
    TimeUnit$.outboundSchema = TimeUnit$outboundSchema;
})(TimeUnit$ || (TimeUnit$ = {}));
/** @internal */
export const SchedulePropertiesCreate$inboundSchema = z.object({
    occurrences: z.number().int().optional(),
    start_date: DateCreate$inboundSchema,
    time_unit: TimeUnit$inboundSchema,
    unit_multiplier: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        "start_date": "startDate",
        "time_unit": "timeUnit",
        "unit_multiplier": "unitMultiplier",
    });
});
/** @internal */
export const SchedulePropertiesCreate$outboundSchema = z.object({
    occurrences: z.number().int().optional(),
    startDate: DateCreate$outboundSchema,
    timeUnit: TimeUnit$outboundSchema,
    unitMultiplier: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        startDate: "start_date",
        timeUnit: "time_unit",
        unitMultiplier: "unit_multiplier",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SchedulePropertiesCreate$;
(function (SchedulePropertiesCreate$) {
    /** @deprecated use `SchedulePropertiesCreate$inboundSchema` instead. */
    SchedulePropertiesCreate$.inboundSchema = SchedulePropertiesCreate$inboundSchema;
    /** @deprecated use `SchedulePropertiesCreate$outboundSchema` instead. */
    SchedulePropertiesCreate$.outboundSchema = SchedulePropertiesCreate$outboundSchema;
})(SchedulePropertiesCreate$ || (SchedulePropertiesCreate$ = {}));
export function schedulePropertiesCreateToJSON(schedulePropertiesCreate) {
    return JSON.stringify(SchedulePropertiesCreate$outboundSchema.parse(schedulePropertiesCreate));
}
export function schedulePropertiesCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SchedulePropertiesCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SchedulePropertiesCreate' from JSON`);
}
//# sourceMappingURL=schedulepropertiescreate.js.map