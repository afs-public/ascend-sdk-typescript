/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { LegalNaturalPerson$inboundSchema, LegalNaturalPerson$outboundSchema, } from "./legalnaturalperson.js";
/** @internal */
export const ListLegalNaturalPersonsResponse$inboundSchema = z.object({
    legal_natural_persons: z.array(LegalNaturalPerson$inboundSchema).optional(),
    next_page_token: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "legal_natural_persons": "legalNaturalPersons",
        "next_page_token": "nextPageToken",
    });
});
/** @internal */
export const ListLegalNaturalPersonsResponse$outboundSchema = z.object({
    legalNaturalPersons: z.array(LegalNaturalPerson$outboundSchema).optional(),
    nextPageToken: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        legalNaturalPersons: "legal_natural_persons",
        nextPageToken: "next_page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListLegalNaturalPersonsResponse$;
(function (ListLegalNaturalPersonsResponse$) {
    /** @deprecated use `ListLegalNaturalPersonsResponse$inboundSchema` instead. */
    ListLegalNaturalPersonsResponse$.inboundSchema = ListLegalNaturalPersonsResponse$inboundSchema;
    /** @deprecated use `ListLegalNaturalPersonsResponse$outboundSchema` instead. */
    ListLegalNaturalPersonsResponse$.outboundSchema = ListLegalNaturalPersonsResponse$outboundSchema;
})(ListLegalNaturalPersonsResponse$ || (ListLegalNaturalPersonsResponse$ = {}));
export function listLegalNaturalPersonsResponseToJSON(listLegalNaturalPersonsResponse) {
    return JSON.stringify(ListLegalNaturalPersonsResponse$outboundSchema.parse(listLegalNaturalPersonsResponse));
}
export function listLegalNaturalPersonsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListLegalNaturalPersonsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListLegalNaturalPersonsResponse' from JSON`);
}
//# sourceMappingURL=listlegalnaturalpersonsresponse.js.map