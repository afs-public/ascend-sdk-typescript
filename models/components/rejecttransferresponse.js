/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { AcatsAsset$inboundSchema, AcatsAsset$outboundSchema, } from "./acatsasset.js";
/**
 * The direction of the transfer
 */
export var RejectTransferResponseDirection;
(function (RejectTransferResponseDirection) {
    RejectTransferResponseDirection["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    RejectTransferResponseDirection["Outgoing"] = "OUTGOING";
    RejectTransferResponseDirection["Incoming"] = "INCOMING";
})(RejectTransferResponseDirection || (RejectTransferResponseDirection = {}));
/**
 * The NSCC transfer status
 */
export var RejectTransferResponseNsccStatus;
(function (RejectTransferResponseNsccStatus) {
    RejectTransferResponseNsccStatus["NsccStatusUnspecified"] = "NSCC_STATUS_UNSPECIFIED";
    RejectTransferResponseNsccStatus["Request"] = "REQUEST";
    RejectTransferResponseNsccStatus["RequestAdjust"] = "REQUEST_ADJUST";
    RejectTransferResponseNsccStatus["RequestAdjustPast"] = "REQUEST_ADJUST_PAST";
    RejectTransferResponseNsccStatus["RequestPast"] = "REQUEST_PAST";
    RejectTransferResponseNsccStatus["RequestReject"] = "REQUEST_REJECT";
    RejectTransferResponseNsccStatus["Review"] = "REVIEW";
    RejectTransferResponseNsccStatus["ReviewAdjustDeliverer"] = "REVIEW_ADJUST_DELIVERER";
    RejectTransferResponseNsccStatus["ReviewError"] = "REVIEW_ERROR";
    RejectTransferResponseNsccStatus["ReviewAccelerate"] = "REVIEW_ACCELERATE";
    RejectTransferResponseNsccStatus["ReviewAdjustReceiverAccelerate"] = "REVIEW_ADJUST_RECEIVER_ACCELERATE";
    RejectTransferResponseNsccStatus["SettlePrep"] = "SETTLE_PREP";
    RejectTransferResponseNsccStatus["SettleClose"] = "SETTLE_CLOSE";
    RejectTransferResponseNsccStatus["ClosePurge"] = "CLOSE_PURGE";
    RejectTransferResponseNsccStatus["PartialRequest"] = "PARTIAL_REQUEST";
    RejectTransferResponseNsccStatus["MemoPurgePartialTransferRequestReceiver"] = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER";
    RejectTransferResponseNsccStatus["Reject"] = "REJECT";
    RejectTransferResponseNsccStatus["SystemPurge"] = "SYSTEM_PURGE";
})(RejectTransferResponseNsccStatus || (RejectTransferResponseNsccStatus = {}));
/**
 * The reject code
 */
export var RejectTransferResponseRejectCode;
(function (RejectTransferResponseRejectCode) {
    RejectTransferResponseRejectCode["RejectCodeUnspecified"] = "REJECT_CODE_UNSPECIFIED";
    RejectTransferResponseRejectCode["RejectCodeSsnTaxIdMismatch"] = "REJECT_CODE_SSN_TAX_ID_MISMATCH";
    RejectTransferResponseRejectCode["RejectCodeAccountTitleMismatch"] = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH";
    RejectTransferResponseRejectCode["RejectCodeDocumentationNeeded"] = "REJECT_CODE_DOCUMENTATION_NEEDED";
    RejectTransferResponseRejectCode["RejectCodeAccountFlat"] = "REJECT_CODE_ACCOUNT_FLAT";
    RejectTransferResponseRejectCode["RejectCodeInvalidAccountNumber"] = "REJECT_CODE_INVALID_ACCOUNT_NUMBER";
    RejectTransferResponseRejectCode["RejectCodeDuplicate"] = "REJECT_CODE_DUPLICATE";
    RejectTransferResponseRejectCode["RejectCodeAccountInDistributionOrTransfer"] = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER";
    RejectTransferResponseRejectCode["RejectCodeClientRescinded"] = "REJECT_CODE_CLIENT_RESCINDED";
    RejectTransferResponseRejectCode["RejectCodeMissingAuthorizationSignature"] = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE";
    RejectTransferResponseRejectCode["RejectCodeAccountViolatesCreditPolicyOfReceivingFirm"] = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM";
    RejectTransferResponseRejectCode["RejectCodeUnrecognizedForResidualCreditBalance"] = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE";
    RejectTransferResponseRejectCode["RejectCodePartialTransferDeliverer"] = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER";
    RejectTransferResponseRejectCode["RejectCodeFailReversal"] = "REJECT_CODE_FAIL_REVERSAL";
    RejectTransferResponseRejectCode["RejectCodeReclaim"] = "REJECT_CODE_RECLAIM";
    RejectTransferResponseRejectCode["RejectCodeMutualFundCleanup"] = "REJECT_CODE_MUTUAL_FUND_CLEANUP";
})(RejectTransferResponseRejectCode || (RejectTransferResponseRejectCode = {}));
/**
 * The transfer state
 */
export var RejectTransferResponseState;
(function (RejectTransferResponseState) {
    RejectTransferResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    RejectTransferResponseState["Received"] = "RECEIVED";
    RejectTransferResponseState["Submitted"] = "SUBMITTED";
    RejectTransferResponseState["Rejected"] = "REJECTED";
    RejectTransferResponseState["PendingContraResponse"] = "PENDING_CONTRA_RESPONSE";
    RejectTransferResponseState["Error"] = "ERROR";
    RejectTransferResponseState["Accepted"] = "ACCEPTED";
    RejectTransferResponseState["PendingReview"] = "PENDING_REVIEW";
    RejectTransferResponseState["PendingRejection"] = "PENDING_REJECTION";
    RejectTransferResponseState["PendingSettlement"] = "PENDING_SETTLEMENT";
    RejectTransferResponseState["PendingBookkeeping"] = "PENDING_BOOKKEEPING";
    RejectTransferResponseState["Completed"] = "COMPLETED";
    RejectTransferResponseState["Purged"] = "PURGED";
})(RejectTransferResponseState || (RejectTransferResponseState = {}));
/**
 * The type of transfer
 */
export var RejectTransferResponseTransferType;
(function (RejectTransferResponseTransferType) {
    RejectTransferResponseTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    RejectTransferResponseTransferType["FailReversalBrokerToBrokerOnly"] = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY";
    RejectTransferResponseTransferType["FullTransfer"] = "FULL_TRANSFER";
    RejectTransferResponseTransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    RejectTransferResponseTransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    RejectTransferResponseTransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    RejectTransferResponseTransferType["PositionTransferFundFirmToMutualFundCompanyOnly"] = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY";
    RejectTransferResponseTransferType["Reclaim"] = "RECLAIM";
    RejectTransferResponseTransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
})(RejectTransferResponseTransferType || (RejectTransferResponseTransferType = {}));
/** @internal */
export const RejectTransferResponseExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const RejectTransferResponseExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseExternalAccount$;
(function (RejectTransferResponseExternalAccount$) {
    /** @deprecated use `RejectTransferResponseExternalAccount$inboundSchema` instead. */
    RejectTransferResponseExternalAccount$.inboundSchema = RejectTransferResponseExternalAccount$inboundSchema;
    /** @deprecated use `RejectTransferResponseExternalAccount$outboundSchema` instead. */
    RejectTransferResponseExternalAccount$.outboundSchema = RejectTransferResponseExternalAccount$outboundSchema;
})(RejectTransferResponseExternalAccount$ || (RejectTransferResponseExternalAccount$ = {}));
export function rejectTransferResponseExternalAccountToJSON(rejectTransferResponseExternalAccount) {
    return JSON.stringify(RejectTransferResponseExternalAccount$outboundSchema.parse(rejectTransferResponseExternalAccount));
}
export function rejectTransferResponseExternalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponseExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponseExternalAccount' from JSON`);
}
/** @internal */
export const RejectTransferResponseDeliverer$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => RejectTransferResponseExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const RejectTransferResponseDeliverer$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => RejectTransferResponseExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseDeliverer$;
(function (RejectTransferResponseDeliverer$) {
    /** @deprecated use `RejectTransferResponseDeliverer$inboundSchema` instead. */
    RejectTransferResponseDeliverer$.inboundSchema = RejectTransferResponseDeliverer$inboundSchema;
    /** @deprecated use `RejectTransferResponseDeliverer$outboundSchema` instead. */
    RejectTransferResponseDeliverer$.outboundSchema = RejectTransferResponseDeliverer$outboundSchema;
})(RejectTransferResponseDeliverer$ || (RejectTransferResponseDeliverer$ = {}));
export function rejectTransferResponseDelivererToJSON(rejectTransferResponseDeliverer) {
    return JSON.stringify(RejectTransferResponseDeliverer$outboundSchema.parse(rejectTransferResponseDeliverer));
}
export function rejectTransferResponseDelivererFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponseDeliverer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponseDeliverer' from JSON`);
}
/** @internal */
export const RejectTransferResponseDirection$inboundSchema = z
    .union([
    z.nativeEnum(RejectTransferResponseDirection),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectTransferResponseDirection$outboundSchema = z.union([
    z.nativeEnum(RejectTransferResponseDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseDirection$;
(function (RejectTransferResponseDirection$) {
    /** @deprecated use `RejectTransferResponseDirection$inboundSchema` instead. */
    RejectTransferResponseDirection$.inboundSchema = RejectTransferResponseDirection$inboundSchema;
    /** @deprecated use `RejectTransferResponseDirection$outboundSchema` instead. */
    RejectTransferResponseDirection$.outboundSchema = RejectTransferResponseDirection$outboundSchema;
})(RejectTransferResponseDirection$ || (RejectTransferResponseDirection$ = {}));
/** @internal */
export const RejectTransferResponseNsccStatus$inboundSchema = z
    .union([
    z.nativeEnum(RejectTransferResponseNsccStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectTransferResponseNsccStatus$outboundSchema = z.union([
    z.nativeEnum(RejectTransferResponseNsccStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseNsccStatus$;
(function (RejectTransferResponseNsccStatus$) {
    /** @deprecated use `RejectTransferResponseNsccStatus$inboundSchema` instead. */
    RejectTransferResponseNsccStatus$.inboundSchema = RejectTransferResponseNsccStatus$inboundSchema;
    /** @deprecated use `RejectTransferResponseNsccStatus$outboundSchema` instead. */
    RejectTransferResponseNsccStatus$.outboundSchema = RejectTransferResponseNsccStatus$outboundSchema;
})(RejectTransferResponseNsccStatus$ || (RejectTransferResponseNsccStatus$ = {}));
/** @internal */
export const RejectTransferResponseTransferExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
export const RejectTransferResponseTransferExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseTransferExternalAccount$;
(function (RejectTransferResponseTransferExternalAccount$) {
    /** @deprecated use `RejectTransferResponseTransferExternalAccount$inboundSchema` instead. */
    RejectTransferResponseTransferExternalAccount$.inboundSchema = RejectTransferResponseTransferExternalAccount$inboundSchema;
    /** @deprecated use `RejectTransferResponseTransferExternalAccount$outboundSchema` instead. */
    RejectTransferResponseTransferExternalAccount$.outboundSchema = RejectTransferResponseTransferExternalAccount$outboundSchema;
})(RejectTransferResponseTransferExternalAccount$ || (RejectTransferResponseTransferExternalAccount$ = {}));
export function rejectTransferResponseTransferExternalAccountToJSON(rejectTransferResponseTransferExternalAccount) {
    return JSON.stringify(RejectTransferResponseTransferExternalAccount$outboundSchema.parse(rejectTransferResponseTransferExternalAccount));
}
export function rejectTransferResponseTransferExternalAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponseTransferExternalAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponseTransferExternalAccount' from JSON`);
}
/** @internal */
export const RejectTransferResponseReceiver$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => RejectTransferResponseTransferExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
export const RejectTransferResponseReceiver$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => RejectTransferResponseTransferExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseReceiver$;
(function (RejectTransferResponseReceiver$) {
    /** @deprecated use `RejectTransferResponseReceiver$inboundSchema` instead. */
    RejectTransferResponseReceiver$.inboundSchema = RejectTransferResponseReceiver$inboundSchema;
    /** @deprecated use `RejectTransferResponseReceiver$outboundSchema` instead. */
    RejectTransferResponseReceiver$.outboundSchema = RejectTransferResponseReceiver$outboundSchema;
})(RejectTransferResponseReceiver$ || (RejectTransferResponseReceiver$ = {}));
export function rejectTransferResponseReceiverToJSON(rejectTransferResponseReceiver) {
    return JSON.stringify(RejectTransferResponseReceiver$outboundSchema.parse(rejectTransferResponseReceiver));
}
export function rejectTransferResponseReceiverFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponseReceiver$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponseReceiver' from JSON`);
}
/** @internal */
export const RejectTransferResponseRejectCode$inboundSchema = z
    .union([
    z.nativeEnum(RejectTransferResponseRejectCode),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectTransferResponseRejectCode$outboundSchema = z.union([
    z.nativeEnum(RejectTransferResponseRejectCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseRejectCode$;
(function (RejectTransferResponseRejectCode$) {
    /** @deprecated use `RejectTransferResponseRejectCode$inboundSchema` instead. */
    RejectTransferResponseRejectCode$.inboundSchema = RejectTransferResponseRejectCode$inboundSchema;
    /** @deprecated use `RejectTransferResponseRejectCode$outboundSchema` instead. */
    RejectTransferResponseRejectCode$.outboundSchema = RejectTransferResponseRejectCode$outboundSchema;
})(RejectTransferResponseRejectCode$ || (RejectTransferResponseRejectCode$ = {}));
/** @internal */
export const RejectTransferResponseState$inboundSchema = z
    .union([
    z.nativeEnum(RejectTransferResponseState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectTransferResponseState$outboundSchema = z.union([
    z.nativeEnum(RejectTransferResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseState$;
(function (RejectTransferResponseState$) {
    /** @deprecated use `RejectTransferResponseState$inboundSchema` instead. */
    RejectTransferResponseState$.inboundSchema = RejectTransferResponseState$inboundSchema;
    /** @deprecated use `RejectTransferResponseState$outboundSchema` instead. */
    RejectTransferResponseState$.outboundSchema = RejectTransferResponseState$outboundSchema;
})(RejectTransferResponseState$ || (RejectTransferResponseState$ = {}));
/** @internal */
export const RejectTransferResponseTransferType$inboundSchema = z
    .union([
    z.nativeEnum(RejectTransferResponseTransferType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RejectTransferResponseTransferType$outboundSchema = z.union([
    z.nativeEnum(RejectTransferResponseTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseTransferType$;
(function (RejectTransferResponseTransferType$) {
    /** @deprecated use `RejectTransferResponseTransferType$inboundSchema` instead. */
    RejectTransferResponseTransferType$.inboundSchema = RejectTransferResponseTransferType$inboundSchema;
    /** @deprecated use `RejectTransferResponseTransferType$outboundSchema` instead. */
    RejectTransferResponseTransferType$.outboundSchema = RejectTransferResponseTransferType$outboundSchema;
})(RejectTransferResponseTransferType$ || (RejectTransferResponseTransferType$ = {}));
/** @internal */
export const RejectTransferResponseTransfer$inboundSchema = z.object({
    acat_control_number: z.string().optional(),
    assets: z.array(AcatsAsset$inboundSchema).optional(),
    comment: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deliverer: z.nullable(z.lazy(() => RejectTransferResponseDeliverer$inboundSchema)).optional(),
    direction: RejectTransferResponseDirection$inboundSchema.optional(),
    name: z.string().optional(),
    nscc_status: RejectTransferResponseNsccStatus$inboundSchema.optional(),
    original_control_number: z.string().optional(),
    receiver: z.nullable(z.lazy(() => RejectTransferResponseReceiver$inboundSchema)).optional(),
    reject_code: RejectTransferResponseRejectCode$inboundSchema.optional(),
    state: RejectTransferResponseState$inboundSchema.optional(),
    state_reason: z.string().optional(),
    transfer_type: RejectTransferResponseTransferType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "acat_control_number": "acatControlNumber",
        "create_time": "createTime",
        "nscc_status": "nsccStatus",
        "original_control_number": "originalControlNumber",
        "reject_code": "rejectCode",
        "state_reason": "stateReason",
        "transfer_type": "transferType",
    });
});
/** @internal */
export const RejectTransferResponseTransfer$outboundSchema = z.object({
    acatControlNumber: z.string().optional(),
    assets: z.array(AcatsAsset$outboundSchema).optional(),
    comment: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deliverer: z.nullable(z.lazy(() => RejectTransferResponseDeliverer$outboundSchema)).optional(),
    direction: RejectTransferResponseDirection$outboundSchema.optional(),
    name: z.string().optional(),
    nsccStatus: RejectTransferResponseNsccStatus$outboundSchema.optional(),
    originalControlNumber: z.string().optional(),
    receiver: z.nullable(z.lazy(() => RejectTransferResponseReceiver$outboundSchema)).optional(),
    rejectCode: RejectTransferResponseRejectCode$outboundSchema.optional(),
    state: RejectTransferResponseState$outboundSchema.optional(),
    stateReason: z.string().optional(),
    transferType: RejectTransferResponseTransferType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        acatControlNumber: "acat_control_number",
        createTime: "create_time",
        nsccStatus: "nscc_status",
        originalControlNumber: "original_control_number",
        rejectCode: "reject_code",
        stateReason: "state_reason",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponseTransfer$;
(function (RejectTransferResponseTransfer$) {
    /** @deprecated use `RejectTransferResponseTransfer$inboundSchema` instead. */
    RejectTransferResponseTransfer$.inboundSchema = RejectTransferResponseTransfer$inboundSchema;
    /** @deprecated use `RejectTransferResponseTransfer$outboundSchema` instead. */
    RejectTransferResponseTransfer$.outboundSchema = RejectTransferResponseTransfer$outboundSchema;
})(RejectTransferResponseTransfer$ || (RejectTransferResponseTransfer$ = {}));
export function rejectTransferResponseTransferToJSON(rejectTransferResponseTransfer) {
    return JSON.stringify(RejectTransferResponseTransfer$outboundSchema.parse(rejectTransferResponseTransfer));
}
export function rejectTransferResponseTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponseTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponseTransfer' from JSON`);
}
/** @internal */
export const RejectTransferResponse$inboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => RejectTransferResponseTransfer$inboundSchema)).optional(),
});
/** @internal */
export const RejectTransferResponse$outboundSchema = z.object({
    transfer: z.nullable(z.lazy(() => RejectTransferResponseTransfer$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RejectTransferResponse$;
(function (RejectTransferResponse$) {
    /** @deprecated use `RejectTransferResponse$inboundSchema` instead. */
    RejectTransferResponse$.inboundSchema = RejectTransferResponse$inboundSchema;
    /** @deprecated use `RejectTransferResponse$outboundSchema` instead. */
    RejectTransferResponse$.outboundSchema = RejectTransferResponse$outboundSchema;
})(RejectTransferResponse$ || (RejectTransferResponse$ = {}));
export function rejectTransferResponseToJSON(rejectTransferResponse) {
    return JSON.stringify(RejectTransferResponse$outboundSchema.parse(rejectTransferResponse));
}
export function rejectTransferResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RejectTransferResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RejectTransferResponse' from JSON`);
}
//# sourceMappingURL=rejecttransferresponse.js.map