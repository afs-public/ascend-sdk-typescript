/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * Delivery method instruction for account statements for a given Interested Party; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var InterestedPartyStatementDeliveryPreference;
(function (InterestedPartyStatementDeliveryPreference) {
    InterestedPartyStatementDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyStatementDeliveryPreference || (InterestedPartyStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Interested Party record; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
export var InterestedPartyTradeConfirmationDeliveryPreference;
(function (InterestedPartyTradeConfirmationDeliveryPreference) {
    InterestedPartyTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyTradeConfirmationDeliveryPreference || (InterestedPartyTradeConfirmationDeliveryPreference = {}));
/** @internal */
export const InterestedPartyMailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
export const InterestedPartyMailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyMailingAddress$;
(function (InterestedPartyMailingAddress$) {
    /** @deprecated use `InterestedPartyMailingAddress$inboundSchema` instead. */
    InterestedPartyMailingAddress$.inboundSchema = InterestedPartyMailingAddress$inboundSchema;
    /** @deprecated use `InterestedPartyMailingAddress$outboundSchema` instead. */
    InterestedPartyMailingAddress$.outboundSchema = InterestedPartyMailingAddress$outboundSchema;
})(InterestedPartyMailingAddress$ || (InterestedPartyMailingAddress$ = {}));
export function interestedPartyMailingAddressToJSON(interestedPartyMailingAddress) {
    return JSON.stringify(InterestedPartyMailingAddress$outboundSchema.parse(interestedPartyMailingAddress));
}
export function interestedPartyMailingAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestedPartyMailingAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestedPartyMailingAddress' from JSON`);
}
/** @internal */
export const InterestedPartyStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyStatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InterestedPartyStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyStatementDeliveryPreference$;
(function (InterestedPartyStatementDeliveryPreference$) {
    /** @deprecated use `InterestedPartyStatementDeliveryPreference$inboundSchema` instead. */
    InterestedPartyStatementDeliveryPreference$.inboundSchema = InterestedPartyStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyStatementDeliveryPreference$outboundSchema` instead. */
    InterestedPartyStatementDeliveryPreference$.outboundSchema = InterestedPartyStatementDeliveryPreference$outboundSchema;
})(InterestedPartyStatementDeliveryPreference$ || (InterestedPartyStatementDeliveryPreference$ = {}));
/** @internal */
export const InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyTradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedPartyTradeConfirmationDeliveryPreference$;
(function (InterestedPartyTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    InterestedPartyTradeConfirmationDeliveryPreference$.inboundSchema = InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    InterestedPartyTradeConfirmationDeliveryPreference$.outboundSchema = InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema;
})(InterestedPartyTradeConfirmationDeliveryPreference$ || (InterestedPartyTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const InterestedParty$inboundSchema = z.object({
    interested_party_id: z.string().optional(),
    mailing_address: z.nullable(z.lazy(() => InterestedPartyMailingAddress$inboundSchema)).optional(),
    name: z.string().optional(),
    recipient: z.string().optional(),
    statement_delivery_preference: InterestedPartyStatementDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "interested_party_id": "interestedPartyId",
        "mailing_address": "mailingAddress",
        "statement_delivery_preference": "statementDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const InterestedParty$outboundSchema = z.object({
    interestedPartyId: z.string().optional(),
    mailingAddress: z.nullable(z.lazy(() => InterestedPartyMailingAddress$outboundSchema)).optional(),
    name: z.string().optional(),
    recipient: z.string().optional(),
    statementDeliveryPreference: InterestedPartyStatementDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        interestedPartyId: "interested_party_id",
        mailingAddress: "mailing_address",
        statementDeliveryPreference: "statement_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InterestedParty$;
(function (InterestedParty$) {
    /** @deprecated use `InterestedParty$inboundSchema` instead. */
    InterestedParty$.inboundSchema = InterestedParty$inboundSchema;
    /** @deprecated use `InterestedParty$outboundSchema` instead. */
    InterestedParty$.outboundSchema = InterestedParty$outboundSchema;
})(InterestedParty$ || (InterestedParty$ = {}));
export function interestedPartyToJSON(interestedParty) {
    return JSON.stringify(InterestedParty$outboundSchema.parse(interestedParty));
}
export function interestedPartyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InterestedParty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InterestedParty' from JSON`);
}
//# sourceMappingURL=interestedparty.js.map