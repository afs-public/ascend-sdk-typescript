/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
 */
export var InvestmentObjective;
(function (InvestmentObjective) {
    InvestmentObjective["InvestmentObjectiveUnspecified"] = "INVESTMENT_OBJECTIVE_UNSPECIFIED";
    InvestmentObjective["Balanced"] = "BALANCED";
    InvestmentObjective["CapitalAppreciation"] = "CAPITAL_APPRECIATION";
    InvestmentObjective["CapitalPreservation"] = "CAPITAL_PRESERVATION";
    InvestmentObjective["Growth"] = "GROWTH";
    InvestmentObjective["GrowthAndIncome"] = "GROWTH_AND_INCOME";
    InvestmentObjective["GrowthIncome"] = "GROWTH_INCOME";
    InvestmentObjective["Income"] = "INCOME";
    InvestmentObjective["LongTermGrowthWithGreaterRisk"] = "LONG_TERM_GROWTH_WITH_GREATER_RISK";
    InvestmentObjective["LongTermGrowthWithSafety"] = "LONG_TERM_GROWTH_WITH_SAFETY";
    InvestmentObjective["MaximumGrowth"] = "MAXIMUM_GROWTH";
    InvestmentObjective["ShortTermGrowthWithRisk"] = "SHORT_TERM_GROWTH_WITH_RISK";
    InvestmentObjective["Speculation"] = "SPECULATION";
    InvestmentObjective["Other"] = "OTHER";
})(InvestmentObjective || (InvestmentObjective = {}));
/**
 * An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
 */
export var LiquidityNeeds;
(function (LiquidityNeeds) {
    LiquidityNeeds["LiquidityNeedsUnspecified"] = "LIQUIDITY_NEEDS_UNSPECIFIED";
    LiquidityNeeds["VeryImportant"] = "VERY_IMPORTANT";
    LiquidityNeeds["SomewhatImportant"] = "SOMEWHAT_IMPORTANT";
    LiquidityNeeds["NotImportant"] = "NOT_IMPORTANT";
})(LiquidityNeeds || (LiquidityNeeds = {}));
/**
 * An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
 */
export var RiskTolerance;
(function (RiskTolerance) {
    RiskTolerance["RiskToleranceUnspecified"] = "RISK_TOLERANCE_UNSPECIFIED";
    RiskTolerance["Low"] = "LOW";
    RiskTolerance["Medium"] = "MEDIUM";
    RiskTolerance["High"] = "HIGH";
})(RiskTolerance || (RiskTolerance = {}));
/**
 * TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
 */
export var TimeHorizon;
(function (TimeHorizon) {
    TimeHorizon["TimeHorizonUnspecified"] = "TIME_HORIZON_UNSPECIFIED";
    TimeHorizon["Short"] = "SHORT";
    TimeHorizon["Average"] = "AVERAGE";
    TimeHorizon["Long"] = "LONG";
})(TimeHorizon || (TimeHorizon = {}));
/** @internal */
export const InvestmentObjective$inboundSchema = z
    .union([
    z.nativeEnum(InvestmentObjective),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const InvestmentObjective$outboundSchema = z.union([
    z.nativeEnum(InvestmentObjective),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestmentObjective$;
(function (InvestmentObjective$) {
    /** @deprecated use `InvestmentObjective$inboundSchema` instead. */
    InvestmentObjective$.inboundSchema = InvestmentObjective$inboundSchema;
    /** @deprecated use `InvestmentObjective$outboundSchema` instead. */
    InvestmentObjective$.outboundSchema = InvestmentObjective$outboundSchema;
})(InvestmentObjective$ || (InvestmentObjective$ = {}));
/** @internal */
export const LiquidityNeeds$inboundSchema = z
    .union([
    z.nativeEnum(LiquidityNeeds),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const LiquidityNeeds$outboundSchema = z.union([
    z.nativeEnum(LiquidityNeeds),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LiquidityNeeds$;
(function (LiquidityNeeds$) {
    /** @deprecated use `LiquidityNeeds$inboundSchema` instead. */
    LiquidityNeeds$.inboundSchema = LiquidityNeeds$inboundSchema;
    /** @deprecated use `LiquidityNeeds$outboundSchema` instead. */
    LiquidityNeeds$.outboundSchema = LiquidityNeeds$outboundSchema;
})(LiquidityNeeds$ || (LiquidityNeeds$ = {}));
/** @internal */
export const RiskTolerance$inboundSchema = z
    .union([
    z.nativeEnum(RiskTolerance),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RiskTolerance$outboundSchema = z.union([
    z.nativeEnum(RiskTolerance),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RiskTolerance$;
(function (RiskTolerance$) {
    /** @deprecated use `RiskTolerance$inboundSchema` instead. */
    RiskTolerance$.inboundSchema = RiskTolerance$inboundSchema;
    /** @deprecated use `RiskTolerance$outboundSchema` instead. */
    RiskTolerance$.outboundSchema = RiskTolerance$outboundSchema;
})(RiskTolerance$ || (RiskTolerance$ = {}));
/** @internal */
export const TimeHorizon$inboundSchema = z
    .union([
    z.nativeEnum(TimeHorizon),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TimeHorizon$outboundSchema = z.union([
    z.nativeEnum(TimeHorizon),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TimeHorizon$;
(function (TimeHorizon$) {
    /** @deprecated use `TimeHorizon$inboundSchema` instead. */
    TimeHorizon$.inboundSchema = TimeHorizon$inboundSchema;
    /** @deprecated use `TimeHorizon$outboundSchema` instead. */
    TimeHorizon$.outboundSchema = TimeHorizon$outboundSchema;
})(TimeHorizon$ || (TimeHorizon$ = {}));
/** @internal */
export const AccountGoalsCreate$inboundSchema = z.object({
    investment_objective: InvestmentObjective$inboundSchema.optional(),
    liquidity_needs: LiquidityNeeds$inboundSchema.optional(),
    risk_tolerance: RiskTolerance$inboundSchema.optional(),
    time_horizon: TimeHorizon$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "investment_objective": "investmentObjective",
        "liquidity_needs": "liquidityNeeds",
        "risk_tolerance": "riskTolerance",
        "time_horizon": "timeHorizon",
    });
});
/** @internal */
export const AccountGoalsCreate$outboundSchema = z.object({
    investmentObjective: InvestmentObjective$outboundSchema.optional(),
    liquidityNeeds: LiquidityNeeds$outboundSchema.optional(),
    riskTolerance: RiskTolerance$outboundSchema.optional(),
    timeHorizon: TimeHorizon$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        investmentObjective: "investment_objective",
        liquidityNeeds: "liquidity_needs",
        riskTolerance: "risk_tolerance",
        timeHorizon: "time_horizon",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountGoalsCreate$;
(function (AccountGoalsCreate$) {
    /** @deprecated use `AccountGoalsCreate$inboundSchema` instead. */
    AccountGoalsCreate$.inboundSchema = AccountGoalsCreate$inboundSchema;
    /** @deprecated use `AccountGoalsCreate$outboundSchema` instead. */
    AccountGoalsCreate$.outboundSchema = AccountGoalsCreate$outboundSchema;
})(AccountGoalsCreate$ || (AccountGoalsCreate$ = {}));
export function accountGoalsCreateToJSON(accountGoalsCreate) {
    return JSON.stringify(AccountGoalsCreate$outboundSchema.parse(accountGoalsCreate));
}
export function accountGoalsCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountGoalsCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountGoalsCreate' from JSON`);
}
//# sourceMappingURL=accountgoalscreate.js.map