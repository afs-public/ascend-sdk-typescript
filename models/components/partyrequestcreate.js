/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { PhoneNumberCreate$inboundSchema, PhoneNumberCreate$outboundSchema, } from "./phonenumbercreate.js";
import { PostalAddressCreate$inboundSchema, PostalAddressCreate$outboundSchema, } from "./postaladdresscreate.js";
/**
 * Delivery method instruction for prospectuses for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var ProspectusDeliveryPreference;
(function (ProspectusDeliveryPreference) {
    ProspectusDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    ProspectusDeliveryPreference["Digital"] = "DIGITAL";
    ProspectusDeliveryPreference["Physical"] = "PHYSICAL";
    ProspectusDeliveryPreference["Suppress"] = "SUPPRESS";
})(ProspectusDeliveryPreference || (ProspectusDeliveryPreference = {}));
/**
 * Delivery method instruction for proxy voting for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var ProxyDeliveryPreference;
(function (ProxyDeliveryPreference) {
    ProxyDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    ProxyDeliveryPreference["Digital"] = "DIGITAL";
    ProxyDeliveryPreference["Physical"] = "PHYSICAL";
    ProxyDeliveryPreference["Suppress"] = "SUPPRESS";
})(ProxyDeliveryPreference || (ProxyDeliveryPreference = {}));
/**
 * Conveys how a person is related to account; Located on each account Party record; Examples are `PRIMARY_OWNER`, `JOINT_OWNER`, `EXECUTOR`, etc.
 */
export var RelationType;
(function (RelationType) {
    RelationType["PartyRelationTypeUnspecified"] = "PARTY_RELATION_TYPE_UNSPECIFIED";
    RelationType["PrimaryOwner"] = "PRIMARY_OWNER";
    RelationType["JointOwner"] = "JOINT_OWNER";
    RelationType["Custodian"] = "CUSTODIAN";
    RelationType["Executor"] = "EXECUTOR";
    RelationType["AuthorizedSigner"] = "AUTHORIZED_SIGNER";
    RelationType["BeneficialOwner"] = "BENEFICIAL_OWNER";
    RelationType["ControlPerson"] = "CONTROL_PERSON";
    RelationType["AuthorizedRepresentative"] = "AUTHORIZED_REPRESENTATIVE";
    RelationType["Trustee"] = "TRUSTEE";
    RelationType["AuthTrusteeRep"] = "AUTH_TRUSTEE_REP";
})(RelationType || (RelationType = {}));
/**
 * Delivery method instruction for account statements for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestCreateStatementDeliveryPreference;
(function (PartyRequestCreateStatementDeliveryPreference) {
    PartyRequestCreateStatementDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestCreateStatementDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestCreateStatementDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestCreateStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestCreateStatementDeliveryPreference || (PartyRequestCreateStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for tax documents for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated; Per regulation, selected tax forms will be mailed by regulation regardless of this setting
 */
export var TaxDocumentDeliveryPreference;
(function (TaxDocumentDeliveryPreference) {
    TaxDocumentDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    TaxDocumentDeliveryPreference["Digital"] = "DIGITAL";
    TaxDocumentDeliveryPreference["Physical"] = "PHYSICAL";
    TaxDocumentDeliveryPreference["Suppress"] = "SUPPRESS";
})(TaxDocumentDeliveryPreference || (TaxDocumentDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
export var PartyRequestCreateTradeConfirmationDeliveryPreference;
(function (PartyRequestCreateTradeConfirmationDeliveryPreference) {
    PartyRequestCreateTradeConfirmationDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyRequestCreateTradeConfirmationDeliveryPreference["Digital"] = "DIGITAL";
    PartyRequestCreateTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    PartyRequestCreateTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyRequestCreateTradeConfirmationDeliveryPreference || (PartyRequestCreateTradeConfirmationDeliveryPreference = {}));
/** @internal */
export const ProspectusDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(ProspectusDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ProspectusDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(ProspectusDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProspectusDeliveryPreference$;
(function (ProspectusDeliveryPreference$) {
    /** @deprecated use `ProspectusDeliveryPreference$inboundSchema` instead. */
    ProspectusDeliveryPreference$.inboundSchema = ProspectusDeliveryPreference$inboundSchema;
    /** @deprecated use `ProspectusDeliveryPreference$outboundSchema` instead. */
    ProspectusDeliveryPreference$.outboundSchema = ProspectusDeliveryPreference$outboundSchema;
})(ProspectusDeliveryPreference$ || (ProspectusDeliveryPreference$ = {}));
/** @internal */
export const ProxyDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(ProxyDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const ProxyDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(ProxyDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProxyDeliveryPreference$;
(function (ProxyDeliveryPreference$) {
    /** @deprecated use `ProxyDeliveryPreference$inboundSchema` instead. */
    ProxyDeliveryPreference$.inboundSchema = ProxyDeliveryPreference$inboundSchema;
    /** @deprecated use `ProxyDeliveryPreference$outboundSchema` instead. */
    ProxyDeliveryPreference$.outboundSchema = ProxyDeliveryPreference$outboundSchema;
})(ProxyDeliveryPreference$ || (ProxyDeliveryPreference$ = {}));
/** @internal */
export const RelationType$inboundSchema = z
    .union([
    z.nativeEnum(RelationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RelationType$outboundSchema = z.union([
    z.nativeEnum(RelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RelationType$;
(function (RelationType$) {
    /** @deprecated use `RelationType$inboundSchema` instead. */
    RelationType$.inboundSchema = RelationType$inboundSchema;
    /** @deprecated use `RelationType$outboundSchema` instead. */
    RelationType$.outboundSchema = RelationType$outboundSchema;
})(RelationType$ || (RelationType$ = {}));
/** @internal */
export const PartyRequestCreateStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestCreateStatementDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestCreateStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestCreateStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestCreateStatementDeliveryPreference$;
(function (PartyRequestCreateStatementDeliveryPreference$) {
    /** @deprecated use `PartyRequestCreateStatementDeliveryPreference$inboundSchema` instead. */
    PartyRequestCreateStatementDeliveryPreference$.inboundSchema = PartyRequestCreateStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestCreateStatementDeliveryPreference$outboundSchema` instead. */
    PartyRequestCreateStatementDeliveryPreference$.outboundSchema = PartyRequestCreateStatementDeliveryPreference$outboundSchema;
})(PartyRequestCreateStatementDeliveryPreference$ || (PartyRequestCreateStatementDeliveryPreference$ = {}));
/** @internal */
export const TaxDocumentDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(TaxDocumentDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const TaxDocumentDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(TaxDocumentDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TaxDocumentDeliveryPreference$;
(function (TaxDocumentDeliveryPreference$) {
    /** @deprecated use `TaxDocumentDeliveryPreference$inboundSchema` instead. */
    TaxDocumentDeliveryPreference$.inboundSchema = TaxDocumentDeliveryPreference$inboundSchema;
    /** @deprecated use `TaxDocumentDeliveryPreference$outboundSchema` instead. */
    TaxDocumentDeliveryPreference$.outboundSchema = TaxDocumentDeliveryPreference$outboundSchema;
})(TaxDocumentDeliveryPreference$ || (TaxDocumentDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestCreateTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyRequestCreateTradeConfirmationDeliveryPreference),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PartyRequestCreateTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyRequestCreateTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestCreateTradeConfirmationDeliveryPreference$;
(function (PartyRequestCreateTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `PartyRequestCreateTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    PartyRequestCreateTradeConfirmationDeliveryPreference$.inboundSchema = PartyRequestCreateTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyRequestCreateTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    PartyRequestCreateTradeConfirmationDeliveryPreference$.outboundSchema = PartyRequestCreateTradeConfirmationDeliveryPreference$outboundSchema;
})(PartyRequestCreateTradeConfirmationDeliveryPreference$ || (PartyRequestCreateTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
export const PartyRequestCreate$inboundSchema = z.object({
    email_address: z.string(),
    legal_entity_id: z.string().optional(),
    legal_natural_person_id: z.string().optional(),
    mailing_address: PostalAddressCreate$inboundSchema,
    phone_number: PhoneNumberCreate$inboundSchema,
    prospectus_delivery_preference: ProspectusDeliveryPreference$inboundSchema
        .optional(),
    proxy_delivery_preference: ProxyDeliveryPreference$inboundSchema.optional(),
    relation_type: RelationType$inboundSchema,
    statement_delivery_preference: PartyRequestCreateStatementDeliveryPreference$inboundSchema.optional(),
    tax_document_delivery_preference: TaxDocumentDeliveryPreference$inboundSchema
        .optional(),
    trade_confirmation_delivery_preference: PartyRequestCreateTradeConfirmationDeliveryPreference$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "email_address": "emailAddress",
        "legal_entity_id": "legalEntityId",
        "legal_natural_person_id": "legalNaturalPersonId",
        "mailing_address": "mailingAddress",
        "phone_number": "phoneNumber",
        "prospectus_delivery_preference": "prospectusDeliveryPreference",
        "proxy_delivery_preference": "proxyDeliveryPreference",
        "relation_type": "relationType",
        "statement_delivery_preference": "statementDeliveryPreference",
        "tax_document_delivery_preference": "taxDocumentDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
export const PartyRequestCreate$outboundSchema = z.object({
    emailAddress: z.string(),
    legalEntityId: z.string().optional(),
    legalNaturalPersonId: z.string().optional(),
    mailingAddress: PostalAddressCreate$outboundSchema,
    phoneNumber: PhoneNumberCreate$outboundSchema,
    prospectusDeliveryPreference: ProspectusDeliveryPreference$outboundSchema
        .optional(),
    proxyDeliveryPreference: ProxyDeliveryPreference$outboundSchema.optional(),
    relationType: RelationType$outboundSchema,
    statementDeliveryPreference: PartyRequestCreateStatementDeliveryPreference$outboundSchema.optional(),
    taxDocumentDeliveryPreference: TaxDocumentDeliveryPreference$outboundSchema
        .optional(),
    tradeConfirmationDeliveryPreference: PartyRequestCreateTradeConfirmationDeliveryPreference$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        emailAddress: "email_address",
        legalEntityId: "legal_entity_id",
        legalNaturalPersonId: "legal_natural_person_id",
        mailingAddress: "mailing_address",
        phoneNumber: "phone_number",
        prospectusDeliveryPreference: "prospectus_delivery_preference",
        proxyDeliveryPreference: "proxy_delivery_preference",
        relationType: "relation_type",
        statementDeliveryPreference: "statement_delivery_preference",
        taxDocumentDeliveryPreference: "tax_document_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartyRequestCreate$;
(function (PartyRequestCreate$) {
    /** @deprecated use `PartyRequestCreate$inboundSchema` instead. */
    PartyRequestCreate$.inboundSchema = PartyRequestCreate$inboundSchema;
    /** @deprecated use `PartyRequestCreate$outboundSchema` instead. */
    PartyRequestCreate$.outboundSchema = PartyRequestCreate$outboundSchema;
})(PartyRequestCreate$ || (PartyRequestCreate$ = {}));
export function partyRequestCreateToJSON(partyRequestCreate) {
    return JSON.stringify(PartyRequestCreate$outboundSchema.parse(partyRequestCreate));
}
export function partyRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartyRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartyRequestCreate' from JSON`);
}
//# sourceMappingURL=partyrequestcreate.js.map