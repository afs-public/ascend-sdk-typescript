/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ContributionConstraintsContributionTypeInfo$inboundSchema, ContributionConstraintsContributionTypeInfo$outboundSchema, } from "./contributionconstraintscontributiontypeinfo.js";
/** @internal */
export const ContributionConstraints$inboundSchema = z.object({
    only_allow_current_year: z.boolean().optional(),
    valid_types: z.array(ContributionConstraintsContributionTypeInfo$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "only_allow_current_year": "onlyAllowCurrentYear",
        "valid_types": "validTypes",
    });
});
/** @internal */
export const ContributionConstraints$outboundSchema = z.object({
    onlyAllowCurrentYear: z.boolean().optional(),
    validTypes: z.array(ContributionConstraintsContributionTypeInfo$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        onlyAllowCurrentYear: "only_allow_current_year",
        validTypes: "valid_types",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContributionConstraints$;
(function (ContributionConstraints$) {
    /** @deprecated use `ContributionConstraints$inboundSchema` instead. */
    ContributionConstraints$.inboundSchema = ContributionConstraints$inboundSchema;
    /** @deprecated use `ContributionConstraints$outboundSchema` instead. */
    ContributionConstraints$.outboundSchema = ContributionConstraints$outboundSchema;
})(ContributionConstraints$ || (ContributionConstraints$ = {}));
export function contributionConstraintsToJSON(contributionConstraints) {
    return JSON.stringify(ContributionConstraints$outboundSchema.parse(contributionConstraints));
}
export function contributionConstraintsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContributionConstraints$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContributionConstraints' from JSON`);
}
//# sourceMappingURL=contributionconstraints.js.map