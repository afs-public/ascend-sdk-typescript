/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The cash type of the deliverable
 */
export var CashType;
(function (CashType) {
    CashType["CashTypeUnspecified"] = "CASH_TYPE_UNSPECIFIED";
    CashType["CashDifferential"] = "CASH_DIFFERENTIAL";
    CashType["CashFixed"] = "CASH_FIXED";
})(CashType || (CashType = {}));
/**
 * Specifies the timeline for settling a transaction
 */
export var SettlementConvention;
(function (SettlementConvention) {
    SettlementConvention["SettlementConventionUnspecified"] = "SETTLEMENT_CONVENTION_UNSPECIFIED";
    SettlementConvention["TPlus0"] = "T_PLUS_0";
    SettlementConvention["TPlus1"] = "T_PLUS_1";
})(SettlementConvention || (SettlementConvention = {}));
/**
 * Indicates the current status of the settlement process for the deliverable asset(s) tied to an option, such as regular settlement or delayed.
 */
export var SettlementStatus;
(function (SettlementStatus) {
    SettlementStatus["SettlementStatusUnspecified"] = "SETTLEMENT_STATUS_UNSPECIFIED";
    SettlementStatus["Regular"] = "REGULAR";
    SettlementStatus["Delayed"] = "DELAYED";
})(SettlementStatus || (SettlementStatus = {}));
/** @internal */
export const AllocationPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AllocationPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AllocationPercentage$;
(function (AllocationPercentage$) {
    /** @deprecated use `AllocationPercentage$inboundSchema` instead. */
    AllocationPercentage$.inboundSchema = AllocationPercentage$inboundSchema;
    /** @deprecated use `AllocationPercentage$outboundSchema` instead. */
    AllocationPercentage$.outboundSchema = AllocationPercentage$outboundSchema;
})(AllocationPercentage$ || (AllocationPercentage$ = {}));
export function allocationPercentageToJSON(allocationPercentage) {
    return JSON.stringify(AllocationPercentage$outboundSchema.parse(allocationPercentage));
}
export function allocationPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AllocationPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AllocationPercentage' from JSON`);
}
/** @internal */
export const CashAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const CashAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashAmount$;
(function (CashAmount$) {
    /** @deprecated use `CashAmount$inboundSchema` instead. */
    CashAmount$.inboundSchema = CashAmount$inboundSchema;
    /** @deprecated use `CashAmount$outboundSchema` instead. */
    CashAmount$.outboundSchema = CashAmount$outboundSchema;
})(CashAmount$ || (CashAmount$ = {}));
export function cashAmountToJSON(cashAmount) {
    return JSON.stringify(CashAmount$outboundSchema.parse(cashAmount));
}
export function cashAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashAmount' from JSON`);
}
/** @internal */
export const CashType$inboundSchema = z
    .union([
    z.nativeEnum(CashType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const CashType$outboundSchema = z.union([
    z.nativeEnum(CashType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashType$;
(function (CashType$) {
    /** @deprecated use `CashType$inboundSchema` instead. */
    CashType$.inboundSchema = CashType$inboundSchema;
    /** @deprecated use `CashType$outboundSchema` instead. */
    CashType$.outboundSchema = CashType$outboundSchema;
})(CashType$ || (CashType$ = {}));
/** @internal */
export const OptionDeliverableQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const OptionDeliverableQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OptionDeliverableQuantity$;
(function (OptionDeliverableQuantity$) {
    /** @deprecated use `OptionDeliverableQuantity$inboundSchema` instead. */
    OptionDeliverableQuantity$.inboundSchema = OptionDeliverableQuantity$inboundSchema;
    /** @deprecated use `OptionDeliverableQuantity$outboundSchema` instead. */
    OptionDeliverableQuantity$.outboundSchema = OptionDeliverableQuantity$outboundSchema;
})(OptionDeliverableQuantity$ || (OptionDeliverableQuantity$ = {}));
export function optionDeliverableQuantityToJSON(optionDeliverableQuantity) {
    return JSON.stringify(OptionDeliverableQuantity$outboundSchema.parse(optionDeliverableQuantity));
}
export function optionDeliverableQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OptionDeliverableQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OptionDeliverableQuantity' from JSON`);
}
/** @internal */
export const SettlementConvention$inboundSchema = z
    .union([
    z.nativeEnum(SettlementConvention),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SettlementConvention$outboundSchema = z.union([
    z.nativeEnum(SettlementConvention),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SettlementConvention$;
(function (SettlementConvention$) {
    /** @deprecated use `SettlementConvention$inboundSchema` instead. */
    SettlementConvention$.inboundSchema = SettlementConvention$inboundSchema;
    /** @deprecated use `SettlementConvention$outboundSchema` instead. */
    SettlementConvention$.outboundSchema = SettlementConvention$outboundSchema;
})(SettlementConvention$ || (SettlementConvention$ = {}));
/** @internal */
export const SettlementStatus$inboundSchema = z
    .union([
    z.nativeEnum(SettlementStatus),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const SettlementStatus$outboundSchema = z.union([
    z.nativeEnum(SettlementStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SettlementStatus$;
(function (SettlementStatus$) {
    /** @deprecated use `SettlementStatus$inboundSchema` instead. */
    SettlementStatus$.inboundSchema = SettlementStatus$inboundSchema;
    /** @deprecated use `SettlementStatus$outboundSchema` instead. */
    SettlementStatus$.outboundSchema = SettlementStatus$outboundSchema;
})(SettlementStatus$ || (SettlementStatus$ = {}));
/** @internal */
export const OptionDeliverable$inboundSchema = z.object({
    allocation_percentage: z.nullable(z.lazy(() => AllocationPercentage$inboundSchema)).optional(),
    asset_id: z.string().optional(),
    cash_amount: z.nullable(z.lazy(() => CashAmount$inboundSchema)).optional(),
    cash_type: CashType$inboundSchema.optional(),
    cusip: z.string().optional(),
    pending_cusip: z.string().optional(),
    quantity: z.nullable(z.lazy(() => OptionDeliverableQuantity$inboundSchema))
        .optional(),
    settlement_convention: SettlementConvention$inboundSchema.optional(),
    settlement_status: SettlementStatus$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "allocation_percentage": "allocationPercentage",
        "asset_id": "assetId",
        "cash_amount": "cashAmount",
        "cash_type": "cashType",
        "pending_cusip": "pendingCusip",
        "settlement_convention": "settlementConvention",
        "settlement_status": "settlementStatus",
    });
});
/** @internal */
export const OptionDeliverable$outboundSchema = z.object({
    allocationPercentage: z.nullable(z.lazy(() => AllocationPercentage$outboundSchema)).optional(),
    assetId: z.string().optional(),
    cashAmount: z.nullable(z.lazy(() => CashAmount$outboundSchema)).optional(),
    cashType: CashType$outboundSchema.optional(),
    cusip: z.string().optional(),
    pendingCusip: z.string().optional(),
    quantity: z.nullable(z.lazy(() => OptionDeliverableQuantity$outboundSchema))
        .optional(),
    settlementConvention: SettlementConvention$outboundSchema.optional(),
    settlementStatus: SettlementStatus$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        allocationPercentage: "allocation_percentage",
        assetId: "asset_id",
        cashAmount: "cash_amount",
        cashType: "cash_type",
        pendingCusip: "pending_cusip",
        settlementConvention: "settlement_convention",
        settlementStatus: "settlement_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OptionDeliverable$;
(function (OptionDeliverable$) {
    /** @deprecated use `OptionDeliverable$inboundSchema` instead. */
    OptionDeliverable$.inboundSchema = OptionDeliverable$inboundSchema;
    /** @deprecated use `OptionDeliverable$outboundSchema` instead. */
    OptionDeliverable$.outboundSchema = OptionDeliverable$outboundSchema;
})(OptionDeliverable$ || (OptionDeliverable$ = {}));
export function optionDeliverableToJSON(optionDeliverable) {
    return JSON.stringify(OptionDeliverable$outboundSchema.parse(optionDeliverable));
}
export function optionDeliverableFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OptionDeliverable$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OptionDeliverable' from JSON`);
}
//# sourceMappingURL=optiondeliverable.js.map