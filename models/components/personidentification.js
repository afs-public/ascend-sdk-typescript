/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The identification type for a person, one of:
 *
 * @remarks
 * - `ID_TYPE_UNSPECIFIED` - Default/Null value.
 * - `SSN` - SSN tax type.
 * - `ITIN` - ITIN tax type.
 * - `FTIN` - FTIN (foreign tax id) type.
 * - `NATIONAL_ID` - National id type.
 * - `PASSPORT` - Passport id type.
 * - `DRIVING_LICENSE` - Drivers license id type.
 */
export var PersonIdentificationType;
(function (PersonIdentificationType) {
    PersonIdentificationType["IdTypeUnspecified"] = "ID_TYPE_UNSPECIFIED";
    PersonIdentificationType["Ssn"] = "SSN";
    PersonIdentificationType["Itin"] = "ITIN";
    PersonIdentificationType["Ftin"] = "FTIN";
    PersonIdentificationType["NationalId"] = "NATIONAL_ID";
    PersonIdentificationType["Passport"] = "PASSPORT";
    PersonIdentificationType["DrivingLicense"] = "DRIVING_LICENSE";
})(PersonIdentificationType || (PersonIdentificationType = {}));
/** @internal */
export const PersonIdentificationType$inboundSchema = z
    .union([
    z.nativeEnum(PersonIdentificationType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const PersonIdentificationType$outboundSchema = z.union([
    z.nativeEnum(PersonIdentificationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PersonIdentificationType$;
(function (PersonIdentificationType$) {
    /** @deprecated use `PersonIdentificationType$inboundSchema` instead. */
    PersonIdentificationType$.inboundSchema = PersonIdentificationType$inboundSchema;
    /** @deprecated use `PersonIdentificationType$outboundSchema` instead. */
    PersonIdentificationType$.outboundSchema = PersonIdentificationType$outboundSchema;
})(PersonIdentificationType$ || (PersonIdentificationType$ = {}));
/** @internal */
export const PersonIdentification$inboundSchema = z.object({
    administrative_area: z.string().optional(),
    document_reference_ids: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    type: PersonIdentificationType$inboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "administrative_area": "administrativeArea",
        "document_reference_ids": "documentReferenceIds",
        "region_code": "regionCode",
    });
});
/** @internal */
export const PersonIdentification$outboundSchema = z.object({
    administrativeArea: z.string().optional(),
    documentReferenceIds: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    type: PersonIdentificationType$outboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        administrativeArea: "administrative_area",
        documentReferenceIds: "document_reference_ids",
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PersonIdentification$;
(function (PersonIdentification$) {
    /** @deprecated use `PersonIdentification$inboundSchema` instead. */
    PersonIdentification$.inboundSchema = PersonIdentification$inboundSchema;
    /** @deprecated use `PersonIdentification$outboundSchema` instead. */
    PersonIdentification$.outboundSchema = PersonIdentification$outboundSchema;
})(PersonIdentification$ || (PersonIdentification$ = {}));
export function personIdentificationToJSON(personIdentification) {
    return JSON.stringify(PersonIdentification$outboundSchema.parse(personIdentification));
}
export function personIdentificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PersonIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PersonIdentification' from JSON`);
}
//# sourceMappingURL=personidentification.js.map