/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { DecimalCreate$inboundSchema, DecimalCreate$outboundSchema, } from "./decimalcreate.js";
/**
 * The type of the asset in this order
 */
export var BasketOrderCreateAssetType;
(function (BasketOrderCreateAssetType) {
    BasketOrderCreateAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    BasketOrderCreateAssetType["Equity"] = "EQUITY";
    BasketOrderCreateAssetType["MutualFund"] = "MUTUAL_FUND";
})(BasketOrderCreateAssetType || (BasketOrderCreateAssetType = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported
 */
export var BasketOrderCreateIdentifierType;
(function (BasketOrderCreateIdentifierType) {
    BasketOrderCreateIdentifierType["Symbol"] = "SYMBOL";
    BasketOrderCreateIdentifierType["Cusip"] = "CUSIP";
    BasketOrderCreateIdentifierType["Isin"] = "ISIN";
})(BasketOrderCreateIdentifierType || (BasketOrderCreateIdentifierType = {}));
/**
 * The execution type of this order.
 */
export var BasketOrderCreateOrderType;
(function (BasketOrderCreateOrderType) {
    BasketOrderCreateOrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    BasketOrderCreateOrderType["Market"] = "MARKET";
})(BasketOrderCreateOrderType || (BasketOrderCreateOrderType = {}));
/**
 * The side of this order.
 */
export var BasketOrderCreateSide;
(function (BasketOrderCreateSide) {
    BasketOrderCreateSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    BasketOrderCreateSide["Buy"] = "BUY";
    BasketOrderCreateSide["Sell"] = "SELL";
})(BasketOrderCreateSide || (BasketOrderCreateSide = {}));
export var BasketOrderCreateSpecialReportingInstructions;
(function (BasketOrderCreateSpecialReportingInstructions) {
    BasketOrderCreateSpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    BasketOrderCreateSpecialReportingInstructions["Solicited"] = "SOLICITED";
    BasketOrderCreateSpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    BasketOrderCreateSpecialReportingInstructions["RoundUp"] = "ROUND_UP";
})(BasketOrderCreateSpecialReportingInstructions || (BasketOrderCreateSpecialReportingInstructions = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
export var BasketOrderCreateTimeInForce;
(function (BasketOrderCreateTimeInForce) {
    BasketOrderCreateTimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    BasketOrderCreateTimeInForce["Day"] = "DAY";
})(BasketOrderCreateTimeInForce || (BasketOrderCreateTimeInForce = {}));
/** @internal */
export const BasketOrderCreateAssetType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateAssetType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateAssetType$;
(function (BasketOrderCreateAssetType$) {
    /** @deprecated use `BasketOrderCreateAssetType$inboundSchema` instead. */
    BasketOrderCreateAssetType$.inboundSchema = BasketOrderCreateAssetType$inboundSchema;
    /** @deprecated use `BasketOrderCreateAssetType$outboundSchema` instead. */
    BasketOrderCreateAssetType$.outboundSchema = BasketOrderCreateAssetType$outboundSchema;
})(BasketOrderCreateAssetType$ || (BasketOrderCreateAssetType$ = {}));
/** @internal */
export const BasketOrderCreateIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateIdentifierType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateIdentifierType$;
(function (BasketOrderCreateIdentifierType$) {
    /** @deprecated use `BasketOrderCreateIdentifierType$inboundSchema` instead. */
    BasketOrderCreateIdentifierType$.inboundSchema = BasketOrderCreateIdentifierType$inboundSchema;
    /** @deprecated use `BasketOrderCreateIdentifierType$outboundSchema` instead. */
    BasketOrderCreateIdentifierType$.outboundSchema = BasketOrderCreateIdentifierType$outboundSchema;
})(BasketOrderCreateIdentifierType$ || (BasketOrderCreateIdentifierType$ = {}));
/** @internal */
export const BasketOrderCreateOrderType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateOrderType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateOrderType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateOrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateOrderType$;
(function (BasketOrderCreateOrderType$) {
    /** @deprecated use `BasketOrderCreateOrderType$inboundSchema` instead. */
    BasketOrderCreateOrderType$.inboundSchema = BasketOrderCreateOrderType$inboundSchema;
    /** @deprecated use `BasketOrderCreateOrderType$outboundSchema` instead. */
    BasketOrderCreateOrderType$.outboundSchema = BasketOrderCreateOrderType$outboundSchema;
})(BasketOrderCreateOrderType$ || (BasketOrderCreateOrderType$ = {}));
/** @internal */
export const BasketOrderCreateSide$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateSide),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateSide$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateSide$;
(function (BasketOrderCreateSide$) {
    /** @deprecated use `BasketOrderCreateSide$inboundSchema` instead. */
    BasketOrderCreateSide$.inboundSchema = BasketOrderCreateSide$inboundSchema;
    /** @deprecated use `BasketOrderCreateSide$outboundSchema` instead. */
    BasketOrderCreateSide$.outboundSchema = BasketOrderCreateSide$outboundSchema;
})(BasketOrderCreateSide$ || (BasketOrderCreateSide$ = {}));
/** @internal */
export const BasketOrderCreateSpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateSpecialReportingInstructions),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateSpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateSpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateSpecialReportingInstructions$;
(function (BasketOrderCreateSpecialReportingInstructions$) {
    /** @deprecated use `BasketOrderCreateSpecialReportingInstructions$inboundSchema` instead. */
    BasketOrderCreateSpecialReportingInstructions$.inboundSchema = BasketOrderCreateSpecialReportingInstructions$inboundSchema;
    /** @deprecated use `BasketOrderCreateSpecialReportingInstructions$outboundSchema` instead. */
    BasketOrderCreateSpecialReportingInstructions$.outboundSchema = BasketOrderCreateSpecialReportingInstructions$outboundSchema;
})(BasketOrderCreateSpecialReportingInstructions$ || (BasketOrderCreateSpecialReportingInstructions$ = {}));
/** @internal */
export const BasketOrderCreateTimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderCreateTimeInForce),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const BasketOrderCreateTimeInForce$outboundSchema = z.union([
    z.nativeEnum(BasketOrderCreateTimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreateTimeInForce$;
(function (BasketOrderCreateTimeInForce$) {
    /** @deprecated use `BasketOrderCreateTimeInForce$inboundSchema` instead. */
    BasketOrderCreateTimeInForce$.inboundSchema = BasketOrderCreateTimeInForce$inboundSchema;
    /** @deprecated use `BasketOrderCreateTimeInForce$outboundSchema` instead. */
    BasketOrderCreateTimeInForce$.outboundSchema = BasketOrderCreateTimeInForce$outboundSchema;
})(BasketOrderCreateTimeInForce$ || (BasketOrderCreateTimeInForce$ = {}));
/** @internal */
export const BasketOrderCreate$inboundSchema = z.object({
    account_id: z.string(),
    asset_type: BasketOrderCreateAssetType$inboundSchema,
    client_order_id: z.string(),
    client_order_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    currency_code: z.string().optional(),
    identifier: z.string(),
    identifier_type: BasketOrderCreateIdentifierType$inboundSchema,
    max_sell_quantity: DecimalCreate$inboundSchema.optional(),
    notional_value: DecimalCreate$inboundSchema.optional(),
    order_type: BasketOrderCreateOrderType$inboundSchema,
    quantity: DecimalCreate$inboundSchema.optional(),
    side: BasketOrderCreateSide$inboundSchema,
    special_reporting_instructions: z.array(BasketOrderCreateSpecialReportingInstructions$inboundSchema).optional(),
    time_in_force: BasketOrderCreateTimeInForce$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "asset_type": "assetType",
        "client_order_id": "clientOrderId",
        "client_order_received_time": "clientOrderReceivedTime",
        "currency_code": "currencyCode",
        "identifier_type": "identifierType",
        "max_sell_quantity": "maxSellQuantity",
        "notional_value": "notionalValue",
        "order_type": "orderType",
        "special_reporting_instructions": "specialReportingInstructions",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
export const BasketOrderCreate$outboundSchema = z.object({
    accountId: z.string(),
    assetType: BasketOrderCreateAssetType$outboundSchema,
    clientOrderId: z.string(),
    clientOrderReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    currencyCode: z.string().optional(),
    identifier: z.string(),
    identifierType: BasketOrderCreateIdentifierType$outboundSchema,
    maxSellQuantity: DecimalCreate$outboundSchema.optional(),
    notionalValue: DecimalCreate$outboundSchema.optional(),
    orderType: BasketOrderCreateOrderType$outboundSchema,
    quantity: DecimalCreate$outboundSchema.optional(),
    side: BasketOrderCreateSide$outboundSchema,
    specialReportingInstructions: z.array(BasketOrderCreateSpecialReportingInstructions$outboundSchema).optional(),
    timeInForce: BasketOrderCreateTimeInForce$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        assetType: "asset_type",
        clientOrderId: "client_order_id",
        clientOrderReceivedTime: "client_order_received_time",
        currencyCode: "currency_code",
        identifierType: "identifier_type",
        maxSellQuantity: "max_sell_quantity",
        notionalValue: "notional_value",
        orderType: "order_type",
        specialReportingInstructions: "special_reporting_instructions",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrderCreate$;
(function (BasketOrderCreate$) {
    /** @deprecated use `BasketOrderCreate$inboundSchema` instead. */
    BasketOrderCreate$.inboundSchema = BasketOrderCreate$inboundSchema;
    /** @deprecated use `BasketOrderCreate$outboundSchema` instead. */
    BasketOrderCreate$.outboundSchema = BasketOrderCreate$outboundSchema;
})(BasketOrderCreate$ || (BasketOrderCreate$ = {}));
export function basketOrderCreateToJSON(basketOrderCreate) {
    return JSON.stringify(BasketOrderCreate$outboundSchema.parse(basketOrderCreate));
}
export function basketOrderCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrderCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrderCreate' from JSON`);
}
//# sourceMappingURL=basketordercreate.js.map