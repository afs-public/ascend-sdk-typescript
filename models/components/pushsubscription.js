/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The current status of the subscription
 */
export var State;
(function (State) {
    State["PushSubscriptionStateUnspecified"] = "PUSH_SUBSCRIPTION_STATE_UNSPECIFIED";
    State["Creating"] = "CREATING";
    State["Active"] = "ACTIVE";
    State["Updating"] = "UPDATING";
    State["Deleting"] = "DELETING";
})(State || (State = {}));
/** @internal */
export const HttpCallback$inboundSchema = z.object({
    timeout_seconds: z.number().int().optional(),
    url: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "timeout_seconds": "timeoutSeconds",
    });
});
/** @internal */
export const HttpCallback$outboundSchema = z.object({
    timeoutSeconds: z.number().int().optional(),
    url: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        timeoutSeconds: "timeout_seconds",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HttpCallback$;
(function (HttpCallback$) {
    /** @deprecated use `HttpCallback$inboundSchema` instead. */
    HttpCallback$.inboundSchema = HttpCallback$inboundSchema;
    /** @deprecated use `HttpCallback$outboundSchema` instead. */
    HttpCallback$.outboundSchema = HttpCallback$outboundSchema;
})(HttpCallback$ || (HttpCallback$ = {}));
export function httpCallbackToJSON(httpCallback) {
    return JSON.stringify(HttpCallback$outboundSchema.parse(httpCallback));
}
export function httpCallbackFromJSON(jsonString) {
    return safeParse(jsonString, (x) => HttpCallback$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'HttpCallback' from JSON`);
}
/** @internal */
export const State$inboundSchema = z
    .union([
    z.nativeEnum(State),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const State$outboundSchema = z.union([
    z.nativeEnum(State),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var State$;
(function (State$) {
    /** @deprecated use `State$inboundSchema` instead. */
    State$.inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    State$.outboundSchema = State$outboundSchema;
})(State$ || (State$ = {}));
/** @internal */
export const PushSubscription$inboundSchema = z.object({
    client_id: z.string().optional(),
    correspondent_id: z.string().optional(),
    display_name: z.string().optional(),
    event_types: z.array(z.string()).optional(),
    http_callback: z.nullable(z.lazy(() => HttpCallback$inboundSchema))
        .optional(),
    name: z.string().optional(),
    state: State$inboundSchema.optional(),
    subscription_id: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "correspondent_id": "correspondentId",
        "display_name": "displayName",
        "event_types": "eventTypes",
        "http_callback": "httpCallback",
        "subscription_id": "subscriptionId",
    });
});
/** @internal */
export const PushSubscription$outboundSchema = z.object({
    clientId: z.string().optional(),
    correspondentId: z.string().optional(),
    displayName: z.string().optional(),
    eventTypes: z.array(z.string()).optional(),
    httpCallback: z.nullable(z.lazy(() => HttpCallback$outboundSchema))
        .optional(),
    name: z.string().optional(),
    state: State$outboundSchema.optional(),
    subscriptionId: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        correspondentId: "correspondent_id",
        displayName: "display_name",
        eventTypes: "event_types",
        httpCallback: "http_callback",
        subscriptionId: "subscription_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PushSubscription$;
(function (PushSubscription$) {
    /** @deprecated use `PushSubscription$inboundSchema` instead. */
    PushSubscription$.inboundSchema = PushSubscription$inboundSchema;
    /** @deprecated use `PushSubscription$outboundSchema` instead. */
    PushSubscription$.outboundSchema = PushSubscription$outboundSchema;
})(PushSubscription$ || (PushSubscription$ = {}));
export function pushSubscriptionToJSON(pushSubscription) {
    return JSON.stringify(PushSubscription$outboundSchema.parse(pushSubscription));
}
export function pushSubscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PushSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PushSubscription' from JSON`);
}
//# sourceMappingURL=pushsubscription.js.map