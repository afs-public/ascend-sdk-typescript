/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
import { BidAskPrice$inboundSchema, BidAskPrice$outboundSchema, } from "./bidaskprice.js";
/**
 * The type of asset referenced by the security identifier
 */
export var RetrieveQuoteResponseAssetType;
(function (RetrieveQuoteResponseAssetType) {
    RetrieveQuoteResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    RetrieveQuoteResponseAssetType["Equity"] = "EQUITY";
    RetrieveQuoteResponseAssetType["FixedIncome"] = "FIXED_INCOME";
    RetrieveQuoteResponseAssetType["MutualFund"] = "MUTUAL_FUND";
    RetrieveQuoteResponseAssetType["Option"] = "OPTION";
})(RetrieveQuoteResponseAssetType || (RetrieveQuoteResponseAssetType = {}));
/**
 * Capacity used in determining bid and ask prices. Defaults to "AGENCY" if no value specified.
 */
export var RetrieveQuoteResponseBrokerCapacity;
(function (RetrieveQuoteResponseBrokerCapacity) {
    RetrieveQuoteResponseBrokerCapacity["BrokerCapacityUnspecified"] = "BROKER_CAPACITY_UNSPECIFIED";
    RetrieveQuoteResponseBrokerCapacity["Agency"] = "AGENCY";
    RetrieveQuoteResponseBrokerCapacity["Principal"] = "PRINCIPAL";
})(RetrieveQuoteResponseBrokerCapacity || (RetrieveQuoteResponseBrokerCapacity = {}));
/**
 * The identifier type of the asset for which the best bid and offer is returned. This will be the same value as what was sent on the request.
 */
export var RetrieveQuoteResponseIdentifierType;
(function (RetrieveQuoteResponseIdentifierType) {
    RetrieveQuoteResponseIdentifierType["AssetId"] = "ASSET_ID";
    RetrieveQuoteResponseIdentifierType["Cusip"] = "CUSIP";
    RetrieveQuoteResponseIdentifierType["Isin"] = "ISIN";
})(RetrieveQuoteResponseIdentifierType || (RetrieveQuoteResponseIdentifierType = {}));
/** @internal */
export const AskMinimumQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AskMinimumQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AskMinimumQuantity$;
(function (AskMinimumQuantity$) {
    /** @deprecated use `AskMinimumQuantity$inboundSchema` instead. */
    AskMinimumQuantity$.inboundSchema = AskMinimumQuantity$inboundSchema;
    /** @deprecated use `AskMinimumQuantity$outboundSchema` instead. */
    AskMinimumQuantity$.outboundSchema = AskMinimumQuantity$outboundSchema;
})(AskMinimumQuantity$ || (AskMinimumQuantity$ = {}));
export function askMinimumQuantityToJSON(askMinimumQuantity) {
    return JSON.stringify(AskMinimumQuantity$outboundSchema.parse(askMinimumQuantity));
}
export function askMinimumQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AskMinimumQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AskMinimumQuantity' from JSON`);
}
/** @internal */
export const AskQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const AskQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AskQuantity$;
(function (AskQuantity$) {
    /** @deprecated use `AskQuantity$inboundSchema` instead. */
    AskQuantity$.inboundSchema = AskQuantity$inboundSchema;
    /** @deprecated use `AskQuantity$outboundSchema` instead. */
    AskQuantity$.outboundSchema = AskQuantity$outboundSchema;
})(AskQuantity$ || (AskQuantity$ = {}));
export function askQuantityToJSON(askQuantity) {
    return JSON.stringify(AskQuantity$outboundSchema.parse(askQuantity));
}
export function askQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AskQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AskQuantity' from JSON`);
}
/** @internal */
export const RetrieveQuoteResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(RetrieveQuoteResponseAssetType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RetrieveQuoteResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(RetrieveQuoteResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetrieveQuoteResponseAssetType$;
(function (RetrieveQuoteResponseAssetType$) {
    /** @deprecated use `RetrieveQuoteResponseAssetType$inboundSchema` instead. */
    RetrieveQuoteResponseAssetType$.inboundSchema = RetrieveQuoteResponseAssetType$inboundSchema;
    /** @deprecated use `RetrieveQuoteResponseAssetType$outboundSchema` instead. */
    RetrieveQuoteResponseAssetType$.outboundSchema = RetrieveQuoteResponseAssetType$outboundSchema;
})(RetrieveQuoteResponseAssetType$ || (RetrieveQuoteResponseAssetType$ = {}));
/** @internal */
export const BidMinimumQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BidMinimumQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BidMinimumQuantity$;
(function (BidMinimumQuantity$) {
    /** @deprecated use `BidMinimumQuantity$inboundSchema` instead. */
    BidMinimumQuantity$.inboundSchema = BidMinimumQuantity$inboundSchema;
    /** @deprecated use `BidMinimumQuantity$outboundSchema` instead. */
    BidMinimumQuantity$.outboundSchema = BidMinimumQuantity$outboundSchema;
})(BidMinimumQuantity$ || (BidMinimumQuantity$ = {}));
export function bidMinimumQuantityToJSON(bidMinimumQuantity) {
    return JSON.stringify(BidMinimumQuantity$outboundSchema.parse(bidMinimumQuantity));
}
export function bidMinimumQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BidMinimumQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BidMinimumQuantity' from JSON`);
}
/** @internal */
export const BidQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const BidQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BidQuantity$;
(function (BidQuantity$) {
    /** @deprecated use `BidQuantity$inboundSchema` instead. */
    BidQuantity$.inboundSchema = BidQuantity$inboundSchema;
    /** @deprecated use `BidQuantity$outboundSchema` instead. */
    BidQuantity$.outboundSchema = BidQuantity$outboundSchema;
})(BidQuantity$ || (BidQuantity$ = {}));
export function bidQuantityToJSON(bidQuantity) {
    return JSON.stringify(BidQuantity$outboundSchema.parse(bidQuantity));
}
export function bidQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BidQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BidQuantity' from JSON`);
}
/** @internal */
export const RetrieveQuoteResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(RetrieveQuoteResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RetrieveQuoteResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(RetrieveQuoteResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetrieveQuoteResponseBrokerCapacity$;
(function (RetrieveQuoteResponseBrokerCapacity$) {
    /** @deprecated use `RetrieveQuoteResponseBrokerCapacity$inboundSchema` instead. */
    RetrieveQuoteResponseBrokerCapacity$.inboundSchema = RetrieveQuoteResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `RetrieveQuoteResponseBrokerCapacity$outboundSchema` instead. */
    RetrieveQuoteResponseBrokerCapacity$.outboundSchema = RetrieveQuoteResponseBrokerCapacity$outboundSchema;
})(RetrieveQuoteResponseBrokerCapacity$ || (RetrieveQuoteResponseBrokerCapacity$ = {}));
/** @internal */
export const RetrieveQuoteResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(RetrieveQuoteResponseIdentifierType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const RetrieveQuoteResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(RetrieveQuoteResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetrieveQuoteResponseIdentifierType$;
(function (RetrieveQuoteResponseIdentifierType$) {
    /** @deprecated use `RetrieveQuoteResponseIdentifierType$inboundSchema` instead. */
    RetrieveQuoteResponseIdentifierType$.inboundSchema = RetrieveQuoteResponseIdentifierType$inboundSchema;
    /** @deprecated use `RetrieveQuoteResponseIdentifierType$outboundSchema` instead. */
    RetrieveQuoteResponseIdentifierType$.outboundSchema = RetrieveQuoteResponseIdentifierType$outboundSchema;
})(RetrieveQuoteResponseIdentifierType$ || (RetrieveQuoteResponseIdentifierType$ = {}));
/** @internal */
export const MinimumQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const MinimumQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MinimumQuantity$;
(function (MinimumQuantity$) {
    /** @deprecated use `MinimumQuantity$inboundSchema` instead. */
    MinimumQuantity$.inboundSchema = MinimumQuantity$inboundSchema;
    /** @deprecated use `MinimumQuantity$outboundSchema` instead. */
    MinimumQuantity$.outboundSchema = MinimumQuantity$outboundSchema;
})(MinimumQuantity$ || (MinimumQuantity$ = {}));
export function minimumQuantityToJSON(minimumQuantity) {
    return JSON.stringify(MinimumQuantity$outboundSchema.parse(minimumQuantity));
}
export function minimumQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MinimumQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MinimumQuantity' from JSON`);
}
/** @internal */
export const RetrieveQuoteResponse$inboundSchema = z.object({
    account_id: z.string().optional(),
    ask_minimum_quantity: z.nullable(z.lazy(() => AskMinimumQuantity$inboundSchema)).optional(),
    ask_prices: z.array(BidAskPrice$inboundSchema).optional(),
    ask_quantity: z.nullable(z.lazy(() => AskQuantity$inboundSchema)).optional(),
    asset_id: z.string().optional(),
    asset_type: RetrieveQuoteResponseAssetType$inboundSchema.optional(),
    bid_minimum_quantity: z.nullable(z.lazy(() => BidMinimumQuantity$inboundSchema)).optional(),
    bid_prices: z.array(BidAskPrice$inboundSchema).optional(),
    bid_quantity: z.nullable(z.lazy(() => BidQuantity$inboundSchema)).optional(),
    broker_capacity: RetrieveQuoteResponseBrokerCapacity$inboundSchema.optional(),
    identifier: z.string().optional(),
    identifier_type: RetrieveQuoteResponseIdentifierType$inboundSchema.optional(),
    minimum_quantity: z.nullable(z.lazy(() => MinimumQuantity$inboundSchema))
        .optional(),
    response_generation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "ask_minimum_quantity": "askMinimumQuantity",
        "ask_prices": "askPrices",
        "ask_quantity": "askQuantity",
        "asset_id": "assetId",
        "asset_type": "assetType",
        "bid_minimum_quantity": "bidMinimumQuantity",
        "bid_prices": "bidPrices",
        "bid_quantity": "bidQuantity",
        "broker_capacity": "brokerCapacity",
        "identifier_type": "identifierType",
        "minimum_quantity": "minimumQuantity",
        "response_generation_time": "responseGenerationTime",
    });
});
/** @internal */
export const RetrieveQuoteResponse$outboundSchema = z.object({
    accountId: z.string().optional(),
    askMinimumQuantity: z.nullable(z.lazy(() => AskMinimumQuantity$outboundSchema)).optional(),
    askPrices: z.array(BidAskPrice$outboundSchema).optional(),
    askQuantity: z.nullable(z.lazy(() => AskQuantity$outboundSchema)).optional(),
    assetId: z.string().optional(),
    assetType: RetrieveQuoteResponseAssetType$outboundSchema.optional(),
    bidMinimumQuantity: z.nullable(z.lazy(() => BidMinimumQuantity$outboundSchema)).optional(),
    bidPrices: z.array(BidAskPrice$outboundSchema).optional(),
    bidQuantity: z.nullable(z.lazy(() => BidQuantity$outboundSchema)).optional(),
    brokerCapacity: RetrieveQuoteResponseBrokerCapacity$outboundSchema.optional(),
    identifier: z.string().optional(),
    identifierType: RetrieveQuoteResponseIdentifierType$outboundSchema.optional(),
    minimumQuantity: z.nullable(z.lazy(() => MinimumQuantity$outboundSchema))
        .optional(),
    responseGenerationTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        askMinimumQuantity: "ask_minimum_quantity",
        askPrices: "ask_prices",
        askQuantity: "ask_quantity",
        assetId: "asset_id",
        assetType: "asset_type",
        bidMinimumQuantity: "bid_minimum_quantity",
        bidPrices: "bid_prices",
        bidQuantity: "bid_quantity",
        brokerCapacity: "broker_capacity",
        identifierType: "identifier_type",
        minimumQuantity: "minimum_quantity",
        responseGenerationTime: "response_generation_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetrieveQuoteResponse$;
(function (RetrieveQuoteResponse$) {
    /** @deprecated use `RetrieveQuoteResponse$inboundSchema` instead. */
    RetrieveQuoteResponse$.inboundSchema = RetrieveQuoteResponse$inboundSchema;
    /** @deprecated use `RetrieveQuoteResponse$outboundSchema` instead. */
    RetrieveQuoteResponse$.outboundSchema = RetrieveQuoteResponse$outboundSchema;
})(RetrieveQuoteResponse$ || (RetrieveQuoteResponse$ = {}));
export function retrieveQuoteResponseToJSON(retrieveQuoteResponse) {
    return JSON.stringify(RetrieveQuoteResponse$outboundSchema.parse(retrieveQuoteResponse));
}
export function retrieveQuoteResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RetrieveQuoteResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveQuoteResponse' from JSON`);
}
//# sourceMappingURL=retrievequoteresponse.js.map