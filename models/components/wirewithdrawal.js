/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { catchUnrecognizedEnum, } from "../../types/enums.js";
/**
 * The type of retirement distribution.
 */
export var WireWithdrawalType;
(function (WireWithdrawalType) {
    WireWithdrawalType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    WireWithdrawalType["Normal"] = "NORMAL";
    WireWithdrawalType["Disability"] = "DISABILITY";
    WireWithdrawalType["Sosepp"] = "SOSEPP";
    WireWithdrawalType["Premature"] = "PREMATURE";
    WireWithdrawalType["Death"] = "DEATH";
    WireWithdrawalType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    WireWithdrawalType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    WireWithdrawalType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    WireWithdrawalType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    WireWithdrawalType["DistributionTransfer"] = "DISTRIBUTION_TRANSFER";
    WireWithdrawalType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    WireWithdrawalType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    WireWithdrawalType["DistributionConversion"] = "DISTRIBUTION_CONVERSION";
    WireWithdrawalType["ManagementFee"] = "MANAGEMENT_FEE";
    WireWithdrawalType["PlanLoan401K"] = "PLAN_LOAN_401K";
    WireWithdrawalType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    WireWithdrawalType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    WireWithdrawalType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    WireWithdrawalType["Revocation"] = "REVOCATION";
    WireWithdrawalType["NonReportable"] = "NON_REPORTABLE";
})(WireWithdrawalType || (WireWithdrawalType = {}));
/**
 * The type of bank identifier specified
 */
export var WireWithdrawalRecipientBankType;
(function (WireWithdrawalRecipientBankType) {
    WireWithdrawalRecipientBankType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    WireWithdrawalRecipientBankType["Aba"] = "ABA";
    WireWithdrawalRecipientBankType["Bic"] = "BIC";
})(WireWithdrawalRecipientBankType || (WireWithdrawalRecipientBankType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
export var WireWithdrawalStateState;
(function (WireWithdrawalStateState) {
    WireWithdrawalStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    WireWithdrawalStateState["Processing"] = "PROCESSING";
    WireWithdrawalStateState["PendingReview"] = "PENDING_REVIEW";
    WireWithdrawalStateState["Posted"] = "POSTED";
    WireWithdrawalStateState["Completed"] = "COMPLETED";
    WireWithdrawalStateState["Rejected"] = "REJECTED";
    WireWithdrawalStateState["Canceled"] = "CANCELED";
    WireWithdrawalStateState["Returned"] = "RETURNED";
    WireWithdrawalStateState["Postponed"] = "POSTPONED";
})(WireWithdrawalStateState || (WireWithdrawalStateState = {}));
/** @internal */
export const WireWithdrawalAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireWithdrawalAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalAmount$;
(function (WireWithdrawalAmount$) {
    /** @deprecated use `WireWithdrawalAmount$inboundSchema` instead. */
    WireWithdrawalAmount$.inboundSchema = WireWithdrawalAmount$inboundSchema;
    /** @deprecated use `WireWithdrawalAmount$outboundSchema` instead. */
    WireWithdrawalAmount$.outboundSchema = WireWithdrawalAmount$outboundSchema;
})(WireWithdrawalAmount$ || (WireWithdrawalAmount$ = {}));
export function wireWithdrawalAmountToJSON(wireWithdrawalAmount) {
    return JSON.stringify(WireWithdrawalAmount$outboundSchema.parse(wireWithdrawalAmount));
}
export function wireWithdrawalAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalAmount' from JSON`);
}
/** @internal */
export const WireWithdrawalAddress$inboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postal_code: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "postal_code": "postalCode",
    });
});
/** @internal */
export const WireWithdrawalAddress$outboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postalCode: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        postalCode: "postal_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalAddress$;
(function (WireWithdrawalAddress$) {
    /** @deprecated use `WireWithdrawalAddress$inboundSchema` instead. */
    WireWithdrawalAddress$.inboundSchema = WireWithdrawalAddress$inboundSchema;
    /** @deprecated use `WireWithdrawalAddress$outboundSchema` instead. */
    WireWithdrawalAddress$.outboundSchema = WireWithdrawalAddress$outboundSchema;
})(WireWithdrawalAddress$ || (WireWithdrawalAddress$ = {}));
export function wireWithdrawalAddressToJSON(wireWithdrawalAddress) {
    return JSON.stringify(WireWithdrawalAddress$outboundSchema.parse(wireWithdrawalAddress));
}
export function wireWithdrawalAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalAddress' from JSON`);
}
/** @internal */
export const WireWithdrawalBeneficiary$inboundSchema = z.object({
    account: z.string().optional(),
    account_title: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalAddress$inboundSchema))
        .optional(),
    third_party: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_title": "accountTitle",
        "third_party": "thirdParty",
    });
});
/** @internal */
export const WireWithdrawalBeneficiary$outboundSchema = z.object({
    account: z.string().optional(),
    accountTitle: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalAddress$outboundSchema))
        .optional(),
    thirdParty: z.boolean().optional(),
}).transform((v) => {
    return remap$(v, {
        accountTitle: "account_title",
        thirdParty: "third_party",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalBeneficiary$;
(function (WireWithdrawalBeneficiary$) {
    /** @deprecated use `WireWithdrawalBeneficiary$inboundSchema` instead. */
    WireWithdrawalBeneficiary$.inboundSchema = WireWithdrawalBeneficiary$inboundSchema;
    /** @deprecated use `WireWithdrawalBeneficiary$outboundSchema` instead. */
    WireWithdrawalBeneficiary$.outboundSchema = WireWithdrawalBeneficiary$outboundSchema;
})(WireWithdrawalBeneficiary$ || (WireWithdrawalBeneficiary$ = {}));
export function wireWithdrawalBeneficiaryToJSON(wireWithdrawalBeneficiary) {
    return JSON.stringify(WireWithdrawalBeneficiary$outboundSchema.parse(wireWithdrawalBeneficiary));
}
export function wireWithdrawalBeneficiaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalBeneficiary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalBeneficiary' from JSON`);
}
/** @internal */
export const WireWithdrawalIntermediaryAddress$inboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postal_code: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "postal_code": "postalCode",
    });
});
/** @internal */
export const WireWithdrawalIntermediaryAddress$outboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postalCode: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        postalCode: "postal_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIntermediaryAddress$;
(function (WireWithdrawalIntermediaryAddress$) {
    /** @deprecated use `WireWithdrawalIntermediaryAddress$inboundSchema` instead. */
    WireWithdrawalIntermediaryAddress$.inboundSchema = WireWithdrawalIntermediaryAddress$inboundSchema;
    /** @deprecated use `WireWithdrawalIntermediaryAddress$outboundSchema` instead. */
    WireWithdrawalIntermediaryAddress$.outboundSchema = WireWithdrawalIntermediaryAddress$outboundSchema;
})(WireWithdrawalIntermediaryAddress$ || (WireWithdrawalIntermediaryAddress$ = {}));
export function wireWithdrawalIntermediaryAddressToJSON(wireWithdrawalIntermediaryAddress) {
    return JSON.stringify(WireWithdrawalIntermediaryAddress$outboundSchema.parse(wireWithdrawalIntermediaryAddress));
}
export function wireWithdrawalIntermediaryAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIntermediaryAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIntermediaryAddress' from JSON`);
}
/** @internal */
export const WireWithdrawalIntermediary$inboundSchema = z.object({
    account: z.string().optional(),
    account_title: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalIntermediaryAddress$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "account_title": "accountTitle",
    });
});
/** @internal */
export const WireWithdrawalIntermediary$outboundSchema = z.object({
    account: z.string().optional(),
    accountTitle: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalIntermediaryAddress$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        accountTitle: "account_title",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIntermediary$;
(function (WireWithdrawalIntermediary$) {
    /** @deprecated use `WireWithdrawalIntermediary$inboundSchema` instead. */
    WireWithdrawalIntermediary$.inboundSchema = WireWithdrawalIntermediary$inboundSchema;
    /** @deprecated use `WireWithdrawalIntermediary$outboundSchema` instead. */
    WireWithdrawalIntermediary$.outboundSchema = WireWithdrawalIntermediary$outboundSchema;
})(WireWithdrawalIntermediary$ || (WireWithdrawalIntermediary$ = {}));
export function wireWithdrawalIntermediaryToJSON(wireWithdrawalIntermediary) {
    return JSON.stringify(WireWithdrawalIntermediary$outboundSchema.parse(wireWithdrawalIntermediary));
}
export function wireWithdrawalIntermediaryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIntermediary$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIntermediary' from JSON`);
}
/** @internal */
export const WireWithdrawalIraDistributionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireWithdrawalIraDistributionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIraDistributionAmount$;
(function (WireWithdrawalIraDistributionAmount$) {
    /** @deprecated use `WireWithdrawalIraDistributionAmount$inboundSchema` instead. */
    WireWithdrawalIraDistributionAmount$.inboundSchema = WireWithdrawalIraDistributionAmount$inboundSchema;
    /** @deprecated use `WireWithdrawalIraDistributionAmount$outboundSchema` instead. */
    WireWithdrawalIraDistributionAmount$.outboundSchema = WireWithdrawalIraDistributionAmount$outboundSchema;
})(WireWithdrawalIraDistributionAmount$ || (WireWithdrawalIraDistributionAmount$ = {}));
export function wireWithdrawalIraDistributionAmountToJSON(wireWithdrawalIraDistributionAmount) {
    return JSON.stringify(WireWithdrawalIraDistributionAmount$outboundSchema.parse(wireWithdrawalIraDistributionAmount));
}
export function wireWithdrawalIraDistributionAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIraDistributionAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIraDistributionAmount' from JSON`);
}
/** @internal */
export const WireWithdrawalPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireWithdrawalPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalPercentage$;
(function (WireWithdrawalPercentage$) {
    /** @deprecated use `WireWithdrawalPercentage$inboundSchema` instead. */
    WireWithdrawalPercentage$.inboundSchema = WireWithdrawalPercentage$inboundSchema;
    /** @deprecated use `WireWithdrawalPercentage$outboundSchema` instead. */
    WireWithdrawalPercentage$.outboundSchema = WireWithdrawalPercentage$outboundSchema;
})(WireWithdrawalPercentage$ || (WireWithdrawalPercentage$ = {}));
export function wireWithdrawalPercentageToJSON(wireWithdrawalPercentage) {
    return JSON.stringify(WireWithdrawalPercentage$outboundSchema.parse(wireWithdrawalPercentage));
}
export function wireWithdrawalPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalPercentage' from JSON`);
}
/** @internal */
export const WireWithdrawalFederalTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalIraDistributionAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => WireWithdrawalPercentage$inboundSchema))
        .optional(),
});
/** @internal */
export const WireWithdrawalFederalTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalIraDistributionAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => WireWithdrawalPercentage$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalFederalTaxWithholding$;
(function (WireWithdrawalFederalTaxWithholding$) {
    /** @deprecated use `WireWithdrawalFederalTaxWithholding$inboundSchema` instead. */
    WireWithdrawalFederalTaxWithholding$.inboundSchema = WireWithdrawalFederalTaxWithholding$inboundSchema;
    /** @deprecated use `WireWithdrawalFederalTaxWithholding$outboundSchema` instead. */
    WireWithdrawalFederalTaxWithholding$.outboundSchema = WireWithdrawalFederalTaxWithholding$outboundSchema;
})(WireWithdrawalFederalTaxWithholding$ || (WireWithdrawalFederalTaxWithholding$ = {}));
export function wireWithdrawalFederalTaxWithholdingToJSON(wireWithdrawalFederalTaxWithholding) {
    return JSON.stringify(WireWithdrawalFederalTaxWithholding$outboundSchema.parse(wireWithdrawalFederalTaxWithholding));
}
export function wireWithdrawalFederalTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalFederalTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalFederalTaxWithholding' from JSON`);
}
/** @internal */
export const WireWithdrawalIraDistributionStateTaxWithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireWithdrawalIraDistributionStateTaxWithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIraDistributionStateTaxWithholdingAmount$;
(function (WireWithdrawalIraDistributionStateTaxWithholdingAmount$) {
    /** @deprecated use `WireWithdrawalIraDistributionStateTaxWithholdingAmount$inboundSchema` instead. */
    WireWithdrawalIraDistributionStateTaxWithholdingAmount$.inboundSchema = WireWithdrawalIraDistributionStateTaxWithholdingAmount$inboundSchema;
    /** @deprecated use `WireWithdrawalIraDistributionStateTaxWithholdingAmount$outboundSchema` instead. */
    WireWithdrawalIraDistributionStateTaxWithholdingAmount$.outboundSchema = WireWithdrawalIraDistributionStateTaxWithholdingAmount$outboundSchema;
})(WireWithdrawalIraDistributionStateTaxWithholdingAmount$ || (WireWithdrawalIraDistributionStateTaxWithholdingAmount$ = {}));
export function wireWithdrawalIraDistributionStateTaxWithholdingAmountToJSON(wireWithdrawalIraDistributionStateTaxWithholdingAmount) {
    return JSON.stringify(WireWithdrawalIraDistributionStateTaxWithholdingAmount$outboundSchema.parse(wireWithdrawalIraDistributionStateTaxWithholdingAmount));
}
export function wireWithdrawalIraDistributionStateTaxWithholdingAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIraDistributionStateTaxWithholdingAmount$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIraDistributionStateTaxWithholdingAmount' from JSON`);
}
/** @internal */
export const WireWithdrawalIraDistributionPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
export const WireWithdrawalIraDistributionPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIraDistributionPercentage$;
(function (WireWithdrawalIraDistributionPercentage$) {
    /** @deprecated use `WireWithdrawalIraDistributionPercentage$inboundSchema` instead. */
    WireWithdrawalIraDistributionPercentage$.inboundSchema = WireWithdrawalIraDistributionPercentage$inboundSchema;
    /** @deprecated use `WireWithdrawalIraDistributionPercentage$outboundSchema` instead. */
    WireWithdrawalIraDistributionPercentage$.outboundSchema = WireWithdrawalIraDistributionPercentage$outboundSchema;
})(WireWithdrawalIraDistributionPercentage$ || (WireWithdrawalIraDistributionPercentage$ = {}));
export function wireWithdrawalIraDistributionPercentageToJSON(wireWithdrawalIraDistributionPercentage) {
    return JSON.stringify(WireWithdrawalIraDistributionPercentage$outboundSchema.parse(wireWithdrawalIraDistributionPercentage));
}
export function wireWithdrawalIraDistributionPercentageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIraDistributionPercentage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIraDistributionPercentage' from JSON`);
}
/** @internal */
export const WireWithdrawalStateTaxWithholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalIraDistributionStateTaxWithholdingAmount$inboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => WireWithdrawalIraDistributionPercentage$inboundSchema)).optional(),
});
/** @internal */
export const WireWithdrawalStateTaxWithholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalIraDistributionStateTaxWithholdingAmount$outboundSchema)).optional(),
    percentage: z.nullable(z.lazy(() => WireWithdrawalIraDistributionPercentage$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalStateTaxWithholding$;
(function (WireWithdrawalStateTaxWithholding$) {
    /** @deprecated use `WireWithdrawalStateTaxWithholding$inboundSchema` instead. */
    WireWithdrawalStateTaxWithholding$.inboundSchema = WireWithdrawalStateTaxWithholding$inboundSchema;
    /** @deprecated use `WireWithdrawalStateTaxWithholding$outboundSchema` instead. */
    WireWithdrawalStateTaxWithholding$.outboundSchema = WireWithdrawalStateTaxWithholding$outboundSchema;
})(WireWithdrawalStateTaxWithholding$ || (WireWithdrawalStateTaxWithholding$ = {}));
export function wireWithdrawalStateTaxWithholdingToJSON(wireWithdrawalStateTaxWithholding) {
    return JSON.stringify(WireWithdrawalStateTaxWithholding$outboundSchema.parse(wireWithdrawalStateTaxWithholding));
}
export function wireWithdrawalStateTaxWithholdingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalStateTaxWithholding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalStateTaxWithholding' from JSON`);
}
/** @internal */
export const WireWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(WireWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WireWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(WireWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalType$;
(function (WireWithdrawalType$) {
    /** @deprecated use `WireWithdrawalType$inboundSchema` instead. */
    WireWithdrawalType$.inboundSchema = WireWithdrawalType$inboundSchema;
    /** @deprecated use `WireWithdrawalType$outboundSchema` instead. */
    WireWithdrawalType$.outboundSchema = WireWithdrawalType$outboundSchema;
})(WireWithdrawalType$ || (WireWithdrawalType$ = {}));
/** @internal */
export const WireWithdrawalIraDistribution$inboundSchema = z.object({
    federal_tax_withholding: z.nullable(z.lazy(() => WireWithdrawalFederalTaxWithholding$inboundSchema)).optional(),
    receiving_institution: z.string().optional(),
    state_tax_withholding: z.nullable(z.lazy(() => WireWithdrawalStateTaxWithholding$inboundSchema)).optional(),
    state_withholding_waiver: z.boolean().optional(),
    tax_year: z.number().int().optional(),
    type: WireWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "federal_tax_withholding": "federalTaxWithholding",
        "receiving_institution": "receivingInstitution",
        "state_tax_withholding": "stateTaxWithholding",
        "state_withholding_waiver": "stateWithholdingWaiver",
        "tax_year": "taxYear",
    });
});
/** @internal */
export const WireWithdrawalIraDistribution$outboundSchema = z.object({
    federalTaxWithholding: z.nullable(z.lazy(() => WireWithdrawalFederalTaxWithholding$outboundSchema)).optional(),
    receivingInstitution: z.string().optional(),
    stateTaxWithholding: z.nullable(z.lazy(() => WireWithdrawalStateTaxWithholding$outboundSchema)).optional(),
    stateWithholdingWaiver: z.boolean().optional(),
    taxYear: z.number().int().optional(),
    type: WireWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        federalTaxWithholding: "federal_tax_withholding",
        receivingInstitution: "receiving_institution",
        stateTaxWithholding: "state_tax_withholding",
        stateWithholdingWaiver: "state_withholding_waiver",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalIraDistribution$;
(function (WireWithdrawalIraDistribution$) {
    /** @deprecated use `WireWithdrawalIraDistribution$inboundSchema` instead. */
    WireWithdrawalIraDistribution$.inboundSchema = WireWithdrawalIraDistribution$inboundSchema;
    /** @deprecated use `WireWithdrawalIraDistribution$outboundSchema` instead. */
    WireWithdrawalIraDistribution$.outboundSchema = WireWithdrawalIraDistribution$outboundSchema;
})(WireWithdrawalIraDistribution$ || (WireWithdrawalIraDistribution$ = {}));
export function wireWithdrawalIraDistributionToJSON(wireWithdrawalIraDistribution) {
    return JSON.stringify(WireWithdrawalIraDistribution$outboundSchema.parse(wireWithdrawalIraDistribution));
}
export function wireWithdrawalIraDistributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalIraDistribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalIraDistribution' from JSON`);
}
/** @internal */
export const WireWithdrawalRecipientBankType$inboundSchema = z
    .union([
    z.nativeEnum(WireWithdrawalRecipientBankType),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WireWithdrawalRecipientBankType$outboundSchema = z.union([
    z.nativeEnum(WireWithdrawalRecipientBankType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalRecipientBankType$;
(function (WireWithdrawalRecipientBankType$) {
    /** @deprecated use `WireWithdrawalRecipientBankType$inboundSchema` instead. */
    WireWithdrawalRecipientBankType$.inboundSchema = WireWithdrawalRecipientBankType$inboundSchema;
    /** @deprecated use `WireWithdrawalRecipientBankType$outboundSchema` instead. */
    WireWithdrawalRecipientBankType$.outboundSchema = WireWithdrawalRecipientBankType$outboundSchema;
})(WireWithdrawalRecipientBankType$ || (WireWithdrawalRecipientBankType$ = {}));
/** @internal */
export const WireWithdrawalBankId$inboundSchema = z.object({
    id: z.string().optional(),
    type: WireWithdrawalRecipientBankType$inboundSchema.optional(),
});
/** @internal */
export const WireWithdrawalBankId$outboundSchema = z.object({
    id: z.string().optional(),
    type: WireWithdrawalRecipientBankType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalBankId$;
(function (WireWithdrawalBankId$) {
    /** @deprecated use `WireWithdrawalBankId$inboundSchema` instead. */
    WireWithdrawalBankId$.inboundSchema = WireWithdrawalBankId$inboundSchema;
    /** @deprecated use `WireWithdrawalBankId$outboundSchema` instead. */
    WireWithdrawalBankId$.outboundSchema = WireWithdrawalBankId$outboundSchema;
})(WireWithdrawalBankId$ || (WireWithdrawalBankId$ = {}));
export function wireWithdrawalBankIdToJSON(wireWithdrawalBankId) {
    return JSON.stringify(WireWithdrawalBankId$outboundSchema.parse(wireWithdrawalBankId));
}
export function wireWithdrawalBankIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalBankId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalBankId' from JSON`);
}
/** @internal */
export const WireWithdrawalRecipientBankAddress$inboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postal_code: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "postal_code": "postalCode",
    });
});
/** @internal */
export const WireWithdrawalRecipientBankAddress$outboundSchema = z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postalCode: z.string().optional(),
    state: z.string().optional(),
    streetAddress: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        postalCode: "postal_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalRecipientBankAddress$;
(function (WireWithdrawalRecipientBankAddress$) {
    /** @deprecated use `WireWithdrawalRecipientBankAddress$inboundSchema` instead. */
    WireWithdrawalRecipientBankAddress$.inboundSchema = WireWithdrawalRecipientBankAddress$inboundSchema;
    /** @deprecated use `WireWithdrawalRecipientBankAddress$outboundSchema` instead. */
    WireWithdrawalRecipientBankAddress$.outboundSchema = WireWithdrawalRecipientBankAddress$outboundSchema;
})(WireWithdrawalRecipientBankAddress$ || (WireWithdrawalRecipientBankAddress$ = {}));
export function wireWithdrawalRecipientBankAddressToJSON(wireWithdrawalRecipientBankAddress) {
    return JSON.stringify(WireWithdrawalRecipientBankAddress$outboundSchema.parse(wireWithdrawalRecipientBankAddress));
}
export function wireWithdrawalRecipientBankAddressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalRecipientBankAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalRecipientBankAddress' from JSON`);
}
/** @internal */
export const WireWithdrawalInternationalBankDetails$inboundSchema = z.object({
    additional_info: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalRecipientBankAddress$inboundSchema)).optional(),
    bank_name: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "additional_info": "additionalInfo",
        "bank_name": "bankName",
    });
});
/** @internal */
export const WireWithdrawalInternationalBankDetails$outboundSchema = z.object({
    additionalInfo: z.string().optional(),
    address: z.nullable(z.lazy(() => WireWithdrawalRecipientBankAddress$outboundSchema)).optional(),
    bankName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        additionalInfo: "additional_info",
        bankName: "bank_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalInternationalBankDetails$;
(function (WireWithdrawalInternationalBankDetails$) {
    /** @deprecated use `WireWithdrawalInternationalBankDetails$inboundSchema` instead. */
    WireWithdrawalInternationalBankDetails$.inboundSchema = WireWithdrawalInternationalBankDetails$inboundSchema;
    /** @deprecated use `WireWithdrawalInternationalBankDetails$outboundSchema` instead. */
    WireWithdrawalInternationalBankDetails$.outboundSchema = WireWithdrawalInternationalBankDetails$outboundSchema;
})(WireWithdrawalInternationalBankDetails$ || (WireWithdrawalInternationalBankDetails$ = {}));
export function wireWithdrawalInternationalBankDetailsToJSON(wireWithdrawalInternationalBankDetails) {
    return JSON.stringify(WireWithdrawalInternationalBankDetails$outboundSchema.parse(wireWithdrawalInternationalBankDetails));
}
export function wireWithdrawalInternationalBankDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalInternationalBankDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalInternationalBankDetails' from JSON`);
}
/** @internal */
export const WireWithdrawalRecipientBank$inboundSchema = z.object({
    bank_id: z.nullable(z.lazy(() => WireWithdrawalBankId$inboundSchema))
        .optional(),
    international_bank_details: z.nullable(z.lazy(() => WireWithdrawalInternationalBankDetails$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "bank_id": "bankId",
        "international_bank_details": "internationalBankDetails",
    });
});
/** @internal */
export const WireWithdrawalRecipientBank$outboundSchema = z.object({
    bankId: z.nullable(z.lazy(() => WireWithdrawalBankId$outboundSchema))
        .optional(),
    internationalBankDetails: z.nullable(z.lazy(() => WireWithdrawalInternationalBankDetails$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        bankId: "bank_id",
        internationalBankDetails: "international_bank_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalRecipientBank$;
(function (WireWithdrawalRecipientBank$) {
    /** @deprecated use `WireWithdrawalRecipientBank$inboundSchema` instead. */
    WireWithdrawalRecipientBank$.inboundSchema = WireWithdrawalRecipientBank$inboundSchema;
    /** @deprecated use `WireWithdrawalRecipientBank$outboundSchema` instead. */
    WireWithdrawalRecipientBank$.outboundSchema = WireWithdrawalRecipientBank$outboundSchema;
})(WireWithdrawalRecipientBank$ || (WireWithdrawalRecipientBank$ = {}));
export function wireWithdrawalRecipientBankToJSON(wireWithdrawalRecipientBank) {
    return JSON.stringify(WireWithdrawalRecipientBank$outboundSchema.parse(wireWithdrawalRecipientBank));
}
export function wireWithdrawalRecipientBankFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalRecipientBank$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalRecipientBank' from JSON`);
}
/** @internal */
export const WireWithdrawalStateState$inboundSchema = z
    .union([
    z.nativeEnum(WireWithdrawalStateState),
    z.string().transform(catchUnrecognizedEnum),
]);
/** @internal */
export const WireWithdrawalStateState$outboundSchema = z.union([
    z.nativeEnum(WireWithdrawalStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalStateState$;
(function (WireWithdrawalStateState$) {
    /** @deprecated use `WireWithdrawalStateState$inboundSchema` instead. */
    WireWithdrawalStateState$.inboundSchema = WireWithdrawalStateState$inboundSchema;
    /** @deprecated use `WireWithdrawalStateState$outboundSchema` instead. */
    WireWithdrawalStateState$.outboundSchema = WireWithdrawalStateState$outboundSchema;
})(WireWithdrawalStateState$ || (WireWithdrawalStateState$ = {}));
/** @internal */
export const WireWithdrawalState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: WireWithdrawalStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
export const WireWithdrawalState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: WireWithdrawalStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawalState$;
(function (WireWithdrawalState$) {
    /** @deprecated use `WireWithdrawalState$inboundSchema` instead. */
    WireWithdrawalState$.inboundSchema = WireWithdrawalState$inboundSchema;
    /** @deprecated use `WireWithdrawalState$outboundSchema` instead. */
    WireWithdrawalState$.outboundSchema = WireWithdrawalState$outboundSchema;
})(WireWithdrawalState$ || (WireWithdrawalState$ = {}));
export function wireWithdrawalStateToJSON(wireWithdrawalState) {
    return JSON.stringify(WireWithdrawalState$outboundSchema.parse(wireWithdrawalState));
}
export function wireWithdrawalStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawalState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawalState' from JSON`);
}
/** @internal */
export const WireWithdrawal$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalAmount$inboundSchema))
        .optional(),
    beneficiary: z.nullable(z.lazy(() => WireWithdrawalBeneficiary$inboundSchema))
        .optional(),
    client_transfer_id: z.string().optional(),
    fed_reference_number: z.string().optional(),
    intermediary: z.nullable(z.lazy(() => WireWithdrawalIntermediary$inboundSchema)).optional(),
    ira_distribution: z.nullable(z.lazy(() => WireWithdrawalIraDistribution$inboundSchema)).optional(),
    name: z.string().optional(),
    recipient_bank: z.nullable(z.lazy(() => WireWithdrawalRecipientBank$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => WireWithdrawalState$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "client_transfer_id": "clientTransferId",
        "fed_reference_number": "fedReferenceNumber",
        "ira_distribution": "iraDistribution",
        "recipient_bank": "recipientBank",
    });
});
/** @internal */
export const WireWithdrawal$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => WireWithdrawalAmount$outboundSchema))
        .optional(),
    beneficiary: z.nullable(z.lazy(() => WireWithdrawalBeneficiary$outboundSchema)).optional(),
    clientTransferId: z.string().optional(),
    fedReferenceNumber: z.string().optional(),
    intermediary: z.nullable(z.lazy(() => WireWithdrawalIntermediary$outboundSchema)).optional(),
    iraDistribution: z.nullable(z.lazy(() => WireWithdrawalIraDistribution$outboundSchema)).optional(),
    name: z.string().optional(),
    recipientBank: z.nullable(z.lazy(() => WireWithdrawalRecipientBank$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => WireWithdrawalState$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        clientTransferId: "client_transfer_id",
        fedReferenceNumber: "fed_reference_number",
        iraDistribution: "ira_distribution",
        recipientBank: "recipient_bank",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireWithdrawal$;
(function (WireWithdrawal$) {
    /** @deprecated use `WireWithdrawal$inboundSchema` instead. */
    WireWithdrawal$.inboundSchema = WireWithdrawal$inboundSchema;
    /** @deprecated use `WireWithdrawal$outboundSchema` instead. */
    WireWithdrawal$.outboundSchema = WireWithdrawal$outboundSchema;
})(WireWithdrawal$ || (WireWithdrawal$ = {}));
export function wireWithdrawalToJSON(wireWithdrawal) {
    return JSON.stringify(WireWithdrawal$outboundSchema.parse(wireWithdrawal));
}
export function wireWithdrawalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireWithdrawal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireWithdrawal' from JSON`);
}
//# sourceMappingURL=wirewithdrawal.js.map