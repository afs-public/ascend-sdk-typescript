/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const RemovePartyRequestCreate$inboundSchema = z.object({
    authorized_by_party_ids: z.array(z.string()).optional(),
    name: z.string(),
}).transform((v) => {
    return remap$(v, {
        "authorized_by_party_ids": "authorizedByPartyIds",
    });
});
/** @internal */
export const RemovePartyRequestCreate$outboundSchema = z.object({
    authorizedByPartyIds: z.array(z.string()).optional(),
    name: z.string(),
}).transform((v) => {
    return remap$(v, {
        authorizedByPartyIds: "authorized_by_party_ids",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemovePartyRequestCreate$;
(function (RemovePartyRequestCreate$) {
    /** @deprecated use `RemovePartyRequestCreate$inboundSchema` instead. */
    RemovePartyRequestCreate$.inboundSchema = RemovePartyRequestCreate$inboundSchema;
    /** @deprecated use `RemovePartyRequestCreate$outboundSchema` instead. */
    RemovePartyRequestCreate$.outboundSchema = RemovePartyRequestCreate$outboundSchema;
})(RemovePartyRequestCreate$ || (RemovePartyRequestCreate$ = {}));
export function removePartyRequestCreateToJSON(removePartyRequestCreate) {
    return JSON.stringify(RemovePartyRequestCreate$outboundSchema.parse(removePartyRequestCreate));
}
export function removePartyRequestCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemovePartyRequestCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemovePartyRequestCreate' from JSON`);
}
//# sourceMappingURL=removepartyrequestcreate.js.map