/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as components from "../components/index.js";
import { ApexascendError } from "./apexascenderror.js";
/**
 * The status message serves as the general-purpose service error message. Each status message includes a gRPC error code, error message, and error details.
 */
export class Status extends ApexascendError {
    constructor(err, httpMeta) {
        const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        if (err.code != null)
            this.code = err.code;
        if (err.details != null)
            this.details = err.details;
        this.name = "Status";
    }
}
/** @internal */
export const Status$inboundSchema = z
    .object({
    code: z.number().int().optional(),
    details: z.array(components.Any$inboundSchema).optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new Status(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const Status$outboundSchema = z.instanceof(Status)
    .transform(v => v.data$)
    .pipe(z.object({
    code: z.number().int().optional(),
    details: z.array(components.Any$outboundSchema).optional(),
    message: z.string().optional(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = Status$outboundSchema;
})(Status$ || (Status$ = {}));
//# sourceMappingURL=status.js.map