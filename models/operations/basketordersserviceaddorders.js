/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BasketOrdersServiceAddOrdersRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    basket_id: z.string(),
    AddOrdersRequestCreate: components.AddOrdersRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "basket_id": "basketId",
        "AddOrdersRequestCreate": "addOrdersRequestCreate",
    });
});
/** @internal */
export const BasketOrdersServiceAddOrdersRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    basketId: z.string(),
    addOrdersRequestCreate: components.AddOrdersRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        basketId: "basket_id",
        addOrdersRequestCreate: "AddOrdersRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceAddOrdersRequest$;
(function (BasketOrdersServiceAddOrdersRequest$) {
    /** @deprecated use `BasketOrdersServiceAddOrdersRequest$inboundSchema` instead. */
    BasketOrdersServiceAddOrdersRequest$.inboundSchema = BasketOrdersServiceAddOrdersRequest$inboundSchema;
    /** @deprecated use `BasketOrdersServiceAddOrdersRequest$outboundSchema` instead. */
    BasketOrdersServiceAddOrdersRequest$.outboundSchema = BasketOrdersServiceAddOrdersRequest$outboundSchema;
})(BasketOrdersServiceAddOrdersRequest$ || (BasketOrdersServiceAddOrdersRequest$ = {}));
export function basketOrdersServiceAddOrdersRequestToJSON(basketOrdersServiceAddOrdersRequest) {
    return JSON.stringify(BasketOrdersServiceAddOrdersRequest$outboundSchema.parse(basketOrdersServiceAddOrdersRequest));
}
export function basketOrdersServiceAddOrdersRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceAddOrdersRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceAddOrdersRequest' from JSON`);
}
/** @internal */
export const BasketOrdersServiceAddOrdersResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Basket: components.Basket$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Basket": "basket",
        "Status": "status",
    });
});
/** @internal */
export const BasketOrdersServiceAddOrdersResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    basket: components.Basket$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        basket: "Basket",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceAddOrdersResponse$;
(function (BasketOrdersServiceAddOrdersResponse$) {
    /** @deprecated use `BasketOrdersServiceAddOrdersResponse$inboundSchema` instead. */
    BasketOrdersServiceAddOrdersResponse$.inboundSchema = BasketOrdersServiceAddOrdersResponse$inboundSchema;
    /** @deprecated use `BasketOrdersServiceAddOrdersResponse$outboundSchema` instead. */
    BasketOrdersServiceAddOrdersResponse$.outboundSchema = BasketOrdersServiceAddOrdersResponse$outboundSchema;
})(BasketOrdersServiceAddOrdersResponse$ || (BasketOrdersServiceAddOrdersResponse$ = {}));
export function basketOrdersServiceAddOrdersResponseToJSON(basketOrdersServiceAddOrdersResponse) {
    return JSON.stringify(BasketOrdersServiceAddOrdersResponse$outboundSchema.parse(basketOrdersServiceAddOrdersResponse));
}
export function basketOrdersServiceAddOrdersResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceAddOrdersResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceAddOrdersResponse' from JSON`);
}
//# sourceMappingURL=basketordersserviceaddorders.js.map