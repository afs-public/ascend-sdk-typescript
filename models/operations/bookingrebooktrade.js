/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingRebookTradeRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    RebookTradeRequestCreate: components.RebookTradeRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "RebookTradeRequestCreate": "rebookTradeRequestCreate",
    });
});
/** @internal */
export const BookingRebookTradeRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    rebookTradeRequestCreate: components.RebookTradeRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        rebookTradeRequestCreate: "RebookTradeRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingRebookTradeRequest$;
(function (BookingRebookTradeRequest$) {
    /** @deprecated use `BookingRebookTradeRequest$inboundSchema` instead. */
    BookingRebookTradeRequest$.inboundSchema = BookingRebookTradeRequest$inboundSchema;
    /** @deprecated use `BookingRebookTradeRequest$outboundSchema` instead. */
    BookingRebookTradeRequest$.outboundSchema = BookingRebookTradeRequest$outboundSchema;
})(BookingRebookTradeRequest$ || (BookingRebookTradeRequest$ = {}));
export function bookingRebookTradeRequestToJSON(bookingRebookTradeRequest) {
    return JSON.stringify(BookingRebookTradeRequest$outboundSchema.parse(bookingRebookTradeRequest));
}
export function bookingRebookTradeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingRebookTradeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingRebookTradeRequest' from JSON`);
}
/** @internal */
export const BookingRebookTradeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    RebookTradeResponse: components.RebookTradeResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "RebookTradeResponse": "rebookTradeResponse",
        "Status": "status",
    });
});
/** @internal */
export const BookingRebookTradeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    rebookTradeResponse: components.RebookTradeResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        rebookTradeResponse: "RebookTradeResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingRebookTradeResponse$;
(function (BookingRebookTradeResponse$) {
    /** @deprecated use `BookingRebookTradeResponse$inboundSchema` instead. */
    BookingRebookTradeResponse$.inboundSchema = BookingRebookTradeResponse$inboundSchema;
    /** @deprecated use `BookingRebookTradeResponse$outboundSchema` instead. */
    BookingRebookTradeResponse$.outboundSchema = BookingRebookTradeResponse$outboundSchema;
})(BookingRebookTradeResponse$ || (BookingRebookTradeResponse$ = {}));
export function bookingRebookTradeResponseToJSON(bookingRebookTradeResponse) {
    return JSON.stringify(BookingRebookTradeResponse$outboundSchema.parse(bookingRebookTradeResponse));
}
export function bookingRebookTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingRebookTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingRebookTradeResponse' from JSON`);
}
//# sourceMappingURL=bookingrebooktrade.js.map