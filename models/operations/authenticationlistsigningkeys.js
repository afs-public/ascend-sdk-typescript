/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AuthenticationListSigningKeysSecurity$inboundSchema = z.object({
    ApiKeyAuth: z.string(),
}).transform((v) => {
    return remap$(v, {
        "ApiKeyAuth": "apiKeyAuth",
    });
});
/** @internal */
export const AuthenticationListSigningKeysSecurity$outboundSchema = z.object({
    apiKeyAuth: z.string(),
}).transform((v) => {
    return remap$(v, {
        apiKeyAuth: "ApiKeyAuth",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthenticationListSigningKeysSecurity$;
(function (AuthenticationListSigningKeysSecurity$) {
    /** @deprecated use `AuthenticationListSigningKeysSecurity$inboundSchema` instead. */
    AuthenticationListSigningKeysSecurity$.inboundSchema = AuthenticationListSigningKeysSecurity$inboundSchema;
    /** @deprecated use `AuthenticationListSigningKeysSecurity$outboundSchema` instead. */
    AuthenticationListSigningKeysSecurity$.outboundSchema = AuthenticationListSigningKeysSecurity$outboundSchema;
})(AuthenticationListSigningKeysSecurity$ || (AuthenticationListSigningKeysSecurity$ = {}));
export function authenticationListSigningKeysSecurityToJSON(authenticationListSigningKeysSecurity) {
    return JSON.stringify(AuthenticationListSigningKeysSecurity$outboundSchema.parse(authenticationListSigningKeysSecurity));
}
export function authenticationListSigningKeysSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthenticationListSigningKeysSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthenticationListSigningKeysSecurity' from JSON`);
}
/** @internal */
export const AuthenticationListSigningKeysRequest$inboundSchema = z.object({
    page_size: z.number().int().optional(),
    page_token: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "page_size": "pageSize",
        "page_token": "pageToken",
    });
});
/** @internal */
export const AuthenticationListSigningKeysRequest$outboundSchema = z.object({
    pageSize: z.number().int().optional(),
    pageToken: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        pageSize: "page_size",
        pageToken: "page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthenticationListSigningKeysRequest$;
(function (AuthenticationListSigningKeysRequest$) {
    /** @deprecated use `AuthenticationListSigningKeysRequest$inboundSchema` instead. */
    AuthenticationListSigningKeysRequest$.inboundSchema = AuthenticationListSigningKeysRequest$inboundSchema;
    /** @deprecated use `AuthenticationListSigningKeysRequest$outboundSchema` instead. */
    AuthenticationListSigningKeysRequest$.outboundSchema = AuthenticationListSigningKeysRequest$outboundSchema;
})(AuthenticationListSigningKeysRequest$ || (AuthenticationListSigningKeysRequest$ = {}));
export function authenticationListSigningKeysRequestToJSON(authenticationListSigningKeysRequest) {
    return JSON.stringify(AuthenticationListSigningKeysRequest$outboundSchema.parse(authenticationListSigningKeysRequest));
}
export function authenticationListSigningKeysRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthenticationListSigningKeysRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthenticationListSigningKeysRequest' from JSON`);
}
/** @internal */
export const AuthenticationListSigningKeysResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    ListSigningKeysResponse: components.ListSigningKeysResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "ListSigningKeysResponse": "listSigningKeysResponse",
        "Status": "status",
    });
});
/** @internal */
export const AuthenticationListSigningKeysResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listSigningKeysResponse: components.ListSigningKeysResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        listSigningKeysResponse: "ListSigningKeysResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthenticationListSigningKeysResponse$;
(function (AuthenticationListSigningKeysResponse$) {
    /** @deprecated use `AuthenticationListSigningKeysResponse$inboundSchema` instead. */
    AuthenticationListSigningKeysResponse$.inboundSchema = AuthenticationListSigningKeysResponse$inboundSchema;
    /** @deprecated use `AuthenticationListSigningKeysResponse$outboundSchema` instead. */
    AuthenticationListSigningKeysResponse$.outboundSchema = AuthenticationListSigningKeysResponse$outboundSchema;
})(AuthenticationListSigningKeysResponse$ || (AuthenticationListSigningKeysResponse$ = {}));
export function authenticationListSigningKeysResponseToJSON(authenticationListSigningKeysResponse) {
    return JSON.stringify(AuthenticationListSigningKeysResponse$outboundSchema.parse(authenticationListSigningKeysResponse));
}
export function authenticationListSigningKeysResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthenticationListSigningKeysResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthenticationListSigningKeysResponse' from JSON`);
}
//# sourceMappingURL=authenticationlistsigningkeys.js.map