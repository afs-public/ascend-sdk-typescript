/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsCreateLegalNaturalPersonResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LegalNaturalPerson: components.LegalNaturalPerson$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LegalNaturalPerson": "legalNaturalPerson",
        "Status": "status",
    });
});
/** @internal */
export const AccountsCreateLegalNaturalPersonResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    legalNaturalPerson: components.LegalNaturalPerson$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        legalNaturalPerson: "LegalNaturalPerson",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsCreateLegalNaturalPersonResponse$;
(function (AccountsCreateLegalNaturalPersonResponse$) {
    /** @deprecated use `AccountsCreateLegalNaturalPersonResponse$inboundSchema` instead. */
    AccountsCreateLegalNaturalPersonResponse$.inboundSchema = AccountsCreateLegalNaturalPersonResponse$inboundSchema;
    /** @deprecated use `AccountsCreateLegalNaturalPersonResponse$outboundSchema` instead. */
    AccountsCreateLegalNaturalPersonResponse$.outboundSchema = AccountsCreateLegalNaturalPersonResponse$outboundSchema;
})(AccountsCreateLegalNaturalPersonResponse$ || (AccountsCreateLegalNaturalPersonResponse$ = {}));
export function accountsCreateLegalNaturalPersonResponseToJSON(accountsCreateLegalNaturalPersonResponse) {
    return JSON.stringify(AccountsCreateLegalNaturalPersonResponse$outboundSchema.parse(accountsCreateLegalNaturalPersonResponse));
}
export function accountsCreateLegalNaturalPersonResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsCreateLegalNaturalPersonResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsCreateLegalNaturalPersonResponse' from JSON`);
}
//# sourceMappingURL=accountscreatelegalnaturalperson.js.map