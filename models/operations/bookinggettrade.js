/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingGetTradeRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
    });
});
/** @internal */
export const BookingGetTradeRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetTradeRequest$;
(function (BookingGetTradeRequest$) {
    /** @deprecated use `BookingGetTradeRequest$inboundSchema` instead. */
    BookingGetTradeRequest$.inboundSchema = BookingGetTradeRequest$inboundSchema;
    /** @deprecated use `BookingGetTradeRequest$outboundSchema` instead. */
    BookingGetTradeRequest$.outboundSchema = BookingGetTradeRequest$outboundSchema;
})(BookingGetTradeRequest$ || (BookingGetTradeRequest$ = {}));
export function bookingGetTradeRequestToJSON(bookingGetTradeRequest) {
    return JSON.stringify(BookingGetTradeRequest$outboundSchema.parse(bookingGetTradeRequest));
}
export function bookingGetTradeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetTradeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetTradeRequest' from JSON`);
}
/** @internal */
export const BookingGetTradeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    BookingTrade: components.BookingTrade$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "BookingTrade": "bookingTrade",
        "Status": "status",
    });
});
/** @internal */
export const BookingGetTradeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    bookingTrade: components.BookingTrade$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        bookingTrade: "BookingTrade",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetTradeResponse$;
(function (BookingGetTradeResponse$) {
    /** @deprecated use `BookingGetTradeResponse$inboundSchema` instead. */
    BookingGetTradeResponse$.inboundSchema = BookingGetTradeResponse$inboundSchema;
    /** @deprecated use `BookingGetTradeResponse$outboundSchema` instead. */
    BookingGetTradeResponse$.outboundSchema = BookingGetTradeResponse$outboundSchema;
})(BookingGetTradeResponse$ || (BookingGetTradeResponse$ = {}));
export function bookingGetTradeResponseToJSON(bookingGetTradeResponse) {
    return JSON.stringify(BookingGetTradeResponse$outboundSchema.parse(bookingGetTradeResponse));
}
export function bookingGetTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetTradeResponse' from JSON`);
}
//# sourceMappingURL=bookinggettrade.js.map