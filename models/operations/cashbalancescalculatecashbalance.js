/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/**
 * The withdraw mechanism to calculate the balance for. The mechanism determines what account activity will affect the balance.
 */
export var Mechanism;
(function (Mechanism) {
    Mechanism["MechanismUnspecified"] = "MECHANISM_UNSPECIFIED";
    Mechanism["Acat"] = "ACAT";
    Mechanism["Ach"] = "ACH";
    Mechanism["CashJournal"] = "CASH_JOURNAL";
    Mechanism["Check"] = "CHECK";
    Mechanism["Credit"] = "CREDIT";
    Mechanism["Fee"] = "FEE";
    Mechanism["Ict"] = "ICT";
    Mechanism["Paypal"] = "PAYPAL";
    Mechanism["Rtp"] = "RTP";
    Mechanism["Tpj"] = "TPJ";
    Mechanism["Wire"] = "WIRE";
    Mechanism["ExternalAch"] = "EXTERNAL_ACH";
})(Mechanism || (Mechanism = {}));
/** @internal */
export const Mechanism$inboundSchema = z
    .nativeEnum(Mechanism);
/** @internal */
export const Mechanism$outboundSchema = Mechanism$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Mechanism$;
(function (Mechanism$) {
    /** @deprecated use `Mechanism$inboundSchema` instead. */
    Mechanism$.inboundSchema = Mechanism$inboundSchema;
    /** @deprecated use `Mechanism$outboundSchema` instead. */
    Mechanism$.outboundSchema = Mechanism$outboundSchema;
})(Mechanism$ || (Mechanism$ = {}));
/** @internal */
export const CashBalancesCalculateCashBalanceRequest$inboundSchema = z.object({
    account_id: z.string(),
    mechanism: Mechanism$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const CashBalancesCalculateCashBalanceRequest$outboundSchema = z.object({
    accountId: z.string(),
    mechanism: Mechanism$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashBalancesCalculateCashBalanceRequest$;
(function (CashBalancesCalculateCashBalanceRequest$) {
    /** @deprecated use `CashBalancesCalculateCashBalanceRequest$inboundSchema` instead. */
    CashBalancesCalculateCashBalanceRequest$.inboundSchema = CashBalancesCalculateCashBalanceRequest$inboundSchema;
    /** @deprecated use `CashBalancesCalculateCashBalanceRequest$outboundSchema` instead. */
    CashBalancesCalculateCashBalanceRequest$.outboundSchema = CashBalancesCalculateCashBalanceRequest$outboundSchema;
})(CashBalancesCalculateCashBalanceRequest$ || (CashBalancesCalculateCashBalanceRequest$ = {}));
export function cashBalancesCalculateCashBalanceRequestToJSON(cashBalancesCalculateCashBalanceRequest) {
    return JSON.stringify(CashBalancesCalculateCashBalanceRequest$outboundSchema.parse(cashBalancesCalculateCashBalanceRequest));
}
export function cashBalancesCalculateCashBalanceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashBalancesCalculateCashBalanceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashBalancesCalculateCashBalanceRequest' from JSON`);
}
/** @internal */
export const CashBalancesCalculateCashBalanceResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CalculateCashBalanceResponse: components
        .CalculateCashBalanceResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "CalculateCashBalanceResponse": "calculateCashBalanceResponse",
        "Status": "status",
    });
});
/** @internal */
export const CashBalancesCalculateCashBalanceResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    calculateCashBalanceResponse: components
        .CalculateCashBalanceResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        calculateCashBalanceResponse: "CalculateCashBalanceResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CashBalancesCalculateCashBalanceResponse$;
(function (CashBalancesCalculateCashBalanceResponse$) {
    /** @deprecated use `CashBalancesCalculateCashBalanceResponse$inboundSchema` instead. */
    CashBalancesCalculateCashBalanceResponse$.inboundSchema = CashBalancesCalculateCashBalanceResponse$inboundSchema;
    /** @deprecated use `CashBalancesCalculateCashBalanceResponse$outboundSchema` instead. */
    CashBalancesCalculateCashBalanceResponse$.outboundSchema = CashBalancesCalculateCashBalanceResponse$outboundSchema;
})(CashBalancesCalculateCashBalanceResponse$ || (CashBalancesCalculateCashBalanceResponse$ = {}));
export function cashBalancesCalculateCashBalanceResponseToJSON(cashBalancesCalculateCashBalanceResponse) {
    return JSON.stringify(CashBalancesCalculateCashBalanceResponse$outboundSchema.parse(cashBalancesCalculateCashBalanceResponse));
}
export function cashBalancesCalculateCashBalanceResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CashBalancesCalculateCashBalanceResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CashBalancesCalculateCashBalanceResponse' from JSON`);
}
//# sourceMappingURL=cashbalancescalculatecashbalance.js.map