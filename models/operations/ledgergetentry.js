/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const LedgerGetEntryRequest$inboundSchema = z.object({
    account_id: z.string(),
    entry_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "entry_id": "entryId",
    });
});
/** @internal */
export const LedgerGetEntryRequest$outboundSchema = z.object({
    accountId: z.string(),
    entryId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        entryId: "entry_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerGetEntryRequest$;
(function (LedgerGetEntryRequest$) {
    /** @deprecated use `LedgerGetEntryRequest$inboundSchema` instead. */
    LedgerGetEntryRequest$.inboundSchema = LedgerGetEntryRequest$inboundSchema;
    /** @deprecated use `LedgerGetEntryRequest$outboundSchema` instead. */
    LedgerGetEntryRequest$.outboundSchema = LedgerGetEntryRequest$outboundSchema;
})(LedgerGetEntryRequest$ || (LedgerGetEntryRequest$ = {}));
export function ledgerGetEntryRequestToJSON(ledgerGetEntryRequest) {
    return JSON.stringify(LedgerGetEntryRequest$outboundSchema.parse(ledgerGetEntryRequest));
}
export function ledgerGetEntryRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerGetEntryRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerGetEntryRequest' from JSON`);
}
/** @internal */
export const LedgerGetEntryResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Entry: components.Entry$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Entry": "entry",
        "Status": "status",
    });
});
/** @internal */
export const LedgerGetEntryResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    entry: components.Entry$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        entry: "Entry",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerGetEntryResponse$;
(function (LedgerGetEntryResponse$) {
    /** @deprecated use `LedgerGetEntryResponse$inboundSchema` instead. */
    LedgerGetEntryResponse$.inboundSchema = LedgerGetEntryResponse$inboundSchema;
    /** @deprecated use `LedgerGetEntryResponse$outboundSchema` instead. */
    LedgerGetEntryResponse$.outboundSchema = LedgerGetEntryResponse$outboundSchema;
})(LedgerGetEntryResponse$ || (LedgerGetEntryResponse$ = {}));
export function ledgerGetEntryResponseToJSON(ledgerGetEntryResponse) {
    return JSON.stringify(LedgerGetEntryResponse$outboundSchema.parse(ledgerGetEntryResponse));
}
export function ledgerGetEntryResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerGetEntryResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerGetEntryResponse' from JSON`);
}
//# sourceMappingURL=ledgergetentry.js.map