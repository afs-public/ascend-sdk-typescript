/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const IctDepositsCancelIctDepositRequest$inboundSchema = z.object({
    account_id: z.string(),
    ictDeposit_id: z.string(),
    CancelIctDepositRequestCreate: components.CancelIctDepositRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "ictDeposit_id": "ictDepositId",
        "CancelIctDepositRequestCreate": "cancelIctDepositRequestCreate",
    });
});
/** @internal */
export const IctDepositsCancelIctDepositRequest$outboundSchema = z.object({
    accountId: z.string(),
    ictDepositId: z.string(),
    cancelIctDepositRequestCreate: components.CancelIctDepositRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        ictDepositId: "ictDeposit_id",
        cancelIctDepositRequestCreate: "CancelIctDepositRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositsCancelIctDepositRequest$;
(function (IctDepositsCancelIctDepositRequest$) {
    /** @deprecated use `IctDepositsCancelIctDepositRequest$inboundSchema` instead. */
    IctDepositsCancelIctDepositRequest$.inboundSchema = IctDepositsCancelIctDepositRequest$inboundSchema;
    /** @deprecated use `IctDepositsCancelIctDepositRequest$outboundSchema` instead. */
    IctDepositsCancelIctDepositRequest$.outboundSchema = IctDepositsCancelIctDepositRequest$outboundSchema;
})(IctDepositsCancelIctDepositRequest$ || (IctDepositsCancelIctDepositRequest$ = {}));
export function ictDepositsCancelIctDepositRequestToJSON(ictDepositsCancelIctDepositRequest) {
    return JSON.stringify(IctDepositsCancelIctDepositRequest$outboundSchema.parse(ictDepositsCancelIctDepositRequest));
}
export function ictDepositsCancelIctDepositRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositsCancelIctDepositRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositsCancelIctDepositRequest' from JSON`);
}
/** @internal */
export const IctDepositsCancelIctDepositResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    IctDeposit: components.IctDeposit$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "IctDeposit": "ictDeposit",
        "Status": "status",
    });
});
/** @internal */
export const IctDepositsCancelIctDepositResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    ictDeposit: components.IctDeposit$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        ictDeposit: "IctDeposit",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctDepositsCancelIctDepositResponse$;
(function (IctDepositsCancelIctDepositResponse$) {
    /** @deprecated use `IctDepositsCancelIctDepositResponse$inboundSchema` instead. */
    IctDepositsCancelIctDepositResponse$.inboundSchema = IctDepositsCancelIctDepositResponse$inboundSchema;
    /** @deprecated use `IctDepositsCancelIctDepositResponse$outboundSchema` instead. */
    IctDepositsCancelIctDepositResponse$.outboundSchema = IctDepositsCancelIctDepositResponse$outboundSchema;
})(IctDepositsCancelIctDepositResponse$ || (IctDepositsCancelIctDepositResponse$ = {}));
export function ictDepositsCancelIctDepositResponseToJSON(ictDepositsCancelIctDepositResponse) {
    return JSON.stringify(IctDepositsCancelIctDepositResponse$outboundSchema.parse(ictDepositsCancelIctDepositResponse));
}
export function ictDepositsCancelIctDepositResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctDepositsCancelIctDepositResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctDepositsCancelIctDepositResponse' from JSON`);
}
//# sourceMappingURL=ictdepositscancelictdeposit.js.map