/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsReplacePartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    party_id: z.string(),
    ReplacePartyRequestCreate: components.ReplacePartyRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "party_id": "partyId",
        "ReplacePartyRequestCreate": "replacePartyRequestCreate",
    });
});
/** @internal */
export const AccountsReplacePartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    partyId: z.string(),
    replacePartyRequestCreate: components.ReplacePartyRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        partyId: "party_id",
        replacePartyRequestCreate: "ReplacePartyRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsReplacePartyRequest$;
(function (AccountsReplacePartyRequest$) {
    /** @deprecated use `AccountsReplacePartyRequest$inboundSchema` instead. */
    AccountsReplacePartyRequest$.inboundSchema = AccountsReplacePartyRequest$inboundSchema;
    /** @deprecated use `AccountsReplacePartyRequest$outboundSchema` instead. */
    AccountsReplacePartyRequest$.outboundSchema = AccountsReplacePartyRequest$outboundSchema;
})(AccountsReplacePartyRequest$ || (AccountsReplacePartyRequest$ = {}));
export function accountsReplacePartyRequestToJSON(accountsReplacePartyRequest) {
    return JSON.stringify(AccountsReplacePartyRequest$outboundSchema.parse(accountsReplacePartyRequest));
}
export function accountsReplacePartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsReplacePartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsReplacePartyRequest' from JSON`);
}
/** @internal */
export const AccountsReplacePartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Party: components.Party$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Party": "party",
        "Status": "status",
    });
});
/** @internal */
export const AccountsReplacePartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    party: components.Party$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        party: "Party",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsReplacePartyResponse$;
(function (AccountsReplacePartyResponse$) {
    /** @deprecated use `AccountsReplacePartyResponse$inboundSchema` instead. */
    AccountsReplacePartyResponse$.inboundSchema = AccountsReplacePartyResponse$inboundSchema;
    /** @deprecated use `AccountsReplacePartyResponse$outboundSchema` instead. */
    AccountsReplacePartyResponse$.outboundSchema = AccountsReplacePartyResponse$outboundSchema;
})(AccountsReplacePartyResponse$ || (AccountsReplacePartyResponse$ = {}));
export function accountsReplacePartyResponseToJSON(accountsReplacePartyResponse) {
    return JSON.stringify(AccountsReplacePartyResponse$outboundSchema.parse(accountsReplacePartyResponse));
}
export function accountsReplacePartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsReplacePartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsReplacePartyResponse' from JSON`);
}
//# sourceMappingURL=accountsreplaceparty.js.map