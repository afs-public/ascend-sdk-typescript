/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BasketOrdersServiceGetBasketRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    basket_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "basket_id": "basketId",
    });
});
/** @internal */
export const BasketOrdersServiceGetBasketRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    basketId: z.string(),
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        basketId: "basket_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceGetBasketRequest$;
(function (BasketOrdersServiceGetBasketRequest$) {
    /** @deprecated use `BasketOrdersServiceGetBasketRequest$inboundSchema` instead. */
    BasketOrdersServiceGetBasketRequest$.inboundSchema = BasketOrdersServiceGetBasketRequest$inboundSchema;
    /** @deprecated use `BasketOrdersServiceGetBasketRequest$outboundSchema` instead. */
    BasketOrdersServiceGetBasketRequest$.outboundSchema = BasketOrdersServiceGetBasketRequest$outboundSchema;
})(BasketOrdersServiceGetBasketRequest$ || (BasketOrdersServiceGetBasketRequest$ = {}));
export function basketOrdersServiceGetBasketRequestToJSON(basketOrdersServiceGetBasketRequest) {
    return JSON.stringify(BasketOrdersServiceGetBasketRequest$outboundSchema.parse(basketOrdersServiceGetBasketRequest));
}
export function basketOrdersServiceGetBasketRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceGetBasketRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceGetBasketRequest' from JSON`);
}
/** @internal */
export const BasketOrdersServiceGetBasketResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Basket: components.Basket$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Basket": "basket",
        "Status": "status",
    });
});
/** @internal */
export const BasketOrdersServiceGetBasketResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    basket: components.Basket$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        basket: "Basket",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceGetBasketResponse$;
(function (BasketOrdersServiceGetBasketResponse$) {
    /** @deprecated use `BasketOrdersServiceGetBasketResponse$inboundSchema` instead. */
    BasketOrdersServiceGetBasketResponse$.inboundSchema = BasketOrdersServiceGetBasketResponse$inboundSchema;
    /** @deprecated use `BasketOrdersServiceGetBasketResponse$outboundSchema` instead. */
    BasketOrdersServiceGetBasketResponse$.outboundSchema = BasketOrdersServiceGetBasketResponse$outboundSchema;
})(BasketOrdersServiceGetBasketResponse$ || (BasketOrdersServiceGetBasketResponse$ = {}));
export function basketOrdersServiceGetBasketResponseToJSON(basketOrdersServiceGetBasketResponse) {
    return JSON.stringify(BasketOrdersServiceGetBasketResponse$outboundSchema.parse(basketOrdersServiceGetBasketResponse));
}
export function basketOrdersServiceGetBasketResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceGetBasketResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceGetBasketResponse' from JSON`);
}
//# sourceMappingURL=basketordersservicegetbasket.js.map