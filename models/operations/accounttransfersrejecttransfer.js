/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountTransfersRejectTransferRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    account_id: z.string(),
    transfer_id: z.string(),
    RejectTransferRequestCreate: components.RejectTransferRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "account_id": "accountId",
        "transfer_id": "transferId",
        "RejectTransferRequestCreate": "rejectTransferRequestCreate",
    });
});
/** @internal */
export const AccountTransfersRejectTransferRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    accountId: z.string(),
    transferId: z.string(),
    rejectTransferRequestCreate: components.RejectTransferRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        accountId: "account_id",
        transferId: "transfer_id",
        rejectTransferRequestCreate: "RejectTransferRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransfersRejectTransferRequest$;
(function (AccountTransfersRejectTransferRequest$) {
    /** @deprecated use `AccountTransfersRejectTransferRequest$inboundSchema` instead. */
    AccountTransfersRejectTransferRequest$.inboundSchema = AccountTransfersRejectTransferRequest$inboundSchema;
    /** @deprecated use `AccountTransfersRejectTransferRequest$outboundSchema` instead. */
    AccountTransfersRejectTransferRequest$.outboundSchema = AccountTransfersRejectTransferRequest$outboundSchema;
})(AccountTransfersRejectTransferRequest$ || (AccountTransfersRejectTransferRequest$ = {}));
export function accountTransfersRejectTransferRequestToJSON(accountTransfersRejectTransferRequest) {
    return JSON.stringify(AccountTransfersRejectTransferRequest$outboundSchema.parse(accountTransfersRejectTransferRequest));
}
export function accountTransfersRejectTransferRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTransfersRejectTransferRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTransfersRejectTransferRequest' from JSON`);
}
/** @internal */
export const AccountTransfersRejectTransferResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    RejectTransferResponse: components.RejectTransferResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "RejectTransferResponse": "rejectTransferResponse",
        "Status": "status",
    });
});
/** @internal */
export const AccountTransfersRejectTransferResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    rejectTransferResponse: components.RejectTransferResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        rejectTransferResponse: "RejectTransferResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransfersRejectTransferResponse$;
(function (AccountTransfersRejectTransferResponse$) {
    /** @deprecated use `AccountTransfersRejectTransferResponse$inboundSchema` instead. */
    AccountTransfersRejectTransferResponse$.inboundSchema = AccountTransfersRejectTransferResponse$inboundSchema;
    /** @deprecated use `AccountTransfersRejectTransferResponse$outboundSchema` instead. */
    AccountTransfersRejectTransferResponse$.outboundSchema = AccountTransfersRejectTransferResponse$outboundSchema;
})(AccountTransfersRejectTransferResponse$ || (AccountTransfersRejectTransferResponse$ = {}));
export function accountTransfersRejectTransferResponseToJSON(accountTransfersRejectTransferResponse) {
    return JSON.stringify(AccountTransfersRejectTransferResponse$outboundSchema.parse(accountTransfersRejectTransferResponse));
}
export function accountTransfersRejectTransferResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTransfersRejectTransferResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTransfersRejectTransferResponse' from JSON`);
}
//# sourceMappingURL=accounttransfersrejecttransfer.js.map