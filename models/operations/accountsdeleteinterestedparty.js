/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsDeleteInterestedPartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    interestedParty_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "interestedParty_id": "interestedPartyId",
    });
});
/** @internal */
export const AccountsDeleteInterestedPartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    interestedPartyId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        interestedPartyId: "interestedParty_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsDeleteInterestedPartyRequest$;
(function (AccountsDeleteInterestedPartyRequest$) {
    /** @deprecated use `AccountsDeleteInterestedPartyRequest$inboundSchema` instead. */
    AccountsDeleteInterestedPartyRequest$.inboundSchema = AccountsDeleteInterestedPartyRequest$inboundSchema;
    /** @deprecated use `AccountsDeleteInterestedPartyRequest$outboundSchema` instead. */
    AccountsDeleteInterestedPartyRequest$.outboundSchema = AccountsDeleteInterestedPartyRequest$outboundSchema;
})(AccountsDeleteInterestedPartyRequest$ || (AccountsDeleteInterestedPartyRequest$ = {}));
export function accountsDeleteInterestedPartyRequestToJSON(accountsDeleteInterestedPartyRequest) {
    return JSON.stringify(AccountsDeleteInterestedPartyRequest$outboundSchema.parse(accountsDeleteInterestedPartyRequest));
}
export function accountsDeleteInterestedPartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsDeleteInterestedPartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsDeleteInterestedPartyRequest' from JSON`);
}
/** @internal */
export const AccountsDeleteInterestedPartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Status": "status",
    });
});
/** @internal */
export const AccountsDeleteInterestedPartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsDeleteInterestedPartyResponse$;
(function (AccountsDeleteInterestedPartyResponse$) {
    /** @deprecated use `AccountsDeleteInterestedPartyResponse$inboundSchema` instead. */
    AccountsDeleteInterestedPartyResponse$.inboundSchema = AccountsDeleteInterestedPartyResponse$inboundSchema;
    /** @deprecated use `AccountsDeleteInterestedPartyResponse$outboundSchema` instead. */
    AccountsDeleteInterestedPartyResponse$.outboundSchema = AccountsDeleteInterestedPartyResponse$outboundSchema;
})(AccountsDeleteInterestedPartyResponse$ || (AccountsDeleteInterestedPartyResponse$ = {}));
export function accountsDeleteInterestedPartyResponseToJSON(accountsDeleteInterestedPartyResponse) {
    return JSON.stringify(AccountsDeleteInterestedPartyResponse$outboundSchema.parse(accountsDeleteInterestedPartyResponse));
}
export function accountsDeleteInterestedPartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsDeleteInterestedPartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsDeleteInterestedPartyResponse' from JSON`);
}
//# sourceMappingURL=accountsdeleteinterestedparty.js.map