/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdateInterestedPartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    interestedParty_id: z.string(),
    update_mask: z.string().optional(),
    InterestedPartyUpdate: components.InterestedPartyUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "interestedParty_id": "interestedPartyId",
        "update_mask": "updateMask",
        "InterestedPartyUpdate": "interestedPartyUpdate",
    });
});
/** @internal */
export const AccountsUpdateInterestedPartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    interestedPartyId: z.string(),
    updateMask: z.string().optional(),
    interestedPartyUpdate: components.InterestedPartyUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        interestedPartyId: "interestedParty_id",
        updateMask: "update_mask",
        interestedPartyUpdate: "InterestedPartyUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateInterestedPartyRequest$;
(function (AccountsUpdateInterestedPartyRequest$) {
    /** @deprecated use `AccountsUpdateInterestedPartyRequest$inboundSchema` instead. */
    AccountsUpdateInterestedPartyRequest$.inboundSchema = AccountsUpdateInterestedPartyRequest$inboundSchema;
    /** @deprecated use `AccountsUpdateInterestedPartyRequest$outboundSchema` instead. */
    AccountsUpdateInterestedPartyRequest$.outboundSchema = AccountsUpdateInterestedPartyRequest$outboundSchema;
})(AccountsUpdateInterestedPartyRequest$ || (AccountsUpdateInterestedPartyRequest$ = {}));
export function accountsUpdateInterestedPartyRequestToJSON(accountsUpdateInterestedPartyRequest) {
    return JSON.stringify(AccountsUpdateInterestedPartyRequest$outboundSchema.parse(accountsUpdateInterestedPartyRequest));
}
export function accountsUpdateInterestedPartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateInterestedPartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateInterestedPartyRequest' from JSON`);
}
/** @internal */
export const AccountsUpdateInterestedPartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    InterestedParty: components.InterestedParty$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "InterestedParty": "interestedParty",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdateInterestedPartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    interestedParty: components.InterestedParty$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        interestedParty: "InterestedParty",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateInterestedPartyResponse$;
(function (AccountsUpdateInterestedPartyResponse$) {
    /** @deprecated use `AccountsUpdateInterestedPartyResponse$inboundSchema` instead. */
    AccountsUpdateInterestedPartyResponse$.inboundSchema = AccountsUpdateInterestedPartyResponse$inboundSchema;
    /** @deprecated use `AccountsUpdateInterestedPartyResponse$outboundSchema` instead. */
    AccountsUpdateInterestedPartyResponse$.outboundSchema = AccountsUpdateInterestedPartyResponse$outboundSchema;
})(AccountsUpdateInterestedPartyResponse$ || (AccountsUpdateInterestedPartyResponse$ = {}));
export function accountsUpdateInterestedPartyResponseToJSON(accountsUpdateInterestedPartyResponse) {
    return JSON.stringify(AccountsUpdateInterestedPartyResponse$outboundSchema.parse(accountsUpdateInterestedPartyResponse));
}
export function accountsUpdateInterestedPartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateInterestedPartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateInterestedPartyResponse' from JSON`);
}
//# sourceMappingURL=accountsupdateinterestedparty.js.map