/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BasketOrdersServiceCreateBasketRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    BasketCreate: components.BasketCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "BasketCreate": "basketCreate",
    });
});
/** @internal */
export const BasketOrdersServiceCreateBasketRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    basketCreate: components.BasketCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        basketCreate: "BasketCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceCreateBasketRequest$;
(function (BasketOrdersServiceCreateBasketRequest$) {
    /** @deprecated use `BasketOrdersServiceCreateBasketRequest$inboundSchema` instead. */
    BasketOrdersServiceCreateBasketRequest$.inboundSchema = BasketOrdersServiceCreateBasketRequest$inboundSchema;
    /** @deprecated use `BasketOrdersServiceCreateBasketRequest$outboundSchema` instead. */
    BasketOrdersServiceCreateBasketRequest$.outboundSchema = BasketOrdersServiceCreateBasketRequest$outboundSchema;
})(BasketOrdersServiceCreateBasketRequest$ || (BasketOrdersServiceCreateBasketRequest$ = {}));
export function basketOrdersServiceCreateBasketRequestToJSON(basketOrdersServiceCreateBasketRequest) {
    return JSON.stringify(BasketOrdersServiceCreateBasketRequest$outboundSchema.parse(basketOrdersServiceCreateBasketRequest));
}
export function basketOrdersServiceCreateBasketRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceCreateBasketRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceCreateBasketRequest' from JSON`);
}
/** @internal */
export const BasketOrdersServiceCreateBasketResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Basket: components.Basket$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Basket": "basket",
        "Status": "status",
    });
});
/** @internal */
export const BasketOrdersServiceCreateBasketResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    basket: components.Basket$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        basket: "Basket",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceCreateBasketResponse$;
(function (BasketOrdersServiceCreateBasketResponse$) {
    /** @deprecated use `BasketOrdersServiceCreateBasketResponse$inboundSchema` instead. */
    BasketOrdersServiceCreateBasketResponse$.inboundSchema = BasketOrdersServiceCreateBasketResponse$inboundSchema;
    /** @deprecated use `BasketOrdersServiceCreateBasketResponse$outboundSchema` instead. */
    BasketOrdersServiceCreateBasketResponse$.outboundSchema = BasketOrdersServiceCreateBasketResponse$outboundSchema;
})(BasketOrdersServiceCreateBasketResponse$ || (BasketOrdersServiceCreateBasketResponse$ = {}));
export function basketOrdersServiceCreateBasketResponseToJSON(basketOrdersServiceCreateBasketResponse) {
    return JSON.stringify(BasketOrdersServiceCreateBasketResponse$outboundSchema.parse(basketOrdersServiceCreateBasketResponse));
}
export function basketOrdersServiceCreateBasketResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceCreateBasketResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceCreateBasketResponse' from JSON`);
}
//# sourceMappingURL=basketordersservicecreatebasket.js.map