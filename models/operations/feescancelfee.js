/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const FeesCancelFeeRequest$inboundSchema = z.object({
    account_id: z.string(),
    fee_id: z.string(),
    CancelFeeRequestCreate: components.CancelFeeRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "fee_id": "feeId",
        "CancelFeeRequestCreate": "cancelFeeRequestCreate",
    });
});
/** @internal */
export const FeesCancelFeeRequest$outboundSchema = z.object({
    accountId: z.string(),
    feeId: z.string(),
    cancelFeeRequestCreate: components.CancelFeeRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        feeId: "fee_id",
        cancelFeeRequestCreate: "CancelFeeRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeesCancelFeeRequest$;
(function (FeesCancelFeeRequest$) {
    /** @deprecated use `FeesCancelFeeRequest$inboundSchema` instead. */
    FeesCancelFeeRequest$.inboundSchema = FeesCancelFeeRequest$inboundSchema;
    /** @deprecated use `FeesCancelFeeRequest$outboundSchema` instead. */
    FeesCancelFeeRequest$.outboundSchema = FeesCancelFeeRequest$outboundSchema;
})(FeesCancelFeeRequest$ || (FeesCancelFeeRequest$ = {}));
export function feesCancelFeeRequestToJSON(feesCancelFeeRequest) {
    return JSON.stringify(FeesCancelFeeRequest$outboundSchema.parse(feesCancelFeeRequest));
}
export function feesCancelFeeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeesCancelFeeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeesCancelFeeRequest' from JSON`);
}
/** @internal */
export const FeesCancelFeeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    TransfersFee: components.TransfersFee$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "TransfersFee": "transfersFee",
        "Status": "status",
    });
});
/** @internal */
export const FeesCancelFeeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    transfersFee: components.TransfersFee$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        transfersFee: "TransfersFee",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeesCancelFeeResponse$;
(function (FeesCancelFeeResponse$) {
    /** @deprecated use `FeesCancelFeeResponse$inboundSchema` instead. */
    FeesCancelFeeResponse$.inboundSchema = FeesCancelFeeResponse$inboundSchema;
    /** @deprecated use `FeesCancelFeeResponse$outboundSchema` instead. */
    FeesCancelFeeResponse$.outboundSchema = FeesCancelFeeResponse$outboundSchema;
})(FeesCancelFeeResponse$ || (FeesCancelFeeResponse$ = {}));
export function feesCancelFeeResponseToJSON(feesCancelFeeResponse) {
    return JSON.stringify(FeesCancelFeeResponse$outboundSchema.parse(feesCancelFeeResponse));
}
export function feesCancelFeeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeesCancelFeeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeesCancelFeeResponse' from JSON`);
}
//# sourceMappingURL=feescancelfee.js.map