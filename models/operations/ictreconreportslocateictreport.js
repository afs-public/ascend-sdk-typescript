/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/**
 * The ICT program for which to locate the report.
 */
export var ProgramDateFilterProgram;
(function (ProgramDateFilterProgram) {
    ProgramDateFilterProgram["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    ProgramDateFilterProgram["BrokerPartner"] = "BROKER_PARTNER";
    ProgramDateFilterProgram["DepositOnly"] = "DEPOSIT_ONLY";
    ProgramDateFilterProgram["BankingPartner"] = "BANKING_PARTNER";
    ProgramDateFilterProgram["MoneyTransmitter"] = "MONEY_TRANSMITTER";
    ProgramDateFilterProgram["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    ProgramDateFilterProgram["DigitalPartner"] = "DIGITAL_PARTNER";
})(ProgramDateFilterProgram || (ProgramDateFilterProgram = {}));
/** @internal */
export const ProgramDateFilterProgram$inboundSchema = z.nativeEnum(ProgramDateFilterProgram);
/** @internal */
export const ProgramDateFilterProgram$outboundSchema = ProgramDateFilterProgram$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProgramDateFilterProgram$;
(function (ProgramDateFilterProgram$) {
    /** @deprecated use `ProgramDateFilterProgram$inboundSchema` instead. */
    ProgramDateFilterProgram$.inboundSchema = ProgramDateFilterProgram$inboundSchema;
    /** @deprecated use `ProgramDateFilterProgram$outboundSchema` instead. */
    ProgramDateFilterProgram$.outboundSchema = ProgramDateFilterProgram$outboundSchema;
})(ProgramDateFilterProgram$ || (ProgramDateFilterProgram$ = {}));
/** @internal */
export const IctReconReportsLocateIctReportRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    batch_id: z.string().optional(),
    "program_date_filter.program": ProgramDateFilterProgram$inboundSchema
        .optional(),
    "program_date_filter.process_date.year": z.number().int().optional(),
    "program_date_filter.process_date.month": z.number().int().optional(),
    "program_date_filter.process_date.day": z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "batch_id": "batchId",
        "program_date_filter.program": "programDateFilterProgram",
        "program_date_filter.process_date.year": "programDateFilterProcessDateYear",
        "program_date_filter.process_date.month": "programDateFilterProcessDateMonth",
        "program_date_filter.process_date.day": "programDateFilterProcessDateDay",
    });
});
/** @internal */
export const IctReconReportsLocateIctReportRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    batchId: z.string().optional(),
    programDateFilterProgram: ProgramDateFilterProgram$outboundSchema.optional(),
    programDateFilterProcessDateYear: z.number().int().optional(),
    programDateFilterProcessDateMonth: z.number().int().optional(),
    programDateFilterProcessDateDay: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        batchId: "batch_id",
        programDateFilterProgram: "program_date_filter.program",
        programDateFilterProcessDateYear: "program_date_filter.process_date.year",
        programDateFilterProcessDateMonth: "program_date_filter.process_date.month",
        programDateFilterProcessDateDay: "program_date_filter.process_date.day",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctReconReportsLocateIctReportRequest$;
(function (IctReconReportsLocateIctReportRequest$) {
    /** @deprecated use `IctReconReportsLocateIctReportRequest$inboundSchema` instead. */
    IctReconReportsLocateIctReportRequest$.inboundSchema = IctReconReportsLocateIctReportRequest$inboundSchema;
    /** @deprecated use `IctReconReportsLocateIctReportRequest$outboundSchema` instead. */
    IctReconReportsLocateIctReportRequest$.outboundSchema = IctReconReportsLocateIctReportRequest$outboundSchema;
})(IctReconReportsLocateIctReportRequest$ || (IctReconReportsLocateIctReportRequest$ = {}));
export function ictReconReportsLocateIctReportRequestToJSON(ictReconReportsLocateIctReportRequest) {
    return JSON.stringify(IctReconReportsLocateIctReportRequest$outboundSchema.parse(ictReconReportsLocateIctReportRequest));
}
export function ictReconReportsLocateIctReportRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctReconReportsLocateIctReportRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctReconReportsLocateIctReportRequest' from JSON`);
}
/** @internal */
export const IctReconReportsLocateIctReportResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LocateIctReportResponse: components.LocateIctReportResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LocateIctReportResponse": "locateIctReportResponse",
        "Status": "status",
    });
});
/** @internal */
export const IctReconReportsLocateIctReportResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    locateIctReportResponse: components.LocateIctReportResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        locateIctReportResponse: "LocateIctReportResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IctReconReportsLocateIctReportResponse$;
(function (IctReconReportsLocateIctReportResponse$) {
    /** @deprecated use `IctReconReportsLocateIctReportResponse$inboundSchema` instead. */
    IctReconReportsLocateIctReportResponse$.inboundSchema = IctReconReportsLocateIctReportResponse$inboundSchema;
    /** @deprecated use `IctReconReportsLocateIctReportResponse$outboundSchema` instead. */
    IctReconReportsLocateIctReportResponse$.outboundSchema = IctReconReportsLocateIctReportResponse$outboundSchema;
})(IctReconReportsLocateIctReportResponse$ || (IctReconReportsLocateIctReportResponse$ = {}));
export function ictReconReportsLocateIctReportResponseToJSON(ictReconReportsLocateIctReportResponse) {
    return JSON.stringify(IctReconReportsLocateIctReportResponse$outboundSchema.parse(ictReconReportsLocateIctReportResponse));
}
export function ictReconReportsLocateIctReportResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IctReconReportsLocateIctReportResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IctReconReportsLocateIctReportResponse' from JSON`);
}
//# sourceMappingURL=ictreconreportslocateictreport.js.map