/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingCancelExecutionRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    execution_id: z.string(),
    CancelExecutionRequestCreate: components.CancelExecutionRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "execution_id": "executionId",
        "CancelExecutionRequestCreate": "cancelExecutionRequestCreate",
    });
});
/** @internal */
export const BookingCancelExecutionRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    executionId: z.string(),
    cancelExecutionRequestCreate: components.CancelExecutionRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        executionId: "execution_id",
        cancelExecutionRequestCreate: "CancelExecutionRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCancelExecutionRequest$;
(function (BookingCancelExecutionRequest$) {
    /** @deprecated use `BookingCancelExecutionRequest$inboundSchema` instead. */
    BookingCancelExecutionRequest$.inboundSchema = BookingCancelExecutionRequest$inboundSchema;
    /** @deprecated use `BookingCancelExecutionRequest$outboundSchema` instead. */
    BookingCancelExecutionRequest$.outboundSchema = BookingCancelExecutionRequest$outboundSchema;
})(BookingCancelExecutionRequest$ || (BookingCancelExecutionRequest$ = {}));
export function bookingCancelExecutionRequestToJSON(bookingCancelExecutionRequest) {
    return JSON.stringify(BookingCancelExecutionRequest$outboundSchema.parse(bookingCancelExecutionRequest));
}
export function bookingCancelExecutionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCancelExecutionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCancelExecutionRequest' from JSON`);
}
/** @internal */
export const BookingCancelExecutionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CancelExecutionResponse: components.CancelExecutionResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "CancelExecutionResponse": "cancelExecutionResponse",
        "Status": "status",
    });
});
/** @internal */
export const BookingCancelExecutionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    cancelExecutionResponse: components.CancelExecutionResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        cancelExecutionResponse: "CancelExecutionResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCancelExecutionResponse$;
(function (BookingCancelExecutionResponse$) {
    /** @deprecated use `BookingCancelExecutionResponse$inboundSchema` instead. */
    BookingCancelExecutionResponse$.inboundSchema = BookingCancelExecutionResponse$inboundSchema;
    /** @deprecated use `BookingCancelExecutionResponse$outboundSchema` instead. */
    BookingCancelExecutionResponse$.outboundSchema = BookingCancelExecutionResponse$outboundSchema;
})(BookingCancelExecutionResponse$ || (BookingCancelExecutionResponse$ = {}));
export function bookingCancelExecutionResponseToJSON(bookingCancelExecutionResponse) {
    return JSON.stringify(BookingCancelExecutionResponse$outboundSchema.parse(bookingCancelExecutionResponse));
}
export function bookingCancelExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCancelExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCancelExecutionResponse' from JSON`);
}
//# sourceMappingURL=bookingcancelexecution.js.map