/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsAddPartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    AddPartyRequestCreate: components.AddPartyRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "AddPartyRequestCreate": "addPartyRequestCreate",
    });
});
/** @internal */
export const AccountsAddPartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    addPartyRequestCreate: components.AddPartyRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        addPartyRequestCreate: "AddPartyRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAddPartyRequest$;
(function (AccountsAddPartyRequest$) {
    /** @deprecated use `AccountsAddPartyRequest$inboundSchema` instead. */
    AccountsAddPartyRequest$.inboundSchema = AccountsAddPartyRequest$inboundSchema;
    /** @deprecated use `AccountsAddPartyRequest$outboundSchema` instead. */
    AccountsAddPartyRequest$.outboundSchema = AccountsAddPartyRequest$outboundSchema;
})(AccountsAddPartyRequest$ || (AccountsAddPartyRequest$ = {}));
export function accountsAddPartyRequestToJSON(accountsAddPartyRequest) {
    return JSON.stringify(AccountsAddPartyRequest$outboundSchema.parse(accountsAddPartyRequest));
}
export function accountsAddPartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAddPartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAddPartyRequest' from JSON`);
}
/** @internal */
export const AccountsAddPartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Party: components.Party$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Party": "party",
        "Status": "status",
    });
});
/** @internal */
export const AccountsAddPartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    party: components.Party$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        party: "Party",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAddPartyResponse$;
(function (AccountsAddPartyResponse$) {
    /** @deprecated use `AccountsAddPartyResponse$inboundSchema` instead. */
    AccountsAddPartyResponse$.inboundSchema = AccountsAddPartyResponse$inboundSchema;
    /** @deprecated use `AccountsAddPartyResponse$outboundSchema` instead. */
    AccountsAddPartyResponse$.outboundSchema = AccountsAddPartyResponse$outboundSchema;
})(AccountsAddPartyResponse$ || (AccountsAddPartyResponse$ = {}));
export function accountsAddPartyResponseToJSON(accountsAddPartyResponse) {
    return JSON.stringify(AccountsAddPartyResponse$outboundSchema.parse(accountsAddPartyResponse));
}
export function accountsAddPartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAddPartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAddPartyResponse' from JSON`);
}
//# sourceMappingURL=accountsaddparty.js.map