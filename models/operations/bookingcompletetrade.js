/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingCompleteTradeRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    CompleteTradeRequestCreate: components.CompleteTradeRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "CompleteTradeRequestCreate": "completeTradeRequestCreate",
    });
});
/** @internal */
export const BookingCompleteTradeRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    completeTradeRequestCreate: components.CompleteTradeRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        completeTradeRequestCreate: "CompleteTradeRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCompleteTradeRequest$;
(function (BookingCompleteTradeRequest$) {
    /** @deprecated use `BookingCompleteTradeRequest$inboundSchema` instead. */
    BookingCompleteTradeRequest$.inboundSchema = BookingCompleteTradeRequest$inboundSchema;
    /** @deprecated use `BookingCompleteTradeRequest$outboundSchema` instead. */
    BookingCompleteTradeRequest$.outboundSchema = BookingCompleteTradeRequest$outboundSchema;
})(BookingCompleteTradeRequest$ || (BookingCompleteTradeRequest$ = {}));
export function bookingCompleteTradeRequestToJSON(bookingCompleteTradeRequest) {
    return JSON.stringify(BookingCompleteTradeRequest$outboundSchema.parse(bookingCompleteTradeRequest));
}
export function bookingCompleteTradeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCompleteTradeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCompleteTradeRequest' from JSON`);
}
/** @internal */
export const BookingCompleteTradeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CompleteTradeResponse: components.CompleteTradeResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "CompleteTradeResponse": "completeTradeResponse",
        "Status": "status",
    });
});
/** @internal */
export const BookingCompleteTradeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    completeTradeResponse: components.CompleteTradeResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        completeTradeResponse: "CompleteTradeResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCompleteTradeResponse$;
(function (BookingCompleteTradeResponse$) {
    /** @deprecated use `BookingCompleteTradeResponse$inboundSchema` instead. */
    BookingCompleteTradeResponse$.inboundSchema = BookingCompleteTradeResponse$inboundSchema;
    /** @deprecated use `BookingCompleteTradeResponse$outboundSchema` instead. */
    BookingCompleteTradeResponse$.outboundSchema = BookingCompleteTradeResponse$outboundSchema;
})(BookingCompleteTradeResponse$ || (BookingCompleteTradeResponse$ = {}));
export function bookingCompleteTradeResponseToJSON(bookingCompleteTradeResponse) {
    return JSON.stringify(BookingCompleteTradeResponse$outboundSchema.parse(bookingCompleteTradeResponse));
}
export function bookingCompleteTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCompleteTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCompleteTradeResponse' from JSON`);
}
//# sourceMappingURL=bookingcompletetrade.js.map