/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingGetExecutionRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    execution_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "execution_id": "executionId",
    });
});
/** @internal */
export const BookingGetExecutionRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    executionId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        executionId: "execution_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetExecutionRequest$;
(function (BookingGetExecutionRequest$) {
    /** @deprecated use `BookingGetExecutionRequest$inboundSchema` instead. */
    BookingGetExecutionRequest$.inboundSchema = BookingGetExecutionRequest$inboundSchema;
    /** @deprecated use `BookingGetExecutionRequest$outboundSchema` instead. */
    BookingGetExecutionRequest$.outboundSchema = BookingGetExecutionRequest$outboundSchema;
})(BookingGetExecutionRequest$ || (BookingGetExecutionRequest$ = {}));
export function bookingGetExecutionRequestToJSON(bookingGetExecutionRequest) {
    return JSON.stringify(BookingGetExecutionRequest$outboundSchema.parse(bookingGetExecutionRequest));
}
export function bookingGetExecutionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetExecutionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetExecutionRequest' from JSON`);
}
/** @internal */
export const BookingGetExecutionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Execution: components.Execution$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Execution": "execution",
        "Status": "status",
    });
});
/** @internal */
export const BookingGetExecutionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    execution: components.Execution$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        execution: "Execution",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetExecutionResponse$;
(function (BookingGetExecutionResponse$) {
    /** @deprecated use `BookingGetExecutionResponse$inboundSchema` instead. */
    BookingGetExecutionResponse$.inboundSchema = BookingGetExecutionResponse$inboundSchema;
    /** @deprecated use `BookingGetExecutionResponse$outboundSchema` instead. */
    BookingGetExecutionResponse$.outboundSchema = BookingGetExecutionResponse$outboundSchema;
})(BookingGetExecutionResponse$ || (BookingGetExecutionResponse$ = {}));
export function bookingGetExecutionResponseToJSON(bookingGetExecutionResponse) {
    return JSON.stringify(BookingGetExecutionResponse$outboundSchema.parse(bookingGetExecutionResponse));
}
export function bookingGetExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetExecutionResponse' from JSON`);
}
//# sourceMappingURL=bookinggetexecution.js.map