/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsRemovePartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    party_id: z.string(),
    RemovePartyRequestCreate: components.RemovePartyRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "party_id": "partyId",
        "RemovePartyRequestCreate": "removePartyRequestCreate",
    });
});
/** @internal */
export const AccountsRemovePartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    partyId: z.string(),
    removePartyRequestCreate: components.RemovePartyRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        partyId: "party_id",
        removePartyRequestCreate: "RemovePartyRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsRemovePartyRequest$;
(function (AccountsRemovePartyRequest$) {
    /** @deprecated use `AccountsRemovePartyRequest$inboundSchema` instead. */
    AccountsRemovePartyRequest$.inboundSchema = AccountsRemovePartyRequest$inboundSchema;
    /** @deprecated use `AccountsRemovePartyRequest$outboundSchema` instead. */
    AccountsRemovePartyRequest$.outboundSchema = AccountsRemovePartyRequest$outboundSchema;
})(AccountsRemovePartyRequest$ || (AccountsRemovePartyRequest$ = {}));
export function accountsRemovePartyRequestToJSON(accountsRemovePartyRequest) {
    return JSON.stringify(AccountsRemovePartyRequest$outboundSchema.parse(accountsRemovePartyRequest));
}
export function accountsRemovePartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsRemovePartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsRemovePartyRequest' from JSON`);
}
/** @internal */
export const AccountsRemovePartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Status": "status",
    });
});
/** @internal */
export const AccountsRemovePartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsRemovePartyResponse$;
(function (AccountsRemovePartyResponse$) {
    /** @deprecated use `AccountsRemovePartyResponse$inboundSchema` instead. */
    AccountsRemovePartyResponse$.inboundSchema = AccountsRemovePartyResponse$inboundSchema;
    /** @deprecated use `AccountsRemovePartyResponse$outboundSchema` instead. */
    AccountsRemovePartyResponse$.outboundSchema = AccountsRemovePartyResponse$outboundSchema;
})(AccountsRemovePartyResponse$ || (AccountsRemovePartyResponse$ = {}));
export function accountsRemovePartyResponseToJSON(accountsRemovePartyResponse) {
    return JSON.stringify(AccountsRemovePartyResponse$outboundSchema.parse(accountsRemovePartyResponse));
}
export function accountsRemovePartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsRemovePartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsRemovePartyResponse' from JSON`);
}
//# sourceMappingURL=accountsremoveparty.js.map