/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/**
 * The view to return. Defaults to `FULL`.
 */
export var QueryParamView;
(function (QueryParamView) {
    QueryParamView["AccountViewUnspecified"] = "ACCOUNT_VIEW_UNSPECIFIED";
    QueryParamView["Basic"] = "BASIC";
    QueryParamView["Full"] = "FULL";
})(QueryParamView || (QueryParamView = {}));
/** @internal */
export const QueryParamView$inboundSchema = z.nativeEnum(QueryParamView);
/** @internal */
export const QueryParamView$outboundSchema = QueryParamView$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamView$;
(function (QueryParamView$) {
    /** @deprecated use `QueryParamView$inboundSchema` instead. */
    QueryParamView$.inboundSchema = QueryParamView$inboundSchema;
    /** @deprecated use `QueryParamView$outboundSchema` instead. */
    QueryParamView$.outboundSchema = QueryParamView$outboundSchema;
})(QueryParamView$ || (QueryParamView$ = {}));
/** @internal */
export const AccountsGetAccountRequest$inboundSchema = z.object({
    account_id: z.string(),
    view: QueryParamView$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
    });
});
/** @internal */
export const AccountsGetAccountRequest$outboundSchema = z.object({
    accountId: z.string(),
    view: QueryParamView$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsGetAccountRequest$;
(function (AccountsGetAccountRequest$) {
    /** @deprecated use `AccountsGetAccountRequest$inboundSchema` instead. */
    AccountsGetAccountRequest$.inboundSchema = AccountsGetAccountRequest$inboundSchema;
    /** @deprecated use `AccountsGetAccountRequest$outboundSchema` instead. */
    AccountsGetAccountRequest$.outboundSchema = AccountsGetAccountRequest$outboundSchema;
})(AccountsGetAccountRequest$ || (AccountsGetAccountRequest$ = {}));
export function accountsGetAccountRequestToJSON(accountsGetAccountRequest) {
    return JSON.stringify(AccountsGetAccountRequest$outboundSchema.parse(accountsGetAccountRequest));
}
export function accountsGetAccountRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsGetAccountRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsGetAccountRequest' from JSON`);
}
/** @internal */
export const AccountsGetAccountResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Account: components.Account$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Account": "account",
        "Status": "status",
    });
});
/** @internal */
export const AccountsGetAccountResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    account: components.Account$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        account: "Account",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsGetAccountResponse$;
(function (AccountsGetAccountResponse$) {
    /** @deprecated use `AccountsGetAccountResponse$inboundSchema` instead. */
    AccountsGetAccountResponse$.inboundSchema = AccountsGetAccountResponse$inboundSchema;
    /** @deprecated use `AccountsGetAccountResponse$outboundSchema` instead. */
    AccountsGetAccountResponse$.outboundSchema = AccountsGetAccountResponse$outboundSchema;
})(AccountsGetAccountResponse$ || (AccountsGetAccountResponse$ = {}));
export function accountsGetAccountResponseToJSON(accountsGetAccountResponse) {
    return JSON.stringify(AccountsGetAccountResponse$outboundSchema.parse(accountsGetAccountResponse));
}
export function accountsGetAccountResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsGetAccountResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsGetAccountResponse' from JSON`);
}
//# sourceMappingURL=accountsgetaccount.js.map