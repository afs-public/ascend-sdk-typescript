/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AssetsGetAssetCorrespondentRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    asset_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "asset_id": "assetId",
    });
});
/** @internal */
export const AssetsGetAssetCorrespondentRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    assetId: z.string(),
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        assetId: "asset_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetsGetAssetCorrespondentRequest$;
(function (AssetsGetAssetCorrespondentRequest$) {
    /** @deprecated use `AssetsGetAssetCorrespondentRequest$inboundSchema` instead. */
    AssetsGetAssetCorrespondentRequest$.inboundSchema = AssetsGetAssetCorrespondentRequest$inboundSchema;
    /** @deprecated use `AssetsGetAssetCorrespondentRequest$outboundSchema` instead. */
    AssetsGetAssetCorrespondentRequest$.outboundSchema = AssetsGetAssetCorrespondentRequest$outboundSchema;
})(AssetsGetAssetCorrespondentRequest$ || (AssetsGetAssetCorrespondentRequest$ = {}));
export function assetsGetAssetCorrespondentRequestToJSON(assetsGetAssetCorrespondentRequest) {
    return JSON.stringify(AssetsGetAssetCorrespondentRequest$outboundSchema.parse(assetsGetAssetCorrespondentRequest));
}
export function assetsGetAssetCorrespondentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetsGetAssetCorrespondentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetsGetAssetCorrespondentRequest' from JSON`);
}
/** @internal */
export const AssetsGetAssetCorrespondentResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Asset: components.Asset$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Asset": "asset",
        "Status": "status",
    });
});
/** @internal */
export const AssetsGetAssetCorrespondentResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    asset: components.Asset$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        asset: "Asset",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssetsGetAssetCorrespondentResponse$;
(function (AssetsGetAssetCorrespondentResponse$) {
    /** @deprecated use `AssetsGetAssetCorrespondentResponse$inboundSchema` instead. */
    AssetsGetAssetCorrespondentResponse$.inboundSchema = AssetsGetAssetCorrespondentResponse$inboundSchema;
    /** @deprecated use `AssetsGetAssetCorrespondentResponse$outboundSchema` instead. */
    AssetsGetAssetCorrespondentResponse$.outboundSchema = AssetsGetAssetCorrespondentResponse$outboundSchema;
})(AssetsGetAssetCorrespondentResponse$ || (AssetsGetAssetCorrespondentResponse$ = {}));
export function assetsGetAssetCorrespondentResponseToJSON(assetsGetAssetCorrespondentResponse) {
    return JSON.stringify(AssetsGetAssetCorrespondentResponse$outboundSchema.parse(assetsGetAssetCorrespondentResponse));
}
export function assetsGetAssetCorrespondentResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssetsGetAssetCorrespondentResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssetsGetAssetCorrespondentResponse' from JSON`);
}
//# sourceMappingURL=assetsgetassetcorrespondent.js.map