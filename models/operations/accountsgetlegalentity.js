/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsGetLegalEntityRequest$inboundSchema = z.object({
    legalEntity_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "legalEntity_id": "legalEntityId",
    });
});
/** @internal */
export const AccountsGetLegalEntityRequest$outboundSchema = z.object({
    legalEntityId: z.string(),
}).transform((v) => {
    return remap$(v, {
        legalEntityId: "legalEntity_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsGetLegalEntityRequest$;
(function (AccountsGetLegalEntityRequest$) {
    /** @deprecated use `AccountsGetLegalEntityRequest$inboundSchema` instead. */
    AccountsGetLegalEntityRequest$.inboundSchema = AccountsGetLegalEntityRequest$inboundSchema;
    /** @deprecated use `AccountsGetLegalEntityRequest$outboundSchema` instead. */
    AccountsGetLegalEntityRequest$.outboundSchema = AccountsGetLegalEntityRequest$outboundSchema;
})(AccountsGetLegalEntityRequest$ || (AccountsGetLegalEntityRequest$ = {}));
export function accountsGetLegalEntityRequestToJSON(accountsGetLegalEntityRequest) {
    return JSON.stringify(AccountsGetLegalEntityRequest$outboundSchema.parse(accountsGetLegalEntityRequest));
}
export function accountsGetLegalEntityRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsGetLegalEntityRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsGetLegalEntityRequest' from JSON`);
}
/** @internal */
export const AccountsGetLegalEntityResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LegalEntity: components.LegalEntity$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LegalEntity": "legalEntity",
        "Status": "status",
    });
});
/** @internal */
export const AccountsGetLegalEntityResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    legalEntity: components.LegalEntity$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        legalEntity: "LegalEntity",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsGetLegalEntityResponse$;
(function (AccountsGetLegalEntityResponse$) {
    /** @deprecated use `AccountsGetLegalEntityResponse$inboundSchema` instead. */
    AccountsGetLegalEntityResponse$.inboundSchema = AccountsGetLegalEntityResponse$inboundSchema;
    /** @deprecated use `AccountsGetLegalEntityResponse$outboundSchema` instead. */
    AccountsGetLegalEntityResponse$.outboundSchema = AccountsGetLegalEntityResponse$outboundSchema;
})(AccountsGetLegalEntityResponse$ || (AccountsGetLegalEntityResponse$ = {}));
export function accountsGetLegalEntityResponseToJSON(accountsGetLegalEntityResponse) {
    return JSON.stringify(AccountsGetLegalEntityResponse$outboundSchema.parse(accountsGetLegalEntityResponse));
}
export function accountsGetLegalEntityResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsGetLegalEntityResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsGetLegalEntityResponse' from JSON`);
}
//# sourceMappingURL=accountsgetlegalentity.js.map