/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsAssignLargeTraderLegalEntityRequest$inboundSchema = z.object({
    legalEntity_id: z.string(),
    AssignLargeTraderRequestCreate: components.AssignLargeTraderRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "legalEntity_id": "legalEntityId",
        "AssignLargeTraderRequestCreate": "assignLargeTraderRequestCreate",
    });
});
/** @internal */
export const AccountsAssignLargeTraderLegalEntityRequest$outboundSchema = z.object({
    legalEntityId: z.string(),
    assignLargeTraderRequestCreate: components.AssignLargeTraderRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        legalEntityId: "legalEntity_id",
        assignLargeTraderRequestCreate: "AssignLargeTraderRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAssignLargeTraderLegalEntityRequest$;
(function (AccountsAssignLargeTraderLegalEntityRequest$) {
    /** @deprecated use `AccountsAssignLargeTraderLegalEntityRequest$inboundSchema` instead. */
    AccountsAssignLargeTraderLegalEntityRequest$.inboundSchema = AccountsAssignLargeTraderLegalEntityRequest$inboundSchema;
    /** @deprecated use `AccountsAssignLargeTraderLegalEntityRequest$outboundSchema` instead. */
    AccountsAssignLargeTraderLegalEntityRequest$.outboundSchema = AccountsAssignLargeTraderLegalEntityRequest$outboundSchema;
})(AccountsAssignLargeTraderLegalEntityRequest$ || (AccountsAssignLargeTraderLegalEntityRequest$ = {}));
export function accountsAssignLargeTraderLegalEntityRequestToJSON(accountsAssignLargeTraderLegalEntityRequest) {
    return JSON.stringify(AccountsAssignLargeTraderLegalEntityRequest$outboundSchema.parse(accountsAssignLargeTraderLegalEntityRequest));
}
export function accountsAssignLargeTraderLegalEntityRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAssignLargeTraderLegalEntityRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAssignLargeTraderLegalEntityRequest' from JSON`);
}
/** @internal */
export const AccountsAssignLargeTraderLegalEntityResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LargeTrader: components.LargeTrader$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LargeTrader": "largeTrader",
        "Status": "status",
    });
});
/** @internal */
export const AccountsAssignLargeTraderLegalEntityResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    largeTrader: components.LargeTrader$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        largeTrader: "LargeTrader",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAssignLargeTraderLegalEntityResponse$;
(function (AccountsAssignLargeTraderLegalEntityResponse$) {
    /** @deprecated use `AccountsAssignLargeTraderLegalEntityResponse$inboundSchema` instead. */
    AccountsAssignLargeTraderLegalEntityResponse$.inboundSchema = AccountsAssignLargeTraderLegalEntityResponse$inboundSchema;
    /** @deprecated use `AccountsAssignLargeTraderLegalEntityResponse$outboundSchema` instead. */
    AccountsAssignLargeTraderLegalEntityResponse$.outboundSchema = AccountsAssignLargeTraderLegalEntityResponse$outboundSchema;
})(AccountsAssignLargeTraderLegalEntityResponse$ || (AccountsAssignLargeTraderLegalEntityResponse$ = {}));
export function accountsAssignLargeTraderLegalEntityResponseToJSON(accountsAssignLargeTraderLegalEntityResponse) {
    return JSON.stringify(AccountsAssignLargeTraderLegalEntityResponse$outboundSchema.parse(accountsAssignLargeTraderLegalEntityResponse));
}
export function accountsAssignLargeTraderLegalEntityResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAssignLargeTraderLegalEntityResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAssignLargeTraderLegalEntityResponse' from JSON`);
}
//# sourceMappingURL=accountsassignlargetraderlegalentity.js.map