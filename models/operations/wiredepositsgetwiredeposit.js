/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const WireDepositsGetWireDepositRequest$inboundSchema = z.object({
    account_id: z.string(),
    wireDeposit_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "wireDeposit_id": "wireDepositId",
    });
});
/** @internal */
export const WireDepositsGetWireDepositRequest$outboundSchema = z.object({
    accountId: z.string(),
    wireDepositId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        wireDepositId: "wireDeposit_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositsGetWireDepositRequest$;
(function (WireDepositsGetWireDepositRequest$) {
    /** @deprecated use `WireDepositsGetWireDepositRequest$inboundSchema` instead. */
    WireDepositsGetWireDepositRequest$.inboundSchema = WireDepositsGetWireDepositRequest$inboundSchema;
    /** @deprecated use `WireDepositsGetWireDepositRequest$outboundSchema` instead. */
    WireDepositsGetWireDepositRequest$.outboundSchema = WireDepositsGetWireDepositRequest$outboundSchema;
})(WireDepositsGetWireDepositRequest$ || (WireDepositsGetWireDepositRequest$ = {}));
export function wireDepositsGetWireDepositRequestToJSON(wireDepositsGetWireDepositRequest) {
    return JSON.stringify(WireDepositsGetWireDepositRequest$outboundSchema.parse(wireDepositsGetWireDepositRequest));
}
export function wireDepositsGetWireDepositRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDepositsGetWireDepositRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDepositsGetWireDepositRequest' from JSON`);
}
/** @internal */
export const WireDepositsGetWireDepositResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    WireDeposit: components.WireDeposit$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "WireDeposit": "wireDeposit",
        "Status": "status",
    });
});
/** @internal */
export const WireDepositsGetWireDepositResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    wireDeposit: components.WireDeposit$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        wireDeposit: "WireDeposit",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WireDepositsGetWireDepositResponse$;
(function (WireDepositsGetWireDepositResponse$) {
    /** @deprecated use `WireDepositsGetWireDepositResponse$inboundSchema` instead. */
    WireDepositsGetWireDepositResponse$.inboundSchema = WireDepositsGetWireDepositResponse$inboundSchema;
    /** @deprecated use `WireDepositsGetWireDepositResponse$outboundSchema` instead. */
    WireDepositsGetWireDepositResponse$.outboundSchema = WireDepositsGetWireDepositResponse$outboundSchema;
})(WireDepositsGetWireDepositResponse$ || (WireDepositsGetWireDepositResponse$ = {}));
export function wireDepositsGetWireDepositResponseToJSON(wireDepositsGetWireDepositResponse) {
    return JSON.stringify(WireDepositsGetWireDepositResponse$outboundSchema.parse(wireDepositsGetWireDepositResponse));
}
export function wireDepositsGetWireDepositResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WireDepositsGetWireDepositResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WireDepositsGetWireDepositResponse' from JSON`);
}
//# sourceMappingURL=wiredepositsgetwiredeposit.js.map