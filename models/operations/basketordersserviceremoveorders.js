/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BasketOrdersServiceRemoveOrdersRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    basket_id: z.string(),
    RemoveOrdersRequestCreate: components.RemoveOrdersRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "basket_id": "basketId",
        "RemoveOrdersRequestCreate": "removeOrdersRequestCreate",
    });
});
/** @internal */
export const BasketOrdersServiceRemoveOrdersRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    basketId: z.string(),
    removeOrdersRequestCreate: components.RemoveOrdersRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        basketId: "basket_id",
        removeOrdersRequestCreate: "RemoveOrdersRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceRemoveOrdersRequest$;
(function (BasketOrdersServiceRemoveOrdersRequest$) {
    /** @deprecated use `BasketOrdersServiceRemoveOrdersRequest$inboundSchema` instead. */
    BasketOrdersServiceRemoveOrdersRequest$.inboundSchema = BasketOrdersServiceRemoveOrdersRequest$inboundSchema;
    /** @deprecated use `BasketOrdersServiceRemoveOrdersRequest$outboundSchema` instead. */
    BasketOrdersServiceRemoveOrdersRequest$.outboundSchema = BasketOrdersServiceRemoveOrdersRequest$outboundSchema;
})(BasketOrdersServiceRemoveOrdersRequest$ || (BasketOrdersServiceRemoveOrdersRequest$ = {}));
export function basketOrdersServiceRemoveOrdersRequestToJSON(basketOrdersServiceRemoveOrdersRequest) {
    return JSON.stringify(BasketOrdersServiceRemoveOrdersRequest$outboundSchema.parse(basketOrdersServiceRemoveOrdersRequest));
}
export function basketOrdersServiceRemoveOrdersRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceRemoveOrdersRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceRemoveOrdersRequest' from JSON`);
}
/** @internal */
export const BasketOrdersServiceRemoveOrdersResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    RemoveOrdersResponse: components.RemoveOrdersResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "RemoveOrdersResponse": "removeOrdersResponse",
        "Status": "status",
    });
});
/** @internal */
export const BasketOrdersServiceRemoveOrdersResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    removeOrdersResponse: components.RemoveOrdersResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        removeOrdersResponse: "RemoveOrdersResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceRemoveOrdersResponse$;
(function (BasketOrdersServiceRemoveOrdersResponse$) {
    /** @deprecated use `BasketOrdersServiceRemoveOrdersResponse$inboundSchema` instead. */
    BasketOrdersServiceRemoveOrdersResponse$.inboundSchema = BasketOrdersServiceRemoveOrdersResponse$inboundSchema;
    /** @deprecated use `BasketOrdersServiceRemoveOrdersResponse$outboundSchema` instead. */
    BasketOrdersServiceRemoveOrdersResponse$.outboundSchema = BasketOrdersServiceRemoveOrdersResponse$outboundSchema;
})(BasketOrdersServiceRemoveOrdersResponse$ || (BasketOrdersServiceRemoveOrdersResponse$ = {}));
export function basketOrdersServiceRemoveOrdersResponseToJSON(basketOrdersServiceRemoveOrdersResponse) {
    return JSON.stringify(BasketOrdersServiceRemoveOrdersResponse$outboundSchema.parse(basketOrdersServiceRemoveOrdersResponse));
}
export function basketOrdersServiceRemoveOrdersResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceRemoveOrdersResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceRemoveOrdersResponse' from JSON`);
}
//# sourceMappingURL=basketordersserviceremoveorders.js.map