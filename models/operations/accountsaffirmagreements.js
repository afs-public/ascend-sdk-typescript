/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsAffirmAgreementsRequest$inboundSchema = z.object({
    account_id: z.string(),
    AffirmAgreementsRequestCreate: components.AffirmAgreementsRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "AffirmAgreementsRequestCreate": "affirmAgreementsRequestCreate",
    });
});
/** @internal */
export const AccountsAffirmAgreementsRequest$outboundSchema = z.object({
    accountId: z.string(),
    affirmAgreementsRequestCreate: components.AffirmAgreementsRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        affirmAgreementsRequestCreate: "AffirmAgreementsRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAffirmAgreementsRequest$;
(function (AccountsAffirmAgreementsRequest$) {
    /** @deprecated use `AccountsAffirmAgreementsRequest$inboundSchema` instead. */
    AccountsAffirmAgreementsRequest$.inboundSchema = AccountsAffirmAgreementsRequest$inboundSchema;
    /** @deprecated use `AccountsAffirmAgreementsRequest$outboundSchema` instead. */
    AccountsAffirmAgreementsRequest$.outboundSchema = AccountsAffirmAgreementsRequest$outboundSchema;
})(AccountsAffirmAgreementsRequest$ || (AccountsAffirmAgreementsRequest$ = {}));
export function accountsAffirmAgreementsRequestToJSON(accountsAffirmAgreementsRequest) {
    return JSON.stringify(AccountsAffirmAgreementsRequest$outboundSchema.parse(accountsAffirmAgreementsRequest));
}
export function accountsAffirmAgreementsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAffirmAgreementsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAffirmAgreementsRequest' from JSON`);
}
/** @internal */
export const AccountsAffirmAgreementsResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    AffirmAgreementsResponse: components.AffirmAgreementsResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "AffirmAgreementsResponse": "affirmAgreementsResponse",
        "Status": "status",
    });
});
/** @internal */
export const AccountsAffirmAgreementsResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    affirmAgreementsResponse: components.AffirmAgreementsResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        affirmAgreementsResponse: "AffirmAgreementsResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAffirmAgreementsResponse$;
(function (AccountsAffirmAgreementsResponse$) {
    /** @deprecated use `AccountsAffirmAgreementsResponse$inboundSchema` instead. */
    AccountsAffirmAgreementsResponse$.inboundSchema = AccountsAffirmAgreementsResponse$inboundSchema;
    /** @deprecated use `AccountsAffirmAgreementsResponse$outboundSchema` instead. */
    AccountsAffirmAgreementsResponse$.outboundSchema = AccountsAffirmAgreementsResponse$outboundSchema;
})(AccountsAffirmAgreementsResponse$ || (AccountsAffirmAgreementsResponse$ = {}));
export function accountsAffirmAgreementsResponseToJSON(accountsAffirmAgreementsResponse) {
    return JSON.stringify(AccountsAffirmAgreementsResponse$outboundSchema.parse(accountsAffirmAgreementsResponse));
}
export function accountsAffirmAgreementsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAffirmAgreementsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAffirmAgreementsResponse' from JSON`);
}
//# sourceMappingURL=accountsaffirmagreements.js.map