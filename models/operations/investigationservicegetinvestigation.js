/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const InvestigationServiceGetInvestigationRequest$inboundSchema = z.object({
    investigation_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "investigation_id": "investigationId",
    });
});
/** @internal */
export const InvestigationServiceGetInvestigationRequest$outboundSchema = z.object({
    investigationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        investigationId: "investigation_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationServiceGetInvestigationRequest$;
(function (InvestigationServiceGetInvestigationRequest$) {
    /** @deprecated use `InvestigationServiceGetInvestigationRequest$inboundSchema` instead. */
    InvestigationServiceGetInvestigationRequest$.inboundSchema = InvestigationServiceGetInvestigationRequest$inboundSchema;
    /** @deprecated use `InvestigationServiceGetInvestigationRequest$outboundSchema` instead. */
    InvestigationServiceGetInvestigationRequest$.outboundSchema = InvestigationServiceGetInvestigationRequest$outboundSchema;
})(InvestigationServiceGetInvestigationRequest$ || (InvestigationServiceGetInvestigationRequest$ = {}));
export function investigationServiceGetInvestigationRequestToJSON(investigationServiceGetInvestigationRequest) {
    return JSON.stringify(InvestigationServiceGetInvestigationRequest$outboundSchema.parse(investigationServiceGetInvestigationRequest));
}
export function investigationServiceGetInvestigationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationServiceGetInvestigationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationServiceGetInvestigationRequest' from JSON`);
}
/** @internal */
export const InvestigationServiceGetInvestigationResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Investigation: components.Investigation$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Investigation": "investigation",
        "Status": "status",
    });
});
/** @internal */
export const InvestigationServiceGetInvestigationResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    investigation: components.Investigation$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        investigation: "Investigation",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationServiceGetInvestigationResponse$;
(function (InvestigationServiceGetInvestigationResponse$) {
    /** @deprecated use `InvestigationServiceGetInvestigationResponse$inboundSchema` instead. */
    InvestigationServiceGetInvestigationResponse$.inboundSchema = InvestigationServiceGetInvestigationResponse$inboundSchema;
    /** @deprecated use `InvestigationServiceGetInvestigationResponse$outboundSchema` instead. */
    InvestigationServiceGetInvestigationResponse$.outboundSchema = InvestigationServiceGetInvestigationResponse$outboundSchema;
})(InvestigationServiceGetInvestigationResponse$ || (InvestigationServiceGetInvestigationResponse$ = {}));
export function investigationServiceGetInvestigationResponseToJSON(investigationServiceGetInvestigationResponse) {
    return JSON.stringify(InvestigationServiceGetInvestigationResponse$outboundSchema.parse(investigationServiceGetInvestigationResponse));
}
export function investigationServiceGetInvestigationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationServiceGetInvestigationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationServiceGetInvestigationResponse' from JSON`);
}
//# sourceMappingURL=investigationservicegetinvestigation.js.map