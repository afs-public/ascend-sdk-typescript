/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BasketOrdersServiceSubmitBasketRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    basket_id: z.string(),
    SubmitBasketRequestCreate: components.SubmitBasketRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "basket_id": "basketId",
        "SubmitBasketRequestCreate": "submitBasketRequestCreate",
    });
});
/** @internal */
export const BasketOrdersServiceSubmitBasketRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    basketId: z.string(),
    submitBasketRequestCreate: components.SubmitBasketRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        basketId: "basket_id",
        submitBasketRequestCreate: "SubmitBasketRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceSubmitBasketRequest$;
(function (BasketOrdersServiceSubmitBasketRequest$) {
    /** @deprecated use `BasketOrdersServiceSubmitBasketRequest$inboundSchema` instead. */
    BasketOrdersServiceSubmitBasketRequest$.inboundSchema = BasketOrdersServiceSubmitBasketRequest$inboundSchema;
    /** @deprecated use `BasketOrdersServiceSubmitBasketRequest$outboundSchema` instead. */
    BasketOrdersServiceSubmitBasketRequest$.outboundSchema = BasketOrdersServiceSubmitBasketRequest$outboundSchema;
})(BasketOrdersServiceSubmitBasketRequest$ || (BasketOrdersServiceSubmitBasketRequest$ = {}));
export function basketOrdersServiceSubmitBasketRequestToJSON(basketOrdersServiceSubmitBasketRequest) {
    return JSON.stringify(BasketOrdersServiceSubmitBasketRequest$outboundSchema.parse(basketOrdersServiceSubmitBasketRequest));
}
export function basketOrdersServiceSubmitBasketRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceSubmitBasketRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceSubmitBasketRequest' from JSON`);
}
/** @internal */
export const BasketOrdersServiceSubmitBasketResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Basket: components.Basket$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Basket": "basket",
        "Status": "status",
    });
});
/** @internal */
export const BasketOrdersServiceSubmitBasketResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    basket: components.Basket$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        basket: "Basket",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BasketOrdersServiceSubmitBasketResponse$;
(function (BasketOrdersServiceSubmitBasketResponse$) {
    /** @deprecated use `BasketOrdersServiceSubmitBasketResponse$inboundSchema` instead. */
    BasketOrdersServiceSubmitBasketResponse$.inboundSchema = BasketOrdersServiceSubmitBasketResponse$inboundSchema;
    /** @deprecated use `BasketOrdersServiceSubmitBasketResponse$outboundSchema` instead. */
    BasketOrdersServiceSubmitBasketResponse$.outboundSchema = BasketOrdersServiceSubmitBasketResponse$outboundSchema;
})(BasketOrdersServiceSubmitBasketResponse$ || (BasketOrdersServiceSubmitBasketResponse$ = {}));
export function basketOrdersServiceSubmitBasketResponseToJSON(basketOrdersServiceSubmitBasketResponse) {
    return JSON.stringify(BasketOrdersServiceSubmitBasketResponse$outboundSchema.parse(basketOrdersServiceSubmitBasketResponse));
}
export function basketOrdersServiceSubmitBasketResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BasketOrdersServiceSubmitBasketResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BasketOrdersServiceSubmitBasketResponse' from JSON`);
}
//# sourceMappingURL=basketordersservicesubmitbasket.js.map