/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsDeleteTrustedContactRequest$inboundSchema = z.object({
    account_id: z.string(),
    trustedContact_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trustedContact_id": "trustedContactId",
    });
});
/** @internal */
export const AccountsDeleteTrustedContactRequest$outboundSchema = z.object({
    accountId: z.string(),
    trustedContactId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        trustedContactId: "trustedContact_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsDeleteTrustedContactRequest$;
(function (AccountsDeleteTrustedContactRequest$) {
    /** @deprecated use `AccountsDeleteTrustedContactRequest$inboundSchema` instead. */
    AccountsDeleteTrustedContactRequest$.inboundSchema = AccountsDeleteTrustedContactRequest$inboundSchema;
    /** @deprecated use `AccountsDeleteTrustedContactRequest$outboundSchema` instead. */
    AccountsDeleteTrustedContactRequest$.outboundSchema = AccountsDeleteTrustedContactRequest$outboundSchema;
})(AccountsDeleteTrustedContactRequest$ || (AccountsDeleteTrustedContactRequest$ = {}));
export function accountsDeleteTrustedContactRequestToJSON(accountsDeleteTrustedContactRequest) {
    return JSON.stringify(AccountsDeleteTrustedContactRequest$outboundSchema.parse(accountsDeleteTrustedContactRequest));
}
export function accountsDeleteTrustedContactRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsDeleteTrustedContactRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsDeleteTrustedContactRequest' from JSON`);
}
/** @internal */
export const AccountsDeleteTrustedContactResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Status": "status",
    });
});
/** @internal */
export const AccountsDeleteTrustedContactResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsDeleteTrustedContactResponse$;
(function (AccountsDeleteTrustedContactResponse$) {
    /** @deprecated use `AccountsDeleteTrustedContactResponse$inboundSchema` instead. */
    AccountsDeleteTrustedContactResponse$.inboundSchema = AccountsDeleteTrustedContactResponse$inboundSchema;
    /** @deprecated use `AccountsDeleteTrustedContactResponse$outboundSchema` instead. */
    AccountsDeleteTrustedContactResponse$.outboundSchema = AccountsDeleteTrustedContactResponse$outboundSchema;
})(AccountsDeleteTrustedContactResponse$ || (AccountsDeleteTrustedContactResponse$ = {}));
export function accountsDeleteTrustedContactResponseToJSON(accountsDeleteTrustedContactResponse) {
    return JSON.stringify(AccountsDeleteTrustedContactResponse$outboundSchema.parse(accountsDeleteTrustedContactResponse));
}
export function accountsDeleteTrustedContactResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsDeleteTrustedContactResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsDeleteTrustedContactResponse' from JSON`);
}
//# sourceMappingURL=accountsdeletetrustedcontact.js.map