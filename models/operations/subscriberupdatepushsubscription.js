/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const SubscriberUpdatePushSubscriptionRequest$inboundSchema = z.object({
    subscription_id: z.string(),
    update_mask: z.string().optional(),
    PushSubscriptionUpdate: components.PushSubscriptionUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "subscription_id": "subscriptionId",
        "update_mask": "updateMask",
        "PushSubscriptionUpdate": "pushSubscriptionUpdate",
    });
});
/** @internal */
export const SubscriberUpdatePushSubscriptionRequest$outboundSchema = z.object({
    subscriptionId: z.string(),
    updateMask: z.string().optional(),
    pushSubscriptionUpdate: components.PushSubscriptionUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        subscriptionId: "subscription_id",
        updateMask: "update_mask",
        pushSubscriptionUpdate: "PushSubscriptionUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriberUpdatePushSubscriptionRequest$;
(function (SubscriberUpdatePushSubscriptionRequest$) {
    /** @deprecated use `SubscriberUpdatePushSubscriptionRequest$inboundSchema` instead. */
    SubscriberUpdatePushSubscriptionRequest$.inboundSchema = SubscriberUpdatePushSubscriptionRequest$inboundSchema;
    /** @deprecated use `SubscriberUpdatePushSubscriptionRequest$outboundSchema` instead. */
    SubscriberUpdatePushSubscriptionRequest$.outboundSchema = SubscriberUpdatePushSubscriptionRequest$outboundSchema;
})(SubscriberUpdatePushSubscriptionRequest$ || (SubscriberUpdatePushSubscriptionRequest$ = {}));
export function subscriberUpdatePushSubscriptionRequestToJSON(subscriberUpdatePushSubscriptionRequest) {
    return JSON.stringify(SubscriberUpdatePushSubscriptionRequest$outboundSchema.parse(subscriberUpdatePushSubscriptionRequest));
}
export function subscriberUpdatePushSubscriptionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriberUpdatePushSubscriptionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriberUpdatePushSubscriptionRequest' from JSON`);
}
/** @internal */
export const SubscriberUpdatePushSubscriptionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    PushSubscription: components.PushSubscription$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "PushSubscription": "pushSubscription",
        "Status": "status",
    });
});
/** @internal */
export const SubscriberUpdatePushSubscriptionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    pushSubscription: components.PushSubscription$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        pushSubscription: "PushSubscription",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriberUpdatePushSubscriptionResponse$;
(function (SubscriberUpdatePushSubscriptionResponse$) {
    /** @deprecated use `SubscriberUpdatePushSubscriptionResponse$inboundSchema` instead. */
    SubscriberUpdatePushSubscriptionResponse$.inboundSchema = SubscriberUpdatePushSubscriptionResponse$inboundSchema;
    /** @deprecated use `SubscriberUpdatePushSubscriptionResponse$outboundSchema` instead. */
    SubscriberUpdatePushSubscriptionResponse$.outboundSchema = SubscriberUpdatePushSubscriptionResponse$outboundSchema;
})(SubscriberUpdatePushSubscriptionResponse$ || (SubscriberUpdatePushSubscriptionResponse$ = {}));
export function subscriberUpdatePushSubscriptionResponseToJSON(subscriberUpdatePushSubscriptionResponse) {
    return JSON.stringify(SubscriberUpdatePushSubscriptionResponse$outboundSchema.parse(subscriberUpdatePushSubscriptionResponse));
}
export function subscriberUpdatePushSubscriptionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriberUpdatePushSubscriptionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriberUpdatePushSubscriptionResponse' from JSON`);
}
//# sourceMappingURL=subscriberupdatepushsubscription.js.map