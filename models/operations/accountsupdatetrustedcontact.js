/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdateTrustedContactRequest$inboundSchema = z.object({
    account_id: z.string(),
    trustedContact_id: z.string(),
    update_mask: z.string().optional(),
    TrustedContactUpdate: components.TrustedContactUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trustedContact_id": "trustedContactId",
        "update_mask": "updateMask",
        "TrustedContactUpdate": "trustedContactUpdate",
    });
});
/** @internal */
export const AccountsUpdateTrustedContactRequest$outboundSchema = z.object({
    accountId: z.string(),
    trustedContactId: z.string(),
    updateMask: z.string().optional(),
    trustedContactUpdate: components.TrustedContactUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        trustedContactId: "trustedContact_id",
        updateMask: "update_mask",
        trustedContactUpdate: "TrustedContactUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateTrustedContactRequest$;
(function (AccountsUpdateTrustedContactRequest$) {
    /** @deprecated use `AccountsUpdateTrustedContactRequest$inboundSchema` instead. */
    AccountsUpdateTrustedContactRequest$.inboundSchema = AccountsUpdateTrustedContactRequest$inboundSchema;
    /** @deprecated use `AccountsUpdateTrustedContactRequest$outboundSchema` instead. */
    AccountsUpdateTrustedContactRequest$.outboundSchema = AccountsUpdateTrustedContactRequest$outboundSchema;
})(AccountsUpdateTrustedContactRequest$ || (AccountsUpdateTrustedContactRequest$ = {}));
export function accountsUpdateTrustedContactRequestToJSON(accountsUpdateTrustedContactRequest) {
    return JSON.stringify(AccountsUpdateTrustedContactRequest$outboundSchema.parse(accountsUpdateTrustedContactRequest));
}
export function accountsUpdateTrustedContactRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateTrustedContactRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateTrustedContactRequest' from JSON`);
}
/** @internal */
export const AccountsUpdateTrustedContactResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    TrustedContact: components.TrustedContact$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "TrustedContact": "trustedContact",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdateTrustedContactResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    trustedContact: components.TrustedContact$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        trustedContact: "TrustedContact",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateTrustedContactResponse$;
(function (AccountsUpdateTrustedContactResponse$) {
    /** @deprecated use `AccountsUpdateTrustedContactResponse$inboundSchema` instead. */
    AccountsUpdateTrustedContactResponse$.inboundSchema = AccountsUpdateTrustedContactResponse$inboundSchema;
    /** @deprecated use `AccountsUpdateTrustedContactResponse$outboundSchema` instead. */
    AccountsUpdateTrustedContactResponse$.outboundSchema = AccountsUpdateTrustedContactResponse$outboundSchema;
})(AccountsUpdateTrustedContactResponse$ || (AccountsUpdateTrustedContactResponse$ = {}));
export function accountsUpdateTrustedContactResponseToJSON(accountsUpdateTrustedContactResponse) {
    return JSON.stringify(AccountsUpdateTrustedContactResponse$outboundSchema.parse(accountsUpdateTrustedContactResponse));
}
export function accountsUpdateTrustedContactResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateTrustedContactResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateTrustedContactResponse' from JSON`);
}
//# sourceMappingURL=accountsupdatetrustedcontact.js.map