/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingCreateExecutionRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    ExecutionCreate: components.ExecutionCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "ExecutionCreate": "executionCreate",
    });
});
/** @internal */
export const BookingCreateExecutionRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    executionCreate: components.ExecutionCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        executionCreate: "ExecutionCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCreateExecutionRequest$;
(function (BookingCreateExecutionRequest$) {
    /** @deprecated use `BookingCreateExecutionRequest$inboundSchema` instead. */
    BookingCreateExecutionRequest$.inboundSchema = BookingCreateExecutionRequest$inboundSchema;
    /** @deprecated use `BookingCreateExecutionRequest$outboundSchema` instead. */
    BookingCreateExecutionRequest$.outboundSchema = BookingCreateExecutionRequest$outboundSchema;
})(BookingCreateExecutionRequest$ || (BookingCreateExecutionRequest$ = {}));
export function bookingCreateExecutionRequestToJSON(bookingCreateExecutionRequest) {
    return JSON.stringify(BookingCreateExecutionRequest$outboundSchema.parse(bookingCreateExecutionRequest));
}
export function bookingCreateExecutionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCreateExecutionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCreateExecutionRequest' from JSON`);
}
/** @internal */
export const BookingCreateExecutionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Execution: components.Execution$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Execution": "execution",
        "Status": "status",
    });
});
/** @internal */
export const BookingCreateExecutionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    execution: components.Execution$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        execution: "Execution",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCreateExecutionResponse$;
(function (BookingCreateExecutionResponse$) {
    /** @deprecated use `BookingCreateExecutionResponse$inboundSchema` instead. */
    BookingCreateExecutionResponse$.inboundSchema = BookingCreateExecutionResponse$inboundSchema;
    /** @deprecated use `BookingCreateExecutionResponse$outboundSchema` instead. */
    BookingCreateExecutionResponse$.outboundSchema = BookingCreateExecutionResponse$outboundSchema;
})(BookingCreateExecutionResponse$ || (BookingCreateExecutionResponse$ = {}));
export function bookingCreateExecutionResponseToJSON(bookingCreateExecutionResponse) {
    return JSON.stringify(BookingCreateExecutionResponse$outboundSchema.parse(bookingCreateExecutionResponse));
}
export function bookingCreateExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCreateExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCreateExecutionResponse' from JSON`);
}
//# sourceMappingURL=bookingcreateexecution.js.map