/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingRebookExecutionRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    execution_id: z.string(),
    RebookExecutionRequestCreate: components.RebookExecutionRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "execution_id": "executionId",
        "RebookExecutionRequestCreate": "rebookExecutionRequestCreate",
    });
});
/** @internal */
export const BookingRebookExecutionRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    executionId: z.string(),
    rebookExecutionRequestCreate: components.RebookExecutionRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        executionId: "execution_id",
        rebookExecutionRequestCreate: "RebookExecutionRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingRebookExecutionRequest$;
(function (BookingRebookExecutionRequest$) {
    /** @deprecated use `BookingRebookExecutionRequest$inboundSchema` instead. */
    BookingRebookExecutionRequest$.inboundSchema = BookingRebookExecutionRequest$inboundSchema;
    /** @deprecated use `BookingRebookExecutionRequest$outboundSchema` instead. */
    BookingRebookExecutionRequest$.outboundSchema = BookingRebookExecutionRequest$outboundSchema;
})(BookingRebookExecutionRequest$ || (BookingRebookExecutionRequest$ = {}));
export function bookingRebookExecutionRequestToJSON(bookingRebookExecutionRequest) {
    return JSON.stringify(BookingRebookExecutionRequest$outboundSchema.parse(bookingRebookExecutionRequest));
}
export function bookingRebookExecutionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingRebookExecutionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingRebookExecutionRequest' from JSON`);
}
/** @internal */
export const BookingRebookExecutionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    RebookExecutionResponse: components.RebookExecutionResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "RebookExecutionResponse": "rebookExecutionResponse",
        "Status": "status",
    });
});
/** @internal */
export const BookingRebookExecutionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    rebookExecutionResponse: components.RebookExecutionResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        rebookExecutionResponse: "RebookExecutionResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingRebookExecutionResponse$;
(function (BookingRebookExecutionResponse$) {
    /** @deprecated use `BookingRebookExecutionResponse$inboundSchema` instead. */
    BookingRebookExecutionResponse$.inboundSchema = BookingRebookExecutionResponse$inboundSchema;
    /** @deprecated use `BookingRebookExecutionResponse$outboundSchema` instead. */
    BookingRebookExecutionResponse$.outboundSchema = BookingRebookExecutionResponse$outboundSchema;
})(BookingRebookExecutionResponse$ || (BookingRebookExecutionResponse$ = {}));
export function bookingRebookExecutionResponseToJSON(bookingRebookExecutionResponse) {
    return JSON.stringify(BookingRebookExecutionResponse$outboundSchema.parse(bookingRebookExecutionResponse));
}
export function bookingRebookExecutionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingRebookExecutionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingRebookExecutionResponse' from JSON`);
}
//# sourceMappingURL=bookingrebookexecution.js.map