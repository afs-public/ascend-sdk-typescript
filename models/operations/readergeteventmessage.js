/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const ReaderGetEventMessageRequest$inboundSchema = z.object({
    message_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "message_id": "messageId",
    });
});
/** @internal */
export const ReaderGetEventMessageRequest$outboundSchema = z.object({
    messageId: z.string(),
}).transform((v) => {
    return remap$(v, {
        messageId: "message_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReaderGetEventMessageRequest$;
(function (ReaderGetEventMessageRequest$) {
    /** @deprecated use `ReaderGetEventMessageRequest$inboundSchema` instead. */
    ReaderGetEventMessageRequest$.inboundSchema = ReaderGetEventMessageRequest$inboundSchema;
    /** @deprecated use `ReaderGetEventMessageRequest$outboundSchema` instead. */
    ReaderGetEventMessageRequest$.outboundSchema = ReaderGetEventMessageRequest$outboundSchema;
})(ReaderGetEventMessageRequest$ || (ReaderGetEventMessageRequest$ = {}));
export function readerGetEventMessageRequestToJSON(readerGetEventMessageRequest) {
    return JSON.stringify(ReaderGetEventMessageRequest$outboundSchema.parse(readerGetEventMessageRequest));
}
export function readerGetEventMessageRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReaderGetEventMessageRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReaderGetEventMessageRequest' from JSON`);
}
/** @internal */
export const ReaderGetEventMessageResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    EventMessage: components.EventMessage$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "EventMessage": "eventMessage",
        "Status": "status",
    });
});
/** @internal */
export const ReaderGetEventMessageResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    eventMessage: components.EventMessage$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        eventMessage: "EventMessage",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReaderGetEventMessageResponse$;
(function (ReaderGetEventMessageResponse$) {
    /** @deprecated use `ReaderGetEventMessageResponse$inboundSchema` instead. */
    ReaderGetEventMessageResponse$.inboundSchema = ReaderGetEventMessageResponse$inboundSchema;
    /** @deprecated use `ReaderGetEventMessageResponse$outboundSchema` instead. */
    ReaderGetEventMessageResponse$.outboundSchema = ReaderGetEventMessageResponse$outboundSchema;
})(ReaderGetEventMessageResponse$ || (ReaderGetEventMessageResponse$ = {}));
export function readerGetEventMessageResponseToJSON(readerGetEventMessageResponse) {
    return JSON.stringify(ReaderGetEventMessageResponse$outboundSchema.parse(readerGetEventMessageResponse));
}
export function readerGetEventMessageResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReaderGetEventMessageResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReaderGetEventMessageResponse' from JSON`);
}
//# sourceMappingURL=readergeteventmessage.js.map