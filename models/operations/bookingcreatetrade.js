/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingCreateTradeRequest$inboundSchema = z.object({
    account_id: z.string(),
    TradeCreate: components.TradeCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "TradeCreate": "tradeCreate",
    });
});
/** @internal */
export const BookingCreateTradeRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeCreate: components.TradeCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeCreate: "TradeCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCreateTradeRequest$;
(function (BookingCreateTradeRequest$) {
    /** @deprecated use `BookingCreateTradeRequest$inboundSchema` instead. */
    BookingCreateTradeRequest$.inboundSchema = BookingCreateTradeRequest$inboundSchema;
    /** @deprecated use `BookingCreateTradeRequest$outboundSchema` instead. */
    BookingCreateTradeRequest$.outboundSchema = BookingCreateTradeRequest$outboundSchema;
})(BookingCreateTradeRequest$ || (BookingCreateTradeRequest$ = {}));
export function bookingCreateTradeRequestToJSON(bookingCreateTradeRequest) {
    return JSON.stringify(BookingCreateTradeRequest$outboundSchema.parse(bookingCreateTradeRequest));
}
export function bookingCreateTradeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCreateTradeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCreateTradeRequest' from JSON`);
}
/** @internal */
export const BookingCreateTradeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    BookingTrade: components.BookingTrade$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "BookingTrade": "bookingTrade",
        "Status": "status",
    });
});
/** @internal */
export const BookingCreateTradeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    bookingTrade: components.BookingTrade$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        bookingTrade: "BookingTrade",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCreateTradeResponse$;
(function (BookingCreateTradeResponse$) {
    /** @deprecated use `BookingCreateTradeResponse$inboundSchema` instead. */
    BookingCreateTradeResponse$.inboundSchema = BookingCreateTradeResponse$inboundSchema;
    /** @deprecated use `BookingCreateTradeResponse$outboundSchema` instead. */
    BookingCreateTradeResponse$.outboundSchema = BookingCreateTradeResponse$outboundSchema;
})(BookingCreateTradeResponse$ || (BookingCreateTradeResponse$ = {}));
export function bookingCreateTradeResponseToJSON(bookingCreateTradeResponse) {
    return JSON.stringify(BookingCreateTradeResponse$outboundSchema.parse(bookingCreateTradeResponse));
}
export function bookingCreateTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCreateTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCreateTradeResponse' from JSON`);
}
//# sourceMappingURL=bookingcreatetrade.js.map