/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/**
 * Optional. The view to return. Defaults to BASIC.
 */
export var CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView;
(function (CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView) {
    CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView["ViewUnspecified"] = "VIEW_UNSPECIFIED";
    CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView["Basic"] = "BASIC";
    CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView["Full"] = "FULL";
})(CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView || (CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView = {}));
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$inboundSchema = z.nativeEnum(CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView);
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$outboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$;
(function (CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$) {
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$inboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$.inboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$inboundSchema;
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$outboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$.outboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$outboundSchema;
})(CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$ || (CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$ = {}));
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    customerIdentification_id: z.string(),
    view: CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "customerIdentification_id": "customerIdentificationId",
    });
});
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    customerIdentificationId: z.string(),
    view: CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        customerIdentificationId: "customerIdentification_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationResultServiceGetCustomerIdentificationRequest$;
(function (CustomerIdentificationResultServiceGetCustomerIdentificationRequest$) {
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationRequest$inboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationRequest$.inboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationRequest$inboundSchema;
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationRequest$outboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationRequest$.outboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationRequest$outboundSchema;
})(CustomerIdentificationResultServiceGetCustomerIdentificationRequest$ || (CustomerIdentificationResultServiceGetCustomerIdentificationRequest$ = {}));
export function customerIdentificationResultServiceGetCustomerIdentificationRequestToJSON(customerIdentificationResultServiceGetCustomerIdentificationRequest) {
    return JSON.stringify(CustomerIdentificationResultServiceGetCustomerIdentificationRequest$outboundSchema
        .parse(customerIdentificationResultServiceGetCustomerIdentificationRequest));
}
export function customerIdentificationResultServiceGetCustomerIdentificationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentificationResultServiceGetCustomerIdentificationRequest$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationResultServiceGetCustomerIdentificationRequest' from JSON`);
}
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CustomerIdentification: components.CustomerIdentification$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "CustomerIdentification": "customerIdentification",
        "Status": "status",
    });
});
/** @internal */
export const CustomerIdentificationResultServiceGetCustomerIdentificationResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    customerIdentification: components.CustomerIdentification$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        customerIdentification: "CustomerIdentification",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIdentificationResultServiceGetCustomerIdentificationResponse$;
(function (CustomerIdentificationResultServiceGetCustomerIdentificationResponse$) {
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationResponse$inboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationResponse$.inboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationResponse$inboundSchema;
    /** @deprecated use `CustomerIdentificationResultServiceGetCustomerIdentificationResponse$outboundSchema` instead. */
    CustomerIdentificationResultServiceGetCustomerIdentificationResponse$.outboundSchema = CustomerIdentificationResultServiceGetCustomerIdentificationResponse$outboundSchema;
})(CustomerIdentificationResultServiceGetCustomerIdentificationResponse$ || (CustomerIdentificationResultServiceGetCustomerIdentificationResponse$ = {}));
export function customerIdentificationResultServiceGetCustomerIdentificationResponseToJSON(customerIdentificationResultServiceGetCustomerIdentificationResponse) {
    return JSON.stringify(CustomerIdentificationResultServiceGetCustomerIdentificationResponse$outboundSchema
        .parse(customerIdentificationResultServiceGetCustomerIdentificationResponse));
}
export function customerIdentificationResultServiceGetCustomerIdentificationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIdentificationResultServiceGetCustomerIdentificationResponse$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CustomerIdentificationResultServiceGetCustomerIdentificationResponse' from JSON`);
}
//# sourceMappingURL=customeridentificationresultservicegetcustomeridentification.js.map