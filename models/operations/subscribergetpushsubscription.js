/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const SubscriberGetPushSubscriptionRequest$inboundSchema = z.object({
    subscription_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "subscription_id": "subscriptionId",
    });
});
/** @internal */
export const SubscriberGetPushSubscriptionRequest$outboundSchema = z.object({
    subscriptionId: z.string(),
}).transform((v) => {
    return remap$(v, {
        subscriptionId: "subscription_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriberGetPushSubscriptionRequest$;
(function (SubscriberGetPushSubscriptionRequest$) {
    /** @deprecated use `SubscriberGetPushSubscriptionRequest$inboundSchema` instead. */
    SubscriberGetPushSubscriptionRequest$.inboundSchema = SubscriberGetPushSubscriptionRequest$inboundSchema;
    /** @deprecated use `SubscriberGetPushSubscriptionRequest$outboundSchema` instead. */
    SubscriberGetPushSubscriptionRequest$.outboundSchema = SubscriberGetPushSubscriptionRequest$outboundSchema;
})(SubscriberGetPushSubscriptionRequest$ || (SubscriberGetPushSubscriptionRequest$ = {}));
export function subscriberGetPushSubscriptionRequestToJSON(subscriberGetPushSubscriptionRequest) {
    return JSON.stringify(SubscriberGetPushSubscriptionRequest$outboundSchema.parse(subscriberGetPushSubscriptionRequest));
}
export function subscriberGetPushSubscriptionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriberGetPushSubscriptionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriberGetPushSubscriptionRequest' from JSON`);
}
/** @internal */
export const SubscriberGetPushSubscriptionResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    PushSubscription: components.PushSubscription$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "PushSubscription": "pushSubscription",
        "Status": "status",
    });
});
/** @internal */
export const SubscriberGetPushSubscriptionResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    pushSubscription: components.PushSubscription$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        pushSubscription: "PushSubscription",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriberGetPushSubscriptionResponse$;
(function (SubscriberGetPushSubscriptionResponse$) {
    /** @deprecated use `SubscriberGetPushSubscriptionResponse$inboundSchema` instead. */
    SubscriberGetPushSubscriptionResponse$.inboundSchema = SubscriberGetPushSubscriptionResponse$inboundSchema;
    /** @deprecated use `SubscriberGetPushSubscriptionResponse$outboundSchema` instead. */
    SubscriberGetPushSubscriptionResponse$.outboundSchema = SubscriberGetPushSubscriptionResponse$outboundSchema;
})(SubscriberGetPushSubscriptionResponse$ || (SubscriberGetPushSubscriptionResponse$ = {}));
export function subscriberGetPushSubscriptionResponseToJSON(subscriberGetPushSubscriptionResponse) {
    return JSON.stringify(SubscriberGetPushSubscriptionResponse$outboundSchema.parse(subscriberGetPushSubscriptionResponse));
}
export function subscriberGetPushSubscriptionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriberGetPushSubscriptionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriberGetPushSubscriptionResponse' from JSON`);
}
//# sourceMappingURL=subscribergetpushsubscription.js.map