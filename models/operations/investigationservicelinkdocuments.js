/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const InvestigationServiceLinkDocumentsRequest$inboundSchema = z.object({
    investigation_id: z.string(),
    LinkDocumentsRequestCreate: components.LinkDocumentsRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "investigation_id": "investigationId",
        "LinkDocumentsRequestCreate": "linkDocumentsRequestCreate",
    });
});
/** @internal */
export const InvestigationServiceLinkDocumentsRequest$outboundSchema = z.object({
    investigationId: z.string(),
    linkDocumentsRequestCreate: components.LinkDocumentsRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        investigationId: "investigation_id",
        linkDocumentsRequestCreate: "LinkDocumentsRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationServiceLinkDocumentsRequest$;
(function (InvestigationServiceLinkDocumentsRequest$) {
    /** @deprecated use `InvestigationServiceLinkDocumentsRequest$inboundSchema` instead. */
    InvestigationServiceLinkDocumentsRequest$.inboundSchema = InvestigationServiceLinkDocumentsRequest$inboundSchema;
    /** @deprecated use `InvestigationServiceLinkDocumentsRequest$outboundSchema` instead. */
    InvestigationServiceLinkDocumentsRequest$.outboundSchema = InvestigationServiceLinkDocumentsRequest$outboundSchema;
})(InvestigationServiceLinkDocumentsRequest$ || (InvestigationServiceLinkDocumentsRequest$ = {}));
export function investigationServiceLinkDocumentsRequestToJSON(investigationServiceLinkDocumentsRequest) {
    return JSON.stringify(InvestigationServiceLinkDocumentsRequest$outboundSchema.parse(investigationServiceLinkDocumentsRequest));
}
export function investigationServiceLinkDocumentsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationServiceLinkDocumentsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationServiceLinkDocumentsRequest' from JSON`);
}
/** @internal */
export const InvestigationServiceLinkDocumentsResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LinkDocumentsResponse: components.LinkDocumentsResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LinkDocumentsResponse": "linkDocumentsResponse",
        "Status": "status",
    });
});
/** @internal */
export const InvestigationServiceLinkDocumentsResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    linkDocumentsResponse: components.LinkDocumentsResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        linkDocumentsResponse: "LinkDocumentsResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvestigationServiceLinkDocumentsResponse$;
(function (InvestigationServiceLinkDocumentsResponse$) {
    /** @deprecated use `InvestigationServiceLinkDocumentsResponse$inboundSchema` instead. */
    InvestigationServiceLinkDocumentsResponse$.inboundSchema = InvestigationServiceLinkDocumentsResponse$inboundSchema;
    /** @deprecated use `InvestigationServiceLinkDocumentsResponse$outboundSchema` instead. */
    InvestigationServiceLinkDocumentsResponse$.outboundSchema = InvestigationServiceLinkDocumentsResponse$outboundSchema;
})(InvestigationServiceLinkDocumentsResponse$ || (InvestigationServiceLinkDocumentsResponse$ = {}));
export function investigationServiceLinkDocumentsResponseToJSON(investigationServiceLinkDocumentsResponse) {
    return JSON.stringify(InvestigationServiceLinkDocumentsResponse$outboundSchema.parse(investigationServiceLinkDocumentsResponse));
}
export function investigationServiceLinkDocumentsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvestigationServiceLinkDocumentsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvestigationServiceLinkDocumentsResponse' from JSON`);
}
//# sourceMappingURL=investigationservicelinkdocuments.js.map