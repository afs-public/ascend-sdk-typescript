/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const LedgerListEntriesRequest$inboundSchema = z.object({
    account_id: z.string(),
    page_size: z.number().int().optional(),
    page_token: z.string().optional(),
    filter: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "page_size": "pageSize",
        "page_token": "pageToken",
    });
});
/** @internal */
export const LedgerListEntriesRequest$outboundSchema = z.object({
    accountId: z.string(),
    pageSize: z.number().int().optional(),
    pageToken: z.string().optional(),
    filter: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        pageSize: "page_size",
        pageToken: "page_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerListEntriesRequest$;
(function (LedgerListEntriesRequest$) {
    /** @deprecated use `LedgerListEntriesRequest$inboundSchema` instead. */
    LedgerListEntriesRequest$.inboundSchema = LedgerListEntriesRequest$inboundSchema;
    /** @deprecated use `LedgerListEntriesRequest$outboundSchema` instead. */
    LedgerListEntriesRequest$.outboundSchema = LedgerListEntriesRequest$outboundSchema;
})(LedgerListEntriesRequest$ || (LedgerListEntriesRequest$ = {}));
export function ledgerListEntriesRequestToJSON(ledgerListEntriesRequest) {
    return JSON.stringify(LedgerListEntriesRequest$outboundSchema.parse(ledgerListEntriesRequest));
}
export function ledgerListEntriesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerListEntriesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerListEntriesRequest' from JSON`);
}
/** @internal */
export const LedgerListEntriesResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    ListEntriesResponse: components.ListEntriesResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "ListEntriesResponse": "listEntriesResponse",
        "Status": "status",
    });
});
/** @internal */
export const LedgerListEntriesResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listEntriesResponse: components.ListEntriesResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        listEntriesResponse: "ListEntriesResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerListEntriesResponse$;
(function (LedgerListEntriesResponse$) {
    /** @deprecated use `LedgerListEntriesResponse$inboundSchema` instead. */
    LedgerListEntriesResponse$.inboundSchema = LedgerListEntriesResponse$inboundSchema;
    /** @deprecated use `LedgerListEntriesResponse$outboundSchema` instead. */
    LedgerListEntriesResponse$.outboundSchema = LedgerListEntriesResponse$outboundSchema;
})(LedgerListEntriesResponse$ || (LedgerListEntriesResponse$ = {}));
export function ledgerListEntriesResponseToJSON(ledgerListEntriesResponse) {
    return JSON.stringify(LedgerListEntriesResponse$outboundSchema.parse(ledgerListEntriesResponse));
}
export function ledgerListEntriesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerListEntriesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerListEntriesResponse' from JSON`);
}
//# sourceMappingURL=ledgerlistentries.js.map