/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BankRelationshipsCancelBankRelationshipRequest$inboundSchema = z.object({
    account_id: z.string(),
    bankRelationship_id: z.string(),
    CancelBankRelationshipRequestCreate: components.CancelBankRelationshipRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "bankRelationship_id": "bankRelationshipId",
        "CancelBankRelationshipRequestCreate": "cancelBankRelationshipRequestCreate",
    });
});
/** @internal */
export const BankRelationshipsCancelBankRelationshipRequest$outboundSchema = z.object({
    accountId: z.string(),
    bankRelationshipId: z.string(),
    cancelBankRelationshipRequestCreate: components.CancelBankRelationshipRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        bankRelationshipId: "bankRelationship_id",
        cancelBankRelationshipRequestCreate: "CancelBankRelationshipRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipsCancelBankRelationshipRequest$;
(function (BankRelationshipsCancelBankRelationshipRequest$) {
    /** @deprecated use `BankRelationshipsCancelBankRelationshipRequest$inboundSchema` instead. */
    BankRelationshipsCancelBankRelationshipRequest$.inboundSchema = BankRelationshipsCancelBankRelationshipRequest$inboundSchema;
    /** @deprecated use `BankRelationshipsCancelBankRelationshipRequest$outboundSchema` instead. */
    BankRelationshipsCancelBankRelationshipRequest$.outboundSchema = BankRelationshipsCancelBankRelationshipRequest$outboundSchema;
})(BankRelationshipsCancelBankRelationshipRequest$ || (BankRelationshipsCancelBankRelationshipRequest$ = {}));
export function bankRelationshipsCancelBankRelationshipRequestToJSON(bankRelationshipsCancelBankRelationshipRequest) {
    return JSON.stringify(BankRelationshipsCancelBankRelationshipRequest$outboundSchema.parse(bankRelationshipsCancelBankRelationshipRequest));
}
export function bankRelationshipsCancelBankRelationshipRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankRelationshipsCancelBankRelationshipRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankRelationshipsCancelBankRelationshipRequest' from JSON`);
}
/** @internal */
export const BankRelationshipsCancelBankRelationshipResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    BankRelationship: components.BankRelationship$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "BankRelationship": "bankRelationship",
        "Status": "status",
    });
});
/** @internal */
export const BankRelationshipsCancelBankRelationshipResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    bankRelationship: components.BankRelationship$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        bankRelationship: "BankRelationship",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BankRelationshipsCancelBankRelationshipResponse$;
(function (BankRelationshipsCancelBankRelationshipResponse$) {
    /** @deprecated use `BankRelationshipsCancelBankRelationshipResponse$inboundSchema` instead. */
    BankRelationshipsCancelBankRelationshipResponse$.inboundSchema = BankRelationshipsCancelBankRelationshipResponse$inboundSchema;
    /** @deprecated use `BankRelationshipsCancelBankRelationshipResponse$outboundSchema` instead. */
    BankRelationshipsCancelBankRelationshipResponse$.outboundSchema = BankRelationshipsCancelBankRelationshipResponse$outboundSchema;
})(BankRelationshipsCancelBankRelationshipResponse$ || (BankRelationshipsCancelBankRelationshipResponse$ = {}));
export function bankRelationshipsCancelBankRelationshipResponseToJSON(bankRelationshipsCancelBankRelationshipResponse) {
    return JSON.stringify(BankRelationshipsCancelBankRelationshipResponse$outboundSchema.parse(bankRelationshipsCancelBankRelationshipResponse));
}
export function bankRelationshipsCancelBankRelationshipResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BankRelationshipsCancelBankRelationshipResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BankRelationshipsCancelBankRelationshipResponse' from JSON`);
}
//# sourceMappingURL=bankrelationshipscancelbankrelationship.js.map