/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const LedgerGetActivityRequest$inboundSchema = z.object({
    account_id: z.string(),
    activity_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "activity_id": "activityId",
    });
});
/** @internal */
export const LedgerGetActivityRequest$outboundSchema = z.object({
    accountId: z.string(),
    activityId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        activityId: "activity_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerGetActivityRequest$;
(function (LedgerGetActivityRequest$) {
    /** @deprecated use `LedgerGetActivityRequest$inboundSchema` instead. */
    LedgerGetActivityRequest$.inboundSchema = LedgerGetActivityRequest$inboundSchema;
    /** @deprecated use `LedgerGetActivityRequest$outboundSchema` instead. */
    LedgerGetActivityRequest$.outboundSchema = LedgerGetActivityRequest$outboundSchema;
})(LedgerGetActivityRequest$ || (LedgerGetActivityRequest$ = {}));
export function ledgerGetActivityRequestToJSON(ledgerGetActivityRequest) {
    return JSON.stringify(LedgerGetActivityRequest$outboundSchema.parse(ledgerGetActivityRequest));
}
export function ledgerGetActivityRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerGetActivityRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerGetActivityRequest' from JSON`);
}
/** @internal */
export const LedgerGetActivityResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Activity: components.Activity$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Activity": "activity",
        "Status": "status",
    });
});
/** @internal */
export const LedgerGetActivityResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    activity: components.Activity$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        activity: "Activity",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LedgerGetActivityResponse$;
(function (LedgerGetActivityResponse$) {
    /** @deprecated use `LedgerGetActivityResponse$inboundSchema` instead. */
    LedgerGetActivityResponse$.inboundSchema = LedgerGetActivityResponse$inboundSchema;
    /** @deprecated use `LedgerGetActivityResponse$outboundSchema` instead. */
    LedgerGetActivityResponse$.outboundSchema = LedgerGetActivityResponse$outboundSchema;
})(LedgerGetActivityResponse$ || (LedgerGetActivityResponse$ = {}));
export function ledgerGetActivityResponseToJSON(ledgerGetActivityResponse) {
    return JSON.stringify(LedgerGetActivityResponse$outboundSchema.parse(ledgerGetActivityResponse));
}
export function ledgerGetActivityResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LedgerGetActivityResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LedgerGetActivityResponse' from JSON`);
}
//# sourceMappingURL=ledgergetactivity.js.map