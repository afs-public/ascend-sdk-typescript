/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdateLegalNaturalPersonRequest$inboundSchema = z.object({
    legalNaturalPerson_id: z.string(),
    update_mask: z.string().optional(),
    LegalNaturalPersonUpdate: components.LegalNaturalPersonUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "legalNaturalPerson_id": "legalNaturalPersonId",
        "update_mask": "updateMask",
        "LegalNaturalPersonUpdate": "legalNaturalPersonUpdate",
    });
});
/** @internal */
export const AccountsUpdateLegalNaturalPersonRequest$outboundSchema = z.object({
    legalNaturalPersonId: z.string(),
    updateMask: z.string().optional(),
    legalNaturalPersonUpdate: components.LegalNaturalPersonUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        legalNaturalPersonId: "legalNaturalPerson_id",
        updateMask: "update_mask",
        legalNaturalPersonUpdate: "LegalNaturalPersonUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateLegalNaturalPersonRequest$;
(function (AccountsUpdateLegalNaturalPersonRequest$) {
    /** @deprecated use `AccountsUpdateLegalNaturalPersonRequest$inboundSchema` instead. */
    AccountsUpdateLegalNaturalPersonRequest$.inboundSchema = AccountsUpdateLegalNaturalPersonRequest$inboundSchema;
    /** @deprecated use `AccountsUpdateLegalNaturalPersonRequest$outboundSchema` instead. */
    AccountsUpdateLegalNaturalPersonRequest$.outboundSchema = AccountsUpdateLegalNaturalPersonRequest$outboundSchema;
})(AccountsUpdateLegalNaturalPersonRequest$ || (AccountsUpdateLegalNaturalPersonRequest$ = {}));
export function accountsUpdateLegalNaturalPersonRequestToJSON(accountsUpdateLegalNaturalPersonRequest) {
    return JSON.stringify(AccountsUpdateLegalNaturalPersonRequest$outboundSchema.parse(accountsUpdateLegalNaturalPersonRequest));
}
export function accountsUpdateLegalNaturalPersonRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateLegalNaturalPersonRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateLegalNaturalPersonRequest' from JSON`);
}
/** @internal */
export const AccountsUpdateLegalNaturalPersonResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LegalNaturalPerson: components.LegalNaturalPerson$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LegalNaturalPerson": "legalNaturalPerson",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdateLegalNaturalPersonResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    legalNaturalPerson: components.LegalNaturalPerson$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        legalNaturalPerson: "LegalNaturalPerson",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateLegalNaturalPersonResponse$;
(function (AccountsUpdateLegalNaturalPersonResponse$) {
    /** @deprecated use `AccountsUpdateLegalNaturalPersonResponse$inboundSchema` instead. */
    AccountsUpdateLegalNaturalPersonResponse$.inboundSchema = AccountsUpdateLegalNaturalPersonResponse$inboundSchema;
    /** @deprecated use `AccountsUpdateLegalNaturalPersonResponse$outboundSchema` instead. */
    AccountsUpdateLegalNaturalPersonResponse$.outboundSchema = AccountsUpdateLegalNaturalPersonResponse$outboundSchema;
})(AccountsUpdateLegalNaturalPersonResponse$ || (AccountsUpdateLegalNaturalPersonResponse$ = {}));
export function accountsUpdateLegalNaturalPersonResponseToJSON(accountsUpdateLegalNaturalPersonResponse) {
    return JSON.stringify(AccountsUpdateLegalNaturalPersonResponse$outboundSchema.parse(accountsUpdateLegalNaturalPersonResponse));
}
export function accountsUpdateLegalNaturalPersonResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateLegalNaturalPersonResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateLegalNaturalPersonResponse' from JSON`);
}
//# sourceMappingURL=accountsupdatelegalnaturalperson.js.map