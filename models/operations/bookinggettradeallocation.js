/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingGetTradeAllocationRequest$inboundSchema = z.object({
    account_id: z.string(),
    tradeAllocation_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "tradeAllocation_id": "tradeAllocationId",
    });
});
/** @internal */
export const BookingGetTradeAllocationRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeAllocationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeAllocationId: "tradeAllocation_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetTradeAllocationRequest$;
(function (BookingGetTradeAllocationRequest$) {
    /** @deprecated use `BookingGetTradeAllocationRequest$inboundSchema` instead. */
    BookingGetTradeAllocationRequest$.inboundSchema = BookingGetTradeAllocationRequest$inboundSchema;
    /** @deprecated use `BookingGetTradeAllocationRequest$outboundSchema` instead. */
    BookingGetTradeAllocationRequest$.outboundSchema = BookingGetTradeAllocationRequest$outboundSchema;
})(BookingGetTradeAllocationRequest$ || (BookingGetTradeAllocationRequest$ = {}));
export function bookingGetTradeAllocationRequestToJSON(bookingGetTradeAllocationRequest) {
    return JSON.stringify(BookingGetTradeAllocationRequest$outboundSchema.parse(bookingGetTradeAllocationRequest));
}
export function bookingGetTradeAllocationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetTradeAllocationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetTradeAllocationRequest' from JSON`);
}
/** @internal */
export const BookingGetTradeAllocationResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    TradeAllocation: components.TradeAllocation$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "TradeAllocation": "tradeAllocation",
        "Status": "status",
    });
});
/** @internal */
export const BookingGetTradeAllocationResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    tradeAllocation: components.TradeAllocation$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        tradeAllocation: "TradeAllocation",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingGetTradeAllocationResponse$;
(function (BookingGetTradeAllocationResponse$) {
    /** @deprecated use `BookingGetTradeAllocationResponse$inboundSchema` instead. */
    BookingGetTradeAllocationResponse$.inboundSchema = BookingGetTradeAllocationResponse$inboundSchema;
    /** @deprecated use `BookingGetTradeAllocationResponse$outboundSchema` instead. */
    BookingGetTradeAllocationResponse$.outboundSchema = BookingGetTradeAllocationResponse$outboundSchema;
})(BookingGetTradeAllocationResponse$ || (BookingGetTradeAllocationResponse$ = {}));
export function bookingGetTradeAllocationResponseToJSON(bookingGetTradeAllocationResponse) {
    return JSON.stringify(BookingGetTradeAllocationResponse$outboundSchema.parse(bookingGetTradeAllocationResponse));
}
export function bookingGetTradeAllocationResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingGetTradeAllocationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingGetTradeAllocationResponse' from JSON`);
}
//# sourceMappingURL=bookinggettradeallocation.js.map