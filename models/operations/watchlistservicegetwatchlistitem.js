/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const WatchlistServiceGetWatchlistItemRequest$inboundSchema = z.object({
    watchlist_id: z.string(),
    item_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "watchlist_id": "watchlistId",
        "item_id": "itemId",
    });
});
/** @internal */
export const WatchlistServiceGetWatchlistItemRequest$outboundSchema = z.object({
    watchlistId: z.string(),
    itemId: z.string(),
}).transform((v) => {
    return remap$(v, {
        watchlistId: "watchlist_id",
        itemId: "item_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistServiceGetWatchlistItemRequest$;
(function (WatchlistServiceGetWatchlistItemRequest$) {
    /** @deprecated use `WatchlistServiceGetWatchlistItemRequest$inboundSchema` instead. */
    WatchlistServiceGetWatchlistItemRequest$.inboundSchema = WatchlistServiceGetWatchlistItemRequest$inboundSchema;
    /** @deprecated use `WatchlistServiceGetWatchlistItemRequest$outboundSchema` instead. */
    WatchlistServiceGetWatchlistItemRequest$.outboundSchema = WatchlistServiceGetWatchlistItemRequest$outboundSchema;
})(WatchlistServiceGetWatchlistItemRequest$ || (WatchlistServiceGetWatchlistItemRequest$ = {}));
export function watchlistServiceGetWatchlistItemRequestToJSON(watchlistServiceGetWatchlistItemRequest) {
    return JSON.stringify(WatchlistServiceGetWatchlistItemRequest$outboundSchema.parse(watchlistServiceGetWatchlistItemRequest));
}
export function watchlistServiceGetWatchlistItemRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WatchlistServiceGetWatchlistItemRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WatchlistServiceGetWatchlistItemRequest' from JSON`);
}
/** @internal */
export const WatchlistServiceGetWatchlistItemResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    WatchlistItem: components.WatchlistItem$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "WatchlistItem": "watchlistItem",
        "Status": "status",
    });
});
/** @internal */
export const WatchlistServiceGetWatchlistItemResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    watchlistItem: components.WatchlistItem$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        watchlistItem: "WatchlistItem",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WatchlistServiceGetWatchlistItemResponse$;
(function (WatchlistServiceGetWatchlistItemResponse$) {
    /** @deprecated use `WatchlistServiceGetWatchlistItemResponse$inboundSchema` instead. */
    WatchlistServiceGetWatchlistItemResponse$.inboundSchema = WatchlistServiceGetWatchlistItemResponse$inboundSchema;
    /** @deprecated use `WatchlistServiceGetWatchlistItemResponse$outboundSchema` instead. */
    WatchlistServiceGetWatchlistItemResponse$.outboundSchema = WatchlistServiceGetWatchlistItemResponse$outboundSchema;
})(WatchlistServiceGetWatchlistItemResponse$ || (WatchlistServiceGetWatchlistItemResponse$ = {}));
export function watchlistServiceGetWatchlistItemResponseToJSON(watchlistServiceGetWatchlistItemResponse) {
    return JSON.stringify(WatchlistServiceGetWatchlistItemResponse$outboundSchema.parse(watchlistServiceGetWatchlistItemResponse));
}
export function watchlistServiceGetWatchlistItemResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WatchlistServiceGetWatchlistItemResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WatchlistServiceGetWatchlistItemResponse' from JSON`);
}
//# sourceMappingURL=watchlistservicegetwatchlistitem.js.map