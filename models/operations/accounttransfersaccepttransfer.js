/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountTransfersAcceptTransferRequest$inboundSchema = z.object({
    correspondent_id: z.string(),
    account_id: z.string(),
    transfer_id: z.string(),
    AcceptTransferRequestCreate: components.AcceptTransferRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "correspondent_id": "correspondentId",
        "account_id": "accountId",
        "transfer_id": "transferId",
        "AcceptTransferRequestCreate": "acceptTransferRequestCreate",
    });
});
/** @internal */
export const AccountTransfersAcceptTransferRequest$outboundSchema = z.object({
    correspondentId: z.string(),
    accountId: z.string(),
    transferId: z.string(),
    acceptTransferRequestCreate: components.AcceptTransferRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        correspondentId: "correspondent_id",
        accountId: "account_id",
        transferId: "transfer_id",
        acceptTransferRequestCreate: "AcceptTransferRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransfersAcceptTransferRequest$;
(function (AccountTransfersAcceptTransferRequest$) {
    /** @deprecated use `AccountTransfersAcceptTransferRequest$inboundSchema` instead. */
    AccountTransfersAcceptTransferRequest$.inboundSchema = AccountTransfersAcceptTransferRequest$inboundSchema;
    /** @deprecated use `AccountTransfersAcceptTransferRequest$outboundSchema` instead. */
    AccountTransfersAcceptTransferRequest$.outboundSchema = AccountTransfersAcceptTransferRequest$outboundSchema;
})(AccountTransfersAcceptTransferRequest$ || (AccountTransfersAcceptTransferRequest$ = {}));
export function accountTransfersAcceptTransferRequestToJSON(accountTransfersAcceptTransferRequest) {
    return JSON.stringify(AccountTransfersAcceptTransferRequest$outboundSchema.parse(accountTransfersAcceptTransferRequest));
}
export function accountTransfersAcceptTransferRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTransfersAcceptTransferRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTransfersAcceptTransferRequest' from JSON`);
}
/** @internal */
export const AccountTransfersAcceptTransferResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    AcceptTransferResponse: components.AcceptTransferResponse$inboundSchema
        .optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "AcceptTransferResponse": "acceptTransferResponse",
        "Status": "status",
    });
});
/** @internal */
export const AccountTransfersAcceptTransferResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    acceptTransferResponse: components.AcceptTransferResponse$outboundSchema
        .optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        acceptTransferResponse: "AcceptTransferResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountTransfersAcceptTransferResponse$;
(function (AccountTransfersAcceptTransferResponse$) {
    /** @deprecated use `AccountTransfersAcceptTransferResponse$inboundSchema` instead. */
    AccountTransfersAcceptTransferResponse$.inboundSchema = AccountTransfersAcceptTransferResponse$inboundSchema;
    /** @deprecated use `AccountTransfersAcceptTransferResponse$outboundSchema` instead. */
    AccountTransfersAcceptTransferResponse$.outboundSchema = AccountTransfersAcceptTransferResponse$outboundSchema;
})(AccountTransfersAcceptTransferResponse$ || (AccountTransfersAcceptTransferResponse$ = {}));
export function accountTransfersAcceptTransferResponseToJSON(accountTransfersAcceptTransferResponse) {
    return JSON.stringify(AccountTransfersAcceptTransferResponse$outboundSchema.parse(accountTransfersAcceptTransferResponse));
}
export function accountTransfersAcceptTransferResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountTransfersAcceptTransferResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountTransfersAcceptTransferResponse' from JSON`);
}
//# sourceMappingURL=accounttransfersaccepttransfer.js.map