/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsAssignLargeTraderRequest$inboundSchema = z.object({
    legalNaturalPerson_id: z.string(),
    AssignLargeTraderRequestCreate: components.AssignLargeTraderRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "legalNaturalPerson_id": "legalNaturalPersonId",
        "AssignLargeTraderRequestCreate": "assignLargeTraderRequestCreate",
    });
});
/** @internal */
export const AccountsAssignLargeTraderRequest$outboundSchema = z.object({
    legalNaturalPersonId: z.string(),
    assignLargeTraderRequestCreate: components.AssignLargeTraderRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        legalNaturalPersonId: "legalNaturalPerson_id",
        assignLargeTraderRequestCreate: "AssignLargeTraderRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAssignLargeTraderRequest$;
(function (AccountsAssignLargeTraderRequest$) {
    /** @deprecated use `AccountsAssignLargeTraderRequest$inboundSchema` instead. */
    AccountsAssignLargeTraderRequest$.inboundSchema = AccountsAssignLargeTraderRequest$inboundSchema;
    /** @deprecated use `AccountsAssignLargeTraderRequest$outboundSchema` instead. */
    AccountsAssignLargeTraderRequest$.outboundSchema = AccountsAssignLargeTraderRequest$outboundSchema;
})(AccountsAssignLargeTraderRequest$ || (AccountsAssignLargeTraderRequest$ = {}));
export function accountsAssignLargeTraderRequestToJSON(accountsAssignLargeTraderRequest) {
    return JSON.stringify(AccountsAssignLargeTraderRequest$outboundSchema.parse(accountsAssignLargeTraderRequest));
}
export function accountsAssignLargeTraderRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAssignLargeTraderRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAssignLargeTraderRequest' from JSON`);
}
/** @internal */
export const AccountsAssignLargeTraderResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LargeTrader: components.LargeTrader$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LargeTrader": "largeTrader",
        "Status": "status",
    });
});
/** @internal */
export const AccountsAssignLargeTraderResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    largeTrader: components.LargeTrader$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        largeTrader: "LargeTrader",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsAssignLargeTraderResponse$;
(function (AccountsAssignLargeTraderResponse$) {
    /** @deprecated use `AccountsAssignLargeTraderResponse$inboundSchema` instead. */
    AccountsAssignLargeTraderResponse$.inboundSchema = AccountsAssignLargeTraderResponse$inboundSchema;
    /** @deprecated use `AccountsAssignLargeTraderResponse$outboundSchema` instead. */
    AccountsAssignLargeTraderResponse$.outboundSchema = AccountsAssignLargeTraderResponse$outboundSchema;
})(AccountsAssignLargeTraderResponse$ || (AccountsAssignLargeTraderResponse$ = {}));
export function accountsAssignLargeTraderResponseToJSON(accountsAssignLargeTraderResponse) {
    return JSON.stringify(AccountsAssignLargeTraderResponse$outboundSchema.parse(accountsAssignLargeTraderResponse));
}
export function accountsAssignLargeTraderResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsAssignLargeTraderResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsAssignLargeTraderResponse' from JSON`);
}
//# sourceMappingURL=accountsassignlargetrader.js.map