/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const BookingCancelTradeRequest$inboundSchema = z.object({
    account_id: z.string(),
    trade_id: z.string(),
    CancelTradeRequestCreate: components.CancelTradeRequestCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "trade_id": "tradeId",
        "CancelTradeRequestCreate": "cancelTradeRequestCreate",
    });
});
/** @internal */
export const BookingCancelTradeRequest$outboundSchema = z.object({
    accountId: z.string(),
    tradeId: z.string(),
    cancelTradeRequestCreate: components.CancelTradeRequestCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        tradeId: "trade_id",
        cancelTradeRequestCreate: "CancelTradeRequestCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCancelTradeRequest$;
(function (BookingCancelTradeRequest$) {
    /** @deprecated use `BookingCancelTradeRequest$inboundSchema` instead. */
    BookingCancelTradeRequest$.inboundSchema = BookingCancelTradeRequest$inboundSchema;
    /** @deprecated use `BookingCancelTradeRequest$outboundSchema` instead. */
    BookingCancelTradeRequest$.outboundSchema = BookingCancelTradeRequest$outboundSchema;
})(BookingCancelTradeRequest$ || (BookingCancelTradeRequest$ = {}));
export function bookingCancelTradeRequestToJSON(bookingCancelTradeRequest) {
    return JSON.stringify(BookingCancelTradeRequest$outboundSchema.parse(bookingCancelTradeRequest));
}
export function bookingCancelTradeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCancelTradeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCancelTradeRequest' from JSON`);
}
/** @internal */
export const BookingCancelTradeResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    CancelTradeResponse: components.CancelTradeResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "CancelTradeResponse": "cancelTradeResponse",
        "Status": "status",
    });
});
/** @internal */
export const BookingCancelTradeResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    cancelTradeResponse: components.CancelTradeResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        cancelTradeResponse: "CancelTradeResponse",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BookingCancelTradeResponse$;
(function (BookingCancelTradeResponse$) {
    /** @deprecated use `BookingCancelTradeResponse$inboundSchema` instead. */
    BookingCancelTradeResponse$.inboundSchema = BookingCancelTradeResponse$inboundSchema;
    /** @deprecated use `BookingCancelTradeResponse$outboundSchema` instead. */
    BookingCancelTradeResponse$.outboundSchema = BookingCancelTradeResponse$outboundSchema;
})(BookingCancelTradeResponse$ || (BookingCancelTradeResponse$ = {}));
export function bookingCancelTradeResponseToJSON(bookingCancelTradeResponse) {
    return JSON.stringify(BookingCancelTradeResponse$outboundSchema.parse(bookingCancelTradeResponse));
}
export function bookingCancelTradeResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BookingCancelTradeResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BookingCancelTradeResponse' from JSON`);
}
//# sourceMappingURL=bookingcanceltrade.js.map