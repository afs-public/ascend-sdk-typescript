/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdatePartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    party_id: z.string(),
    update_mask: z.string().optional(),
    PartyRequestUpdate: components.PartyRequestUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "party_id": "partyId",
        "update_mask": "updateMask",
        "PartyRequestUpdate": "partyRequestUpdate",
    });
});
/** @internal */
export const AccountsUpdatePartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    partyId: z.string(),
    updateMask: z.string().optional(),
    partyRequestUpdate: components.PartyRequestUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        partyId: "party_id",
        updateMask: "update_mask",
        partyRequestUpdate: "PartyRequestUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdatePartyRequest$;
(function (AccountsUpdatePartyRequest$) {
    /** @deprecated use `AccountsUpdatePartyRequest$inboundSchema` instead. */
    AccountsUpdatePartyRequest$.inboundSchema = AccountsUpdatePartyRequest$inboundSchema;
    /** @deprecated use `AccountsUpdatePartyRequest$outboundSchema` instead. */
    AccountsUpdatePartyRequest$.outboundSchema = AccountsUpdatePartyRequest$outboundSchema;
})(AccountsUpdatePartyRequest$ || (AccountsUpdatePartyRequest$ = {}));
export function accountsUpdatePartyRequestToJSON(accountsUpdatePartyRequest) {
    return JSON.stringify(AccountsUpdatePartyRequest$outboundSchema.parse(accountsUpdatePartyRequest));
}
export function accountsUpdatePartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdatePartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdatePartyRequest' from JSON`);
}
/** @internal */
export const AccountsUpdatePartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Party: components.Party$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Party": "party",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdatePartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    party: components.Party$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        party: "Party",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdatePartyResponse$;
(function (AccountsUpdatePartyResponse$) {
    /** @deprecated use `AccountsUpdatePartyResponse$inboundSchema` instead. */
    AccountsUpdatePartyResponse$.inboundSchema = AccountsUpdatePartyResponse$inboundSchema;
    /** @deprecated use `AccountsUpdatePartyResponse$outboundSchema` instead. */
    AccountsUpdatePartyResponse$.outboundSchema = AccountsUpdatePartyResponse$outboundSchema;
})(AccountsUpdatePartyResponse$ || (AccountsUpdatePartyResponse$ = {}));
export function accountsUpdatePartyResponseToJSON(accountsUpdatePartyResponse) {
    return JSON.stringify(AccountsUpdatePartyResponse$outboundSchema.parse(accountsUpdatePartyResponse));
}
export function accountsUpdatePartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdatePartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdatePartyResponse' from JSON`);
}
//# sourceMappingURL=accountsupdateparty.js.map