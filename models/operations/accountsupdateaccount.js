/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdateAccountRequest$inboundSchema = z.object({
    account_id: z.string(),
    update_mask: z.string().optional(),
    AccountRequestUpdate: components.AccountRequestUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "update_mask": "updateMask",
        "AccountRequestUpdate": "accountRequestUpdate",
    });
});
/** @internal */
export const AccountsUpdateAccountRequest$outboundSchema = z.object({
    accountId: z.string(),
    updateMask: z.string().optional(),
    accountRequestUpdate: components.AccountRequestUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        updateMask: "update_mask",
        accountRequestUpdate: "AccountRequestUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateAccountRequest$;
(function (AccountsUpdateAccountRequest$) {
    /** @deprecated use `AccountsUpdateAccountRequest$inboundSchema` instead. */
    AccountsUpdateAccountRequest$.inboundSchema = AccountsUpdateAccountRequest$inboundSchema;
    /** @deprecated use `AccountsUpdateAccountRequest$outboundSchema` instead. */
    AccountsUpdateAccountRequest$.outboundSchema = AccountsUpdateAccountRequest$outboundSchema;
})(AccountsUpdateAccountRequest$ || (AccountsUpdateAccountRequest$ = {}));
export function accountsUpdateAccountRequestToJSON(accountsUpdateAccountRequest) {
    return JSON.stringify(AccountsUpdateAccountRequest$outboundSchema.parse(accountsUpdateAccountRequest));
}
export function accountsUpdateAccountRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateAccountRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateAccountRequest' from JSON`);
}
/** @internal */
export const AccountsUpdateAccountResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Account: components.Account$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "Account": "account",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdateAccountResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    account: components.Account$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        account: "Account",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateAccountResponse$;
(function (AccountsUpdateAccountResponse$) {
    /** @deprecated use `AccountsUpdateAccountResponse$inboundSchema` instead. */
    AccountsUpdateAccountResponse$.inboundSchema = AccountsUpdateAccountResponse$inboundSchema;
    /** @deprecated use `AccountsUpdateAccountResponse$outboundSchema` instead. */
    AccountsUpdateAccountResponse$.outboundSchema = AccountsUpdateAccountResponse$outboundSchema;
})(AccountsUpdateAccountResponse$ || (AccountsUpdateAccountResponse$ = {}));
export function accountsUpdateAccountResponseToJSON(accountsUpdateAccountResponse) {
    return JSON.stringify(AccountsUpdateAccountResponse$outboundSchema.parse(accountsUpdateAccountResponse));
}
export function accountsUpdateAccountResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateAccountResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateAccountResponse' from JSON`);
}
//# sourceMappingURL=accountsupdateaccount.js.map