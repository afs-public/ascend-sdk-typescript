/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsCreateInterestedPartyRequest$inboundSchema = z.object({
    account_id: z.string(),
    InterestedPartyCreate: components.InterestedPartyCreate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "InterestedPartyCreate": "interestedPartyCreate",
    });
});
/** @internal */
export const AccountsCreateInterestedPartyRequest$outboundSchema = z.object({
    accountId: z.string(),
    interestedPartyCreate: components.InterestedPartyCreate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        interestedPartyCreate: "InterestedPartyCreate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsCreateInterestedPartyRequest$;
(function (AccountsCreateInterestedPartyRequest$) {
    /** @deprecated use `AccountsCreateInterestedPartyRequest$inboundSchema` instead. */
    AccountsCreateInterestedPartyRequest$.inboundSchema = AccountsCreateInterestedPartyRequest$inboundSchema;
    /** @deprecated use `AccountsCreateInterestedPartyRequest$outboundSchema` instead. */
    AccountsCreateInterestedPartyRequest$.outboundSchema = AccountsCreateInterestedPartyRequest$outboundSchema;
})(AccountsCreateInterestedPartyRequest$ || (AccountsCreateInterestedPartyRequest$ = {}));
export function accountsCreateInterestedPartyRequestToJSON(accountsCreateInterestedPartyRequest) {
    return JSON.stringify(AccountsCreateInterestedPartyRequest$outboundSchema.parse(accountsCreateInterestedPartyRequest));
}
export function accountsCreateInterestedPartyRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsCreateInterestedPartyRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsCreateInterestedPartyRequest' from JSON`);
}
/** @internal */
export const AccountsCreateInterestedPartyResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    InterestedParty: components.InterestedParty$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "InterestedParty": "interestedParty",
        "Status": "status",
    });
});
/** @internal */
export const AccountsCreateInterestedPartyResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    interestedParty: components.InterestedParty$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        interestedParty: "InterestedParty",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsCreateInterestedPartyResponse$;
(function (AccountsCreateInterestedPartyResponse$) {
    /** @deprecated use `AccountsCreateInterestedPartyResponse$inboundSchema` instead. */
    AccountsCreateInterestedPartyResponse$.inboundSchema = AccountsCreateInterestedPartyResponse$inboundSchema;
    /** @deprecated use `AccountsCreateInterestedPartyResponse$outboundSchema` instead. */
    AccountsCreateInterestedPartyResponse$.outboundSchema = AccountsCreateInterestedPartyResponse$outboundSchema;
})(AccountsCreateInterestedPartyResponse$ || (AccountsCreateInterestedPartyResponse$ = {}));
export function accountsCreateInterestedPartyResponseToJSON(accountsCreateInterestedPartyResponse) {
    return JSON.stringify(AccountsCreateInterestedPartyResponse$outboundSchema.parse(accountsCreateInterestedPartyResponse));
}
export function accountsCreateInterestedPartyResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsCreateInterestedPartyResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsCreateInterestedPartyResponse' from JSON`);
}
//# sourceMappingURL=accountscreateinterestedparty.js.map