/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const AccountsUpdateLegalEntityRequest$inboundSchema = z.object({
    legalEntity_id: z.string(),
    update_mask: z.string().optional(),
    LegalEntityUpdate: components.LegalEntityUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "legalEntity_id": "legalEntityId",
        "update_mask": "updateMask",
        "LegalEntityUpdate": "legalEntityUpdate",
    });
});
/** @internal */
export const AccountsUpdateLegalEntityRequest$outboundSchema = z.object({
    legalEntityId: z.string(),
    updateMask: z.string().optional(),
    legalEntityUpdate: components.LegalEntityUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        legalEntityId: "legalEntity_id",
        updateMask: "update_mask",
        legalEntityUpdate: "LegalEntityUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateLegalEntityRequest$;
(function (AccountsUpdateLegalEntityRequest$) {
    /** @deprecated use `AccountsUpdateLegalEntityRequest$inboundSchema` instead. */
    AccountsUpdateLegalEntityRequest$.inboundSchema = AccountsUpdateLegalEntityRequest$inboundSchema;
    /** @deprecated use `AccountsUpdateLegalEntityRequest$outboundSchema` instead. */
    AccountsUpdateLegalEntityRequest$.outboundSchema = AccountsUpdateLegalEntityRequest$outboundSchema;
})(AccountsUpdateLegalEntityRequest$ || (AccountsUpdateLegalEntityRequest$ = {}));
export function accountsUpdateLegalEntityRequestToJSON(accountsUpdateLegalEntityRequest) {
    return JSON.stringify(AccountsUpdateLegalEntityRequest$outboundSchema.parse(accountsUpdateLegalEntityRequest));
}
export function accountsUpdateLegalEntityRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateLegalEntityRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateLegalEntityRequest' from JSON`);
}
/** @internal */
export const AccountsUpdateLegalEntityResponse$inboundSchema = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    LegalEntity: components.LegalEntity$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "HttpMeta": "httpMeta",
        "LegalEntity": "legalEntity",
        "Status": "status",
    });
});
/** @internal */
export const AccountsUpdateLegalEntityResponse$outboundSchema = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    legalEntity: components.LegalEntity$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        httpMeta: "HttpMeta",
        legalEntity: "LegalEntity",
        status: "Status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccountsUpdateLegalEntityResponse$;
(function (AccountsUpdateLegalEntityResponse$) {
    /** @deprecated use `AccountsUpdateLegalEntityResponse$inboundSchema` instead. */
    AccountsUpdateLegalEntityResponse$.inboundSchema = AccountsUpdateLegalEntityResponse$inboundSchema;
    /** @deprecated use `AccountsUpdateLegalEntityResponse$outboundSchema` instead. */
    AccountsUpdateLegalEntityResponse$.outboundSchema = AccountsUpdateLegalEntityResponse$outboundSchema;
})(AccountsUpdateLegalEntityResponse$ || (AccountsUpdateLegalEntityResponse$ = {}));
export function accountsUpdateLegalEntityResponseToJSON(accountsUpdateLegalEntityResponse) {
    return JSON.stringify(AccountsUpdateLegalEntityResponse$outboundSchema.parse(accountsUpdateLegalEntityResponse));
}
export function accountsUpdateLegalEntityResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccountsUpdateLegalEntityResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccountsUpdateLegalEntityResponse' from JSON`);
}
//# sourceMappingURL=accountsupdatelegalentity.js.map